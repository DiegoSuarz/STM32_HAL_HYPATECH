
03_ENCODER_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002320  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080024c0  080024c0  000124c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002518  08002518  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002518  08002518  00012518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002520  08002520  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002520  08002520  00012520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002524  08002524  00012524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002528  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000004c  20000070  08002598  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  08002598  000200bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004243  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000011a4  00000000  00000000  000242e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000480  00000000  00000000  00025488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003d8  00000000  00000000  00025908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015427  00000000  00000000  00025ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005993  00000000  00000000  0003b107  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082a69  00000000  00000000  00040a9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c3503  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000013e0  00000000  00000000  000c3554  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080024a8 	.word	0x080024a8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080024a8 	.word	0x080024a8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <LCD_STM32_Cmd>:
 */

#include "LCD_STM32.h"


void LCD_STM32_Cmd(uint8_t a){
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	71fb      	strb	r3, [r7, #7]
	E_OFF;
 800058e:	2200      	movs	r2, #0
 8000590:	2101      	movs	r1, #1
 8000592:	480c      	ldr	r0, [pc, #48]	; (80005c4 <LCD_STM32_Cmd+0x40>)
 8000594:	f000 fe86 	bl	80012a4 <HAL_GPIO_WritePin>
	E_ON;
 8000598:	2201      	movs	r2, #1
 800059a:	2101      	movs	r1, #1
 800059c:	4809      	ldr	r0, [pc, #36]	; (80005c4 <LCD_STM32_Cmd+0x40>)
 800059e:	f000 fe81 	bl	80012a4 <HAL_GPIO_WritePin>
	LCD_STM32_DataBus(a);
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	4618      	mov	r0, r3
 80005a6:	f000 f80f 	bl	80005c8 <LCD_STM32_DataBus>
	HAL_Delay(2);
 80005aa:	2002      	movs	r0, #2
 80005ac:	f000 fba8 	bl	8000d00 <HAL_Delay>
	E_OFF;
 80005b0:	2200      	movs	r2, #0
 80005b2:	2101      	movs	r1, #1
 80005b4:	4803      	ldr	r0, [pc, #12]	; (80005c4 <LCD_STM32_Cmd+0x40>)
 80005b6:	f000 fe75 	bl	80012a4 <HAL_GPIO_WritePin>
}
 80005ba:	bf00      	nop
 80005bc:	3708      	adds	r7, #8
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	40020400 	.word	0x40020400

080005c8 <LCD_STM32_DataBus>:
void LCD_STM32_DataBus(uint8_t a){
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	71fb      	strb	r3, [r7, #7]
	// 0001
	if (a & 0x01){D4_ON;}
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	f003 0301 	and.w	r3, r3, #1
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d005      	beq.n	80005e8 <LCD_STM32_DataBus+0x20>
 80005dc:	2201      	movs	r2, #1
 80005de:	2110      	movs	r1, #16
 80005e0:	481e      	ldr	r0, [pc, #120]	; (800065c <LCD_STM32_DataBus+0x94>)
 80005e2:	f000 fe5f 	bl	80012a4 <HAL_GPIO_WritePin>
 80005e6:	e004      	b.n	80005f2 <LCD_STM32_DataBus+0x2a>
	else{D4_OFF;}
 80005e8:	2200      	movs	r2, #0
 80005ea:	2110      	movs	r1, #16
 80005ec:	481b      	ldr	r0, [pc, #108]	; (800065c <LCD_STM32_DataBus+0x94>)
 80005ee:	f000 fe59 	bl	80012a4 <HAL_GPIO_WritePin>
	// 0010
	if (a & 0x02){D5_ON;}
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	f003 0302 	and.w	r3, r3, #2
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d005      	beq.n	8000608 <LCD_STM32_DataBus+0x40>
 80005fc:	2201      	movs	r2, #1
 80005fe:	2120      	movs	r1, #32
 8000600:	4816      	ldr	r0, [pc, #88]	; (800065c <LCD_STM32_DataBus+0x94>)
 8000602:	f000 fe4f 	bl	80012a4 <HAL_GPIO_WritePin>
 8000606:	e004      	b.n	8000612 <LCD_STM32_DataBus+0x4a>
	else{D5_OFF;}
 8000608:	2200      	movs	r2, #0
 800060a:	2120      	movs	r1, #32
 800060c:	4813      	ldr	r0, [pc, #76]	; (800065c <LCD_STM32_DataBus+0x94>)
 800060e:	f000 fe49 	bl	80012a4 <HAL_GPIO_WritePin>
	// 0100
	if (a & 0x04){D6_ON;}
 8000612:	79fb      	ldrb	r3, [r7, #7]
 8000614:	f003 0304 	and.w	r3, r3, #4
 8000618:	2b00      	cmp	r3, #0
 800061a:	d005      	beq.n	8000628 <LCD_STM32_DataBus+0x60>
 800061c:	2201      	movs	r2, #1
 800061e:	2140      	movs	r1, #64	; 0x40
 8000620:	480e      	ldr	r0, [pc, #56]	; (800065c <LCD_STM32_DataBus+0x94>)
 8000622:	f000 fe3f 	bl	80012a4 <HAL_GPIO_WritePin>
 8000626:	e004      	b.n	8000632 <LCD_STM32_DataBus+0x6a>
	else{D6_OFF;}
 8000628:	2200      	movs	r2, #0
 800062a:	2140      	movs	r1, #64	; 0x40
 800062c:	480b      	ldr	r0, [pc, #44]	; (800065c <LCD_STM32_DataBus+0x94>)
 800062e:	f000 fe39 	bl	80012a4 <HAL_GPIO_WritePin>
	// 1000
	if (a & 0x08){D7_ON;}
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	f003 0308 	and.w	r3, r3, #8
 8000638:	2b00      	cmp	r3, #0
 800063a:	d005      	beq.n	8000648 <LCD_STM32_DataBus+0x80>
 800063c:	2201      	movs	r2, #1
 800063e:	2180      	movs	r1, #128	; 0x80
 8000640:	4806      	ldr	r0, [pc, #24]	; (800065c <LCD_STM32_DataBus+0x94>)
 8000642:	f000 fe2f 	bl	80012a4 <HAL_GPIO_WritePin>
	else{D7_OFF;}
}
 8000646:	e004      	b.n	8000652 <LCD_STM32_DataBus+0x8a>
	else{D7_OFF;}
 8000648:	2200      	movs	r2, #0
 800064a:	2180      	movs	r1, #128	; 0x80
 800064c:	4803      	ldr	r0, [pc, #12]	; (800065c <LCD_STM32_DataBus+0x94>)
 800064e:	f000 fe29 	bl	80012a4 <HAL_GPIO_WritePin>
}
 8000652:	bf00      	nop
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40020000 	.word	0x40020000

08000660 <LCD_STM32_Init>:
void LCD_STM32_Init(void){
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
	LCD_STM32_Cmd(0X03);
 8000664:	2003      	movs	r0, #3
 8000666:	f7ff ff8d 	bl	8000584 <LCD_STM32_Cmd>
	LCD_STM32_Cmd(0X03);
 800066a:	2003      	movs	r0, #3
 800066c:	f7ff ff8a 	bl	8000584 <LCD_STM32_Cmd>
	LCD_STM32_Cmd(0X03);
 8000670:	2003      	movs	r0, #3
 8000672:	f7ff ff87 	bl	8000584 <LCD_STM32_Cmd>
	LCD_STM32_Cmd(0X02);
 8000676:	2002      	movs	r0, #2
 8000678:	f7ff ff84 	bl	8000584 <LCD_STM32_Cmd>
	LCD_STM32_Cmd(0X02);
 800067c:	2002      	movs	r0, #2
 800067e:	f7ff ff81 	bl	8000584 <LCD_STM32_Cmd>
	LCD_STM32_Cmd(0X08);
 8000682:	2008      	movs	r0, #8
 8000684:	f7ff ff7e 	bl	8000584 <LCD_STM32_Cmd>
	LCD_STM32_Cmd(0X00);
 8000688:	2000      	movs	r0, #0
 800068a:	f7ff ff7b 	bl	8000584 <LCD_STM32_Cmd>
	LCD_STM32_Cmd(0X08);
 800068e:	2008      	movs	r0, #8
 8000690:	f7ff ff78 	bl	8000584 <LCD_STM32_Cmd>
	LCD_STM32_Cmd(0X00);
 8000694:	2000      	movs	r0, #0
 8000696:	f7ff ff75 	bl	8000584 <LCD_STM32_Cmd>
	LCD_STM32_Cmd(0X01);
 800069a:	2001      	movs	r0, #1
 800069c:	f7ff ff72 	bl	8000584 <LCD_STM32_Cmd>
	LCD_STM32_Cmd(0X00);
 80006a0:	2000      	movs	r0, #0
 80006a2:	f7ff ff6f 	bl	8000584 <LCD_STM32_Cmd>
	LCD_STM32_Cmd(0X0D);
 80006a6:	200d      	movs	r0, #13
 80006a8:	f7ff ff6c 	bl	8000584 <LCD_STM32_Cmd>
}
 80006ac:	bf00      	nop
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <LCD_STM32_Set_Cursor>:
void LCD_STM32_Set_Cursor(uint8_t x,Ubicacion y){
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	460a      	mov	r2, r1
 80006ba:	71fb      	strb	r3, [r7, #7]
 80006bc:	4613      	mov	r3, r2
 80006be:	71bb      	strb	r3, [r7, #6]
	uint8_t m,n;

	RS_OFF;
 80006c0:	2200      	movs	r2, #0
 80006c2:	2102      	movs	r1, #2
 80006c4:	482a      	ldr	r0, [pc, #168]	; (8000770 <LCD_STM32_Set_Cursor+0xc0>)
 80006c6:	f000 fded 	bl	80012a4 <HAL_GPIO_WritePin>
	switch (y)
 80006ca:	79bb      	ldrb	r3, [r7, #6]
 80006cc:	2b03      	cmp	r3, #3
 80006ce:	d84b      	bhi.n	8000768 <LCD_STM32_Set_Cursor+0xb8>
 80006d0:	a201      	add	r2, pc, #4	; (adr r2, 80006d8 <LCD_STM32_Set_Cursor+0x28>)
 80006d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006d6:	bf00      	nop
 80006d8:	080006e9 	.word	0x080006e9
 80006dc:	08000709 	.word	0x08000709
 80006e0:	08000729 	.word	0x08000729
 80006e4:	08000749 	.word	0x08000749
	{
		case Fila1:
				m=0x80+x;
 80006e8:	79fb      	ldrb	r3, [r7, #7]
 80006ea:	3b80      	subs	r3, #128	; 0x80
 80006ec:	73fb      	strb	r3, [r7, #15]
				n=(0x80+x)>>4;
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	3380      	adds	r3, #128	; 0x80
 80006f2:	111b      	asrs	r3, r3, #4
 80006f4:	73bb      	strb	r3, [r7, #14]
				LCD_STM32_Cmd(n);
 80006f6:	7bbb      	ldrb	r3, [r7, #14]
 80006f8:	4618      	mov	r0, r3
 80006fa:	f7ff ff43 	bl	8000584 <LCD_STM32_Cmd>
				LCD_STM32_Cmd(m);
 80006fe:	7bfb      	ldrb	r3, [r7, #15]
 8000700:	4618      	mov	r0, r3
 8000702:	f7ff ff3f 	bl	8000584 <LCD_STM32_Cmd>
		break;
 8000706:	e02f      	b.n	8000768 <LCD_STM32_Set_Cursor+0xb8>
		case Fila2:
				m=0xC0+x;
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	3b40      	subs	r3, #64	; 0x40
 800070c:	73fb      	strb	r3, [r7, #15]
				n=(0XC0+x)>>4;
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	33c0      	adds	r3, #192	; 0xc0
 8000712:	111b      	asrs	r3, r3, #4
 8000714:	73bb      	strb	r3, [r7, #14]
				LCD_STM32_Cmd(n);
 8000716:	7bbb      	ldrb	r3, [r7, #14]
 8000718:	4618      	mov	r0, r3
 800071a:	f7ff ff33 	bl	8000584 <LCD_STM32_Cmd>
				LCD_STM32_Cmd(m);
 800071e:	7bfb      	ldrb	r3, [r7, #15]
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff ff2f 	bl	8000584 <LCD_STM32_Cmd>
		break;
 8000726:	e01f      	b.n	8000768 <LCD_STM32_Set_Cursor+0xb8>
		case Fila3:
				m=0x94+x;
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	3b6c      	subs	r3, #108	; 0x6c
 800072c:	73fb      	strb	r3, [r7, #15]
				n=(0x94+x)>>4;
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	3394      	adds	r3, #148	; 0x94
 8000732:	111b      	asrs	r3, r3, #4
 8000734:	73bb      	strb	r3, [r7, #14]
				LCD_STM32_Cmd(n);
 8000736:	7bbb      	ldrb	r3, [r7, #14]
 8000738:	4618      	mov	r0, r3
 800073a:	f7ff ff23 	bl	8000584 <LCD_STM32_Cmd>
				LCD_STM32_Cmd(m);
 800073e:	7bfb      	ldrb	r3, [r7, #15]
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff ff1f 	bl	8000584 <LCD_STM32_Cmd>
		break;
 8000746:	e00f      	b.n	8000768 <LCD_STM32_Set_Cursor+0xb8>
		case Fila4:
				m=0xD4+x;
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	3b2c      	subs	r3, #44	; 0x2c
 800074c:	73fb      	strb	r3, [r7, #15]
				n=(0xD4+x)>>4;
 800074e:	79fb      	ldrb	r3, [r7, #7]
 8000750:	33d4      	adds	r3, #212	; 0xd4
 8000752:	111b      	asrs	r3, r3, #4
 8000754:	73bb      	strb	r3, [r7, #14]
				LCD_STM32_Cmd(n);
 8000756:	7bbb      	ldrb	r3, [r7, #14]
 8000758:	4618      	mov	r0, r3
 800075a:	f7ff ff13 	bl	8000584 <LCD_STM32_Cmd>
				LCD_STM32_Cmd(m);
 800075e:	7bfb      	ldrb	r3, [r7, #15]
 8000760:	4618      	mov	r0, r3
 8000762:	f7ff ff0f 	bl	8000584 <LCD_STM32_Cmd>
		break;
 8000766:	bf00      	nop
	}

}
 8000768:	bf00      	nop
 800076a:	3710      	adds	r7, #16
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	40020400 	.word	0x40020400

08000774 <LCD_STM32_Print_Char>:
void LCD_STM32_Print_Char(char c){
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	71fb      	strb	r3, [r7, #7]
	uint8_t m,n;
	m=c>>4;
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	091b      	lsrs	r3, r3, #4
 8000782:	73fb      	strb	r3, [r7, #15]
	n=c;
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	73bb      	strb	r3, [r7, #14]
	RS_ON;
 8000788:	2201      	movs	r2, #1
 800078a:	2102      	movs	r1, #2
 800078c:	4807      	ldr	r0, [pc, #28]	; (80007ac <LCD_STM32_Print_Char+0x38>)
 800078e:	f000 fd89 	bl	80012a4 <HAL_GPIO_WritePin>
	LCD_STM32_Cmd(m);
 8000792:	7bfb      	ldrb	r3, [r7, #15]
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff fef5 	bl	8000584 <LCD_STM32_Cmd>
	LCD_STM32_Cmd(n);
 800079a:	7bbb      	ldrb	r3, [r7, #14]
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff fef1 	bl	8000584 <LCD_STM32_Cmd>
}
 80007a2:	bf00      	nop
 80007a4:	3710      	adds	r7, #16
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40020400 	.word	0x40020400

080007b0 <LCD_STM32_Print_String>:
void LCD_STM32_Print_String(char *c){
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
	char *ptr;
	ptr = c;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	60fb      	str	r3, [r7, #12]
	while(*ptr)
 80007bc:	e006      	b.n	80007cc <LCD_STM32_Print_String+0x1c>
		LCD_STM32_Print_Char(*ptr++);
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	1c5a      	adds	r2, r3, #1
 80007c2:	60fa      	str	r2, [r7, #12]
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff ffd4 	bl	8000774 <LCD_STM32_Print_Char>
	while(*ptr)
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d1f4      	bne.n	80007be <LCD_STM32_Print_String+0xe>
}
 80007d4:	bf00      	nop
 80007d6:	bf00      	nop
 80007d8:	3710      	adds	r7, #16
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
	...

080007e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e4:	f000 fa1a 	bl	8000c1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e8:	f000 f828 	bl	800083c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ec:	f000 f886 	bl	80008fc <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  LCD_STM32_Init();
 80007f0:	f7ff ff36 	bl	8000660 <LCD_STM32_Init>
  LCD_STM32_Set_Cursor(0, Fila1);
 80007f4:	2100      	movs	r1, #0
 80007f6:	2000      	movs	r0, #0
 80007f8:	f7ff ff5a 	bl	80006b0 <LCD_STM32_Set_Cursor>
  LCD_STM32_Print_String("Encoder:");
 80007fc:	480b      	ldr	r0, [pc, #44]	; (800082c <main+0x4c>)
 80007fe:	f7ff ffd7 	bl	80007b0 <LCD_STM32_Print_String>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  sprintf(bufferLCD,"%04u",contador_posicion);
 8000802:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <main+0x50>)
 8000804:	881b      	ldrh	r3, [r3, #0]
 8000806:	b29b      	uxth	r3, r3
 8000808:	461a      	mov	r2, r3
 800080a:	490a      	ldr	r1, [pc, #40]	; (8000834 <main+0x54>)
 800080c:	480a      	ldr	r0, [pc, #40]	; (8000838 <main+0x58>)
 800080e:	f001 f9dd 	bl	8001bcc <siprintf>
	  LCD_STM32_Set_Cursor(0,Fila2);
 8000812:	2101      	movs	r1, #1
 8000814:	2000      	movs	r0, #0
 8000816:	f7ff ff4b 	bl	80006b0 <LCD_STM32_Set_Cursor>
	  LCD_STM32_Print_String(bufferLCD);
 800081a:	4807      	ldr	r0, [pc, #28]	; (8000838 <main+0x58>)
 800081c:	f7ff ffc8 	bl	80007b0 <LCD_STM32_Print_String>
	  HAL_Delay(500);
 8000820:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000824:	f000 fa6c 	bl	8000d00 <HAL_Delay>
	  sprintf(bufferLCD,"%04u",contador_posicion);
 8000828:	e7eb      	b.n	8000802 <main+0x22>
 800082a:	bf00      	nop
 800082c:	080024c0 	.word	0x080024c0
 8000830:	200000a0 	.word	0x200000a0
 8000834:	080024cc 	.word	0x080024cc
 8000838:	2000008c 	.word	0x2000008c

0800083c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b094      	sub	sp, #80	; 0x50
 8000840:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000842:	f107 0320 	add.w	r3, r7, #32
 8000846:	2230      	movs	r2, #48	; 0x30
 8000848:	2100      	movs	r1, #0
 800084a:	4618      	mov	r0, r3
 800084c:	f001 f9b6 	bl	8001bbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000850:	f107 030c 	add.w	r3, r7, #12
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000860:	2300      	movs	r3, #0
 8000862:	60bb      	str	r3, [r7, #8]
 8000864:	4b23      	ldr	r3, [pc, #140]	; (80008f4 <SystemClock_Config+0xb8>)
 8000866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000868:	4a22      	ldr	r2, [pc, #136]	; (80008f4 <SystemClock_Config+0xb8>)
 800086a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800086e:	6413      	str	r3, [r2, #64]	; 0x40
 8000870:	4b20      	ldr	r3, [pc, #128]	; (80008f4 <SystemClock_Config+0xb8>)
 8000872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000874:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000878:	60bb      	str	r3, [r7, #8]
 800087a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800087c:	2300      	movs	r3, #0
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	4b1d      	ldr	r3, [pc, #116]	; (80008f8 <SystemClock_Config+0xbc>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000888:	4a1b      	ldr	r2, [pc, #108]	; (80008f8 <SystemClock_Config+0xbc>)
 800088a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800088e:	6013      	str	r3, [r2, #0]
 8000890:	4b19      	ldr	r3, [pc, #100]	; (80008f8 <SystemClock_Config+0xbc>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000898:	607b      	str	r3, [r7, #4]
 800089a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800089c:	2302      	movs	r3, #2
 800089e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008a0:	2301      	movs	r3, #1
 80008a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008a4:	2310      	movs	r3, #16
 80008a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008a8:	2300      	movs	r3, #0
 80008aa:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ac:	f107 0320 	add.w	r3, r7, #32
 80008b0:	4618      	mov	r0, r3
 80008b2:	f000 fd35 	bl	8001320 <HAL_RCC_OscConfig>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80008bc:	f000 f896 	bl	80009ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c0:	230f      	movs	r3, #15
 80008c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008c4:	2300      	movs	r3, #0
 80008c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c8:	2300      	movs	r3, #0
 80008ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008d4:	f107 030c 	add.w	r3, r7, #12
 80008d8:	2100      	movs	r1, #0
 80008da:	4618      	mov	r0, r3
 80008dc:	f000 ff98 	bl	8001810 <HAL_RCC_ClockConfig>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <SystemClock_Config+0xae>
  {
    Error_Handler();
 80008e6:	f000 f881 	bl	80009ec <Error_Handler>
  }
}
 80008ea:	bf00      	nop
 80008ec:	3750      	adds	r7, #80	; 0x50
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40023800 	.word	0x40023800
 80008f8:	40007000 	.word	0x40007000

080008fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b088      	sub	sp, #32
 8000900:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000902:	f107 030c 	add.w	r3, r7, #12
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]
 800090c:	609a      	str	r2, [r3, #8]
 800090e:	60da      	str	r2, [r3, #12]
 8000910:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	60bb      	str	r3, [r7, #8]
 8000916:	4b32      	ldr	r3, [pc, #200]	; (80009e0 <MX_GPIO_Init+0xe4>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a31      	ldr	r2, [pc, #196]	; (80009e0 <MX_GPIO_Init+0xe4>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b2f      	ldr	r3, [pc, #188]	; (80009e0 <MX_GPIO_Init+0xe4>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	60bb      	str	r3, [r7, #8]
 800092c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	4b2b      	ldr	r3, [pc, #172]	; (80009e0 <MX_GPIO_Init+0xe4>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a2a      	ldr	r2, [pc, #168]	; (80009e0 <MX_GPIO_Init+0xe4>)
 8000938:	f043 0302 	orr.w	r3, r3, #2
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b28      	ldr	r3, [pc, #160]	; (80009e0 <MX_GPIO_Init+0xe4>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f003 0302 	and.w	r3, r3, #2
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D4_Pin|D5_Pin|D6_Pin|D7_Pin, GPIO_PIN_RESET);
 800094a:	2200      	movs	r2, #0
 800094c:	21f0      	movs	r1, #240	; 0xf0
 800094e:	4825      	ldr	r0, [pc, #148]	; (80009e4 <MX_GPIO_Init+0xe8>)
 8000950:	f000 fca8 	bl	80012a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN_Pin|RS_Pin, GPIO_PIN_RESET);
 8000954:	2200      	movs	r2, #0
 8000956:	2103      	movs	r1, #3
 8000958:	4823      	ldr	r0, [pc, #140]	; (80009e8 <MX_GPIO_Init+0xec>)
 800095a:	f000 fca3 	bl	80012a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin;
 800095e:	23f0      	movs	r3, #240	; 0xf0
 8000960:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000962:	2301      	movs	r3, #1
 8000964:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096a:	2300      	movs	r3, #0
 800096c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096e:	f107 030c 	add.w	r3, r7, #12
 8000972:	4619      	mov	r1, r3
 8000974:	481b      	ldr	r0, [pc, #108]	; (80009e4 <MX_GPIO_Init+0xe8>)
 8000976:	f000 faf9 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_Pin RS_Pin */
  GPIO_InitStruct.Pin = EN_Pin|RS_Pin;
 800097a:	2303      	movs	r3, #3
 800097c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097e:	2301      	movs	r3, #1
 8000980:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000986:	2300      	movs	r3, #0
 8000988:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098a:	f107 030c 	add.w	r3, r7, #12
 800098e:	4619      	mov	r1, r3
 8000990:	4815      	ldr	r0, [pc, #84]	; (80009e8 <MX_GPIO_Init+0xec>)
 8000992:	f000 faeb 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : Encoder_CKL_Pin */
  GPIO_InitStruct.Pin = Encoder_CKL_Pin;
 8000996:	2308      	movs	r3, #8
 8000998:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800099a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800099e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Encoder_CKL_GPIO_Port, &GPIO_InitStruct);
 80009a4:	f107 030c 	add.w	r3, r7, #12
 80009a8:	4619      	mov	r1, r3
 80009aa:	480f      	ldr	r0, [pc, #60]	; (80009e8 <MX_GPIO_Init+0xec>)
 80009ac:	f000 fade 	bl	8000f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : Encoder_DATA_Pin */
  GPIO_InitStruct.Pin = Encoder_DATA_Pin;
 80009b0:	2310      	movs	r3, #16
 80009b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b4:	2300      	movs	r3, #0
 80009b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Encoder_DATA_GPIO_Port, &GPIO_InitStruct);
 80009bc:	f107 030c 	add.w	r3, r7, #12
 80009c0:	4619      	mov	r1, r3
 80009c2:	4809      	ldr	r0, [pc, #36]	; (80009e8 <MX_GPIO_Init+0xec>)
 80009c4:	f000 fad2 	bl	8000f6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80009c8:	2200      	movs	r2, #0
 80009ca:	2100      	movs	r1, #0
 80009cc:	2009      	movs	r0, #9
 80009ce:	f000 fa96 	bl	8000efe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80009d2:	2009      	movs	r0, #9
 80009d4:	f000 faaf 	bl	8000f36 <HAL_NVIC_EnableIRQ>

}
 80009d8:	bf00      	nop
 80009da:	3720      	adds	r7, #32
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	40023800 	.word	0x40023800
 80009e4:	40020000 	.word	0x40020000
 80009e8:	40020400 	.word	0x40020400

080009ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f0:	b672      	cpsid	i
}
 80009f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <Error_Handler+0x8>
	...

080009f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	607b      	str	r3, [r7, #4]
 8000a02:	4b10      	ldr	r3, [pc, #64]	; (8000a44 <HAL_MspInit+0x4c>)
 8000a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a06:	4a0f      	ldr	r2, [pc, #60]	; (8000a44 <HAL_MspInit+0x4c>)
 8000a08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a0e:	4b0d      	ldr	r3, [pc, #52]	; (8000a44 <HAL_MspInit+0x4c>)
 8000a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	603b      	str	r3, [r7, #0]
 8000a1e:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <HAL_MspInit+0x4c>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a22:	4a08      	ldr	r2, [pc, #32]	; (8000a44 <HAL_MspInit+0x4c>)
 8000a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a28:	6413      	str	r3, [r2, #64]	; 0x40
 8000a2a:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <HAL_MspInit+0x4c>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a32:	603b      	str	r3, [r7, #0]
 8000a34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a36:	bf00      	nop
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	40023800 	.word	0x40023800

08000a48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <NMI_Handler+0x4>

08000a4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a52:	e7fe      	b.n	8000a52 <HardFault_Handler+0x4>

08000a54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <MemManage_Handler+0x4>

08000a5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a5e:	e7fe      	b.n	8000a5e <BusFault_Handler+0x4>

08000a60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <UsageFault_Handler+0x4>

08000a66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr

08000a74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr

08000a82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr

08000a90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a94:	f000 f914 	bl	8000cc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
  if(__HAL_GPIO_EXTI_GET_IT(Encoder_CKL_Pin)!= RESET)
 8000aa0:	4b20      	ldr	r3, [pc, #128]	; (8000b24 <EXTI3_IRQHandler+0x88>)
 8000aa2:	695b      	ldr	r3, [r3, #20]
 8000aa4:	f003 0308 	and.w	r3, r3, #8
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d035      	beq.n	8000b18 <EXTI3_IRQHandler+0x7c>
  {
	  valor_actual = HAL_GPIO_ReadPin(GPIOB,Encoder_CKL_Pin);
 8000aac:	2108      	movs	r1, #8
 8000aae:	481e      	ldr	r0, [pc, #120]	; (8000b28 <EXTI3_IRQHandler+0x8c>)
 8000ab0:	f000 fbe0 	bl	8001274 <HAL_GPIO_ReadPin>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	b29a      	uxth	r2, r3
 8000ab8:	4b1c      	ldr	r3, [pc, #112]	; (8000b2c <EXTI3_IRQHandler+0x90>)
 8000aba:	801a      	strh	r2, [r3, #0]
	  if(valor_actual != valor_inicial)
 8000abc:	4b1b      	ldr	r3, [pc, #108]	; (8000b2c <EXTI3_IRQHandler+0x90>)
 8000abe:	881b      	ldrh	r3, [r3, #0]
 8000ac0:	b29a      	uxth	r2, r3
 8000ac2:	4b1b      	ldr	r3, [pc, #108]	; (8000b30 <EXTI3_IRQHandler+0x94>)
 8000ac4:	881b      	ldrh	r3, [r3, #0]
 8000ac6:	b29b      	uxth	r3, r3
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	d025      	beq.n	8000b18 <EXTI3_IRQHandler+0x7c>
	  {
		  if(HAL_GPIO_ReadPin(GPIOB, Encoder_DATA_Pin))
 8000acc:	2110      	movs	r1, #16
 8000ace:	4816      	ldr	r0, [pc, #88]	; (8000b28 <EXTI3_IRQHandler+0x8c>)
 8000ad0:	f000 fbd0 	bl	8001274 <HAL_GPIO_ReadPin>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d00d      	beq.n	8000af6 <EXTI3_IRQHandler+0x5a>
		  {
			  if(contador_posicion < Encoder_LIMITEMAX)
 8000ada:	4b16      	ldr	r3, [pc, #88]	; (8000b34 <EXTI3_IRQHandler+0x98>)
 8000adc:	881b      	ldrh	r3, [r3, #0]
 8000ade:	b29b      	uxth	r3, r3
 8000ae0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ae4:	d213      	bcs.n	8000b0e <EXTI3_IRQHandler+0x72>
			  {
				  contador_posicion += Encoder_INCREMENTO;
 8000ae6:	4b13      	ldr	r3, [pc, #76]	; (8000b34 <EXTI3_IRQHandler+0x98>)
 8000ae8:	881b      	ldrh	r3, [r3, #0]
 8000aea:	b29b      	uxth	r3, r3
 8000aec:	330a      	adds	r3, #10
 8000aee:	b29a      	uxth	r2, r3
 8000af0:	4b10      	ldr	r3, [pc, #64]	; (8000b34 <EXTI3_IRQHandler+0x98>)
 8000af2:	801a      	strh	r2, [r3, #0]
 8000af4:	e00b      	b.n	8000b0e <EXTI3_IRQHandler+0x72>
			  }

		  }
		  else
		  {
			  if(contador_posicion > Encoder_LIMTEMIN)
 8000af6:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <EXTI3_IRQHandler+0x98>)
 8000af8:	881b      	ldrh	r3, [r3, #0]
 8000afa:	b29b      	uxth	r3, r3
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d006      	beq.n	8000b0e <EXTI3_IRQHandler+0x72>
			  			  {
			  				  contador_posicion -= Encoder_INCREMENTO;
 8000b00:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <EXTI3_IRQHandler+0x98>)
 8000b02:	881b      	ldrh	r3, [r3, #0]
 8000b04:	b29b      	uxth	r3, r3
 8000b06:	3b0a      	subs	r3, #10
 8000b08:	b29a      	uxth	r2, r3
 8000b0a:	4b0a      	ldr	r3, [pc, #40]	; (8000b34 <EXTI3_IRQHandler+0x98>)
 8000b0c:	801a      	strh	r2, [r3, #0]
			  			  }
		  }
		  valor_inicial = valor_actual;
 8000b0e:	4b07      	ldr	r3, [pc, #28]	; (8000b2c <EXTI3_IRQHandler+0x90>)
 8000b10:	881b      	ldrh	r3, [r3, #0]
 8000b12:	b29a      	uxth	r2, r3
 8000b14:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <EXTI3_IRQHandler+0x94>)
 8000b16:	801a      	strh	r2, [r3, #0]
	  }

  }
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encoder_CKL_Pin);
 8000b18:	2008      	movs	r0, #8
 8000b1a:	f000 fbdd 	bl	80012d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40013c00 	.word	0x40013c00
 8000b28:	40020400 	.word	0x40020400
 8000b2c:	2000009c 	.word	0x2000009c
 8000b30:	2000009e 	.word	0x2000009e
 8000b34:	200000a0 	.word	0x200000a0

08000b38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b086      	sub	sp, #24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b40:	4a14      	ldr	r2, [pc, #80]	; (8000b94 <_sbrk+0x5c>)
 8000b42:	4b15      	ldr	r3, [pc, #84]	; (8000b98 <_sbrk+0x60>)
 8000b44:	1ad3      	subs	r3, r2, r3
 8000b46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b4c:	4b13      	ldr	r3, [pc, #76]	; (8000b9c <_sbrk+0x64>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d102      	bne.n	8000b5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b54:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <_sbrk+0x64>)
 8000b56:	4a12      	ldr	r2, [pc, #72]	; (8000ba0 <_sbrk+0x68>)
 8000b58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b5a:	4b10      	ldr	r3, [pc, #64]	; (8000b9c <_sbrk+0x64>)
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4413      	add	r3, r2
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	d207      	bcs.n	8000b78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b68:	f000 fffe 	bl	8001b68 <__errno>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	220c      	movs	r2, #12
 8000b70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b72:	f04f 33ff 	mov.w	r3, #4294967295
 8000b76:	e009      	b.n	8000b8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b78:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <_sbrk+0x64>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b7e:	4b07      	ldr	r3, [pc, #28]	; (8000b9c <_sbrk+0x64>)
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4413      	add	r3, r2
 8000b86:	4a05      	ldr	r2, [pc, #20]	; (8000b9c <_sbrk+0x64>)
 8000b88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b8a:	68fb      	ldr	r3, [r7, #12]
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3718      	adds	r7, #24
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20018000 	.word	0x20018000
 8000b98:	00000400 	.word	0x00000400
 8000b9c:	200000a4 	.word	0x200000a4
 8000ba0:	200000c0 	.word	0x200000c0

08000ba4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <SystemInit+0x20>)
 8000baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bae:	4a05      	ldr	r2, [pc, #20]	; (8000bc4 <SystemInit+0x20>)
 8000bb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bcc:	480d      	ldr	r0, [pc, #52]	; (8000c04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bce:	490e      	ldr	r1, [pc, #56]	; (8000c08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bd0:	4a0e      	ldr	r2, [pc, #56]	; (8000c0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd4:	e002      	b.n	8000bdc <LoopCopyDataInit>

08000bd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bda:	3304      	adds	r3, #4

08000bdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be0:	d3f9      	bcc.n	8000bd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000be2:	4a0b      	ldr	r2, [pc, #44]	; (8000c10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000be4:	4c0b      	ldr	r4, [pc, #44]	; (8000c14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000be6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be8:	e001      	b.n	8000bee <LoopFillZerobss>

08000bea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bec:	3204      	adds	r2, #4

08000bee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf0:	d3fb      	bcc.n	8000bea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bf2:	f7ff ffd7 	bl	8000ba4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bf6:	f000 ffbd 	bl	8001b74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bfa:	f7ff fdf1 	bl	80007e0 <main>
  bx  lr    
 8000bfe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c00:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c08:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c0c:	08002528 	.word	0x08002528
  ldr r2, =_sbss
 8000c10:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c14:	200000bc 	.word	0x200000bc

08000c18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c18:	e7fe      	b.n	8000c18 <ADC_IRQHandler>
	...

08000c1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c20:	4b0e      	ldr	r3, [pc, #56]	; (8000c5c <HAL_Init+0x40>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a0d      	ldr	r2, [pc, #52]	; (8000c5c <HAL_Init+0x40>)
 8000c26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c2c:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <HAL_Init+0x40>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a0a      	ldr	r2, [pc, #40]	; (8000c5c <HAL_Init+0x40>)
 8000c32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c38:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <HAL_Init+0x40>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a07      	ldr	r2, [pc, #28]	; (8000c5c <HAL_Init+0x40>)
 8000c3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c44:	2003      	movs	r0, #3
 8000c46:	f000 f94f 	bl	8000ee8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c4a:	200f      	movs	r0, #15
 8000c4c:	f000 f808 	bl	8000c60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c50:	f7ff fed2 	bl	80009f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c54:	2300      	movs	r3, #0
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40023c00 	.word	0x40023c00

08000c60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c68:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <HAL_InitTick+0x54>)
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	4b12      	ldr	r3, [pc, #72]	; (8000cb8 <HAL_InitTick+0x58>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	4619      	mov	r1, r3
 8000c72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f000 f967 	bl	8000f52 <HAL_SYSTICK_Config>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e00e      	b.n	8000cac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2b0f      	cmp	r3, #15
 8000c92:	d80a      	bhi.n	8000caa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c94:	2200      	movs	r2, #0
 8000c96:	6879      	ldr	r1, [r7, #4]
 8000c98:	f04f 30ff 	mov.w	r0, #4294967295
 8000c9c:	f000 f92f 	bl	8000efe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ca0:	4a06      	ldr	r2, [pc, #24]	; (8000cbc <HAL_InitTick+0x5c>)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e000      	b.n	8000cac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000caa:	2301      	movs	r3, #1
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3708      	adds	r7, #8
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	20000000 	.word	0x20000000
 8000cb8:	20000008 	.word	0x20000008
 8000cbc:	20000004 	.word	0x20000004

08000cc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cc4:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <HAL_IncTick+0x20>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	461a      	mov	r2, r3
 8000cca:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <HAL_IncTick+0x24>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4413      	add	r3, r2
 8000cd0:	4a04      	ldr	r2, [pc, #16]	; (8000ce4 <HAL_IncTick+0x24>)
 8000cd2:	6013      	str	r3, [r2, #0]
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	20000008 	.word	0x20000008
 8000ce4:	200000a8 	.word	0x200000a8

08000ce8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  return uwTick;
 8000cec:	4b03      	ldr	r3, [pc, #12]	; (8000cfc <HAL_GetTick+0x14>)
 8000cee:	681b      	ldr	r3, [r3, #0]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	200000a8 	.word	0x200000a8

08000d00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d08:	f7ff ffee 	bl	8000ce8 <HAL_GetTick>
 8000d0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d18:	d005      	beq.n	8000d26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d1a:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <HAL_Delay+0x44>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	461a      	mov	r2, r3
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	4413      	add	r3, r2
 8000d24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d26:	bf00      	nop
 8000d28:	f7ff ffde 	bl	8000ce8 <HAL_GetTick>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	68fa      	ldr	r2, [r7, #12]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	d8f7      	bhi.n	8000d28 <HAL_Delay+0x28>
  {
  }
}
 8000d38:	bf00      	nop
 8000d3a:	bf00      	nop
 8000d3c:	3710      	adds	r7, #16
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20000008 	.word	0x20000008

08000d48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	f003 0307 	and.w	r3, r3, #7
 8000d56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d58:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <__NVIC_SetPriorityGrouping+0x44>)
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d5e:	68ba      	ldr	r2, [r7, #8]
 8000d60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d64:	4013      	ands	r3, r2
 8000d66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d7a:	4a04      	ldr	r2, [pc, #16]	; (8000d8c <__NVIC_SetPriorityGrouping+0x44>)
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	60d3      	str	r3, [r2, #12]
}
 8000d80:	bf00      	nop
 8000d82:	3714      	adds	r7, #20
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d94:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <__NVIC_GetPriorityGrouping+0x18>)
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	0a1b      	lsrs	r3, r3, #8
 8000d9a:	f003 0307 	and.w	r3, r3, #7
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	db0b      	blt.n	8000dd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	f003 021f 	and.w	r2, r3, #31
 8000dc4:	4907      	ldr	r1, [pc, #28]	; (8000de4 <__NVIC_EnableIRQ+0x38>)
 8000dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dca:	095b      	lsrs	r3, r3, #5
 8000dcc:	2001      	movs	r0, #1
 8000dce:	fa00 f202 	lsl.w	r2, r0, r2
 8000dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	e000e100 	.word	0xe000e100

08000de8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	6039      	str	r1, [r7, #0]
 8000df2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	db0a      	blt.n	8000e12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	b2da      	uxtb	r2, r3
 8000e00:	490c      	ldr	r1, [pc, #48]	; (8000e34 <__NVIC_SetPriority+0x4c>)
 8000e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e06:	0112      	lsls	r2, r2, #4
 8000e08:	b2d2      	uxtb	r2, r2
 8000e0a:	440b      	add	r3, r1
 8000e0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e10:	e00a      	b.n	8000e28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	b2da      	uxtb	r2, r3
 8000e16:	4908      	ldr	r1, [pc, #32]	; (8000e38 <__NVIC_SetPriority+0x50>)
 8000e18:	79fb      	ldrb	r3, [r7, #7]
 8000e1a:	f003 030f 	and.w	r3, r3, #15
 8000e1e:	3b04      	subs	r3, #4
 8000e20:	0112      	lsls	r2, r2, #4
 8000e22:	b2d2      	uxtb	r2, r2
 8000e24:	440b      	add	r3, r1
 8000e26:	761a      	strb	r2, [r3, #24]
}
 8000e28:	bf00      	nop
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	e000e100 	.word	0xe000e100
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b089      	sub	sp, #36	; 0x24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	f003 0307 	and.w	r3, r3, #7
 8000e4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	f1c3 0307 	rsb	r3, r3, #7
 8000e56:	2b04      	cmp	r3, #4
 8000e58:	bf28      	it	cs
 8000e5a:	2304      	movcs	r3, #4
 8000e5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	3304      	adds	r3, #4
 8000e62:	2b06      	cmp	r3, #6
 8000e64:	d902      	bls.n	8000e6c <NVIC_EncodePriority+0x30>
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	3b03      	subs	r3, #3
 8000e6a:	e000      	b.n	8000e6e <NVIC_EncodePriority+0x32>
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e70:	f04f 32ff 	mov.w	r2, #4294967295
 8000e74:	69bb      	ldr	r3, [r7, #24]
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	43da      	mvns	r2, r3
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	401a      	ands	r2, r3
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e84:	f04f 31ff 	mov.w	r1, #4294967295
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8e:	43d9      	mvns	r1, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e94:	4313      	orrs	r3, r2
         );
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3724      	adds	r7, #36	; 0x24
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
	...

08000ea4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	3b01      	subs	r3, #1
 8000eb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000eb4:	d301      	bcc.n	8000eba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e00f      	b.n	8000eda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eba:	4a0a      	ldr	r2, [pc, #40]	; (8000ee4 <SysTick_Config+0x40>)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ec2:	210f      	movs	r1, #15
 8000ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec8:	f7ff ff8e 	bl	8000de8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ecc:	4b05      	ldr	r3, [pc, #20]	; (8000ee4 <SysTick_Config+0x40>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ed2:	4b04      	ldr	r3, [pc, #16]	; (8000ee4 <SysTick_Config+0x40>)
 8000ed4:	2207      	movs	r2, #7
 8000ed6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ed8:	2300      	movs	r3, #0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	e000e010 	.word	0xe000e010

08000ee8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f7ff ff29 	bl	8000d48 <__NVIC_SetPriorityGrouping>
}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b086      	sub	sp, #24
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	4603      	mov	r3, r0
 8000f06:	60b9      	str	r1, [r7, #8]
 8000f08:	607a      	str	r2, [r7, #4]
 8000f0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f10:	f7ff ff3e 	bl	8000d90 <__NVIC_GetPriorityGrouping>
 8000f14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	68b9      	ldr	r1, [r7, #8]
 8000f1a:	6978      	ldr	r0, [r7, #20]
 8000f1c:	f7ff ff8e 	bl	8000e3c <NVIC_EncodePriority>
 8000f20:	4602      	mov	r2, r0
 8000f22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f26:	4611      	mov	r1, r2
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff ff5d 	bl	8000de8 <__NVIC_SetPriority>
}
 8000f2e:	bf00      	nop
 8000f30:	3718      	adds	r7, #24
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b082      	sub	sp, #8
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff ff31 	bl	8000dac <__NVIC_EnableIRQ>
}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b082      	sub	sp, #8
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f7ff ffa2 	bl	8000ea4 <SysTick_Config>
 8000f60:	4603      	mov	r3, r0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b089      	sub	sp, #36	; 0x24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f76:	2300      	movs	r3, #0
 8000f78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f82:	2300      	movs	r3, #0
 8000f84:	61fb      	str	r3, [r7, #28]
 8000f86:	e159      	b.n	800123c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f88:	2201      	movs	r2, #1
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	697a      	ldr	r2, [r7, #20]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	f040 8148 	bne.w	8001236 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f003 0303 	and.w	r3, r3, #3
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d005      	beq.n	8000fbe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	d130      	bne.n	8001020 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	2203      	movs	r2, #3
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	43db      	mvns	r3, r3
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	68da      	ldr	r2, [r3, #12]
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	4013      	ands	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	091b      	lsrs	r3, r3, #4
 800100a:	f003 0201 	and.w	r2, r3, #1
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	4313      	orrs	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f003 0303 	and.w	r3, r3, #3
 8001028:	2b03      	cmp	r3, #3
 800102a:	d017      	beq.n	800105c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	2203      	movs	r2, #3
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	43db      	mvns	r3, r3
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4013      	ands	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	689a      	ldr	r2, [r3, #8]
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4313      	orrs	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f003 0303 	and.w	r3, r3, #3
 8001064:	2b02      	cmp	r3, #2
 8001066:	d123      	bne.n	80010b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	08da      	lsrs	r2, r3, #3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3208      	adds	r2, #8
 8001070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001074:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	f003 0307 	and.w	r3, r3, #7
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	220f      	movs	r2, #15
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	43db      	mvns	r3, r3
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	4013      	ands	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	691a      	ldr	r2, [r3, #16]
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	f003 0307 	and.w	r3, r3, #7
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	4313      	orrs	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	08da      	lsrs	r2, r3, #3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	3208      	adds	r2, #8
 80010aa:	69b9      	ldr	r1, [r7, #24]
 80010ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	2203      	movs	r2, #3
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	43db      	mvns	r3, r3
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4013      	ands	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f003 0203 	and.w	r2, r3, #3
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4313      	orrs	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	f000 80a2 	beq.w	8001236 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	4b57      	ldr	r3, [pc, #348]	; (8001254 <HAL_GPIO_Init+0x2e8>)
 80010f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fa:	4a56      	ldr	r2, [pc, #344]	; (8001254 <HAL_GPIO_Init+0x2e8>)
 80010fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001100:	6453      	str	r3, [r2, #68]	; 0x44
 8001102:	4b54      	ldr	r3, [pc, #336]	; (8001254 <HAL_GPIO_Init+0x2e8>)
 8001104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001106:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800110e:	4a52      	ldr	r2, [pc, #328]	; (8001258 <HAL_GPIO_Init+0x2ec>)
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	089b      	lsrs	r3, r3, #2
 8001114:	3302      	adds	r3, #2
 8001116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800111a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	f003 0303 	and.w	r3, r3, #3
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	220f      	movs	r2, #15
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	43db      	mvns	r3, r3
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	4013      	ands	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a49      	ldr	r2, [pc, #292]	; (800125c <HAL_GPIO_Init+0x2f0>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d019      	beq.n	800116e <HAL_GPIO_Init+0x202>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a48      	ldr	r2, [pc, #288]	; (8001260 <HAL_GPIO_Init+0x2f4>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d013      	beq.n	800116a <HAL_GPIO_Init+0x1fe>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a47      	ldr	r2, [pc, #284]	; (8001264 <HAL_GPIO_Init+0x2f8>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d00d      	beq.n	8001166 <HAL_GPIO_Init+0x1fa>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a46      	ldr	r2, [pc, #280]	; (8001268 <HAL_GPIO_Init+0x2fc>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d007      	beq.n	8001162 <HAL_GPIO_Init+0x1f6>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a45      	ldr	r2, [pc, #276]	; (800126c <HAL_GPIO_Init+0x300>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d101      	bne.n	800115e <HAL_GPIO_Init+0x1f2>
 800115a:	2304      	movs	r3, #4
 800115c:	e008      	b.n	8001170 <HAL_GPIO_Init+0x204>
 800115e:	2307      	movs	r3, #7
 8001160:	e006      	b.n	8001170 <HAL_GPIO_Init+0x204>
 8001162:	2303      	movs	r3, #3
 8001164:	e004      	b.n	8001170 <HAL_GPIO_Init+0x204>
 8001166:	2302      	movs	r3, #2
 8001168:	e002      	b.n	8001170 <HAL_GPIO_Init+0x204>
 800116a:	2301      	movs	r3, #1
 800116c:	e000      	b.n	8001170 <HAL_GPIO_Init+0x204>
 800116e:	2300      	movs	r3, #0
 8001170:	69fa      	ldr	r2, [r7, #28]
 8001172:	f002 0203 	and.w	r2, r2, #3
 8001176:	0092      	lsls	r2, r2, #2
 8001178:	4093      	lsls	r3, r2
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4313      	orrs	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001180:	4935      	ldr	r1, [pc, #212]	; (8001258 <HAL_GPIO_Init+0x2ec>)
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	089b      	lsrs	r3, r3, #2
 8001186:	3302      	adds	r3, #2
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800118e:	4b38      	ldr	r3, [pc, #224]	; (8001270 <HAL_GPIO_Init+0x304>)
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	43db      	mvns	r3, r3
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	4013      	ands	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d003      	beq.n	80011b2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011b2:	4a2f      	ldr	r2, [pc, #188]	; (8001270 <HAL_GPIO_Init+0x304>)
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011b8:	4b2d      	ldr	r3, [pc, #180]	; (8001270 <HAL_GPIO_Init+0x304>)
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	43db      	mvns	r3, r3
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	4013      	ands	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d003      	beq.n	80011dc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	4313      	orrs	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011dc:	4a24      	ldr	r2, [pc, #144]	; (8001270 <HAL_GPIO_Init+0x304>)
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011e2:	4b23      	ldr	r3, [pc, #140]	; (8001270 <HAL_GPIO_Init+0x304>)
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	43db      	mvns	r3, r3
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	4013      	ands	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d003      	beq.n	8001206 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	4313      	orrs	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001206:	4a1a      	ldr	r2, [pc, #104]	; (8001270 <HAL_GPIO_Init+0x304>)
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800120c:	4b18      	ldr	r3, [pc, #96]	; (8001270 <HAL_GPIO_Init+0x304>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	43db      	mvns	r3, r3
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	4013      	ands	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d003      	beq.n	8001230 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	4313      	orrs	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001230:	4a0f      	ldr	r2, [pc, #60]	; (8001270 <HAL_GPIO_Init+0x304>)
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	3301      	adds	r3, #1
 800123a:	61fb      	str	r3, [r7, #28]
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	2b0f      	cmp	r3, #15
 8001240:	f67f aea2 	bls.w	8000f88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001244:	bf00      	nop
 8001246:	bf00      	nop
 8001248:	3724      	adds	r7, #36	; 0x24
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	40023800 	.word	0x40023800
 8001258:	40013800 	.word	0x40013800
 800125c:	40020000 	.word	0x40020000
 8001260:	40020400 	.word	0x40020400
 8001264:	40020800 	.word	0x40020800
 8001268:	40020c00 	.word	0x40020c00
 800126c:	40021000 	.word	0x40021000
 8001270:	40013c00 	.word	0x40013c00

08001274 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001274:	b480      	push	{r7}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	460b      	mov	r3, r1
 800127e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	691a      	ldr	r2, [r3, #16]
 8001284:	887b      	ldrh	r3, [r7, #2]
 8001286:	4013      	ands	r3, r2
 8001288:	2b00      	cmp	r3, #0
 800128a:	d002      	beq.n	8001292 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800128c:	2301      	movs	r3, #1
 800128e:	73fb      	strb	r3, [r7, #15]
 8001290:	e001      	b.n	8001296 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001292:	2300      	movs	r3, #0
 8001294:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001296:	7bfb      	ldrb	r3, [r7, #15]
}
 8001298:	4618      	mov	r0, r3
 800129a:	3714      	adds	r7, #20
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	460b      	mov	r3, r1
 80012ae:	807b      	strh	r3, [r7, #2]
 80012b0:	4613      	mov	r3, r2
 80012b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012b4:	787b      	ldrb	r3, [r7, #1]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d003      	beq.n	80012c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012ba:	887a      	ldrh	r2, [r7, #2]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012c0:	e003      	b.n	80012ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012c2:	887b      	ldrh	r3, [r7, #2]
 80012c4:	041a      	lsls	r2, r3, #16
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	619a      	str	r2, [r3, #24]
}
 80012ca:	bf00      	nop
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
	...

080012d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80012e2:	4b08      	ldr	r3, [pc, #32]	; (8001304 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012e4:	695a      	ldr	r2, [r3, #20]
 80012e6:	88fb      	ldrh	r3, [r7, #6]
 80012e8:	4013      	ands	r3, r2
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d006      	beq.n	80012fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012ee:	4a05      	ldr	r2, [pc, #20]	; (8001304 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012f0:	88fb      	ldrh	r3, [r7, #6]
 80012f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012f4:	88fb      	ldrh	r3, [r7, #6]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f000 f806 	bl	8001308 <HAL_GPIO_EXTI_Callback>
  }
}
 80012fc:	bf00      	nop
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40013c00 	.word	0x40013c00

08001308 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001312:	bf00      	nop
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
	...

08001320 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d101      	bne.n	8001332 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e267      	b.n	8001802 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	2b00      	cmp	r3, #0
 800133c:	d075      	beq.n	800142a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800133e:	4b88      	ldr	r3, [pc, #544]	; (8001560 <HAL_RCC_OscConfig+0x240>)
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	f003 030c 	and.w	r3, r3, #12
 8001346:	2b04      	cmp	r3, #4
 8001348:	d00c      	beq.n	8001364 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800134a:	4b85      	ldr	r3, [pc, #532]	; (8001560 <HAL_RCC_OscConfig+0x240>)
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001352:	2b08      	cmp	r3, #8
 8001354:	d112      	bne.n	800137c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001356:	4b82      	ldr	r3, [pc, #520]	; (8001560 <HAL_RCC_OscConfig+0x240>)
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800135e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001362:	d10b      	bne.n	800137c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001364:	4b7e      	ldr	r3, [pc, #504]	; (8001560 <HAL_RCC_OscConfig+0x240>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800136c:	2b00      	cmp	r3, #0
 800136e:	d05b      	beq.n	8001428 <HAL_RCC_OscConfig+0x108>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d157      	bne.n	8001428 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	e242      	b.n	8001802 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001384:	d106      	bne.n	8001394 <HAL_RCC_OscConfig+0x74>
 8001386:	4b76      	ldr	r3, [pc, #472]	; (8001560 <HAL_RCC_OscConfig+0x240>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a75      	ldr	r2, [pc, #468]	; (8001560 <HAL_RCC_OscConfig+0x240>)
 800138c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001390:	6013      	str	r3, [r2, #0]
 8001392:	e01d      	b.n	80013d0 <HAL_RCC_OscConfig+0xb0>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800139c:	d10c      	bne.n	80013b8 <HAL_RCC_OscConfig+0x98>
 800139e:	4b70      	ldr	r3, [pc, #448]	; (8001560 <HAL_RCC_OscConfig+0x240>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a6f      	ldr	r2, [pc, #444]	; (8001560 <HAL_RCC_OscConfig+0x240>)
 80013a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013a8:	6013      	str	r3, [r2, #0]
 80013aa:	4b6d      	ldr	r3, [pc, #436]	; (8001560 <HAL_RCC_OscConfig+0x240>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a6c      	ldr	r2, [pc, #432]	; (8001560 <HAL_RCC_OscConfig+0x240>)
 80013b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013b4:	6013      	str	r3, [r2, #0]
 80013b6:	e00b      	b.n	80013d0 <HAL_RCC_OscConfig+0xb0>
 80013b8:	4b69      	ldr	r3, [pc, #420]	; (8001560 <HAL_RCC_OscConfig+0x240>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a68      	ldr	r2, [pc, #416]	; (8001560 <HAL_RCC_OscConfig+0x240>)
 80013be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013c2:	6013      	str	r3, [r2, #0]
 80013c4:	4b66      	ldr	r3, [pc, #408]	; (8001560 <HAL_RCC_OscConfig+0x240>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a65      	ldr	r2, [pc, #404]	; (8001560 <HAL_RCC_OscConfig+0x240>)
 80013ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d013      	beq.n	8001400 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d8:	f7ff fc86 	bl	8000ce8 <HAL_GetTick>
 80013dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013de:	e008      	b.n	80013f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013e0:	f7ff fc82 	bl	8000ce8 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b64      	cmp	r3, #100	; 0x64
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e207      	b.n	8001802 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013f2:	4b5b      	ldr	r3, [pc, #364]	; (8001560 <HAL_RCC_OscConfig+0x240>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d0f0      	beq.n	80013e0 <HAL_RCC_OscConfig+0xc0>
 80013fe:	e014      	b.n	800142a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001400:	f7ff fc72 	bl	8000ce8 <HAL_GetTick>
 8001404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001406:	e008      	b.n	800141a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001408:	f7ff fc6e 	bl	8000ce8 <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b64      	cmp	r3, #100	; 0x64
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e1f3      	b.n	8001802 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800141a:	4b51      	ldr	r3, [pc, #324]	; (8001560 <HAL_RCC_OscConfig+0x240>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d1f0      	bne.n	8001408 <HAL_RCC_OscConfig+0xe8>
 8001426:	e000      	b.n	800142a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001428:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0302 	and.w	r3, r3, #2
 8001432:	2b00      	cmp	r3, #0
 8001434:	d063      	beq.n	80014fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001436:	4b4a      	ldr	r3, [pc, #296]	; (8001560 <HAL_RCC_OscConfig+0x240>)
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	f003 030c 	and.w	r3, r3, #12
 800143e:	2b00      	cmp	r3, #0
 8001440:	d00b      	beq.n	800145a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001442:	4b47      	ldr	r3, [pc, #284]	; (8001560 <HAL_RCC_OscConfig+0x240>)
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800144a:	2b08      	cmp	r3, #8
 800144c:	d11c      	bne.n	8001488 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800144e:	4b44      	ldr	r3, [pc, #272]	; (8001560 <HAL_RCC_OscConfig+0x240>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d116      	bne.n	8001488 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800145a:	4b41      	ldr	r3, [pc, #260]	; (8001560 <HAL_RCC_OscConfig+0x240>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	2b00      	cmp	r3, #0
 8001464:	d005      	beq.n	8001472 <HAL_RCC_OscConfig+0x152>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	68db      	ldr	r3, [r3, #12]
 800146a:	2b01      	cmp	r3, #1
 800146c:	d001      	beq.n	8001472 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e1c7      	b.n	8001802 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001472:	4b3b      	ldr	r3, [pc, #236]	; (8001560 <HAL_RCC_OscConfig+0x240>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	691b      	ldr	r3, [r3, #16]
 800147e:	00db      	lsls	r3, r3, #3
 8001480:	4937      	ldr	r1, [pc, #220]	; (8001560 <HAL_RCC_OscConfig+0x240>)
 8001482:	4313      	orrs	r3, r2
 8001484:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001486:	e03a      	b.n	80014fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d020      	beq.n	80014d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001490:	4b34      	ldr	r3, [pc, #208]	; (8001564 <HAL_RCC_OscConfig+0x244>)
 8001492:	2201      	movs	r2, #1
 8001494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001496:	f7ff fc27 	bl	8000ce8 <HAL_GetTick>
 800149a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800149c:	e008      	b.n	80014b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800149e:	f7ff fc23 	bl	8000ce8 <HAL_GetTick>
 80014a2:	4602      	mov	r2, r0
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d901      	bls.n	80014b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014ac:	2303      	movs	r3, #3
 80014ae:	e1a8      	b.n	8001802 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014b0:	4b2b      	ldr	r3, [pc, #172]	; (8001560 <HAL_RCC_OscConfig+0x240>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0302 	and.w	r3, r3, #2
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d0f0      	beq.n	800149e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014bc:	4b28      	ldr	r3, [pc, #160]	; (8001560 <HAL_RCC_OscConfig+0x240>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	691b      	ldr	r3, [r3, #16]
 80014c8:	00db      	lsls	r3, r3, #3
 80014ca:	4925      	ldr	r1, [pc, #148]	; (8001560 <HAL_RCC_OscConfig+0x240>)
 80014cc:	4313      	orrs	r3, r2
 80014ce:	600b      	str	r3, [r1, #0]
 80014d0:	e015      	b.n	80014fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014d2:	4b24      	ldr	r3, [pc, #144]	; (8001564 <HAL_RCC_OscConfig+0x244>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d8:	f7ff fc06 	bl	8000ce8 <HAL_GetTick>
 80014dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014de:	e008      	b.n	80014f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014e0:	f7ff fc02 	bl	8000ce8 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e187      	b.n	8001802 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014f2:	4b1b      	ldr	r3, [pc, #108]	; (8001560 <HAL_RCC_OscConfig+0x240>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d1f0      	bne.n	80014e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0308 	and.w	r3, r3, #8
 8001506:	2b00      	cmp	r3, #0
 8001508:	d036      	beq.n	8001578 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	695b      	ldr	r3, [r3, #20]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d016      	beq.n	8001540 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001512:	4b15      	ldr	r3, [pc, #84]	; (8001568 <HAL_RCC_OscConfig+0x248>)
 8001514:	2201      	movs	r2, #1
 8001516:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001518:	f7ff fbe6 	bl	8000ce8 <HAL_GetTick>
 800151c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800151e:	e008      	b.n	8001532 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001520:	f7ff fbe2 	bl	8000ce8 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b02      	cmp	r3, #2
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e167      	b.n	8001802 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001532:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <HAL_RCC_OscConfig+0x240>)
 8001534:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d0f0      	beq.n	8001520 <HAL_RCC_OscConfig+0x200>
 800153e:	e01b      	b.n	8001578 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001540:	4b09      	ldr	r3, [pc, #36]	; (8001568 <HAL_RCC_OscConfig+0x248>)
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001546:	f7ff fbcf 	bl	8000ce8 <HAL_GetTick>
 800154a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800154c:	e00e      	b.n	800156c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800154e:	f7ff fbcb 	bl	8000ce8 <HAL_GetTick>
 8001552:	4602      	mov	r2, r0
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	2b02      	cmp	r3, #2
 800155a:	d907      	bls.n	800156c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800155c:	2303      	movs	r3, #3
 800155e:	e150      	b.n	8001802 <HAL_RCC_OscConfig+0x4e2>
 8001560:	40023800 	.word	0x40023800
 8001564:	42470000 	.word	0x42470000
 8001568:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800156c:	4b88      	ldr	r3, [pc, #544]	; (8001790 <HAL_RCC_OscConfig+0x470>)
 800156e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001570:	f003 0302 	and.w	r3, r3, #2
 8001574:	2b00      	cmp	r3, #0
 8001576:	d1ea      	bne.n	800154e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0304 	and.w	r3, r3, #4
 8001580:	2b00      	cmp	r3, #0
 8001582:	f000 8097 	beq.w	80016b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001586:	2300      	movs	r3, #0
 8001588:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800158a:	4b81      	ldr	r3, [pc, #516]	; (8001790 <HAL_RCC_OscConfig+0x470>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d10f      	bne.n	80015b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	60bb      	str	r3, [r7, #8]
 800159a:	4b7d      	ldr	r3, [pc, #500]	; (8001790 <HAL_RCC_OscConfig+0x470>)
 800159c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159e:	4a7c      	ldr	r2, [pc, #496]	; (8001790 <HAL_RCC_OscConfig+0x470>)
 80015a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a4:	6413      	str	r3, [r2, #64]	; 0x40
 80015a6:	4b7a      	ldr	r3, [pc, #488]	; (8001790 <HAL_RCC_OscConfig+0x470>)
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ae:	60bb      	str	r3, [r7, #8]
 80015b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015b2:	2301      	movs	r3, #1
 80015b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015b6:	4b77      	ldr	r3, [pc, #476]	; (8001794 <HAL_RCC_OscConfig+0x474>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d118      	bne.n	80015f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015c2:	4b74      	ldr	r3, [pc, #464]	; (8001794 <HAL_RCC_OscConfig+0x474>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a73      	ldr	r2, [pc, #460]	; (8001794 <HAL_RCC_OscConfig+0x474>)
 80015c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015ce:	f7ff fb8b 	bl	8000ce8 <HAL_GetTick>
 80015d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d4:	e008      	b.n	80015e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015d6:	f7ff fb87 	bl	8000ce8 <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e10c      	b.n	8001802 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015e8:	4b6a      	ldr	r3, [pc, #424]	; (8001794 <HAL_RCC_OscConfig+0x474>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d0f0      	beq.n	80015d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d106      	bne.n	800160a <HAL_RCC_OscConfig+0x2ea>
 80015fc:	4b64      	ldr	r3, [pc, #400]	; (8001790 <HAL_RCC_OscConfig+0x470>)
 80015fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001600:	4a63      	ldr	r2, [pc, #396]	; (8001790 <HAL_RCC_OscConfig+0x470>)
 8001602:	f043 0301 	orr.w	r3, r3, #1
 8001606:	6713      	str	r3, [r2, #112]	; 0x70
 8001608:	e01c      	b.n	8001644 <HAL_RCC_OscConfig+0x324>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	2b05      	cmp	r3, #5
 8001610:	d10c      	bne.n	800162c <HAL_RCC_OscConfig+0x30c>
 8001612:	4b5f      	ldr	r3, [pc, #380]	; (8001790 <HAL_RCC_OscConfig+0x470>)
 8001614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001616:	4a5e      	ldr	r2, [pc, #376]	; (8001790 <HAL_RCC_OscConfig+0x470>)
 8001618:	f043 0304 	orr.w	r3, r3, #4
 800161c:	6713      	str	r3, [r2, #112]	; 0x70
 800161e:	4b5c      	ldr	r3, [pc, #368]	; (8001790 <HAL_RCC_OscConfig+0x470>)
 8001620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001622:	4a5b      	ldr	r2, [pc, #364]	; (8001790 <HAL_RCC_OscConfig+0x470>)
 8001624:	f043 0301 	orr.w	r3, r3, #1
 8001628:	6713      	str	r3, [r2, #112]	; 0x70
 800162a:	e00b      	b.n	8001644 <HAL_RCC_OscConfig+0x324>
 800162c:	4b58      	ldr	r3, [pc, #352]	; (8001790 <HAL_RCC_OscConfig+0x470>)
 800162e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001630:	4a57      	ldr	r2, [pc, #348]	; (8001790 <HAL_RCC_OscConfig+0x470>)
 8001632:	f023 0301 	bic.w	r3, r3, #1
 8001636:	6713      	str	r3, [r2, #112]	; 0x70
 8001638:	4b55      	ldr	r3, [pc, #340]	; (8001790 <HAL_RCC_OscConfig+0x470>)
 800163a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800163c:	4a54      	ldr	r2, [pc, #336]	; (8001790 <HAL_RCC_OscConfig+0x470>)
 800163e:	f023 0304 	bic.w	r3, r3, #4
 8001642:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d015      	beq.n	8001678 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800164c:	f7ff fb4c 	bl	8000ce8 <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001652:	e00a      	b.n	800166a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001654:	f7ff fb48 	bl	8000ce8 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001662:	4293      	cmp	r3, r2
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e0cb      	b.n	8001802 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800166a:	4b49      	ldr	r3, [pc, #292]	; (8001790 <HAL_RCC_OscConfig+0x470>)
 800166c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d0ee      	beq.n	8001654 <HAL_RCC_OscConfig+0x334>
 8001676:	e014      	b.n	80016a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001678:	f7ff fb36 	bl	8000ce8 <HAL_GetTick>
 800167c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800167e:	e00a      	b.n	8001696 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001680:	f7ff fb32 	bl	8000ce8 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	f241 3288 	movw	r2, #5000	; 0x1388
 800168e:	4293      	cmp	r3, r2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e0b5      	b.n	8001802 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001696:	4b3e      	ldr	r3, [pc, #248]	; (8001790 <HAL_RCC_OscConfig+0x470>)
 8001698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1ee      	bne.n	8001680 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016a2:	7dfb      	ldrb	r3, [r7, #23]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d105      	bne.n	80016b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016a8:	4b39      	ldr	r3, [pc, #228]	; (8001790 <HAL_RCC_OscConfig+0x470>)
 80016aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ac:	4a38      	ldr	r2, [pc, #224]	; (8001790 <HAL_RCC_OscConfig+0x470>)
 80016ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	f000 80a1 	beq.w	8001800 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016be:	4b34      	ldr	r3, [pc, #208]	; (8001790 <HAL_RCC_OscConfig+0x470>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f003 030c 	and.w	r3, r3, #12
 80016c6:	2b08      	cmp	r3, #8
 80016c8:	d05c      	beq.n	8001784 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	699b      	ldr	r3, [r3, #24]
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d141      	bne.n	8001756 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016d2:	4b31      	ldr	r3, [pc, #196]	; (8001798 <HAL_RCC_OscConfig+0x478>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d8:	f7ff fb06 	bl	8000ce8 <HAL_GetTick>
 80016dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016de:	e008      	b.n	80016f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016e0:	f7ff fb02 	bl	8000ce8 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e087      	b.n	8001802 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016f2:	4b27      	ldr	r3, [pc, #156]	; (8001790 <HAL_RCC_OscConfig+0x470>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d1f0      	bne.n	80016e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	69da      	ldr	r2, [r3, #28]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6a1b      	ldr	r3, [r3, #32]
 8001706:	431a      	orrs	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170c:	019b      	lsls	r3, r3, #6
 800170e:	431a      	orrs	r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001714:	085b      	lsrs	r3, r3, #1
 8001716:	3b01      	subs	r3, #1
 8001718:	041b      	lsls	r3, r3, #16
 800171a:	431a      	orrs	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001720:	061b      	lsls	r3, r3, #24
 8001722:	491b      	ldr	r1, [pc, #108]	; (8001790 <HAL_RCC_OscConfig+0x470>)
 8001724:	4313      	orrs	r3, r2
 8001726:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001728:	4b1b      	ldr	r3, [pc, #108]	; (8001798 <HAL_RCC_OscConfig+0x478>)
 800172a:	2201      	movs	r2, #1
 800172c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800172e:	f7ff fadb 	bl	8000ce8 <HAL_GetTick>
 8001732:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001734:	e008      	b.n	8001748 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001736:	f7ff fad7 	bl	8000ce8 <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	2b02      	cmp	r3, #2
 8001742:	d901      	bls.n	8001748 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e05c      	b.n	8001802 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001748:	4b11      	ldr	r3, [pc, #68]	; (8001790 <HAL_RCC_OscConfig+0x470>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d0f0      	beq.n	8001736 <HAL_RCC_OscConfig+0x416>
 8001754:	e054      	b.n	8001800 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001756:	4b10      	ldr	r3, [pc, #64]	; (8001798 <HAL_RCC_OscConfig+0x478>)
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800175c:	f7ff fac4 	bl	8000ce8 <HAL_GetTick>
 8001760:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001762:	e008      	b.n	8001776 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001764:	f7ff fac0 	bl	8000ce8 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b02      	cmp	r3, #2
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e045      	b.n	8001802 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001776:	4b06      	ldr	r3, [pc, #24]	; (8001790 <HAL_RCC_OscConfig+0x470>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d1f0      	bne.n	8001764 <HAL_RCC_OscConfig+0x444>
 8001782:	e03d      	b.n	8001800 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	699b      	ldr	r3, [r3, #24]
 8001788:	2b01      	cmp	r3, #1
 800178a:	d107      	bne.n	800179c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e038      	b.n	8001802 <HAL_RCC_OscConfig+0x4e2>
 8001790:	40023800 	.word	0x40023800
 8001794:	40007000 	.word	0x40007000
 8001798:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800179c:	4b1b      	ldr	r3, [pc, #108]	; (800180c <HAL_RCC_OscConfig+0x4ec>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	699b      	ldr	r3, [r3, #24]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d028      	beq.n	80017fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d121      	bne.n	80017fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d11a      	bne.n	80017fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017c6:	68fa      	ldr	r2, [r7, #12]
 80017c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017cc:	4013      	ands	r3, r2
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d111      	bne.n	80017fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e2:	085b      	lsrs	r3, r3, #1
 80017e4:	3b01      	subs	r3, #1
 80017e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d107      	bne.n	80017fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d001      	beq.n	8001800 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e000      	b.n	8001802 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	3718      	adds	r7, #24
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40023800 	.word	0x40023800

08001810 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d101      	bne.n	8001824 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e0cc      	b.n	80019be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001824:	4b68      	ldr	r3, [pc, #416]	; (80019c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0307 	and.w	r3, r3, #7
 800182c:	683a      	ldr	r2, [r7, #0]
 800182e:	429a      	cmp	r2, r3
 8001830:	d90c      	bls.n	800184c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001832:	4b65      	ldr	r3, [pc, #404]	; (80019c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001834:	683a      	ldr	r2, [r7, #0]
 8001836:	b2d2      	uxtb	r2, r2
 8001838:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800183a:	4b63      	ldr	r3, [pc, #396]	; (80019c8 <HAL_RCC_ClockConfig+0x1b8>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0307 	and.w	r3, r3, #7
 8001842:	683a      	ldr	r2, [r7, #0]
 8001844:	429a      	cmp	r2, r3
 8001846:	d001      	beq.n	800184c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e0b8      	b.n	80019be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0302 	and.w	r3, r3, #2
 8001854:	2b00      	cmp	r3, #0
 8001856:	d020      	beq.n	800189a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0304 	and.w	r3, r3, #4
 8001860:	2b00      	cmp	r3, #0
 8001862:	d005      	beq.n	8001870 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001864:	4b59      	ldr	r3, [pc, #356]	; (80019cc <HAL_RCC_ClockConfig+0x1bc>)
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	4a58      	ldr	r2, [pc, #352]	; (80019cc <HAL_RCC_ClockConfig+0x1bc>)
 800186a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800186e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0308 	and.w	r3, r3, #8
 8001878:	2b00      	cmp	r3, #0
 800187a:	d005      	beq.n	8001888 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800187c:	4b53      	ldr	r3, [pc, #332]	; (80019cc <HAL_RCC_ClockConfig+0x1bc>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	4a52      	ldr	r2, [pc, #328]	; (80019cc <HAL_RCC_ClockConfig+0x1bc>)
 8001882:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001886:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001888:	4b50      	ldr	r3, [pc, #320]	; (80019cc <HAL_RCC_ClockConfig+0x1bc>)
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	494d      	ldr	r1, [pc, #308]	; (80019cc <HAL_RCC_ClockConfig+0x1bc>)
 8001896:	4313      	orrs	r3, r2
 8001898:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d044      	beq.n	8001930 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d107      	bne.n	80018be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ae:	4b47      	ldr	r3, [pc, #284]	; (80019cc <HAL_RCC_ClockConfig+0x1bc>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d119      	bne.n	80018ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e07f      	b.n	80019be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d003      	beq.n	80018ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018ca:	2b03      	cmp	r3, #3
 80018cc:	d107      	bne.n	80018de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018ce:	4b3f      	ldr	r3, [pc, #252]	; (80019cc <HAL_RCC_ClockConfig+0x1bc>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d109      	bne.n	80018ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e06f      	b.n	80019be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018de:	4b3b      	ldr	r3, [pc, #236]	; (80019cc <HAL_RCC_ClockConfig+0x1bc>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d101      	bne.n	80018ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e067      	b.n	80019be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018ee:	4b37      	ldr	r3, [pc, #220]	; (80019cc <HAL_RCC_ClockConfig+0x1bc>)
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	f023 0203 	bic.w	r2, r3, #3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	4934      	ldr	r1, [pc, #208]	; (80019cc <HAL_RCC_ClockConfig+0x1bc>)
 80018fc:	4313      	orrs	r3, r2
 80018fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001900:	f7ff f9f2 	bl	8000ce8 <HAL_GetTick>
 8001904:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001906:	e00a      	b.n	800191e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001908:	f7ff f9ee 	bl	8000ce8 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	f241 3288 	movw	r2, #5000	; 0x1388
 8001916:	4293      	cmp	r3, r2
 8001918:	d901      	bls.n	800191e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e04f      	b.n	80019be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800191e:	4b2b      	ldr	r3, [pc, #172]	; (80019cc <HAL_RCC_ClockConfig+0x1bc>)
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	f003 020c 	and.w	r2, r3, #12
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	429a      	cmp	r2, r3
 800192e:	d1eb      	bne.n	8001908 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001930:	4b25      	ldr	r3, [pc, #148]	; (80019c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0307 	and.w	r3, r3, #7
 8001938:	683a      	ldr	r2, [r7, #0]
 800193a:	429a      	cmp	r2, r3
 800193c:	d20c      	bcs.n	8001958 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800193e:	4b22      	ldr	r3, [pc, #136]	; (80019c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001940:	683a      	ldr	r2, [r7, #0]
 8001942:	b2d2      	uxtb	r2, r2
 8001944:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001946:	4b20      	ldr	r3, [pc, #128]	; (80019c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	683a      	ldr	r2, [r7, #0]
 8001950:	429a      	cmp	r2, r3
 8001952:	d001      	beq.n	8001958 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e032      	b.n	80019be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0304 	and.w	r3, r3, #4
 8001960:	2b00      	cmp	r3, #0
 8001962:	d008      	beq.n	8001976 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001964:	4b19      	ldr	r3, [pc, #100]	; (80019cc <HAL_RCC_ClockConfig+0x1bc>)
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	4916      	ldr	r1, [pc, #88]	; (80019cc <HAL_RCC_ClockConfig+0x1bc>)
 8001972:	4313      	orrs	r3, r2
 8001974:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0308 	and.w	r3, r3, #8
 800197e:	2b00      	cmp	r3, #0
 8001980:	d009      	beq.n	8001996 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001982:	4b12      	ldr	r3, [pc, #72]	; (80019cc <HAL_RCC_ClockConfig+0x1bc>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	691b      	ldr	r3, [r3, #16]
 800198e:	00db      	lsls	r3, r3, #3
 8001990:	490e      	ldr	r1, [pc, #56]	; (80019cc <HAL_RCC_ClockConfig+0x1bc>)
 8001992:	4313      	orrs	r3, r2
 8001994:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001996:	f000 f821 	bl	80019dc <HAL_RCC_GetSysClockFreq>
 800199a:	4602      	mov	r2, r0
 800199c:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <HAL_RCC_ClockConfig+0x1bc>)
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	091b      	lsrs	r3, r3, #4
 80019a2:	f003 030f 	and.w	r3, r3, #15
 80019a6:	490a      	ldr	r1, [pc, #40]	; (80019d0 <HAL_RCC_ClockConfig+0x1c0>)
 80019a8:	5ccb      	ldrb	r3, [r1, r3]
 80019aa:	fa22 f303 	lsr.w	r3, r2, r3
 80019ae:	4a09      	ldr	r2, [pc, #36]	; (80019d4 <HAL_RCC_ClockConfig+0x1c4>)
 80019b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019b2:	4b09      	ldr	r3, [pc, #36]	; (80019d8 <HAL_RCC_ClockConfig+0x1c8>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff f952 	bl	8000c60 <HAL_InitTick>

  return HAL_OK;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40023c00 	.word	0x40023c00
 80019cc:	40023800 	.word	0x40023800
 80019d0:	080024d4 	.word	0x080024d4
 80019d4:	20000000 	.word	0x20000000
 80019d8:	20000004 	.word	0x20000004

080019dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019e0:	b090      	sub	sp, #64	; 0x40
 80019e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80019e4:	2300      	movs	r3, #0
 80019e6:	637b      	str	r3, [r7, #52]	; 0x34
 80019e8:	2300      	movs	r3, #0
 80019ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019ec:	2300      	movs	r3, #0
 80019ee:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80019f0:	2300      	movs	r3, #0
 80019f2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019f4:	4b59      	ldr	r3, [pc, #356]	; (8001b5c <HAL_RCC_GetSysClockFreq+0x180>)
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f003 030c 	and.w	r3, r3, #12
 80019fc:	2b08      	cmp	r3, #8
 80019fe:	d00d      	beq.n	8001a1c <HAL_RCC_GetSysClockFreq+0x40>
 8001a00:	2b08      	cmp	r3, #8
 8001a02:	f200 80a1 	bhi.w	8001b48 <HAL_RCC_GetSysClockFreq+0x16c>
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d002      	beq.n	8001a10 <HAL_RCC_GetSysClockFreq+0x34>
 8001a0a:	2b04      	cmp	r3, #4
 8001a0c:	d003      	beq.n	8001a16 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a0e:	e09b      	b.n	8001b48 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a10:	4b53      	ldr	r3, [pc, #332]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x184>)
 8001a12:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001a14:	e09b      	b.n	8001b4e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a16:	4b53      	ldr	r3, [pc, #332]	; (8001b64 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a18:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a1a:	e098      	b.n	8001b4e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a1c:	4b4f      	ldr	r3, [pc, #316]	; (8001b5c <HAL_RCC_GetSysClockFreq+0x180>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a24:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a26:	4b4d      	ldr	r3, [pc, #308]	; (8001b5c <HAL_RCC_GetSysClockFreq+0x180>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d028      	beq.n	8001a84 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a32:	4b4a      	ldr	r3, [pc, #296]	; (8001b5c <HAL_RCC_GetSysClockFreq+0x180>)
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	099b      	lsrs	r3, r3, #6
 8001a38:	2200      	movs	r2, #0
 8001a3a:	623b      	str	r3, [r7, #32]
 8001a3c:	627a      	str	r2, [r7, #36]	; 0x24
 8001a3e:	6a3b      	ldr	r3, [r7, #32]
 8001a40:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001a44:	2100      	movs	r1, #0
 8001a46:	4b47      	ldr	r3, [pc, #284]	; (8001b64 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a48:	fb03 f201 	mul.w	r2, r3, r1
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	fb00 f303 	mul.w	r3, r0, r3
 8001a52:	4413      	add	r3, r2
 8001a54:	4a43      	ldr	r2, [pc, #268]	; (8001b64 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a56:	fba0 1202 	umull	r1, r2, r0, r2
 8001a5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a5c:	460a      	mov	r2, r1
 8001a5e:	62ba      	str	r2, [r7, #40]	; 0x28
 8001a60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a62:	4413      	add	r3, r2
 8001a64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a68:	2200      	movs	r2, #0
 8001a6a:	61bb      	str	r3, [r7, #24]
 8001a6c:	61fa      	str	r2, [r7, #28]
 8001a6e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a72:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a76:	f7fe fc03 	bl	8000280 <__aeabi_uldivmod>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	4613      	mov	r3, r2
 8001a80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a82:	e053      	b.n	8001b2c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a84:	4b35      	ldr	r3, [pc, #212]	; (8001b5c <HAL_RCC_GetSysClockFreq+0x180>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	099b      	lsrs	r3, r3, #6
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	613b      	str	r3, [r7, #16]
 8001a8e:	617a      	str	r2, [r7, #20]
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001a96:	f04f 0b00 	mov.w	fp, #0
 8001a9a:	4652      	mov	r2, sl
 8001a9c:	465b      	mov	r3, fp
 8001a9e:	f04f 0000 	mov.w	r0, #0
 8001aa2:	f04f 0100 	mov.w	r1, #0
 8001aa6:	0159      	lsls	r1, r3, #5
 8001aa8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001aac:	0150      	lsls	r0, r2, #5
 8001aae:	4602      	mov	r2, r0
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	ebb2 080a 	subs.w	r8, r2, sl
 8001ab6:	eb63 090b 	sbc.w	r9, r3, fp
 8001aba:	f04f 0200 	mov.w	r2, #0
 8001abe:	f04f 0300 	mov.w	r3, #0
 8001ac2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001ac6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001aca:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001ace:	ebb2 0408 	subs.w	r4, r2, r8
 8001ad2:	eb63 0509 	sbc.w	r5, r3, r9
 8001ad6:	f04f 0200 	mov.w	r2, #0
 8001ada:	f04f 0300 	mov.w	r3, #0
 8001ade:	00eb      	lsls	r3, r5, #3
 8001ae0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ae4:	00e2      	lsls	r2, r4, #3
 8001ae6:	4614      	mov	r4, r2
 8001ae8:	461d      	mov	r5, r3
 8001aea:	eb14 030a 	adds.w	r3, r4, sl
 8001aee:	603b      	str	r3, [r7, #0]
 8001af0:	eb45 030b 	adc.w	r3, r5, fp
 8001af4:	607b      	str	r3, [r7, #4]
 8001af6:	f04f 0200 	mov.w	r2, #0
 8001afa:	f04f 0300 	mov.w	r3, #0
 8001afe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b02:	4629      	mov	r1, r5
 8001b04:	028b      	lsls	r3, r1, #10
 8001b06:	4621      	mov	r1, r4
 8001b08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b0c:	4621      	mov	r1, r4
 8001b0e:	028a      	lsls	r2, r1, #10
 8001b10:	4610      	mov	r0, r2
 8001b12:	4619      	mov	r1, r3
 8001b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b16:	2200      	movs	r2, #0
 8001b18:	60bb      	str	r3, [r7, #8]
 8001b1a:	60fa      	str	r2, [r7, #12]
 8001b1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b20:	f7fe fbae 	bl	8000280 <__aeabi_uldivmod>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	4613      	mov	r3, r2
 8001b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b2c:	4b0b      	ldr	r3, [pc, #44]	; (8001b5c <HAL_RCC_GetSysClockFreq+0x180>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	0c1b      	lsrs	r3, r3, #16
 8001b32:	f003 0303 	and.w	r3, r3, #3
 8001b36:	3301      	adds	r3, #1
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001b3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b44:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b46:	e002      	b.n	8001b4e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b48:	4b05      	ldr	r3, [pc, #20]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x184>)
 8001b4a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3740      	adds	r7, #64	; 0x40
 8001b54:	46bd      	mov	sp, r7
 8001b56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40023800 	.word	0x40023800
 8001b60:	00f42400 	.word	0x00f42400
 8001b64:	017d7840 	.word	0x017d7840

08001b68 <__errno>:
 8001b68:	4b01      	ldr	r3, [pc, #4]	; (8001b70 <__errno+0x8>)
 8001b6a:	6818      	ldr	r0, [r3, #0]
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	2000000c 	.word	0x2000000c

08001b74 <__libc_init_array>:
 8001b74:	b570      	push	{r4, r5, r6, lr}
 8001b76:	4d0d      	ldr	r5, [pc, #52]	; (8001bac <__libc_init_array+0x38>)
 8001b78:	4c0d      	ldr	r4, [pc, #52]	; (8001bb0 <__libc_init_array+0x3c>)
 8001b7a:	1b64      	subs	r4, r4, r5
 8001b7c:	10a4      	asrs	r4, r4, #2
 8001b7e:	2600      	movs	r6, #0
 8001b80:	42a6      	cmp	r6, r4
 8001b82:	d109      	bne.n	8001b98 <__libc_init_array+0x24>
 8001b84:	4d0b      	ldr	r5, [pc, #44]	; (8001bb4 <__libc_init_array+0x40>)
 8001b86:	4c0c      	ldr	r4, [pc, #48]	; (8001bb8 <__libc_init_array+0x44>)
 8001b88:	f000 fc8e 	bl	80024a8 <_init>
 8001b8c:	1b64      	subs	r4, r4, r5
 8001b8e:	10a4      	asrs	r4, r4, #2
 8001b90:	2600      	movs	r6, #0
 8001b92:	42a6      	cmp	r6, r4
 8001b94:	d105      	bne.n	8001ba2 <__libc_init_array+0x2e>
 8001b96:	bd70      	pop	{r4, r5, r6, pc}
 8001b98:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b9c:	4798      	blx	r3
 8001b9e:	3601      	adds	r6, #1
 8001ba0:	e7ee      	b.n	8001b80 <__libc_init_array+0xc>
 8001ba2:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ba6:	4798      	blx	r3
 8001ba8:	3601      	adds	r6, #1
 8001baa:	e7f2      	b.n	8001b92 <__libc_init_array+0x1e>
 8001bac:	08002520 	.word	0x08002520
 8001bb0:	08002520 	.word	0x08002520
 8001bb4:	08002520 	.word	0x08002520
 8001bb8:	08002524 	.word	0x08002524

08001bbc <memset>:
 8001bbc:	4402      	add	r2, r0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d100      	bne.n	8001bc6 <memset+0xa>
 8001bc4:	4770      	bx	lr
 8001bc6:	f803 1b01 	strb.w	r1, [r3], #1
 8001bca:	e7f9      	b.n	8001bc0 <memset+0x4>

08001bcc <siprintf>:
 8001bcc:	b40e      	push	{r1, r2, r3}
 8001bce:	b500      	push	{lr}
 8001bd0:	b09c      	sub	sp, #112	; 0x70
 8001bd2:	ab1d      	add	r3, sp, #116	; 0x74
 8001bd4:	9002      	str	r0, [sp, #8]
 8001bd6:	9006      	str	r0, [sp, #24]
 8001bd8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001bdc:	4809      	ldr	r0, [pc, #36]	; (8001c04 <siprintf+0x38>)
 8001bde:	9107      	str	r1, [sp, #28]
 8001be0:	9104      	str	r1, [sp, #16]
 8001be2:	4909      	ldr	r1, [pc, #36]	; (8001c08 <siprintf+0x3c>)
 8001be4:	f853 2b04 	ldr.w	r2, [r3], #4
 8001be8:	9105      	str	r1, [sp, #20]
 8001bea:	6800      	ldr	r0, [r0, #0]
 8001bec:	9301      	str	r3, [sp, #4]
 8001bee:	a902      	add	r1, sp, #8
 8001bf0:	f000 f868 	bl	8001cc4 <_svfiprintf_r>
 8001bf4:	9b02      	ldr	r3, [sp, #8]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	701a      	strb	r2, [r3, #0]
 8001bfa:	b01c      	add	sp, #112	; 0x70
 8001bfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8001c00:	b003      	add	sp, #12
 8001c02:	4770      	bx	lr
 8001c04:	2000000c 	.word	0x2000000c
 8001c08:	ffff0208 	.word	0xffff0208

08001c0c <__ssputs_r>:
 8001c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c10:	688e      	ldr	r6, [r1, #8]
 8001c12:	429e      	cmp	r6, r3
 8001c14:	4682      	mov	sl, r0
 8001c16:	460c      	mov	r4, r1
 8001c18:	4690      	mov	r8, r2
 8001c1a:	461f      	mov	r7, r3
 8001c1c:	d838      	bhi.n	8001c90 <__ssputs_r+0x84>
 8001c1e:	898a      	ldrh	r2, [r1, #12]
 8001c20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001c24:	d032      	beq.n	8001c8c <__ssputs_r+0x80>
 8001c26:	6825      	ldr	r5, [r4, #0]
 8001c28:	6909      	ldr	r1, [r1, #16]
 8001c2a:	eba5 0901 	sub.w	r9, r5, r1
 8001c2e:	6965      	ldr	r5, [r4, #20]
 8001c30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001c34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001c38:	3301      	adds	r3, #1
 8001c3a:	444b      	add	r3, r9
 8001c3c:	106d      	asrs	r5, r5, #1
 8001c3e:	429d      	cmp	r5, r3
 8001c40:	bf38      	it	cc
 8001c42:	461d      	movcc	r5, r3
 8001c44:	0553      	lsls	r3, r2, #21
 8001c46:	d531      	bpl.n	8001cac <__ssputs_r+0xa0>
 8001c48:	4629      	mov	r1, r5
 8001c4a:	f000 fb63 	bl	8002314 <_malloc_r>
 8001c4e:	4606      	mov	r6, r0
 8001c50:	b950      	cbnz	r0, 8001c68 <__ssputs_r+0x5c>
 8001c52:	230c      	movs	r3, #12
 8001c54:	f8ca 3000 	str.w	r3, [sl]
 8001c58:	89a3      	ldrh	r3, [r4, #12]
 8001c5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c5e:	81a3      	strh	r3, [r4, #12]
 8001c60:	f04f 30ff 	mov.w	r0, #4294967295
 8001c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c68:	6921      	ldr	r1, [r4, #16]
 8001c6a:	464a      	mov	r2, r9
 8001c6c:	f000 fabe 	bl	80021ec <memcpy>
 8001c70:	89a3      	ldrh	r3, [r4, #12]
 8001c72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001c76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c7a:	81a3      	strh	r3, [r4, #12]
 8001c7c:	6126      	str	r6, [r4, #16]
 8001c7e:	6165      	str	r5, [r4, #20]
 8001c80:	444e      	add	r6, r9
 8001c82:	eba5 0509 	sub.w	r5, r5, r9
 8001c86:	6026      	str	r6, [r4, #0]
 8001c88:	60a5      	str	r5, [r4, #8]
 8001c8a:	463e      	mov	r6, r7
 8001c8c:	42be      	cmp	r6, r7
 8001c8e:	d900      	bls.n	8001c92 <__ssputs_r+0x86>
 8001c90:	463e      	mov	r6, r7
 8001c92:	6820      	ldr	r0, [r4, #0]
 8001c94:	4632      	mov	r2, r6
 8001c96:	4641      	mov	r1, r8
 8001c98:	f000 fab6 	bl	8002208 <memmove>
 8001c9c:	68a3      	ldr	r3, [r4, #8]
 8001c9e:	1b9b      	subs	r3, r3, r6
 8001ca0:	60a3      	str	r3, [r4, #8]
 8001ca2:	6823      	ldr	r3, [r4, #0]
 8001ca4:	4433      	add	r3, r6
 8001ca6:	6023      	str	r3, [r4, #0]
 8001ca8:	2000      	movs	r0, #0
 8001caa:	e7db      	b.n	8001c64 <__ssputs_r+0x58>
 8001cac:	462a      	mov	r2, r5
 8001cae:	f000 fba5 	bl	80023fc <_realloc_r>
 8001cb2:	4606      	mov	r6, r0
 8001cb4:	2800      	cmp	r0, #0
 8001cb6:	d1e1      	bne.n	8001c7c <__ssputs_r+0x70>
 8001cb8:	6921      	ldr	r1, [r4, #16]
 8001cba:	4650      	mov	r0, sl
 8001cbc:	f000 fabe 	bl	800223c <_free_r>
 8001cc0:	e7c7      	b.n	8001c52 <__ssputs_r+0x46>
	...

08001cc4 <_svfiprintf_r>:
 8001cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001cc8:	4698      	mov	r8, r3
 8001cca:	898b      	ldrh	r3, [r1, #12]
 8001ccc:	061b      	lsls	r3, r3, #24
 8001cce:	b09d      	sub	sp, #116	; 0x74
 8001cd0:	4607      	mov	r7, r0
 8001cd2:	460d      	mov	r5, r1
 8001cd4:	4614      	mov	r4, r2
 8001cd6:	d50e      	bpl.n	8001cf6 <_svfiprintf_r+0x32>
 8001cd8:	690b      	ldr	r3, [r1, #16]
 8001cda:	b963      	cbnz	r3, 8001cf6 <_svfiprintf_r+0x32>
 8001cdc:	2140      	movs	r1, #64	; 0x40
 8001cde:	f000 fb19 	bl	8002314 <_malloc_r>
 8001ce2:	6028      	str	r0, [r5, #0]
 8001ce4:	6128      	str	r0, [r5, #16]
 8001ce6:	b920      	cbnz	r0, 8001cf2 <_svfiprintf_r+0x2e>
 8001ce8:	230c      	movs	r3, #12
 8001cea:	603b      	str	r3, [r7, #0]
 8001cec:	f04f 30ff 	mov.w	r0, #4294967295
 8001cf0:	e0d1      	b.n	8001e96 <_svfiprintf_r+0x1d2>
 8001cf2:	2340      	movs	r3, #64	; 0x40
 8001cf4:	616b      	str	r3, [r5, #20]
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	9309      	str	r3, [sp, #36]	; 0x24
 8001cfa:	2320      	movs	r3, #32
 8001cfc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001d00:	f8cd 800c 	str.w	r8, [sp, #12]
 8001d04:	2330      	movs	r3, #48	; 0x30
 8001d06:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8001eb0 <_svfiprintf_r+0x1ec>
 8001d0a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001d0e:	f04f 0901 	mov.w	r9, #1
 8001d12:	4623      	mov	r3, r4
 8001d14:	469a      	mov	sl, r3
 8001d16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001d1a:	b10a      	cbz	r2, 8001d20 <_svfiprintf_r+0x5c>
 8001d1c:	2a25      	cmp	r2, #37	; 0x25
 8001d1e:	d1f9      	bne.n	8001d14 <_svfiprintf_r+0x50>
 8001d20:	ebba 0b04 	subs.w	fp, sl, r4
 8001d24:	d00b      	beq.n	8001d3e <_svfiprintf_r+0x7a>
 8001d26:	465b      	mov	r3, fp
 8001d28:	4622      	mov	r2, r4
 8001d2a:	4629      	mov	r1, r5
 8001d2c:	4638      	mov	r0, r7
 8001d2e:	f7ff ff6d 	bl	8001c0c <__ssputs_r>
 8001d32:	3001      	adds	r0, #1
 8001d34:	f000 80aa 	beq.w	8001e8c <_svfiprintf_r+0x1c8>
 8001d38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001d3a:	445a      	add	r2, fp
 8001d3c:	9209      	str	r2, [sp, #36]	; 0x24
 8001d3e:	f89a 3000 	ldrb.w	r3, [sl]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f000 80a2 	beq.w	8001e8c <_svfiprintf_r+0x1c8>
 8001d48:	2300      	movs	r3, #0
 8001d4a:	f04f 32ff 	mov.w	r2, #4294967295
 8001d4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001d52:	f10a 0a01 	add.w	sl, sl, #1
 8001d56:	9304      	str	r3, [sp, #16]
 8001d58:	9307      	str	r3, [sp, #28]
 8001d5a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001d5e:	931a      	str	r3, [sp, #104]	; 0x68
 8001d60:	4654      	mov	r4, sl
 8001d62:	2205      	movs	r2, #5
 8001d64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001d68:	4851      	ldr	r0, [pc, #324]	; (8001eb0 <_svfiprintf_r+0x1ec>)
 8001d6a:	f7fe fa39 	bl	80001e0 <memchr>
 8001d6e:	9a04      	ldr	r2, [sp, #16]
 8001d70:	b9d8      	cbnz	r0, 8001daa <_svfiprintf_r+0xe6>
 8001d72:	06d0      	lsls	r0, r2, #27
 8001d74:	bf44      	itt	mi
 8001d76:	2320      	movmi	r3, #32
 8001d78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001d7c:	0711      	lsls	r1, r2, #28
 8001d7e:	bf44      	itt	mi
 8001d80:	232b      	movmi	r3, #43	; 0x2b
 8001d82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001d86:	f89a 3000 	ldrb.w	r3, [sl]
 8001d8a:	2b2a      	cmp	r3, #42	; 0x2a
 8001d8c:	d015      	beq.n	8001dba <_svfiprintf_r+0xf6>
 8001d8e:	9a07      	ldr	r2, [sp, #28]
 8001d90:	4654      	mov	r4, sl
 8001d92:	2000      	movs	r0, #0
 8001d94:	f04f 0c0a 	mov.w	ip, #10
 8001d98:	4621      	mov	r1, r4
 8001d9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001d9e:	3b30      	subs	r3, #48	; 0x30
 8001da0:	2b09      	cmp	r3, #9
 8001da2:	d94e      	bls.n	8001e42 <_svfiprintf_r+0x17e>
 8001da4:	b1b0      	cbz	r0, 8001dd4 <_svfiprintf_r+0x110>
 8001da6:	9207      	str	r2, [sp, #28]
 8001da8:	e014      	b.n	8001dd4 <_svfiprintf_r+0x110>
 8001daa:	eba0 0308 	sub.w	r3, r0, r8
 8001dae:	fa09 f303 	lsl.w	r3, r9, r3
 8001db2:	4313      	orrs	r3, r2
 8001db4:	9304      	str	r3, [sp, #16]
 8001db6:	46a2      	mov	sl, r4
 8001db8:	e7d2      	b.n	8001d60 <_svfiprintf_r+0x9c>
 8001dba:	9b03      	ldr	r3, [sp, #12]
 8001dbc:	1d19      	adds	r1, r3, #4
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	9103      	str	r1, [sp, #12]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	bfbb      	ittet	lt
 8001dc6:	425b      	neglt	r3, r3
 8001dc8:	f042 0202 	orrlt.w	r2, r2, #2
 8001dcc:	9307      	strge	r3, [sp, #28]
 8001dce:	9307      	strlt	r3, [sp, #28]
 8001dd0:	bfb8      	it	lt
 8001dd2:	9204      	strlt	r2, [sp, #16]
 8001dd4:	7823      	ldrb	r3, [r4, #0]
 8001dd6:	2b2e      	cmp	r3, #46	; 0x2e
 8001dd8:	d10c      	bne.n	8001df4 <_svfiprintf_r+0x130>
 8001dda:	7863      	ldrb	r3, [r4, #1]
 8001ddc:	2b2a      	cmp	r3, #42	; 0x2a
 8001dde:	d135      	bne.n	8001e4c <_svfiprintf_r+0x188>
 8001de0:	9b03      	ldr	r3, [sp, #12]
 8001de2:	1d1a      	adds	r2, r3, #4
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	9203      	str	r2, [sp, #12]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	bfb8      	it	lt
 8001dec:	f04f 33ff 	movlt.w	r3, #4294967295
 8001df0:	3402      	adds	r4, #2
 8001df2:	9305      	str	r3, [sp, #20]
 8001df4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8001ec0 <_svfiprintf_r+0x1fc>
 8001df8:	7821      	ldrb	r1, [r4, #0]
 8001dfa:	2203      	movs	r2, #3
 8001dfc:	4650      	mov	r0, sl
 8001dfe:	f7fe f9ef 	bl	80001e0 <memchr>
 8001e02:	b140      	cbz	r0, 8001e16 <_svfiprintf_r+0x152>
 8001e04:	2340      	movs	r3, #64	; 0x40
 8001e06:	eba0 000a 	sub.w	r0, r0, sl
 8001e0a:	fa03 f000 	lsl.w	r0, r3, r0
 8001e0e:	9b04      	ldr	r3, [sp, #16]
 8001e10:	4303      	orrs	r3, r0
 8001e12:	3401      	adds	r4, #1
 8001e14:	9304      	str	r3, [sp, #16]
 8001e16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001e1a:	4826      	ldr	r0, [pc, #152]	; (8001eb4 <_svfiprintf_r+0x1f0>)
 8001e1c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001e20:	2206      	movs	r2, #6
 8001e22:	f7fe f9dd 	bl	80001e0 <memchr>
 8001e26:	2800      	cmp	r0, #0
 8001e28:	d038      	beq.n	8001e9c <_svfiprintf_r+0x1d8>
 8001e2a:	4b23      	ldr	r3, [pc, #140]	; (8001eb8 <_svfiprintf_r+0x1f4>)
 8001e2c:	bb1b      	cbnz	r3, 8001e76 <_svfiprintf_r+0x1b2>
 8001e2e:	9b03      	ldr	r3, [sp, #12]
 8001e30:	3307      	adds	r3, #7
 8001e32:	f023 0307 	bic.w	r3, r3, #7
 8001e36:	3308      	adds	r3, #8
 8001e38:	9303      	str	r3, [sp, #12]
 8001e3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001e3c:	4433      	add	r3, r6
 8001e3e:	9309      	str	r3, [sp, #36]	; 0x24
 8001e40:	e767      	b.n	8001d12 <_svfiprintf_r+0x4e>
 8001e42:	fb0c 3202 	mla	r2, ip, r2, r3
 8001e46:	460c      	mov	r4, r1
 8001e48:	2001      	movs	r0, #1
 8001e4a:	e7a5      	b.n	8001d98 <_svfiprintf_r+0xd4>
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	3401      	adds	r4, #1
 8001e50:	9305      	str	r3, [sp, #20]
 8001e52:	4619      	mov	r1, r3
 8001e54:	f04f 0c0a 	mov.w	ip, #10
 8001e58:	4620      	mov	r0, r4
 8001e5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001e5e:	3a30      	subs	r2, #48	; 0x30
 8001e60:	2a09      	cmp	r2, #9
 8001e62:	d903      	bls.n	8001e6c <_svfiprintf_r+0x1a8>
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d0c5      	beq.n	8001df4 <_svfiprintf_r+0x130>
 8001e68:	9105      	str	r1, [sp, #20]
 8001e6a:	e7c3      	b.n	8001df4 <_svfiprintf_r+0x130>
 8001e6c:	fb0c 2101 	mla	r1, ip, r1, r2
 8001e70:	4604      	mov	r4, r0
 8001e72:	2301      	movs	r3, #1
 8001e74:	e7f0      	b.n	8001e58 <_svfiprintf_r+0x194>
 8001e76:	ab03      	add	r3, sp, #12
 8001e78:	9300      	str	r3, [sp, #0]
 8001e7a:	462a      	mov	r2, r5
 8001e7c:	4b0f      	ldr	r3, [pc, #60]	; (8001ebc <_svfiprintf_r+0x1f8>)
 8001e7e:	a904      	add	r1, sp, #16
 8001e80:	4638      	mov	r0, r7
 8001e82:	f3af 8000 	nop.w
 8001e86:	1c42      	adds	r2, r0, #1
 8001e88:	4606      	mov	r6, r0
 8001e8a:	d1d6      	bne.n	8001e3a <_svfiprintf_r+0x176>
 8001e8c:	89ab      	ldrh	r3, [r5, #12]
 8001e8e:	065b      	lsls	r3, r3, #25
 8001e90:	f53f af2c 	bmi.w	8001cec <_svfiprintf_r+0x28>
 8001e94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001e96:	b01d      	add	sp, #116	; 0x74
 8001e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e9c:	ab03      	add	r3, sp, #12
 8001e9e:	9300      	str	r3, [sp, #0]
 8001ea0:	462a      	mov	r2, r5
 8001ea2:	4b06      	ldr	r3, [pc, #24]	; (8001ebc <_svfiprintf_r+0x1f8>)
 8001ea4:	a904      	add	r1, sp, #16
 8001ea6:	4638      	mov	r0, r7
 8001ea8:	f000 f87a 	bl	8001fa0 <_printf_i>
 8001eac:	e7eb      	b.n	8001e86 <_svfiprintf_r+0x1c2>
 8001eae:	bf00      	nop
 8001eb0:	080024e4 	.word	0x080024e4
 8001eb4:	080024ee 	.word	0x080024ee
 8001eb8:	00000000 	.word	0x00000000
 8001ebc:	08001c0d 	.word	0x08001c0d
 8001ec0:	080024ea 	.word	0x080024ea

08001ec4 <_printf_common>:
 8001ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ec8:	4616      	mov	r6, r2
 8001eca:	4699      	mov	r9, r3
 8001ecc:	688a      	ldr	r2, [r1, #8]
 8001ece:	690b      	ldr	r3, [r1, #16]
 8001ed0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	bfb8      	it	lt
 8001ed8:	4613      	movlt	r3, r2
 8001eda:	6033      	str	r3, [r6, #0]
 8001edc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001ee0:	4607      	mov	r7, r0
 8001ee2:	460c      	mov	r4, r1
 8001ee4:	b10a      	cbz	r2, 8001eea <_printf_common+0x26>
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	6033      	str	r3, [r6, #0]
 8001eea:	6823      	ldr	r3, [r4, #0]
 8001eec:	0699      	lsls	r1, r3, #26
 8001eee:	bf42      	ittt	mi
 8001ef0:	6833      	ldrmi	r3, [r6, #0]
 8001ef2:	3302      	addmi	r3, #2
 8001ef4:	6033      	strmi	r3, [r6, #0]
 8001ef6:	6825      	ldr	r5, [r4, #0]
 8001ef8:	f015 0506 	ands.w	r5, r5, #6
 8001efc:	d106      	bne.n	8001f0c <_printf_common+0x48>
 8001efe:	f104 0a19 	add.w	sl, r4, #25
 8001f02:	68e3      	ldr	r3, [r4, #12]
 8001f04:	6832      	ldr	r2, [r6, #0]
 8001f06:	1a9b      	subs	r3, r3, r2
 8001f08:	42ab      	cmp	r3, r5
 8001f0a:	dc26      	bgt.n	8001f5a <_printf_common+0x96>
 8001f0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001f10:	1e13      	subs	r3, r2, #0
 8001f12:	6822      	ldr	r2, [r4, #0]
 8001f14:	bf18      	it	ne
 8001f16:	2301      	movne	r3, #1
 8001f18:	0692      	lsls	r2, r2, #26
 8001f1a:	d42b      	bmi.n	8001f74 <_printf_common+0xb0>
 8001f1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001f20:	4649      	mov	r1, r9
 8001f22:	4638      	mov	r0, r7
 8001f24:	47c0      	blx	r8
 8001f26:	3001      	adds	r0, #1
 8001f28:	d01e      	beq.n	8001f68 <_printf_common+0xa4>
 8001f2a:	6823      	ldr	r3, [r4, #0]
 8001f2c:	68e5      	ldr	r5, [r4, #12]
 8001f2e:	6832      	ldr	r2, [r6, #0]
 8001f30:	f003 0306 	and.w	r3, r3, #6
 8001f34:	2b04      	cmp	r3, #4
 8001f36:	bf08      	it	eq
 8001f38:	1aad      	subeq	r5, r5, r2
 8001f3a:	68a3      	ldr	r3, [r4, #8]
 8001f3c:	6922      	ldr	r2, [r4, #16]
 8001f3e:	bf0c      	ite	eq
 8001f40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001f44:	2500      	movne	r5, #0
 8001f46:	4293      	cmp	r3, r2
 8001f48:	bfc4      	itt	gt
 8001f4a:	1a9b      	subgt	r3, r3, r2
 8001f4c:	18ed      	addgt	r5, r5, r3
 8001f4e:	2600      	movs	r6, #0
 8001f50:	341a      	adds	r4, #26
 8001f52:	42b5      	cmp	r5, r6
 8001f54:	d11a      	bne.n	8001f8c <_printf_common+0xc8>
 8001f56:	2000      	movs	r0, #0
 8001f58:	e008      	b.n	8001f6c <_printf_common+0xa8>
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	4652      	mov	r2, sl
 8001f5e:	4649      	mov	r1, r9
 8001f60:	4638      	mov	r0, r7
 8001f62:	47c0      	blx	r8
 8001f64:	3001      	adds	r0, #1
 8001f66:	d103      	bne.n	8001f70 <_printf_common+0xac>
 8001f68:	f04f 30ff 	mov.w	r0, #4294967295
 8001f6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f70:	3501      	adds	r5, #1
 8001f72:	e7c6      	b.n	8001f02 <_printf_common+0x3e>
 8001f74:	18e1      	adds	r1, r4, r3
 8001f76:	1c5a      	adds	r2, r3, #1
 8001f78:	2030      	movs	r0, #48	; 0x30
 8001f7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001f7e:	4422      	add	r2, r4
 8001f80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001f84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001f88:	3302      	adds	r3, #2
 8001f8a:	e7c7      	b.n	8001f1c <_printf_common+0x58>
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	4622      	mov	r2, r4
 8001f90:	4649      	mov	r1, r9
 8001f92:	4638      	mov	r0, r7
 8001f94:	47c0      	blx	r8
 8001f96:	3001      	adds	r0, #1
 8001f98:	d0e6      	beq.n	8001f68 <_printf_common+0xa4>
 8001f9a:	3601      	adds	r6, #1
 8001f9c:	e7d9      	b.n	8001f52 <_printf_common+0x8e>
	...

08001fa0 <_printf_i>:
 8001fa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001fa4:	7e0f      	ldrb	r7, [r1, #24]
 8001fa6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001fa8:	2f78      	cmp	r7, #120	; 0x78
 8001faa:	4691      	mov	r9, r2
 8001fac:	4680      	mov	r8, r0
 8001fae:	460c      	mov	r4, r1
 8001fb0:	469a      	mov	sl, r3
 8001fb2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001fb6:	d807      	bhi.n	8001fc8 <_printf_i+0x28>
 8001fb8:	2f62      	cmp	r7, #98	; 0x62
 8001fba:	d80a      	bhi.n	8001fd2 <_printf_i+0x32>
 8001fbc:	2f00      	cmp	r7, #0
 8001fbe:	f000 80d8 	beq.w	8002172 <_printf_i+0x1d2>
 8001fc2:	2f58      	cmp	r7, #88	; 0x58
 8001fc4:	f000 80a3 	beq.w	800210e <_printf_i+0x16e>
 8001fc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001fcc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001fd0:	e03a      	b.n	8002048 <_printf_i+0xa8>
 8001fd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001fd6:	2b15      	cmp	r3, #21
 8001fd8:	d8f6      	bhi.n	8001fc8 <_printf_i+0x28>
 8001fda:	a101      	add	r1, pc, #4	; (adr r1, 8001fe0 <_printf_i+0x40>)
 8001fdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001fe0:	08002039 	.word	0x08002039
 8001fe4:	0800204d 	.word	0x0800204d
 8001fe8:	08001fc9 	.word	0x08001fc9
 8001fec:	08001fc9 	.word	0x08001fc9
 8001ff0:	08001fc9 	.word	0x08001fc9
 8001ff4:	08001fc9 	.word	0x08001fc9
 8001ff8:	0800204d 	.word	0x0800204d
 8001ffc:	08001fc9 	.word	0x08001fc9
 8002000:	08001fc9 	.word	0x08001fc9
 8002004:	08001fc9 	.word	0x08001fc9
 8002008:	08001fc9 	.word	0x08001fc9
 800200c:	08002159 	.word	0x08002159
 8002010:	0800207d 	.word	0x0800207d
 8002014:	0800213b 	.word	0x0800213b
 8002018:	08001fc9 	.word	0x08001fc9
 800201c:	08001fc9 	.word	0x08001fc9
 8002020:	0800217b 	.word	0x0800217b
 8002024:	08001fc9 	.word	0x08001fc9
 8002028:	0800207d 	.word	0x0800207d
 800202c:	08001fc9 	.word	0x08001fc9
 8002030:	08001fc9 	.word	0x08001fc9
 8002034:	08002143 	.word	0x08002143
 8002038:	682b      	ldr	r3, [r5, #0]
 800203a:	1d1a      	adds	r2, r3, #4
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	602a      	str	r2, [r5, #0]
 8002040:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002044:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002048:	2301      	movs	r3, #1
 800204a:	e0a3      	b.n	8002194 <_printf_i+0x1f4>
 800204c:	6820      	ldr	r0, [r4, #0]
 800204e:	6829      	ldr	r1, [r5, #0]
 8002050:	0606      	lsls	r6, r0, #24
 8002052:	f101 0304 	add.w	r3, r1, #4
 8002056:	d50a      	bpl.n	800206e <_printf_i+0xce>
 8002058:	680e      	ldr	r6, [r1, #0]
 800205a:	602b      	str	r3, [r5, #0]
 800205c:	2e00      	cmp	r6, #0
 800205e:	da03      	bge.n	8002068 <_printf_i+0xc8>
 8002060:	232d      	movs	r3, #45	; 0x2d
 8002062:	4276      	negs	r6, r6
 8002064:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002068:	485e      	ldr	r0, [pc, #376]	; (80021e4 <_printf_i+0x244>)
 800206a:	230a      	movs	r3, #10
 800206c:	e019      	b.n	80020a2 <_printf_i+0x102>
 800206e:	680e      	ldr	r6, [r1, #0]
 8002070:	602b      	str	r3, [r5, #0]
 8002072:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002076:	bf18      	it	ne
 8002078:	b236      	sxthne	r6, r6
 800207a:	e7ef      	b.n	800205c <_printf_i+0xbc>
 800207c:	682b      	ldr	r3, [r5, #0]
 800207e:	6820      	ldr	r0, [r4, #0]
 8002080:	1d19      	adds	r1, r3, #4
 8002082:	6029      	str	r1, [r5, #0]
 8002084:	0601      	lsls	r1, r0, #24
 8002086:	d501      	bpl.n	800208c <_printf_i+0xec>
 8002088:	681e      	ldr	r6, [r3, #0]
 800208a:	e002      	b.n	8002092 <_printf_i+0xf2>
 800208c:	0646      	lsls	r6, r0, #25
 800208e:	d5fb      	bpl.n	8002088 <_printf_i+0xe8>
 8002090:	881e      	ldrh	r6, [r3, #0]
 8002092:	4854      	ldr	r0, [pc, #336]	; (80021e4 <_printf_i+0x244>)
 8002094:	2f6f      	cmp	r7, #111	; 0x6f
 8002096:	bf0c      	ite	eq
 8002098:	2308      	moveq	r3, #8
 800209a:	230a      	movne	r3, #10
 800209c:	2100      	movs	r1, #0
 800209e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80020a2:	6865      	ldr	r5, [r4, #4]
 80020a4:	60a5      	str	r5, [r4, #8]
 80020a6:	2d00      	cmp	r5, #0
 80020a8:	bfa2      	ittt	ge
 80020aa:	6821      	ldrge	r1, [r4, #0]
 80020ac:	f021 0104 	bicge.w	r1, r1, #4
 80020b0:	6021      	strge	r1, [r4, #0]
 80020b2:	b90e      	cbnz	r6, 80020b8 <_printf_i+0x118>
 80020b4:	2d00      	cmp	r5, #0
 80020b6:	d04d      	beq.n	8002154 <_printf_i+0x1b4>
 80020b8:	4615      	mov	r5, r2
 80020ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80020be:	fb03 6711 	mls	r7, r3, r1, r6
 80020c2:	5dc7      	ldrb	r7, [r0, r7]
 80020c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80020c8:	4637      	mov	r7, r6
 80020ca:	42bb      	cmp	r3, r7
 80020cc:	460e      	mov	r6, r1
 80020ce:	d9f4      	bls.n	80020ba <_printf_i+0x11a>
 80020d0:	2b08      	cmp	r3, #8
 80020d2:	d10b      	bne.n	80020ec <_printf_i+0x14c>
 80020d4:	6823      	ldr	r3, [r4, #0]
 80020d6:	07de      	lsls	r6, r3, #31
 80020d8:	d508      	bpl.n	80020ec <_printf_i+0x14c>
 80020da:	6923      	ldr	r3, [r4, #16]
 80020dc:	6861      	ldr	r1, [r4, #4]
 80020de:	4299      	cmp	r1, r3
 80020e0:	bfde      	ittt	le
 80020e2:	2330      	movle	r3, #48	; 0x30
 80020e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80020e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80020ec:	1b52      	subs	r2, r2, r5
 80020ee:	6122      	str	r2, [r4, #16]
 80020f0:	f8cd a000 	str.w	sl, [sp]
 80020f4:	464b      	mov	r3, r9
 80020f6:	aa03      	add	r2, sp, #12
 80020f8:	4621      	mov	r1, r4
 80020fa:	4640      	mov	r0, r8
 80020fc:	f7ff fee2 	bl	8001ec4 <_printf_common>
 8002100:	3001      	adds	r0, #1
 8002102:	d14c      	bne.n	800219e <_printf_i+0x1fe>
 8002104:	f04f 30ff 	mov.w	r0, #4294967295
 8002108:	b004      	add	sp, #16
 800210a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800210e:	4835      	ldr	r0, [pc, #212]	; (80021e4 <_printf_i+0x244>)
 8002110:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002114:	6829      	ldr	r1, [r5, #0]
 8002116:	6823      	ldr	r3, [r4, #0]
 8002118:	f851 6b04 	ldr.w	r6, [r1], #4
 800211c:	6029      	str	r1, [r5, #0]
 800211e:	061d      	lsls	r5, r3, #24
 8002120:	d514      	bpl.n	800214c <_printf_i+0x1ac>
 8002122:	07df      	lsls	r7, r3, #31
 8002124:	bf44      	itt	mi
 8002126:	f043 0320 	orrmi.w	r3, r3, #32
 800212a:	6023      	strmi	r3, [r4, #0]
 800212c:	b91e      	cbnz	r6, 8002136 <_printf_i+0x196>
 800212e:	6823      	ldr	r3, [r4, #0]
 8002130:	f023 0320 	bic.w	r3, r3, #32
 8002134:	6023      	str	r3, [r4, #0]
 8002136:	2310      	movs	r3, #16
 8002138:	e7b0      	b.n	800209c <_printf_i+0xfc>
 800213a:	6823      	ldr	r3, [r4, #0]
 800213c:	f043 0320 	orr.w	r3, r3, #32
 8002140:	6023      	str	r3, [r4, #0]
 8002142:	2378      	movs	r3, #120	; 0x78
 8002144:	4828      	ldr	r0, [pc, #160]	; (80021e8 <_printf_i+0x248>)
 8002146:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800214a:	e7e3      	b.n	8002114 <_printf_i+0x174>
 800214c:	0659      	lsls	r1, r3, #25
 800214e:	bf48      	it	mi
 8002150:	b2b6      	uxthmi	r6, r6
 8002152:	e7e6      	b.n	8002122 <_printf_i+0x182>
 8002154:	4615      	mov	r5, r2
 8002156:	e7bb      	b.n	80020d0 <_printf_i+0x130>
 8002158:	682b      	ldr	r3, [r5, #0]
 800215a:	6826      	ldr	r6, [r4, #0]
 800215c:	6961      	ldr	r1, [r4, #20]
 800215e:	1d18      	adds	r0, r3, #4
 8002160:	6028      	str	r0, [r5, #0]
 8002162:	0635      	lsls	r5, r6, #24
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	d501      	bpl.n	800216c <_printf_i+0x1cc>
 8002168:	6019      	str	r1, [r3, #0]
 800216a:	e002      	b.n	8002172 <_printf_i+0x1d2>
 800216c:	0670      	lsls	r0, r6, #25
 800216e:	d5fb      	bpl.n	8002168 <_printf_i+0x1c8>
 8002170:	8019      	strh	r1, [r3, #0]
 8002172:	2300      	movs	r3, #0
 8002174:	6123      	str	r3, [r4, #16]
 8002176:	4615      	mov	r5, r2
 8002178:	e7ba      	b.n	80020f0 <_printf_i+0x150>
 800217a:	682b      	ldr	r3, [r5, #0]
 800217c:	1d1a      	adds	r2, r3, #4
 800217e:	602a      	str	r2, [r5, #0]
 8002180:	681d      	ldr	r5, [r3, #0]
 8002182:	6862      	ldr	r2, [r4, #4]
 8002184:	2100      	movs	r1, #0
 8002186:	4628      	mov	r0, r5
 8002188:	f7fe f82a 	bl	80001e0 <memchr>
 800218c:	b108      	cbz	r0, 8002192 <_printf_i+0x1f2>
 800218e:	1b40      	subs	r0, r0, r5
 8002190:	6060      	str	r0, [r4, #4]
 8002192:	6863      	ldr	r3, [r4, #4]
 8002194:	6123      	str	r3, [r4, #16]
 8002196:	2300      	movs	r3, #0
 8002198:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800219c:	e7a8      	b.n	80020f0 <_printf_i+0x150>
 800219e:	6923      	ldr	r3, [r4, #16]
 80021a0:	462a      	mov	r2, r5
 80021a2:	4649      	mov	r1, r9
 80021a4:	4640      	mov	r0, r8
 80021a6:	47d0      	blx	sl
 80021a8:	3001      	adds	r0, #1
 80021aa:	d0ab      	beq.n	8002104 <_printf_i+0x164>
 80021ac:	6823      	ldr	r3, [r4, #0]
 80021ae:	079b      	lsls	r3, r3, #30
 80021b0:	d413      	bmi.n	80021da <_printf_i+0x23a>
 80021b2:	68e0      	ldr	r0, [r4, #12]
 80021b4:	9b03      	ldr	r3, [sp, #12]
 80021b6:	4298      	cmp	r0, r3
 80021b8:	bfb8      	it	lt
 80021ba:	4618      	movlt	r0, r3
 80021bc:	e7a4      	b.n	8002108 <_printf_i+0x168>
 80021be:	2301      	movs	r3, #1
 80021c0:	4632      	mov	r2, r6
 80021c2:	4649      	mov	r1, r9
 80021c4:	4640      	mov	r0, r8
 80021c6:	47d0      	blx	sl
 80021c8:	3001      	adds	r0, #1
 80021ca:	d09b      	beq.n	8002104 <_printf_i+0x164>
 80021cc:	3501      	adds	r5, #1
 80021ce:	68e3      	ldr	r3, [r4, #12]
 80021d0:	9903      	ldr	r1, [sp, #12]
 80021d2:	1a5b      	subs	r3, r3, r1
 80021d4:	42ab      	cmp	r3, r5
 80021d6:	dcf2      	bgt.n	80021be <_printf_i+0x21e>
 80021d8:	e7eb      	b.n	80021b2 <_printf_i+0x212>
 80021da:	2500      	movs	r5, #0
 80021dc:	f104 0619 	add.w	r6, r4, #25
 80021e0:	e7f5      	b.n	80021ce <_printf_i+0x22e>
 80021e2:	bf00      	nop
 80021e4:	080024f5 	.word	0x080024f5
 80021e8:	08002506 	.word	0x08002506

080021ec <memcpy>:
 80021ec:	440a      	add	r2, r1
 80021ee:	4291      	cmp	r1, r2
 80021f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80021f4:	d100      	bne.n	80021f8 <memcpy+0xc>
 80021f6:	4770      	bx	lr
 80021f8:	b510      	push	{r4, lr}
 80021fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80021fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002202:	4291      	cmp	r1, r2
 8002204:	d1f9      	bne.n	80021fa <memcpy+0xe>
 8002206:	bd10      	pop	{r4, pc}

08002208 <memmove>:
 8002208:	4288      	cmp	r0, r1
 800220a:	b510      	push	{r4, lr}
 800220c:	eb01 0402 	add.w	r4, r1, r2
 8002210:	d902      	bls.n	8002218 <memmove+0x10>
 8002212:	4284      	cmp	r4, r0
 8002214:	4623      	mov	r3, r4
 8002216:	d807      	bhi.n	8002228 <memmove+0x20>
 8002218:	1e43      	subs	r3, r0, #1
 800221a:	42a1      	cmp	r1, r4
 800221c:	d008      	beq.n	8002230 <memmove+0x28>
 800221e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002222:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002226:	e7f8      	b.n	800221a <memmove+0x12>
 8002228:	4402      	add	r2, r0
 800222a:	4601      	mov	r1, r0
 800222c:	428a      	cmp	r2, r1
 800222e:	d100      	bne.n	8002232 <memmove+0x2a>
 8002230:	bd10      	pop	{r4, pc}
 8002232:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002236:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800223a:	e7f7      	b.n	800222c <memmove+0x24>

0800223c <_free_r>:
 800223c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800223e:	2900      	cmp	r1, #0
 8002240:	d044      	beq.n	80022cc <_free_r+0x90>
 8002242:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002246:	9001      	str	r0, [sp, #4]
 8002248:	2b00      	cmp	r3, #0
 800224a:	f1a1 0404 	sub.w	r4, r1, #4
 800224e:	bfb8      	it	lt
 8002250:	18e4      	addlt	r4, r4, r3
 8002252:	f000 f913 	bl	800247c <__malloc_lock>
 8002256:	4a1e      	ldr	r2, [pc, #120]	; (80022d0 <_free_r+0x94>)
 8002258:	9801      	ldr	r0, [sp, #4]
 800225a:	6813      	ldr	r3, [r2, #0]
 800225c:	b933      	cbnz	r3, 800226c <_free_r+0x30>
 800225e:	6063      	str	r3, [r4, #4]
 8002260:	6014      	str	r4, [r2, #0]
 8002262:	b003      	add	sp, #12
 8002264:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002268:	f000 b90e 	b.w	8002488 <__malloc_unlock>
 800226c:	42a3      	cmp	r3, r4
 800226e:	d908      	bls.n	8002282 <_free_r+0x46>
 8002270:	6825      	ldr	r5, [r4, #0]
 8002272:	1961      	adds	r1, r4, r5
 8002274:	428b      	cmp	r3, r1
 8002276:	bf01      	itttt	eq
 8002278:	6819      	ldreq	r1, [r3, #0]
 800227a:	685b      	ldreq	r3, [r3, #4]
 800227c:	1949      	addeq	r1, r1, r5
 800227e:	6021      	streq	r1, [r4, #0]
 8002280:	e7ed      	b.n	800225e <_free_r+0x22>
 8002282:	461a      	mov	r2, r3
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	b10b      	cbz	r3, 800228c <_free_r+0x50>
 8002288:	42a3      	cmp	r3, r4
 800228a:	d9fa      	bls.n	8002282 <_free_r+0x46>
 800228c:	6811      	ldr	r1, [r2, #0]
 800228e:	1855      	adds	r5, r2, r1
 8002290:	42a5      	cmp	r5, r4
 8002292:	d10b      	bne.n	80022ac <_free_r+0x70>
 8002294:	6824      	ldr	r4, [r4, #0]
 8002296:	4421      	add	r1, r4
 8002298:	1854      	adds	r4, r2, r1
 800229a:	42a3      	cmp	r3, r4
 800229c:	6011      	str	r1, [r2, #0]
 800229e:	d1e0      	bne.n	8002262 <_free_r+0x26>
 80022a0:	681c      	ldr	r4, [r3, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	6053      	str	r3, [r2, #4]
 80022a6:	4421      	add	r1, r4
 80022a8:	6011      	str	r1, [r2, #0]
 80022aa:	e7da      	b.n	8002262 <_free_r+0x26>
 80022ac:	d902      	bls.n	80022b4 <_free_r+0x78>
 80022ae:	230c      	movs	r3, #12
 80022b0:	6003      	str	r3, [r0, #0]
 80022b2:	e7d6      	b.n	8002262 <_free_r+0x26>
 80022b4:	6825      	ldr	r5, [r4, #0]
 80022b6:	1961      	adds	r1, r4, r5
 80022b8:	428b      	cmp	r3, r1
 80022ba:	bf04      	itt	eq
 80022bc:	6819      	ldreq	r1, [r3, #0]
 80022be:	685b      	ldreq	r3, [r3, #4]
 80022c0:	6063      	str	r3, [r4, #4]
 80022c2:	bf04      	itt	eq
 80022c4:	1949      	addeq	r1, r1, r5
 80022c6:	6021      	streq	r1, [r4, #0]
 80022c8:	6054      	str	r4, [r2, #4]
 80022ca:	e7ca      	b.n	8002262 <_free_r+0x26>
 80022cc:	b003      	add	sp, #12
 80022ce:	bd30      	pop	{r4, r5, pc}
 80022d0:	200000ac 	.word	0x200000ac

080022d4 <sbrk_aligned>:
 80022d4:	b570      	push	{r4, r5, r6, lr}
 80022d6:	4e0e      	ldr	r6, [pc, #56]	; (8002310 <sbrk_aligned+0x3c>)
 80022d8:	460c      	mov	r4, r1
 80022da:	6831      	ldr	r1, [r6, #0]
 80022dc:	4605      	mov	r5, r0
 80022de:	b911      	cbnz	r1, 80022e6 <sbrk_aligned+0x12>
 80022e0:	f000 f8bc 	bl	800245c <_sbrk_r>
 80022e4:	6030      	str	r0, [r6, #0]
 80022e6:	4621      	mov	r1, r4
 80022e8:	4628      	mov	r0, r5
 80022ea:	f000 f8b7 	bl	800245c <_sbrk_r>
 80022ee:	1c43      	adds	r3, r0, #1
 80022f0:	d00a      	beq.n	8002308 <sbrk_aligned+0x34>
 80022f2:	1cc4      	adds	r4, r0, #3
 80022f4:	f024 0403 	bic.w	r4, r4, #3
 80022f8:	42a0      	cmp	r0, r4
 80022fa:	d007      	beq.n	800230c <sbrk_aligned+0x38>
 80022fc:	1a21      	subs	r1, r4, r0
 80022fe:	4628      	mov	r0, r5
 8002300:	f000 f8ac 	bl	800245c <_sbrk_r>
 8002304:	3001      	adds	r0, #1
 8002306:	d101      	bne.n	800230c <sbrk_aligned+0x38>
 8002308:	f04f 34ff 	mov.w	r4, #4294967295
 800230c:	4620      	mov	r0, r4
 800230e:	bd70      	pop	{r4, r5, r6, pc}
 8002310:	200000b0 	.word	0x200000b0

08002314 <_malloc_r>:
 8002314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002318:	1ccd      	adds	r5, r1, #3
 800231a:	f025 0503 	bic.w	r5, r5, #3
 800231e:	3508      	adds	r5, #8
 8002320:	2d0c      	cmp	r5, #12
 8002322:	bf38      	it	cc
 8002324:	250c      	movcc	r5, #12
 8002326:	2d00      	cmp	r5, #0
 8002328:	4607      	mov	r7, r0
 800232a:	db01      	blt.n	8002330 <_malloc_r+0x1c>
 800232c:	42a9      	cmp	r1, r5
 800232e:	d905      	bls.n	800233c <_malloc_r+0x28>
 8002330:	230c      	movs	r3, #12
 8002332:	603b      	str	r3, [r7, #0]
 8002334:	2600      	movs	r6, #0
 8002336:	4630      	mov	r0, r6
 8002338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800233c:	4e2e      	ldr	r6, [pc, #184]	; (80023f8 <_malloc_r+0xe4>)
 800233e:	f000 f89d 	bl	800247c <__malloc_lock>
 8002342:	6833      	ldr	r3, [r6, #0]
 8002344:	461c      	mov	r4, r3
 8002346:	bb34      	cbnz	r4, 8002396 <_malloc_r+0x82>
 8002348:	4629      	mov	r1, r5
 800234a:	4638      	mov	r0, r7
 800234c:	f7ff ffc2 	bl	80022d4 <sbrk_aligned>
 8002350:	1c43      	adds	r3, r0, #1
 8002352:	4604      	mov	r4, r0
 8002354:	d14d      	bne.n	80023f2 <_malloc_r+0xde>
 8002356:	6834      	ldr	r4, [r6, #0]
 8002358:	4626      	mov	r6, r4
 800235a:	2e00      	cmp	r6, #0
 800235c:	d140      	bne.n	80023e0 <_malloc_r+0xcc>
 800235e:	6823      	ldr	r3, [r4, #0]
 8002360:	4631      	mov	r1, r6
 8002362:	4638      	mov	r0, r7
 8002364:	eb04 0803 	add.w	r8, r4, r3
 8002368:	f000 f878 	bl	800245c <_sbrk_r>
 800236c:	4580      	cmp	r8, r0
 800236e:	d13a      	bne.n	80023e6 <_malloc_r+0xd2>
 8002370:	6821      	ldr	r1, [r4, #0]
 8002372:	3503      	adds	r5, #3
 8002374:	1a6d      	subs	r5, r5, r1
 8002376:	f025 0503 	bic.w	r5, r5, #3
 800237a:	3508      	adds	r5, #8
 800237c:	2d0c      	cmp	r5, #12
 800237e:	bf38      	it	cc
 8002380:	250c      	movcc	r5, #12
 8002382:	4629      	mov	r1, r5
 8002384:	4638      	mov	r0, r7
 8002386:	f7ff ffa5 	bl	80022d4 <sbrk_aligned>
 800238a:	3001      	adds	r0, #1
 800238c:	d02b      	beq.n	80023e6 <_malloc_r+0xd2>
 800238e:	6823      	ldr	r3, [r4, #0]
 8002390:	442b      	add	r3, r5
 8002392:	6023      	str	r3, [r4, #0]
 8002394:	e00e      	b.n	80023b4 <_malloc_r+0xa0>
 8002396:	6822      	ldr	r2, [r4, #0]
 8002398:	1b52      	subs	r2, r2, r5
 800239a:	d41e      	bmi.n	80023da <_malloc_r+0xc6>
 800239c:	2a0b      	cmp	r2, #11
 800239e:	d916      	bls.n	80023ce <_malloc_r+0xba>
 80023a0:	1961      	adds	r1, r4, r5
 80023a2:	42a3      	cmp	r3, r4
 80023a4:	6025      	str	r5, [r4, #0]
 80023a6:	bf18      	it	ne
 80023a8:	6059      	strne	r1, [r3, #4]
 80023aa:	6863      	ldr	r3, [r4, #4]
 80023ac:	bf08      	it	eq
 80023ae:	6031      	streq	r1, [r6, #0]
 80023b0:	5162      	str	r2, [r4, r5]
 80023b2:	604b      	str	r3, [r1, #4]
 80023b4:	4638      	mov	r0, r7
 80023b6:	f104 060b 	add.w	r6, r4, #11
 80023ba:	f000 f865 	bl	8002488 <__malloc_unlock>
 80023be:	f026 0607 	bic.w	r6, r6, #7
 80023c2:	1d23      	adds	r3, r4, #4
 80023c4:	1af2      	subs	r2, r6, r3
 80023c6:	d0b6      	beq.n	8002336 <_malloc_r+0x22>
 80023c8:	1b9b      	subs	r3, r3, r6
 80023ca:	50a3      	str	r3, [r4, r2]
 80023cc:	e7b3      	b.n	8002336 <_malloc_r+0x22>
 80023ce:	6862      	ldr	r2, [r4, #4]
 80023d0:	42a3      	cmp	r3, r4
 80023d2:	bf0c      	ite	eq
 80023d4:	6032      	streq	r2, [r6, #0]
 80023d6:	605a      	strne	r2, [r3, #4]
 80023d8:	e7ec      	b.n	80023b4 <_malloc_r+0xa0>
 80023da:	4623      	mov	r3, r4
 80023dc:	6864      	ldr	r4, [r4, #4]
 80023de:	e7b2      	b.n	8002346 <_malloc_r+0x32>
 80023e0:	4634      	mov	r4, r6
 80023e2:	6876      	ldr	r6, [r6, #4]
 80023e4:	e7b9      	b.n	800235a <_malloc_r+0x46>
 80023e6:	230c      	movs	r3, #12
 80023e8:	603b      	str	r3, [r7, #0]
 80023ea:	4638      	mov	r0, r7
 80023ec:	f000 f84c 	bl	8002488 <__malloc_unlock>
 80023f0:	e7a1      	b.n	8002336 <_malloc_r+0x22>
 80023f2:	6025      	str	r5, [r4, #0]
 80023f4:	e7de      	b.n	80023b4 <_malloc_r+0xa0>
 80023f6:	bf00      	nop
 80023f8:	200000ac 	.word	0x200000ac

080023fc <_realloc_r>:
 80023fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002400:	4680      	mov	r8, r0
 8002402:	4614      	mov	r4, r2
 8002404:	460e      	mov	r6, r1
 8002406:	b921      	cbnz	r1, 8002412 <_realloc_r+0x16>
 8002408:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800240c:	4611      	mov	r1, r2
 800240e:	f7ff bf81 	b.w	8002314 <_malloc_r>
 8002412:	b92a      	cbnz	r2, 8002420 <_realloc_r+0x24>
 8002414:	f7ff ff12 	bl	800223c <_free_r>
 8002418:	4625      	mov	r5, r4
 800241a:	4628      	mov	r0, r5
 800241c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002420:	f000 f838 	bl	8002494 <_malloc_usable_size_r>
 8002424:	4284      	cmp	r4, r0
 8002426:	4607      	mov	r7, r0
 8002428:	d802      	bhi.n	8002430 <_realloc_r+0x34>
 800242a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800242e:	d812      	bhi.n	8002456 <_realloc_r+0x5a>
 8002430:	4621      	mov	r1, r4
 8002432:	4640      	mov	r0, r8
 8002434:	f7ff ff6e 	bl	8002314 <_malloc_r>
 8002438:	4605      	mov	r5, r0
 800243a:	2800      	cmp	r0, #0
 800243c:	d0ed      	beq.n	800241a <_realloc_r+0x1e>
 800243e:	42bc      	cmp	r4, r7
 8002440:	4622      	mov	r2, r4
 8002442:	4631      	mov	r1, r6
 8002444:	bf28      	it	cs
 8002446:	463a      	movcs	r2, r7
 8002448:	f7ff fed0 	bl	80021ec <memcpy>
 800244c:	4631      	mov	r1, r6
 800244e:	4640      	mov	r0, r8
 8002450:	f7ff fef4 	bl	800223c <_free_r>
 8002454:	e7e1      	b.n	800241a <_realloc_r+0x1e>
 8002456:	4635      	mov	r5, r6
 8002458:	e7df      	b.n	800241a <_realloc_r+0x1e>
	...

0800245c <_sbrk_r>:
 800245c:	b538      	push	{r3, r4, r5, lr}
 800245e:	4d06      	ldr	r5, [pc, #24]	; (8002478 <_sbrk_r+0x1c>)
 8002460:	2300      	movs	r3, #0
 8002462:	4604      	mov	r4, r0
 8002464:	4608      	mov	r0, r1
 8002466:	602b      	str	r3, [r5, #0]
 8002468:	f7fe fb66 	bl	8000b38 <_sbrk>
 800246c:	1c43      	adds	r3, r0, #1
 800246e:	d102      	bne.n	8002476 <_sbrk_r+0x1a>
 8002470:	682b      	ldr	r3, [r5, #0]
 8002472:	b103      	cbz	r3, 8002476 <_sbrk_r+0x1a>
 8002474:	6023      	str	r3, [r4, #0]
 8002476:	bd38      	pop	{r3, r4, r5, pc}
 8002478:	200000b4 	.word	0x200000b4

0800247c <__malloc_lock>:
 800247c:	4801      	ldr	r0, [pc, #4]	; (8002484 <__malloc_lock+0x8>)
 800247e:	f000 b811 	b.w	80024a4 <__retarget_lock_acquire_recursive>
 8002482:	bf00      	nop
 8002484:	200000b8 	.word	0x200000b8

08002488 <__malloc_unlock>:
 8002488:	4801      	ldr	r0, [pc, #4]	; (8002490 <__malloc_unlock+0x8>)
 800248a:	f000 b80c 	b.w	80024a6 <__retarget_lock_release_recursive>
 800248e:	bf00      	nop
 8002490:	200000b8 	.word	0x200000b8

08002494 <_malloc_usable_size_r>:
 8002494:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002498:	1f18      	subs	r0, r3, #4
 800249a:	2b00      	cmp	r3, #0
 800249c:	bfbc      	itt	lt
 800249e:	580b      	ldrlt	r3, [r1, r0]
 80024a0:	18c0      	addlt	r0, r0, r3
 80024a2:	4770      	bx	lr

080024a4 <__retarget_lock_acquire_recursive>:
 80024a4:	4770      	bx	lr

080024a6 <__retarget_lock_release_recursive>:
 80024a6:	4770      	bx	lr

080024a8 <_init>:
 80024a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024aa:	bf00      	nop
 80024ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024ae:	bc08      	pop	{r3}
 80024b0:	469e      	mov	lr, r3
 80024b2:	4770      	bx	lr

080024b4 <_fini>:
 80024b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024b6:	bf00      	nop
 80024b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024ba:	bc08      	pop	{r3}
 80024bc:	469e      	mov	lr, r3
 80024be:	4770      	bx	lr
