
02_GPIO_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002610  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080027b0  080027b0  000127b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002818  08002818  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002818  08002818  00012818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002820  08002820  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002820  08002820  00012820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002824  08002824  00012824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002828  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000070  08002898  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  08002898  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003eda  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001066  00000000  00000000  00023f7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000478  00000000  00000000  00024fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003d0  00000000  00000000  00025458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000153d9  00000000  00000000  00025828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005974  00000000  00000000  0003ac01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082963  00000000  00000000  00040575  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c2ed8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000013c8  00000000  00000000  000c2f28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002798 	.word	0x08002798

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08002798 	.word	0x08002798

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <LCD_STM32_Cmd>:
 */

#include "LCD_STM32.h"


void LCD_STM32_Cmd(uint8_t a){
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	71fb      	strb	r3, [r7, #7]
	E_OFF;
 800058e:	2200      	movs	r2, #0
 8000590:	2110      	movs	r1, #16
 8000592:	480c      	ldr	r0, [pc, #48]	; (80005c4 <LCD_STM32_Cmd+0x40>)
 8000594:	f001 f822 	bl	80015dc <HAL_GPIO_WritePin>
	E_ON;
 8000598:	2201      	movs	r2, #1
 800059a:	2110      	movs	r1, #16
 800059c:	4809      	ldr	r0, [pc, #36]	; (80005c4 <LCD_STM32_Cmd+0x40>)
 800059e:	f001 f81d 	bl	80015dc <HAL_GPIO_WritePin>
	LCD_STM32_DataBus(a);
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	4618      	mov	r0, r3
 80005a6:	f000 f80f 	bl	80005c8 <LCD_STM32_DataBus>
	HAL_Delay(2);
 80005aa:	2002      	movs	r0, #2
 80005ac:	f000 fd88 	bl	80010c0 <HAL_Delay>
	E_OFF;
 80005b0:	2200      	movs	r2, #0
 80005b2:	2110      	movs	r1, #16
 80005b4:	4803      	ldr	r0, [pc, #12]	; (80005c4 <LCD_STM32_Cmd+0x40>)
 80005b6:	f001 f811 	bl	80015dc <HAL_GPIO_WritePin>
}
 80005ba:	bf00      	nop
 80005bc:	3708      	adds	r7, #8
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	40020400 	.word	0x40020400

080005c8 <LCD_STM32_DataBus>:
void LCD_STM32_DataBus(uint8_t a){
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	71fb      	strb	r3, [r7, #7]
	// 0001
	if (a & 0x01){D4_ON;}
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	f003 0301 	and.w	r3, r3, #1
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d005      	beq.n	80005e8 <LCD_STM32_DataBus+0x20>
 80005dc:	2201      	movs	r2, #1
 80005de:	2180      	movs	r1, #128	; 0x80
 80005e0:	481e      	ldr	r0, [pc, #120]	; (800065c <LCD_STM32_DataBus+0x94>)
 80005e2:	f000 fffb 	bl	80015dc <HAL_GPIO_WritePin>
 80005e6:	e004      	b.n	80005f2 <LCD_STM32_DataBus+0x2a>
	else{D4_OFF;}
 80005e8:	2200      	movs	r2, #0
 80005ea:	2180      	movs	r1, #128	; 0x80
 80005ec:	481b      	ldr	r0, [pc, #108]	; (800065c <LCD_STM32_DataBus+0x94>)
 80005ee:	f000 fff5 	bl	80015dc <HAL_GPIO_WritePin>
	// 0010
	if (a & 0x02){D5_ON;}
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	f003 0302 	and.w	r3, r3, #2
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d005      	beq.n	8000608 <LCD_STM32_DataBus+0x40>
 80005fc:	2201      	movs	r2, #1
 80005fe:	2140      	movs	r1, #64	; 0x40
 8000600:	4817      	ldr	r0, [pc, #92]	; (8000660 <LCD_STM32_DataBus+0x98>)
 8000602:	f000 ffeb 	bl	80015dc <HAL_GPIO_WritePin>
 8000606:	e004      	b.n	8000612 <LCD_STM32_DataBus+0x4a>
	else{D5_OFF;}
 8000608:	2200      	movs	r2, #0
 800060a:	2140      	movs	r1, #64	; 0x40
 800060c:	4814      	ldr	r0, [pc, #80]	; (8000660 <LCD_STM32_DataBus+0x98>)
 800060e:	f000 ffe5 	bl	80015dc <HAL_GPIO_WritePin>
	// 0100
	if (a & 0x04){D6_ON;}
 8000612:	79fb      	ldrb	r3, [r7, #7]
 8000614:	f003 0304 	and.w	r3, r3, #4
 8000618:	2b00      	cmp	r3, #0
 800061a:	d005      	beq.n	8000628 <LCD_STM32_DataBus+0x60>
 800061c:	2201      	movs	r2, #1
 800061e:	2180      	movs	r1, #128	; 0x80
 8000620:	4810      	ldr	r0, [pc, #64]	; (8000664 <LCD_STM32_DataBus+0x9c>)
 8000622:	f000 ffdb 	bl	80015dc <HAL_GPIO_WritePin>
 8000626:	e004      	b.n	8000632 <LCD_STM32_DataBus+0x6a>
	else{D6_OFF;}
 8000628:	2200      	movs	r2, #0
 800062a:	2180      	movs	r1, #128	; 0x80
 800062c:	480d      	ldr	r0, [pc, #52]	; (8000664 <LCD_STM32_DataBus+0x9c>)
 800062e:	f000 ffd5 	bl	80015dc <HAL_GPIO_WritePin>
	// 1000
	if (a & 0x08){D7_ON;}
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	f003 0308 	and.w	r3, r3, #8
 8000638:	2b00      	cmp	r3, #0
 800063a:	d005      	beq.n	8000648 <LCD_STM32_DataBus+0x80>
 800063c:	2201      	movs	r2, #1
 800063e:	2140      	movs	r1, #64	; 0x40
 8000640:	4808      	ldr	r0, [pc, #32]	; (8000664 <LCD_STM32_DataBus+0x9c>)
 8000642:	f000 ffcb 	bl	80015dc <HAL_GPIO_WritePin>
	else{D7_OFF;}
}
 8000646:	e004      	b.n	8000652 <LCD_STM32_DataBus+0x8a>
	else{D7_OFF;}
 8000648:	2200      	movs	r2, #0
 800064a:	2140      	movs	r1, #64	; 0x40
 800064c:	4805      	ldr	r0, [pc, #20]	; (8000664 <LCD_STM32_DataBus+0x9c>)
 800064e:	f000 ffc5 	bl	80015dc <HAL_GPIO_WritePin>
}
 8000652:	bf00      	nop
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40020800 	.word	0x40020800
 8000660:	40020400 	.word	0x40020400
 8000664:	40020000 	.word	0x40020000

08000668 <LCD_STM32_Init>:
void LCD_STM32_Init(void){
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
	LCD_STM32_Cmd(0X03);
 800066c:	2003      	movs	r0, #3
 800066e:	f7ff ff89 	bl	8000584 <LCD_STM32_Cmd>
	LCD_STM32_Cmd(0X03);
 8000672:	2003      	movs	r0, #3
 8000674:	f7ff ff86 	bl	8000584 <LCD_STM32_Cmd>
	LCD_STM32_Cmd(0X03);
 8000678:	2003      	movs	r0, #3
 800067a:	f7ff ff83 	bl	8000584 <LCD_STM32_Cmd>
	LCD_STM32_Cmd(0X02);
 800067e:	2002      	movs	r0, #2
 8000680:	f7ff ff80 	bl	8000584 <LCD_STM32_Cmd>
	LCD_STM32_Cmd(0X02);
 8000684:	2002      	movs	r0, #2
 8000686:	f7ff ff7d 	bl	8000584 <LCD_STM32_Cmd>
	LCD_STM32_Cmd(0X08);
 800068a:	2008      	movs	r0, #8
 800068c:	f7ff ff7a 	bl	8000584 <LCD_STM32_Cmd>
	LCD_STM32_Cmd(0X00);
 8000690:	2000      	movs	r0, #0
 8000692:	f7ff ff77 	bl	8000584 <LCD_STM32_Cmd>
	LCD_STM32_Cmd(0X08);
 8000696:	2008      	movs	r0, #8
 8000698:	f7ff ff74 	bl	8000584 <LCD_STM32_Cmd>
	LCD_STM32_Cmd(0X00);
 800069c:	2000      	movs	r0, #0
 800069e:	f7ff ff71 	bl	8000584 <LCD_STM32_Cmd>
	LCD_STM32_Cmd(0X01);
 80006a2:	2001      	movs	r0, #1
 80006a4:	f7ff ff6e 	bl	8000584 <LCD_STM32_Cmd>
	LCD_STM32_Cmd(0X00);
 80006a8:	2000      	movs	r0, #0
 80006aa:	f7ff ff6b 	bl	8000584 <LCD_STM32_Cmd>
	LCD_STM32_Cmd(0X0D);
 80006ae:	200d      	movs	r0, #13
 80006b0:	f7ff ff68 	bl	8000584 <LCD_STM32_Cmd>
}
 80006b4:	bf00      	nop
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <LCD_STM32_Set_Cursor>:
void LCD_STM32_Set_Cursor(uint8_t x,Ubicacion y){
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	460a      	mov	r2, r1
 80006c2:	71fb      	strb	r3, [r7, #7]
 80006c4:	4613      	mov	r3, r2
 80006c6:	71bb      	strb	r3, [r7, #6]
	uint8_t m,n;

	RS_OFF;
 80006c8:	2200      	movs	r2, #0
 80006ca:	2120      	movs	r1, #32
 80006cc:	482a      	ldr	r0, [pc, #168]	; (8000778 <LCD_STM32_Set_Cursor+0xc0>)
 80006ce:	f000 ff85 	bl	80015dc <HAL_GPIO_WritePin>
	switch (y)
 80006d2:	79bb      	ldrb	r3, [r7, #6]
 80006d4:	2b03      	cmp	r3, #3
 80006d6:	d84b      	bhi.n	8000770 <LCD_STM32_Set_Cursor+0xb8>
 80006d8:	a201      	add	r2, pc, #4	; (adr r2, 80006e0 <LCD_STM32_Set_Cursor+0x28>)
 80006da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006de:	bf00      	nop
 80006e0:	080006f1 	.word	0x080006f1
 80006e4:	08000711 	.word	0x08000711
 80006e8:	08000731 	.word	0x08000731
 80006ec:	08000751 	.word	0x08000751
	{
		case Fila1:
				m=0x80+x;
 80006f0:	79fb      	ldrb	r3, [r7, #7]
 80006f2:	3b80      	subs	r3, #128	; 0x80
 80006f4:	73fb      	strb	r3, [r7, #15]
				n=(0x80+x)>>4;
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	3380      	adds	r3, #128	; 0x80
 80006fa:	111b      	asrs	r3, r3, #4
 80006fc:	73bb      	strb	r3, [r7, #14]
				LCD_STM32_Cmd(n);
 80006fe:	7bbb      	ldrb	r3, [r7, #14]
 8000700:	4618      	mov	r0, r3
 8000702:	f7ff ff3f 	bl	8000584 <LCD_STM32_Cmd>
				LCD_STM32_Cmd(m);
 8000706:	7bfb      	ldrb	r3, [r7, #15]
 8000708:	4618      	mov	r0, r3
 800070a:	f7ff ff3b 	bl	8000584 <LCD_STM32_Cmd>
		break;
 800070e:	e02f      	b.n	8000770 <LCD_STM32_Set_Cursor+0xb8>
		case Fila2:
				m=0xC0+x;
 8000710:	79fb      	ldrb	r3, [r7, #7]
 8000712:	3b40      	subs	r3, #64	; 0x40
 8000714:	73fb      	strb	r3, [r7, #15]
				n=(0XC0+x)>>4;
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	33c0      	adds	r3, #192	; 0xc0
 800071a:	111b      	asrs	r3, r3, #4
 800071c:	73bb      	strb	r3, [r7, #14]
				LCD_STM32_Cmd(n);
 800071e:	7bbb      	ldrb	r3, [r7, #14]
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff ff2f 	bl	8000584 <LCD_STM32_Cmd>
				LCD_STM32_Cmd(m);
 8000726:	7bfb      	ldrb	r3, [r7, #15]
 8000728:	4618      	mov	r0, r3
 800072a:	f7ff ff2b 	bl	8000584 <LCD_STM32_Cmd>
		break;
 800072e:	e01f      	b.n	8000770 <LCD_STM32_Set_Cursor+0xb8>
		case Fila3:
				m=0x94+x;
 8000730:	79fb      	ldrb	r3, [r7, #7]
 8000732:	3b6c      	subs	r3, #108	; 0x6c
 8000734:	73fb      	strb	r3, [r7, #15]
				n=(0x94+x)>>4;
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	3394      	adds	r3, #148	; 0x94
 800073a:	111b      	asrs	r3, r3, #4
 800073c:	73bb      	strb	r3, [r7, #14]
				LCD_STM32_Cmd(n);
 800073e:	7bbb      	ldrb	r3, [r7, #14]
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff ff1f 	bl	8000584 <LCD_STM32_Cmd>
				LCD_STM32_Cmd(m);
 8000746:	7bfb      	ldrb	r3, [r7, #15]
 8000748:	4618      	mov	r0, r3
 800074a:	f7ff ff1b 	bl	8000584 <LCD_STM32_Cmd>
		break;
 800074e:	e00f      	b.n	8000770 <LCD_STM32_Set_Cursor+0xb8>
		case Fila4:
				m=0xD4+x;
 8000750:	79fb      	ldrb	r3, [r7, #7]
 8000752:	3b2c      	subs	r3, #44	; 0x2c
 8000754:	73fb      	strb	r3, [r7, #15]
				n=(0xD4+x)>>4;
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	33d4      	adds	r3, #212	; 0xd4
 800075a:	111b      	asrs	r3, r3, #4
 800075c:	73bb      	strb	r3, [r7, #14]
				LCD_STM32_Cmd(n);
 800075e:	7bbb      	ldrb	r3, [r7, #14]
 8000760:	4618      	mov	r0, r3
 8000762:	f7ff ff0f 	bl	8000584 <LCD_STM32_Cmd>
				LCD_STM32_Cmd(m);
 8000766:	7bfb      	ldrb	r3, [r7, #15]
 8000768:	4618      	mov	r0, r3
 800076a:	f7ff ff0b 	bl	8000584 <LCD_STM32_Cmd>
		break;
 800076e:	bf00      	nop
	}

}
 8000770:	bf00      	nop
 8000772:	3710      	adds	r7, #16
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40020400 	.word	0x40020400

0800077c <LCD_STM32_Print_Char>:
void LCD_STM32_Print_Char(char c){
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	71fb      	strb	r3, [r7, #7]
	uint8_t m,n;
	m=c>>4;
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	091b      	lsrs	r3, r3, #4
 800078a:	73fb      	strb	r3, [r7, #15]
	n=c;
 800078c:	79fb      	ldrb	r3, [r7, #7]
 800078e:	73bb      	strb	r3, [r7, #14]
	RS_ON;
 8000790:	2201      	movs	r2, #1
 8000792:	2120      	movs	r1, #32
 8000794:	4807      	ldr	r0, [pc, #28]	; (80007b4 <LCD_STM32_Print_Char+0x38>)
 8000796:	f000 ff21 	bl	80015dc <HAL_GPIO_WritePin>
	LCD_STM32_Cmd(m);
 800079a:	7bfb      	ldrb	r3, [r7, #15]
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff fef1 	bl	8000584 <LCD_STM32_Cmd>
	LCD_STM32_Cmd(n);
 80007a2:	7bbb      	ldrb	r3, [r7, #14]
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff feed 	bl	8000584 <LCD_STM32_Cmd>
}
 80007aa:	bf00      	nop
 80007ac:	3710      	adds	r7, #16
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40020400 	.word	0x40020400

080007b8 <LCD_STM32_Print_String>:
void LCD_STM32_Print_String(char *c){
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
	char *ptr;
	ptr = c;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	60fb      	str	r3, [r7, #12]
	while(*ptr)
 80007c4:	e006      	b.n	80007d4 <LCD_STM32_Print_String+0x1c>
		LCD_STM32_Print_Char(*ptr++);
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	1c5a      	adds	r2, r3, #1
 80007ca:	60fa      	str	r2, [r7, #12]
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff ffd4 	bl	800077c <LCD_STM32_Print_Char>
	while(*ptr)
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d1f4      	bne.n	80007c6 <LCD_STM32_Print_String+0xe>
}
 80007dc:	bf00      	nop
 80007de:	bf00      	nop
 80007e0:	3710      	adds	r7, #16
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
	...

080007e8 <LCD_STM32_New_Char>:
void LCD_STM32_New_Char(uint8_t a,uint8_t b,uint8_t c,uint8_t d ,uint8_t e ,uint8_t f,uint8_t g,uint8_t h,uint8_t i){
 80007e8:	b590      	push	{r4, r7, lr}
 80007ea:	b085      	sub	sp, #20
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	4604      	mov	r4, r0
 80007f0:	4608      	mov	r0, r1
 80007f2:	4611      	mov	r1, r2
 80007f4:	461a      	mov	r2, r3
 80007f6:	4623      	mov	r3, r4
 80007f8:	71fb      	strb	r3, [r7, #7]
 80007fa:	4603      	mov	r3, r0
 80007fc:	71bb      	strb	r3, [r7, #6]
 80007fe:	460b      	mov	r3, r1
 8000800:	717b      	strb	r3, [r7, #5]
 8000802:	4613      	mov	r3, r2
 8000804:	713b      	strb	r3, [r7, #4]

	  uint8_t m,n;
		  switch(a){
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	2b03      	cmp	r3, #3
 800080a:	f000 812e 	beq.w	8000a6a <LCD_STM32_New_Char+0x282>
 800080e:	2b03      	cmp	r3, #3
 8000810:	f300 81b7 	bgt.w	8000b82 <LCD_STM32_New_Char+0x39a>
 8000814:	2b01      	cmp	r3, #1
 8000816:	d003      	beq.n	8000820 <LCD_STM32_New_Char+0x38>
 8000818:	2b02      	cmp	r3, #2
 800081a:	f000 808d 	beq.w	8000938 <LCD_STM32_New_Char+0x150>
			  break;
		  }



}
 800081e:	e1b0      	b.n	8000b82 <LCD_STM32_New_Char+0x39a>
			  LCD_STM32_Cmd(0x04);
 8000820:	2004      	movs	r0, #4
 8000822:	f7ff feaf 	bl	8000584 <LCD_STM32_Cmd>
			  LCD_STM32_Cmd(0x00);
 8000826:	2000      	movs	r0, #0
 8000828:	f7ff feac 	bl	8000584 <LCD_STM32_Cmd>
			  RS_ON;
 800082c:	2201      	movs	r2, #1
 800082e:	2120      	movs	r1, #32
 8000830:	48d6      	ldr	r0, [pc, #856]	; (8000b8c <LCD_STM32_New_Char+0x3a4>)
 8000832:	f000 fed3 	bl	80015dc <HAL_GPIO_WritePin>
			  m=b>>4;
 8000836:	79bb      	ldrb	r3, [r7, #6]
 8000838:	091b      	lsrs	r3, r3, #4
 800083a:	73fb      	strb	r3, [r7, #15]
			  n=b;
 800083c:	79bb      	ldrb	r3, [r7, #6]
 800083e:	73bb      	strb	r3, [r7, #14]
			  LCD_STM32_Cmd(m);
 8000840:	7bfb      	ldrb	r3, [r7, #15]
 8000842:	4618      	mov	r0, r3
 8000844:	f7ff fe9e 	bl	8000584 <LCD_STM32_Cmd>
			  LCD_STM32_Cmd(n);
 8000848:	7bbb      	ldrb	r3, [r7, #14]
 800084a:	4618      	mov	r0, r3
 800084c:	f7ff fe9a 	bl	8000584 <LCD_STM32_Cmd>
			  m=c>>4;
 8000850:	797b      	ldrb	r3, [r7, #5]
 8000852:	091b      	lsrs	r3, r3, #4
 8000854:	73fb      	strb	r3, [r7, #15]
			  n=c;
 8000856:	797b      	ldrb	r3, [r7, #5]
 8000858:	73bb      	strb	r3, [r7, #14]
			  LCD_STM32_Cmd(m);
 800085a:	7bfb      	ldrb	r3, [r7, #15]
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff fe91 	bl	8000584 <LCD_STM32_Cmd>
			  LCD_STM32_Cmd(n);
 8000862:	7bbb      	ldrb	r3, [r7, #14]
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff fe8d 	bl	8000584 <LCD_STM32_Cmd>
			  m=d>>4;
 800086a:	793b      	ldrb	r3, [r7, #4]
 800086c:	091b      	lsrs	r3, r3, #4
 800086e:	73fb      	strb	r3, [r7, #15]
			  n=d;
 8000870:	793b      	ldrb	r3, [r7, #4]
 8000872:	73bb      	strb	r3, [r7, #14]
			  LCD_STM32_Cmd(m);
 8000874:	7bfb      	ldrb	r3, [r7, #15]
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff fe84 	bl	8000584 <LCD_STM32_Cmd>
			  LCD_STM32_Cmd(n);
 800087c:	7bbb      	ldrb	r3, [r7, #14]
 800087e:	4618      	mov	r0, r3
 8000880:	f7ff fe80 	bl	8000584 <LCD_STM32_Cmd>
			  m=e>>4;
 8000884:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000888:	091b      	lsrs	r3, r3, #4
 800088a:	73fb      	strb	r3, [r7, #15]
			  n=e;
 800088c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000890:	73bb      	strb	r3, [r7, #14]
			  LCD_STM32_Cmd(m);
 8000892:	7bfb      	ldrb	r3, [r7, #15]
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff fe75 	bl	8000584 <LCD_STM32_Cmd>
			  LCD_STM32_Cmd(n);
 800089a:	7bbb      	ldrb	r3, [r7, #14]
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff fe71 	bl	8000584 <LCD_STM32_Cmd>
			  m=f>>4;
 80008a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80008a6:	091b      	lsrs	r3, r3, #4
 80008a8:	73fb      	strb	r3, [r7, #15]
			  n=f;
 80008aa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80008ae:	73bb      	strb	r3, [r7, #14]
			  LCD_STM32_Cmd(m);
 80008b0:	7bfb      	ldrb	r3, [r7, #15]
 80008b2:	4618      	mov	r0, r3
 80008b4:	f7ff fe66 	bl	8000584 <LCD_STM32_Cmd>
			  LCD_STM32_Cmd(n);
 80008b8:	7bbb      	ldrb	r3, [r7, #14]
 80008ba:	4618      	mov	r0, r3
 80008bc:	f7ff fe62 	bl	8000584 <LCD_STM32_Cmd>
			  m=g>>4;
 80008c0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80008c4:	091b      	lsrs	r3, r3, #4
 80008c6:	73fb      	strb	r3, [r7, #15]
			  n=g;
 80008c8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80008cc:	73bb      	strb	r3, [r7, #14]
			  LCD_STM32_Cmd(m);
 80008ce:	7bfb      	ldrb	r3, [r7, #15]
 80008d0:	4618      	mov	r0, r3
 80008d2:	f7ff fe57 	bl	8000584 <LCD_STM32_Cmd>
			  LCD_STM32_Cmd(n);
 80008d6:	7bbb      	ldrb	r3, [r7, #14]
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff fe53 	bl	8000584 <LCD_STM32_Cmd>
			  m=h>>4;
 80008de:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80008e2:	091b      	lsrs	r3, r3, #4
 80008e4:	73fb      	strb	r3, [r7, #15]
			  n=h;
 80008e6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80008ea:	73bb      	strb	r3, [r7, #14]
			  LCD_STM32_Cmd(m);
 80008ec:	7bfb      	ldrb	r3, [r7, #15]
 80008ee:	4618      	mov	r0, r3
 80008f0:	f7ff fe48 	bl	8000584 <LCD_STM32_Cmd>
			  LCD_STM32_Cmd(n);
 80008f4:	7bbb      	ldrb	r3, [r7, #14]
 80008f6:	4618      	mov	r0, r3
 80008f8:	f7ff fe44 	bl	8000584 <LCD_STM32_Cmd>
			  m=i>>4;
 80008fc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000900:	091b      	lsrs	r3, r3, #4
 8000902:	73fb      	strb	r3, [r7, #15]
			  n=i;
 8000904:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000908:	73bb      	strb	r3, [r7, #14]
			  LCD_STM32_Cmd(m);
 800090a:	7bfb      	ldrb	r3, [r7, #15]
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff fe39 	bl	8000584 <LCD_STM32_Cmd>
			  LCD_STM32_Cmd(n);
 8000912:	7bbb      	ldrb	r3, [r7, #14]
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff fe35 	bl	8000584 <LCD_STM32_Cmd>
			  RS_OFF;
 800091a:	2200      	movs	r2, #0
 800091c:	2120      	movs	r1, #32
 800091e:	489b      	ldr	r0, [pc, #620]	; (8000b8c <LCD_STM32_New_Char+0x3a4>)
 8000920:	f000 fe5c 	bl	80015dc <HAL_GPIO_WritePin>
			  LCD_STM32_Cmd(0x00);
 8000924:	2000      	movs	r0, #0
 8000926:	f7ff fe2d 	bl	8000584 <LCD_STM32_Cmd>
			  LCD_STM32_Cmd(0x01);
 800092a:	2001      	movs	r0, #1
 800092c:	f7ff fe2a 	bl	8000584 <LCD_STM32_Cmd>
			  HAL_Delay(100);
 8000930:	2064      	movs	r0, #100	; 0x64
 8000932:	f000 fbc5 	bl	80010c0 <HAL_Delay>
			  break;
 8000936:	e124      	b.n	8000b82 <LCD_STM32_New_Char+0x39a>
			  LCD_STM32_Cmd(0x04);
 8000938:	2004      	movs	r0, #4
 800093a:	f7ff fe23 	bl	8000584 <LCD_STM32_Cmd>
			  LCD_STM32_Cmd(0x08);
 800093e:	2008      	movs	r0, #8
 8000940:	f7ff fe20 	bl	8000584 <LCD_STM32_Cmd>
			  RS_ON;
 8000944:	2201      	movs	r2, #1
 8000946:	2120      	movs	r1, #32
 8000948:	4890      	ldr	r0, [pc, #576]	; (8000b8c <LCD_STM32_New_Char+0x3a4>)
 800094a:	f000 fe47 	bl	80015dc <HAL_GPIO_WritePin>
			  m=b>>4;
 800094e:	79bb      	ldrb	r3, [r7, #6]
 8000950:	091b      	lsrs	r3, r3, #4
 8000952:	73fb      	strb	r3, [r7, #15]
			  n=b;
 8000954:	79bb      	ldrb	r3, [r7, #6]
 8000956:	73bb      	strb	r3, [r7, #14]
			  LCD_STM32_Cmd(m);
 8000958:	7bfb      	ldrb	r3, [r7, #15]
 800095a:	4618      	mov	r0, r3
 800095c:	f7ff fe12 	bl	8000584 <LCD_STM32_Cmd>
			  LCD_STM32_Cmd(n);
 8000960:	7bbb      	ldrb	r3, [r7, #14]
 8000962:	4618      	mov	r0, r3
 8000964:	f7ff fe0e 	bl	8000584 <LCD_STM32_Cmd>
			  m=c>>4;
 8000968:	797b      	ldrb	r3, [r7, #5]
 800096a:	091b      	lsrs	r3, r3, #4
 800096c:	73fb      	strb	r3, [r7, #15]
			  n=c;
 800096e:	797b      	ldrb	r3, [r7, #5]
 8000970:	73bb      	strb	r3, [r7, #14]
			  LCD_STM32_Cmd(m);
 8000972:	7bfb      	ldrb	r3, [r7, #15]
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff fe05 	bl	8000584 <LCD_STM32_Cmd>
			  LCD_STM32_Cmd(n);
 800097a:	7bbb      	ldrb	r3, [r7, #14]
 800097c:	4618      	mov	r0, r3
 800097e:	f7ff fe01 	bl	8000584 <LCD_STM32_Cmd>
			  m=c>>4;
 8000982:	797b      	ldrb	r3, [r7, #5]
 8000984:	091b      	lsrs	r3, r3, #4
 8000986:	73fb      	strb	r3, [r7, #15]
			  n=c;
 8000988:	797b      	ldrb	r3, [r7, #5]
 800098a:	73bb      	strb	r3, [r7, #14]
			  LCD_STM32_Cmd(m);
 800098c:	7bfb      	ldrb	r3, [r7, #15]
 800098e:	4618      	mov	r0, r3
 8000990:	f7ff fdf8 	bl	8000584 <LCD_STM32_Cmd>
			  LCD_STM32_Cmd(n);
 8000994:	7bbb      	ldrb	r3, [r7, #14]
 8000996:	4618      	mov	r0, r3
 8000998:	f7ff fdf4 	bl	8000584 <LCD_STM32_Cmd>
			  m=d>>4;
 800099c:	793b      	ldrb	r3, [r7, #4]
 800099e:	091b      	lsrs	r3, r3, #4
 80009a0:	73fb      	strb	r3, [r7, #15]
			  n=d;
 80009a2:	793b      	ldrb	r3, [r7, #4]
 80009a4:	73bb      	strb	r3, [r7, #14]
			  LCD_STM32_Cmd(m);
 80009a6:	7bfb      	ldrb	r3, [r7, #15]
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff fdeb 	bl	8000584 <LCD_STM32_Cmd>
			  LCD_STM32_Cmd(n);
 80009ae:	7bbb      	ldrb	r3, [r7, #14]
 80009b0:	4618      	mov	r0, r3
 80009b2:	f7ff fde7 	bl	8000584 <LCD_STM32_Cmd>
			  m=e>>4;
 80009b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80009ba:	091b      	lsrs	r3, r3, #4
 80009bc:	73fb      	strb	r3, [r7, #15]
			  n=e;
 80009be:	f897 3020 	ldrb.w	r3, [r7, #32]
 80009c2:	73bb      	strb	r3, [r7, #14]
			  LCD_STM32_Cmd(m);
 80009c4:	7bfb      	ldrb	r3, [r7, #15]
 80009c6:	4618      	mov	r0, r3
 80009c8:	f7ff fddc 	bl	8000584 <LCD_STM32_Cmd>
			  LCD_STM32_Cmd(n);
 80009cc:	7bbb      	ldrb	r3, [r7, #14]
 80009ce:	4618      	mov	r0, r3
 80009d0:	f7ff fdd8 	bl	8000584 <LCD_STM32_Cmd>
			  m=f>>4;
 80009d4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80009d8:	091b      	lsrs	r3, r3, #4
 80009da:	73fb      	strb	r3, [r7, #15]
			  n=f;
 80009dc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80009e0:	73bb      	strb	r3, [r7, #14]
			  LCD_STM32_Cmd(m);
 80009e2:	7bfb      	ldrb	r3, [r7, #15]
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff fdcd 	bl	8000584 <LCD_STM32_Cmd>
			  LCD_STM32_Cmd(n);
 80009ea:	7bbb      	ldrb	r3, [r7, #14]
 80009ec:	4618      	mov	r0, r3
 80009ee:	f7ff fdc9 	bl	8000584 <LCD_STM32_Cmd>
			  m=g>>4;
 80009f2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80009f6:	091b      	lsrs	r3, r3, #4
 80009f8:	73fb      	strb	r3, [r7, #15]
			  n=g;
 80009fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80009fe:	73bb      	strb	r3, [r7, #14]
			  LCD_STM32_Cmd(m);
 8000a00:	7bfb      	ldrb	r3, [r7, #15]
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff fdbe 	bl	8000584 <LCD_STM32_Cmd>
			  LCD_STM32_Cmd(n);
 8000a08:	7bbb      	ldrb	r3, [r7, #14]
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f7ff fdba 	bl	8000584 <LCD_STM32_Cmd>
			  m=h>>4;
 8000a10:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000a14:	091b      	lsrs	r3, r3, #4
 8000a16:	73fb      	strb	r3, [r7, #15]
			  n=h;
 8000a18:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000a1c:	73bb      	strb	r3, [r7, #14]
			  LCD_STM32_Cmd(m);
 8000a1e:	7bfb      	ldrb	r3, [r7, #15]
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff fdaf 	bl	8000584 <LCD_STM32_Cmd>
			  LCD_STM32_Cmd(n);
 8000a26:	7bbb      	ldrb	r3, [r7, #14]
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f7ff fdab 	bl	8000584 <LCD_STM32_Cmd>
			  m=i>>4;
 8000a2e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000a32:	091b      	lsrs	r3, r3, #4
 8000a34:	73fb      	strb	r3, [r7, #15]
			  n=i;
 8000a36:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000a3a:	73bb      	strb	r3, [r7, #14]
			  LCD_STM32_Cmd(m);
 8000a3c:	7bfb      	ldrb	r3, [r7, #15]
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f7ff fda0 	bl	8000584 <LCD_STM32_Cmd>
			  LCD_STM32_Cmd(n);
 8000a44:	7bbb      	ldrb	r3, [r7, #14]
 8000a46:	4618      	mov	r0, r3
 8000a48:	f7ff fd9c 	bl	8000584 <LCD_STM32_Cmd>
			  RS_OFF;
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	2120      	movs	r1, #32
 8000a50:	484e      	ldr	r0, [pc, #312]	; (8000b8c <LCD_STM32_New_Char+0x3a4>)
 8000a52:	f000 fdc3 	bl	80015dc <HAL_GPIO_WritePin>
			  LCD_STM32_Cmd(0x00);
 8000a56:	2000      	movs	r0, #0
 8000a58:	f7ff fd94 	bl	8000584 <LCD_STM32_Cmd>
			  LCD_STM32_Cmd(0x01);
 8000a5c:	2001      	movs	r0, #1
 8000a5e:	f7ff fd91 	bl	8000584 <LCD_STM32_Cmd>
			  HAL_Delay(100);
 8000a62:	2064      	movs	r0, #100	; 0x64
 8000a64:	f000 fb2c 	bl	80010c0 <HAL_Delay>
			  break;
 8000a68:	e08b      	b.n	8000b82 <LCD_STM32_New_Char+0x39a>
			  LCD_STM32_Cmd(0x04);
 8000a6a:	2004      	movs	r0, #4
 8000a6c:	f7ff fd8a 	bl	8000584 <LCD_STM32_Cmd>
			  LCD_STM32_Cmd(0xFF);
 8000a70:	20ff      	movs	r0, #255	; 0xff
 8000a72:	f7ff fd87 	bl	8000584 <LCD_STM32_Cmd>
			  RS_ON;
 8000a76:	2201      	movs	r2, #1
 8000a78:	2120      	movs	r1, #32
 8000a7a:	4844      	ldr	r0, [pc, #272]	; (8000b8c <LCD_STM32_New_Char+0x3a4>)
 8000a7c:	f000 fdae 	bl	80015dc <HAL_GPIO_WritePin>
			  m=b>>4;
 8000a80:	79bb      	ldrb	r3, [r7, #6]
 8000a82:	091b      	lsrs	r3, r3, #4
 8000a84:	73fb      	strb	r3, [r7, #15]
			  n=b;
 8000a86:	79bb      	ldrb	r3, [r7, #6]
 8000a88:	73bb      	strb	r3, [r7, #14]
			  LCD_STM32_Cmd(m);
 8000a8a:	7bfb      	ldrb	r3, [r7, #15]
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff fd79 	bl	8000584 <LCD_STM32_Cmd>
			  LCD_STM32_Cmd(n);
 8000a92:	7bbb      	ldrb	r3, [r7, #14]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff fd75 	bl	8000584 <LCD_STM32_Cmd>
			  m=c>>4;
 8000a9a:	797b      	ldrb	r3, [r7, #5]
 8000a9c:	091b      	lsrs	r3, r3, #4
 8000a9e:	73fb      	strb	r3, [r7, #15]
			  n=c;
 8000aa0:	797b      	ldrb	r3, [r7, #5]
 8000aa2:	73bb      	strb	r3, [r7, #14]
			  LCD_STM32_Cmd(m);
 8000aa4:	7bfb      	ldrb	r3, [r7, #15]
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f7ff fd6c 	bl	8000584 <LCD_STM32_Cmd>
			  LCD_STM32_Cmd(n);
 8000aac:	7bbb      	ldrb	r3, [r7, #14]
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f7ff fd68 	bl	8000584 <LCD_STM32_Cmd>
			  m=d>>4;
 8000ab4:	793b      	ldrb	r3, [r7, #4]
 8000ab6:	091b      	lsrs	r3, r3, #4
 8000ab8:	73fb      	strb	r3, [r7, #15]
			  n=d;
 8000aba:	793b      	ldrb	r3, [r7, #4]
 8000abc:	73bb      	strb	r3, [r7, #14]
			  LCD_STM32_Cmd(m);
 8000abe:	7bfb      	ldrb	r3, [r7, #15]
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff fd5f 	bl	8000584 <LCD_STM32_Cmd>
			  LCD_STM32_Cmd(n);
 8000ac6:	7bbb      	ldrb	r3, [r7, #14]
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff fd5b 	bl	8000584 <LCD_STM32_Cmd>
			  m=e>>4;
 8000ace:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ad2:	091b      	lsrs	r3, r3, #4
 8000ad4:	73fb      	strb	r3, [r7, #15]
			  n=e;
 8000ad6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ada:	73bb      	strb	r3, [r7, #14]
			  LCD_STM32_Cmd(m);
 8000adc:	7bfb      	ldrb	r3, [r7, #15]
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f7ff fd50 	bl	8000584 <LCD_STM32_Cmd>
			  LCD_STM32_Cmd(n);
 8000ae4:	7bbb      	ldrb	r3, [r7, #14]
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f7ff fd4c 	bl	8000584 <LCD_STM32_Cmd>
			  m=f>>4;
 8000aec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000af0:	091b      	lsrs	r3, r3, #4
 8000af2:	73fb      	strb	r3, [r7, #15]
			  n=f;
 8000af4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000af8:	73bb      	strb	r3, [r7, #14]
			  LCD_STM32_Cmd(m);
 8000afa:	7bfb      	ldrb	r3, [r7, #15]
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff fd41 	bl	8000584 <LCD_STM32_Cmd>
			  LCD_STM32_Cmd(n);
 8000b02:	7bbb      	ldrb	r3, [r7, #14]
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff fd3d 	bl	8000584 <LCD_STM32_Cmd>
			  m=g>>4;
 8000b0a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000b0e:	091b      	lsrs	r3, r3, #4
 8000b10:	73fb      	strb	r3, [r7, #15]
			  n=g;
 8000b12:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000b16:	73bb      	strb	r3, [r7, #14]
			  LCD_STM32_Cmd(m);
 8000b18:	7bfb      	ldrb	r3, [r7, #15]
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f7ff fd32 	bl	8000584 <LCD_STM32_Cmd>
			  LCD_STM32_Cmd(n);
 8000b20:	7bbb      	ldrb	r3, [r7, #14]
 8000b22:	4618      	mov	r0, r3
 8000b24:	f7ff fd2e 	bl	8000584 <LCD_STM32_Cmd>
			  m=h>>4;
 8000b28:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000b2c:	091b      	lsrs	r3, r3, #4
 8000b2e:	73fb      	strb	r3, [r7, #15]
			  n=h;
 8000b30:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000b34:	73bb      	strb	r3, [r7, #14]
			  LCD_STM32_Cmd(m);
 8000b36:	7bfb      	ldrb	r3, [r7, #15]
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff fd23 	bl	8000584 <LCD_STM32_Cmd>
			  LCD_STM32_Cmd(n);
 8000b3e:	7bbb      	ldrb	r3, [r7, #14]
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff fd1f 	bl	8000584 <LCD_STM32_Cmd>
			  m=i>>4;
 8000b46:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000b4a:	091b      	lsrs	r3, r3, #4
 8000b4c:	73fb      	strb	r3, [r7, #15]
			  n=i;
 8000b4e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000b52:	73bb      	strb	r3, [r7, #14]
			  LCD_STM32_Cmd(m);
 8000b54:	7bfb      	ldrb	r3, [r7, #15]
 8000b56:	4618      	mov	r0, r3
 8000b58:	f7ff fd14 	bl	8000584 <LCD_STM32_Cmd>
			  LCD_STM32_Cmd(n);
 8000b5c:	7bbb      	ldrb	r3, [r7, #14]
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff fd10 	bl	8000584 <LCD_STM32_Cmd>
			  RS_OFF;
 8000b64:	2200      	movs	r2, #0
 8000b66:	2120      	movs	r1, #32
 8000b68:	4808      	ldr	r0, [pc, #32]	; (8000b8c <LCD_STM32_New_Char+0x3a4>)
 8000b6a:	f000 fd37 	bl	80015dc <HAL_GPIO_WritePin>
			  LCD_STM32_Cmd(0x00);
 8000b6e:	2000      	movs	r0, #0
 8000b70:	f7ff fd08 	bl	8000584 <LCD_STM32_Cmd>
			  LCD_STM32_Cmd(0x01);
 8000b74:	2001      	movs	r0, #1
 8000b76:	f7ff fd05 	bl	8000584 <LCD_STM32_Cmd>
			  HAL_Delay(100);
 8000b7a:	2064      	movs	r0, #100	; 0x64
 8000b7c:	f000 faa0 	bl	80010c0 <HAL_Delay>
			  break;
 8000b80:	bf00      	nop
}
 8000b82:	bf00      	nop
 8000b84:	3714      	adds	r7, #20
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd90      	pop	{r4, r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40020400 	.word	0x40020400

08000b90 <LCD_STM32_Print_New_Char>:
void LCD_STM32_Print_New_Char(uint8_t a){
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	71fb      	strb	r3, [r7, #7]
	RS_ON;
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	2120      	movs	r1, #32
 8000b9e:	480a      	ldr	r0, [pc, #40]	; (8000bc8 <LCD_STM32_Print_New_Char+0x38>)
 8000ba0:	f000 fd1c 	bl	80015dc <HAL_GPIO_WritePin>
	LCD_STM32_Cmd(0x00);
 8000ba4:	2000      	movs	r0, #0
 8000ba6:	f7ff fced 	bl	8000584 <LCD_STM32_Cmd>
	LCD_STM32_Cmd(a-1);
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	3b01      	subs	r3, #1
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff fce7 	bl	8000584 <LCD_STM32_Cmd>
	RS_OFF;
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2120      	movs	r1, #32
 8000bba:	4803      	ldr	r0, [pc, #12]	; (8000bc8 <LCD_STM32_Print_New_Char+0x38>)
 8000bbc:	f000 fd0e 	bl	80015dc <HAL_GPIO_WritePin>
}
 8000bc0:	bf00      	nop
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40020400 	.word	0x40020400

08000bcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b08c      	sub	sp, #48	; 0x30
 8000bd0:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bd2:	f000 fa03 	bl	8000fdc <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bd6:	f000 f847 	bl	8000c68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bda:	f000 f8af 	bl	8000d3c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  LCD_STM32_Init();
 8000bde:	f7ff fd43 	bl	8000668 <LCD_STM32_Init>
  LCD_STM32_New_Char(1,0x0A,0x1F,0x1F,0x1F,0x0E,0x04,0x00,0x00);
 8000be2:	2300      	movs	r3, #0
 8000be4:	9304      	str	r3, [sp, #16]
 8000be6:	2300      	movs	r3, #0
 8000be8:	9303      	str	r3, [sp, #12]
 8000bea:	2304      	movs	r3, #4
 8000bec:	9302      	str	r3, [sp, #8]
 8000bee:	230e      	movs	r3, #14
 8000bf0:	9301      	str	r3, [sp, #4]
 8000bf2:	231f      	movs	r3, #31
 8000bf4:	9300      	str	r3, [sp, #0]
 8000bf6:	231f      	movs	r3, #31
 8000bf8:	221f      	movs	r2, #31
 8000bfa:	210a      	movs	r1, #10
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	f7ff fdf3 	bl	80007e8 <LCD_STM32_New_Char>
  LCD_STM32_Set_Cursor(0, Fila1);
 8000c02:	2100      	movs	r1, #0
 8000c04:	2000      	movs	r0, #0
 8000c06:	f7ff fd57 	bl	80006b8 <LCD_STM32_Set_Cursor>
  LCD_STM32_Print_String("Bienvenidos");
 8000c0a:	4814      	ldr	r0, [pc, #80]	; (8000c5c <main+0x90>)
 8000c0c:	f7ff fdd4 	bl	80007b8 <LCD_STM32_Print_String>
  LCD_STM32_Set_Cursor(0, Fila2);
 8000c10:	2101      	movs	r1, #1
 8000c12:	2000      	movs	r0, #0
 8000c14:	f7ff fd50 	bl	80006b8 <LCD_STM32_Set_Cursor>
  LCD_STM32_Print_String("STM32 con godo ");
 8000c18:	4811      	ldr	r0, [pc, #68]	; (8000c60 <main+0x94>)
 8000c1a:	f7ff fdcd 	bl	80007b8 <LCD_STM32_Print_String>
  LCD_STM32_Print_New_Char(1);
 8000c1e:	2001      	movs	r0, #1
 8000c20:	f7ff ffb6 	bl	8000b90 <LCD_STM32_Print_New_Char>
  /* USER CODE BEGIN WHILE */
  uint8_t i;
  char lcd_buffer[16];
  while (1)
  {
	  for (i = 0; i < 99; ++i) {
 8000c24:	2300      	movs	r3, #0
 8000c26:	75fb      	strb	r3, [r7, #23]
 8000c28:	e014      	b.n	8000c54 <main+0x88>
		sprintf((char*)lcd_buffer,"%02u",i);
 8000c2a:	7dfa      	ldrb	r2, [r7, #23]
 8000c2c:	1d3b      	adds	r3, r7, #4
 8000c2e:	490d      	ldr	r1, [pc, #52]	; (8000c64 <main+0x98>)
 8000c30:	4618      	mov	r0, r3
 8000c32:	f001 f943 	bl	8001ebc <siprintf>
		LCD_STM32_Set_Cursor(14, Fila1);
 8000c36:	2100      	movs	r1, #0
 8000c38:	200e      	movs	r0, #14
 8000c3a:	f7ff fd3d 	bl	80006b8 <LCD_STM32_Set_Cursor>
		LCD_STM32_Print_String(lcd_buffer);
 8000c3e:	1d3b      	adds	r3, r7, #4
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff fdb9 	bl	80007b8 <LCD_STM32_Print_String>
		HAL_Delay(500);
 8000c46:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c4a:	f000 fa39 	bl	80010c0 <HAL_Delay>
	  for (i = 0; i < 99; ++i) {
 8000c4e:	7dfb      	ldrb	r3, [r7, #23]
 8000c50:	3301      	adds	r3, #1
 8000c52:	75fb      	strb	r3, [r7, #23]
 8000c54:	7dfb      	ldrb	r3, [r7, #23]
 8000c56:	2b62      	cmp	r3, #98	; 0x62
 8000c58:	d9e7      	bls.n	8000c2a <main+0x5e>
 8000c5a:	e7e3      	b.n	8000c24 <main+0x58>
 8000c5c:	080027b0 	.word	0x080027b0
 8000c60:	080027bc 	.word	0x080027bc
 8000c64:	080027cc 	.word	0x080027cc

08000c68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b094      	sub	sp, #80	; 0x50
 8000c6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c6e:	f107 0320 	add.w	r3, r7, #32
 8000c72:	2230      	movs	r2, #48	; 0x30
 8000c74:	2100      	movs	r1, #0
 8000c76:	4618      	mov	r0, r3
 8000c78:	f001 f918 	bl	8001eac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c7c:	f107 030c 	add.w	r3, r7, #12
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
 8000c8a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	60bb      	str	r3, [r7, #8]
 8000c90:	4b28      	ldr	r3, [pc, #160]	; (8000d34 <SystemClock_Config+0xcc>)
 8000c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c94:	4a27      	ldr	r2, [pc, #156]	; (8000d34 <SystemClock_Config+0xcc>)
 8000c96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c9a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c9c:	4b25      	ldr	r3, [pc, #148]	; (8000d34 <SystemClock_Config+0xcc>)
 8000c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ca4:	60bb      	str	r3, [r7, #8]
 8000ca6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ca8:	2300      	movs	r3, #0
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	4b22      	ldr	r3, [pc, #136]	; (8000d38 <SystemClock_Config+0xd0>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000cb4:	4a20      	ldr	r2, [pc, #128]	; (8000d38 <SystemClock_Config+0xd0>)
 8000cb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cba:	6013      	str	r3, [r2, #0]
 8000cbc:	4b1e      	ldr	r3, [pc, #120]	; (8000d38 <SystemClock_Config+0xd0>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cc4:	607b      	str	r3, [r7, #4]
 8000cc6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cd0:	2310      	movs	r3, #16
 8000cd2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000cdc:	2308      	movs	r3, #8
 8000cde:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000ce0:	2340      	movs	r3, #64	; 0x40
 8000ce2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ce8:	2304      	movs	r3, #4
 8000cea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cec:	f107 0320 	add.w	r3, r7, #32
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f000 fc8d 	bl	8001610 <HAL_RCC_OscConfig>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000cfc:	f000 f8a4 	bl	8000e48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d00:	230f      	movs	r3, #15
 8000d02:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d04:	2302      	movs	r3, #2
 8000d06:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8000d08:	2390      	movs	r3, #144	; 0x90
 8000d0a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d10:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d12:	2300      	movs	r3, #0
 8000d14:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d16:	f107 030c 	add.w	r3, r7, #12
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f000 feef 	bl	8001b00 <HAL_RCC_ClockConfig>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000d28:	f000 f88e 	bl	8000e48 <Error_Handler>
  }
}
 8000d2c:	bf00      	nop
 8000d2e:	3750      	adds	r7, #80	; 0x50
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40023800 	.word	0x40023800
 8000d38:	40007000 	.word	0x40007000

08000d3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b088      	sub	sp, #32
 8000d40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d42:	f107 030c 	add.w	r3, r7, #12
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
 8000d4c:	609a      	str	r2, [r3, #8]
 8000d4e:	60da      	str	r2, [r3, #12]
 8000d50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	60bb      	str	r3, [r7, #8]
 8000d56:	4b38      	ldr	r3, [pc, #224]	; (8000e38 <MX_GPIO_Init+0xfc>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	4a37      	ldr	r2, [pc, #220]	; (8000e38 <MX_GPIO_Init+0xfc>)
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	6313      	str	r3, [r2, #48]	; 0x30
 8000d62:	4b35      	ldr	r3, [pc, #212]	; (8000e38 <MX_GPIO_Init+0xfc>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	60bb      	str	r3, [r7, #8]
 8000d6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	607b      	str	r3, [r7, #4]
 8000d72:	4b31      	ldr	r3, [pc, #196]	; (8000e38 <MX_GPIO_Init+0xfc>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	4a30      	ldr	r2, [pc, #192]	; (8000e38 <MX_GPIO_Init+0xfc>)
 8000d78:	f043 0304 	orr.w	r3, r3, #4
 8000d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7e:	4b2e      	ldr	r3, [pc, #184]	; (8000e38 <MX_GPIO_Init+0xfc>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	f003 0304 	and.w	r3, r3, #4
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	603b      	str	r3, [r7, #0]
 8000d8e:	4b2a      	ldr	r3, [pc, #168]	; (8000e38 <MX_GPIO_Init+0xfc>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	4a29      	ldr	r2, [pc, #164]	; (8000e38 <MX_GPIO_Init+0xfc>)
 8000d94:	f043 0302 	orr.w	r3, r3, #2
 8000d98:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9a:	4b27      	ldr	r3, [pc, #156]	; (8000e38 <MX_GPIO_Init+0xfc>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	f003 0302 	and.w	r3, r3, #2
 8000da2:	603b      	str	r3, [r7, #0]
 8000da4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, GPIO_PIN_RESET);
 8000da6:	2200      	movs	r2, #0
 8000da8:	2140      	movs	r1, #64	; 0x40
 8000daa:	4824      	ldr	r0, [pc, #144]	; (8000e3c <MX_GPIO_Init+0x100>)
 8000dac:	f000 fc16 	bl	80015dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_RESET);
 8000db0:	2200      	movs	r2, #0
 8000db2:	2180      	movs	r1, #128	; 0x80
 8000db4:	4822      	ldr	r0, [pc, #136]	; (8000e40 <MX_GPIO_Init+0x104>)
 8000db6:	f000 fc11 	bl	80015dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN_Pin|RS_Pin|D5_Pin, GPIO_PIN_RESET);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2170      	movs	r1, #112	; 0x70
 8000dbe:	4821      	ldr	r0, [pc, #132]	; (8000e44 <MX_GPIO_Init+0x108>)
 8000dc0:	f000 fc0c 	bl	80015dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : D7_Pin */
  GPIO_InitStruct.Pin = D7_Pin;
 8000dc4:	2340      	movs	r3, #64	; 0x40
 8000dc6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(D7_GPIO_Port, &GPIO_InitStruct);
 8000dd4:	f107 030c 	add.w	r3, r7, #12
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4818      	ldr	r0, [pc, #96]	; (8000e3c <MX_GPIO_Init+0x100>)
 8000ddc:	f000 fa7a 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : D6_Pin */
  GPIO_InitStruct.Pin = D6_Pin;
 8000de0:	2380      	movs	r3, #128	; 0x80
 8000de2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000de4:	2303      	movs	r3, #3
 8000de6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(D6_GPIO_Port, &GPIO_InitStruct);
 8000dec:	f107 030c 	add.w	r3, r7, #12
 8000df0:	4619      	mov	r1, r3
 8000df2:	4812      	ldr	r0, [pc, #72]	; (8000e3c <MX_GPIO_Init+0x100>)
 8000df4:	f000 fa6e 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : D4_Pin */
  GPIO_InitStruct.Pin = D4_Pin;
 8000df8:	2380      	movs	r3, #128	; 0x80
 8000dfa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e04:	2300      	movs	r3, #0
 8000e06:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(D4_GPIO_Port, &GPIO_InitStruct);
 8000e08:	f107 030c 	add.w	r3, r7, #12
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	480c      	ldr	r0, [pc, #48]	; (8000e40 <MX_GPIO_Init+0x104>)
 8000e10:	f000 fa60 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_Pin RS_Pin D5_Pin */
  GPIO_InitStruct.Pin = EN_Pin|RS_Pin|D5_Pin;
 8000e14:	2370      	movs	r3, #112	; 0x70
 8000e16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e20:	2300      	movs	r3, #0
 8000e22:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e24:	f107 030c 	add.w	r3, r7, #12
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4806      	ldr	r0, [pc, #24]	; (8000e44 <MX_GPIO_Init+0x108>)
 8000e2c:	f000 fa52 	bl	80012d4 <HAL_GPIO_Init>

}
 8000e30:	bf00      	nop
 8000e32:	3720      	adds	r7, #32
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	40020000 	.word	0x40020000
 8000e40:	40020800 	.word	0x40020800
 8000e44:	40020400 	.word	0x40020400

08000e48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e4c:	b672      	cpsid	i
}
 8000e4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e50:	e7fe      	b.n	8000e50 <Error_Handler+0x8>
	...

08000e54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	607b      	str	r3, [r7, #4]
 8000e5e:	4b10      	ldr	r3, [pc, #64]	; (8000ea0 <HAL_MspInit+0x4c>)
 8000e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e62:	4a0f      	ldr	r2, [pc, #60]	; (8000ea0 <HAL_MspInit+0x4c>)
 8000e64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e68:	6453      	str	r3, [r2, #68]	; 0x44
 8000e6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ea0 <HAL_MspInit+0x4c>)
 8000e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e72:	607b      	str	r3, [r7, #4]
 8000e74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	603b      	str	r3, [r7, #0]
 8000e7a:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <HAL_MspInit+0x4c>)
 8000e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7e:	4a08      	ldr	r2, [pc, #32]	; (8000ea0 <HAL_MspInit+0x4c>)
 8000e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e84:	6413      	str	r3, [r2, #64]	; 0x40
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <HAL_MspInit+0x4c>)
 8000e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e8e:	603b      	str	r3, [r7, #0]
 8000e90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e92:	bf00      	nop
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	40023800 	.word	0x40023800

08000ea4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ea8:	e7fe      	b.n	8000ea8 <NMI_Handler+0x4>

08000eaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eae:	e7fe      	b.n	8000eae <HardFault_Handler+0x4>

08000eb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb4:	e7fe      	b.n	8000eb4 <MemManage_Handler+0x4>

08000eb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eba:	e7fe      	b.n	8000eba <BusFault_Handler+0x4>

08000ebc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec0:	e7fe      	b.n	8000ec0 <UsageFault_Handler+0x4>

08000ec2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr

08000ed0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ef0:	f000 f8c6 	bl	8001080 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ef4:	bf00      	nop
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f00:	4a14      	ldr	r2, [pc, #80]	; (8000f54 <_sbrk+0x5c>)
 8000f02:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <_sbrk+0x60>)
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f0c:	4b13      	ldr	r3, [pc, #76]	; (8000f5c <_sbrk+0x64>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d102      	bne.n	8000f1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f14:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <_sbrk+0x64>)
 8000f16:	4a12      	ldr	r2, [pc, #72]	; (8000f60 <_sbrk+0x68>)
 8000f18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f1a:	4b10      	ldr	r3, [pc, #64]	; (8000f5c <_sbrk+0x64>)
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4413      	add	r3, r2
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d207      	bcs.n	8000f38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f28:	f000 ff96 	bl	8001e58 <__errno>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	220c      	movs	r2, #12
 8000f30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f32:	f04f 33ff 	mov.w	r3, #4294967295
 8000f36:	e009      	b.n	8000f4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f38:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <_sbrk+0x64>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f3e:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <_sbrk+0x64>)
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4413      	add	r3, r2
 8000f46:	4a05      	ldr	r2, [pc, #20]	; (8000f5c <_sbrk+0x64>)
 8000f48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f4a:	68fb      	ldr	r3, [r7, #12]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3718      	adds	r7, #24
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20018000 	.word	0x20018000
 8000f58:	00000400 	.word	0x00000400
 8000f5c:	2000008c 	.word	0x2000008c
 8000f60:	200000a8 	.word	0x200000a8

08000f64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f68:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <SystemInit+0x20>)
 8000f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f6e:	4a05      	ldr	r2, [pc, #20]	; (8000f84 <SystemInit+0x20>)
 8000f70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	e000ed00 	.word	0xe000ed00

08000f88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fc0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f8c:	480d      	ldr	r0, [pc, #52]	; (8000fc4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f8e:	490e      	ldr	r1, [pc, #56]	; (8000fc8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f90:	4a0e      	ldr	r2, [pc, #56]	; (8000fcc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f94:	e002      	b.n	8000f9c <LoopCopyDataInit>

08000f96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f9a:	3304      	adds	r3, #4

08000f9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fa0:	d3f9      	bcc.n	8000f96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fa2:	4a0b      	ldr	r2, [pc, #44]	; (8000fd0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fa4:	4c0b      	ldr	r4, [pc, #44]	; (8000fd4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fa8:	e001      	b.n	8000fae <LoopFillZerobss>

08000faa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000faa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fac:	3204      	adds	r2, #4

08000fae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fb0:	d3fb      	bcc.n	8000faa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fb2:	f7ff ffd7 	bl	8000f64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fb6:	f000 ff55 	bl	8001e64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fba:	f7ff fe07 	bl	8000bcc <main>
  bx  lr    
 8000fbe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fc0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000fc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fc8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000fcc:	08002828 	.word	0x08002828
  ldr r2, =_sbss
 8000fd0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000fd4:	200000a4 	.word	0x200000a4

08000fd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fd8:	e7fe      	b.n	8000fd8 <ADC_IRQHandler>
	...

08000fdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fe0:	4b0e      	ldr	r3, [pc, #56]	; (800101c <HAL_Init+0x40>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a0d      	ldr	r2, [pc, #52]	; (800101c <HAL_Init+0x40>)
 8000fe6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fec:	4b0b      	ldr	r3, [pc, #44]	; (800101c <HAL_Init+0x40>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a0a      	ldr	r2, [pc, #40]	; (800101c <HAL_Init+0x40>)
 8000ff2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ff6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ff8:	4b08      	ldr	r3, [pc, #32]	; (800101c <HAL_Init+0x40>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a07      	ldr	r2, [pc, #28]	; (800101c <HAL_Init+0x40>)
 8000ffe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001002:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001004:	2003      	movs	r0, #3
 8001006:	f000 f931 	bl	800126c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800100a:	200f      	movs	r0, #15
 800100c:	f000 f808 	bl	8001020 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001010:	f7ff ff20 	bl	8000e54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001014:	2300      	movs	r3, #0
}
 8001016:	4618      	mov	r0, r3
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40023c00 	.word	0x40023c00

08001020 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001028:	4b12      	ldr	r3, [pc, #72]	; (8001074 <HAL_InitTick+0x54>)
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	4b12      	ldr	r3, [pc, #72]	; (8001078 <HAL_InitTick+0x58>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	4619      	mov	r1, r3
 8001032:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001036:	fbb3 f3f1 	udiv	r3, r3, r1
 800103a:	fbb2 f3f3 	udiv	r3, r2, r3
 800103e:	4618      	mov	r0, r3
 8001040:	f000 f93b 	bl	80012ba <HAL_SYSTICK_Config>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	e00e      	b.n	800106c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2b0f      	cmp	r3, #15
 8001052:	d80a      	bhi.n	800106a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001054:	2200      	movs	r2, #0
 8001056:	6879      	ldr	r1, [r7, #4]
 8001058:	f04f 30ff 	mov.w	r0, #4294967295
 800105c:	f000 f911 	bl	8001282 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001060:	4a06      	ldr	r2, [pc, #24]	; (800107c <HAL_InitTick+0x5c>)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001066:	2300      	movs	r3, #0
 8001068:	e000      	b.n	800106c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
}
 800106c:	4618      	mov	r0, r3
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20000000 	.word	0x20000000
 8001078:	20000008 	.word	0x20000008
 800107c:	20000004 	.word	0x20000004

08001080 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001084:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <HAL_IncTick+0x20>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	461a      	mov	r2, r3
 800108a:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <HAL_IncTick+0x24>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4413      	add	r3, r2
 8001090:	4a04      	ldr	r2, [pc, #16]	; (80010a4 <HAL_IncTick+0x24>)
 8001092:	6013      	str	r3, [r2, #0]
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	20000008 	.word	0x20000008
 80010a4:	20000090 	.word	0x20000090

080010a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  return uwTick;
 80010ac:	4b03      	ldr	r3, [pc, #12]	; (80010bc <HAL_GetTick+0x14>)
 80010ae:	681b      	ldr	r3, [r3, #0]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	20000090 	.word	0x20000090

080010c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010c8:	f7ff ffee 	bl	80010a8 <HAL_GetTick>
 80010cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010d8:	d005      	beq.n	80010e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010da:	4b0a      	ldr	r3, [pc, #40]	; (8001104 <HAL_Delay+0x44>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	461a      	mov	r2, r3
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	4413      	add	r3, r2
 80010e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010e6:	bf00      	nop
 80010e8:	f7ff ffde 	bl	80010a8 <HAL_GetTick>
 80010ec:	4602      	mov	r2, r0
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	68fa      	ldr	r2, [r7, #12]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d8f7      	bhi.n	80010e8 <HAL_Delay+0x28>
  {
  }
}
 80010f8:	bf00      	nop
 80010fa:	bf00      	nop
 80010fc:	3710      	adds	r7, #16
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20000008 	.word	0x20000008

08001108 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f003 0307 	and.w	r3, r3, #7
 8001116:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001118:	4b0c      	ldr	r3, [pc, #48]	; (800114c <__NVIC_SetPriorityGrouping+0x44>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800111e:	68ba      	ldr	r2, [r7, #8]
 8001120:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001124:	4013      	ands	r3, r2
 8001126:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001130:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001134:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001138:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800113a:	4a04      	ldr	r2, [pc, #16]	; (800114c <__NVIC_SetPriorityGrouping+0x44>)
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	60d3      	str	r3, [r2, #12]
}
 8001140:	bf00      	nop
 8001142:	3714      	adds	r7, #20
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001154:	4b04      	ldr	r3, [pc, #16]	; (8001168 <__NVIC_GetPriorityGrouping+0x18>)
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	0a1b      	lsrs	r3, r3, #8
 800115a:	f003 0307 	and.w	r3, r3, #7
}
 800115e:	4618      	mov	r0, r3
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	6039      	str	r1, [r7, #0]
 8001176:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117c:	2b00      	cmp	r3, #0
 800117e:	db0a      	blt.n	8001196 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	b2da      	uxtb	r2, r3
 8001184:	490c      	ldr	r1, [pc, #48]	; (80011b8 <__NVIC_SetPriority+0x4c>)
 8001186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118a:	0112      	lsls	r2, r2, #4
 800118c:	b2d2      	uxtb	r2, r2
 800118e:	440b      	add	r3, r1
 8001190:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001194:	e00a      	b.n	80011ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	b2da      	uxtb	r2, r3
 800119a:	4908      	ldr	r1, [pc, #32]	; (80011bc <__NVIC_SetPriority+0x50>)
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	f003 030f 	and.w	r3, r3, #15
 80011a2:	3b04      	subs	r3, #4
 80011a4:	0112      	lsls	r2, r2, #4
 80011a6:	b2d2      	uxtb	r2, r2
 80011a8:	440b      	add	r3, r1
 80011aa:	761a      	strb	r2, [r3, #24]
}
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	e000e100 	.word	0xe000e100
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b089      	sub	sp, #36	; 0x24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	f1c3 0307 	rsb	r3, r3, #7
 80011da:	2b04      	cmp	r3, #4
 80011dc:	bf28      	it	cs
 80011de:	2304      	movcs	r3, #4
 80011e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	3304      	adds	r3, #4
 80011e6:	2b06      	cmp	r3, #6
 80011e8:	d902      	bls.n	80011f0 <NVIC_EncodePriority+0x30>
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	3b03      	subs	r3, #3
 80011ee:	e000      	b.n	80011f2 <NVIC_EncodePriority+0x32>
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f4:	f04f 32ff 	mov.w	r2, #4294967295
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	43da      	mvns	r2, r3
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	401a      	ands	r2, r3
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001208:	f04f 31ff 	mov.w	r1, #4294967295
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	fa01 f303 	lsl.w	r3, r1, r3
 8001212:	43d9      	mvns	r1, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001218:	4313      	orrs	r3, r2
         );
}
 800121a:	4618      	mov	r0, r3
 800121c:	3724      	adds	r7, #36	; 0x24
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
	...

08001228 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3b01      	subs	r3, #1
 8001234:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001238:	d301      	bcc.n	800123e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800123a:	2301      	movs	r3, #1
 800123c:	e00f      	b.n	800125e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800123e:	4a0a      	ldr	r2, [pc, #40]	; (8001268 <SysTick_Config+0x40>)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3b01      	subs	r3, #1
 8001244:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001246:	210f      	movs	r1, #15
 8001248:	f04f 30ff 	mov.w	r0, #4294967295
 800124c:	f7ff ff8e 	bl	800116c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001250:	4b05      	ldr	r3, [pc, #20]	; (8001268 <SysTick_Config+0x40>)
 8001252:	2200      	movs	r2, #0
 8001254:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001256:	4b04      	ldr	r3, [pc, #16]	; (8001268 <SysTick_Config+0x40>)
 8001258:	2207      	movs	r2, #7
 800125a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	e000e010 	.word	0xe000e010

0800126c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff ff47 	bl	8001108 <__NVIC_SetPriorityGrouping>
}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001282:	b580      	push	{r7, lr}
 8001284:	b086      	sub	sp, #24
 8001286:	af00      	add	r7, sp, #0
 8001288:	4603      	mov	r3, r0
 800128a:	60b9      	str	r1, [r7, #8]
 800128c:	607a      	str	r2, [r7, #4]
 800128e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001294:	f7ff ff5c 	bl	8001150 <__NVIC_GetPriorityGrouping>
 8001298:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	68b9      	ldr	r1, [r7, #8]
 800129e:	6978      	ldr	r0, [r7, #20]
 80012a0:	f7ff ff8e 	bl	80011c0 <NVIC_EncodePriority>
 80012a4:	4602      	mov	r2, r0
 80012a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012aa:	4611      	mov	r1, r2
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff ff5d 	bl	800116c <__NVIC_SetPriority>
}
 80012b2:	bf00      	nop
 80012b4:	3718      	adds	r7, #24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f7ff ffb0 	bl	8001228 <SysTick_Config>
 80012c8:	4603      	mov	r3, r0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
	...

080012d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b089      	sub	sp, #36	; 0x24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012de:	2300      	movs	r3, #0
 80012e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012e2:	2300      	movs	r3, #0
 80012e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012e6:	2300      	movs	r3, #0
 80012e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ea:	2300      	movs	r3, #0
 80012ec:	61fb      	str	r3, [r7, #28]
 80012ee:	e159      	b.n	80015a4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012f0:	2201      	movs	r2, #1
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	697a      	ldr	r2, [r7, #20]
 8001300:	4013      	ands	r3, r2
 8001302:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	429a      	cmp	r2, r3
 800130a:	f040 8148 	bne.w	800159e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f003 0303 	and.w	r3, r3, #3
 8001316:	2b01      	cmp	r3, #1
 8001318:	d005      	beq.n	8001326 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001322:	2b02      	cmp	r3, #2
 8001324:	d130      	bne.n	8001388 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	2203      	movs	r2, #3
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	43db      	mvns	r3, r3
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	4013      	ands	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	68da      	ldr	r2, [r3, #12]
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4313      	orrs	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800135c:	2201      	movs	r2, #1
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	43db      	mvns	r3, r3
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	4013      	ands	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	091b      	lsrs	r3, r3, #4
 8001372:	f003 0201 	and.w	r2, r3, #1
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	4313      	orrs	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f003 0303 	and.w	r3, r3, #3
 8001390:	2b03      	cmp	r3, #3
 8001392:	d017      	beq.n	80013c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	2203      	movs	r2, #3
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	43db      	mvns	r3, r3
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	4013      	ands	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	689a      	ldr	r2, [r3, #8]
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f003 0303 	and.w	r3, r3, #3
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d123      	bne.n	8001418 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	08da      	lsrs	r2, r3, #3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	3208      	adds	r2, #8
 80013d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	f003 0307 	and.w	r3, r3, #7
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	220f      	movs	r2, #15
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	43db      	mvns	r3, r3
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	4013      	ands	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	691a      	ldr	r2, [r3, #16]
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	f003 0307 	and.w	r3, r3, #7
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4313      	orrs	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	08da      	lsrs	r2, r3, #3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	3208      	adds	r2, #8
 8001412:	69b9      	ldr	r1, [r7, #24]
 8001414:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	2203      	movs	r2, #3
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	43db      	mvns	r3, r3
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	4013      	ands	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f003 0203 	and.w	r2, r3, #3
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	4313      	orrs	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001454:	2b00      	cmp	r3, #0
 8001456:	f000 80a2 	beq.w	800159e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	4b57      	ldr	r3, [pc, #348]	; (80015bc <HAL_GPIO_Init+0x2e8>)
 8001460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001462:	4a56      	ldr	r2, [pc, #344]	; (80015bc <HAL_GPIO_Init+0x2e8>)
 8001464:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001468:	6453      	str	r3, [r2, #68]	; 0x44
 800146a:	4b54      	ldr	r3, [pc, #336]	; (80015bc <HAL_GPIO_Init+0x2e8>)
 800146c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001476:	4a52      	ldr	r2, [pc, #328]	; (80015c0 <HAL_GPIO_Init+0x2ec>)
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	089b      	lsrs	r3, r3, #2
 800147c:	3302      	adds	r3, #2
 800147e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001482:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	f003 0303 	and.w	r3, r3, #3
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	220f      	movs	r2, #15
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	43db      	mvns	r3, r3
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	4013      	ands	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a49      	ldr	r2, [pc, #292]	; (80015c4 <HAL_GPIO_Init+0x2f0>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d019      	beq.n	80014d6 <HAL_GPIO_Init+0x202>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a48      	ldr	r2, [pc, #288]	; (80015c8 <HAL_GPIO_Init+0x2f4>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d013      	beq.n	80014d2 <HAL_GPIO_Init+0x1fe>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a47      	ldr	r2, [pc, #284]	; (80015cc <HAL_GPIO_Init+0x2f8>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d00d      	beq.n	80014ce <HAL_GPIO_Init+0x1fa>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a46      	ldr	r2, [pc, #280]	; (80015d0 <HAL_GPIO_Init+0x2fc>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d007      	beq.n	80014ca <HAL_GPIO_Init+0x1f6>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a45      	ldr	r2, [pc, #276]	; (80015d4 <HAL_GPIO_Init+0x300>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d101      	bne.n	80014c6 <HAL_GPIO_Init+0x1f2>
 80014c2:	2304      	movs	r3, #4
 80014c4:	e008      	b.n	80014d8 <HAL_GPIO_Init+0x204>
 80014c6:	2307      	movs	r3, #7
 80014c8:	e006      	b.n	80014d8 <HAL_GPIO_Init+0x204>
 80014ca:	2303      	movs	r3, #3
 80014cc:	e004      	b.n	80014d8 <HAL_GPIO_Init+0x204>
 80014ce:	2302      	movs	r3, #2
 80014d0:	e002      	b.n	80014d8 <HAL_GPIO_Init+0x204>
 80014d2:	2301      	movs	r3, #1
 80014d4:	e000      	b.n	80014d8 <HAL_GPIO_Init+0x204>
 80014d6:	2300      	movs	r3, #0
 80014d8:	69fa      	ldr	r2, [r7, #28]
 80014da:	f002 0203 	and.w	r2, r2, #3
 80014de:	0092      	lsls	r2, r2, #2
 80014e0:	4093      	lsls	r3, r2
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014e8:	4935      	ldr	r1, [pc, #212]	; (80015c0 <HAL_GPIO_Init+0x2ec>)
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	089b      	lsrs	r3, r3, #2
 80014ee:	3302      	adds	r3, #2
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014f6:	4b38      	ldr	r3, [pc, #224]	; (80015d8 <HAL_GPIO_Init+0x304>)
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	43db      	mvns	r3, r3
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	4013      	ands	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d003      	beq.n	800151a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001512:	69ba      	ldr	r2, [r7, #24]
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	4313      	orrs	r3, r2
 8001518:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800151a:	4a2f      	ldr	r2, [pc, #188]	; (80015d8 <HAL_GPIO_Init+0x304>)
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001520:	4b2d      	ldr	r3, [pc, #180]	; (80015d8 <HAL_GPIO_Init+0x304>)
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	43db      	mvns	r3, r3
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	4013      	ands	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d003      	beq.n	8001544 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	4313      	orrs	r3, r2
 8001542:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001544:	4a24      	ldr	r2, [pc, #144]	; (80015d8 <HAL_GPIO_Init+0x304>)
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800154a:	4b23      	ldr	r3, [pc, #140]	; (80015d8 <HAL_GPIO_Init+0x304>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	43db      	mvns	r3, r3
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	4013      	ands	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d003      	beq.n	800156e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	4313      	orrs	r3, r2
 800156c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800156e:	4a1a      	ldr	r2, [pc, #104]	; (80015d8 <HAL_GPIO_Init+0x304>)
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001574:	4b18      	ldr	r3, [pc, #96]	; (80015d8 <HAL_GPIO_Init+0x304>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	43db      	mvns	r3, r3
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	4013      	ands	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d003      	beq.n	8001598 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	4313      	orrs	r3, r2
 8001596:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001598:	4a0f      	ldr	r2, [pc, #60]	; (80015d8 <HAL_GPIO_Init+0x304>)
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	3301      	adds	r3, #1
 80015a2:	61fb      	str	r3, [r7, #28]
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	2b0f      	cmp	r3, #15
 80015a8:	f67f aea2 	bls.w	80012f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015ac:	bf00      	nop
 80015ae:	bf00      	nop
 80015b0:	3724      	adds	r7, #36	; 0x24
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	40023800 	.word	0x40023800
 80015c0:	40013800 	.word	0x40013800
 80015c4:	40020000 	.word	0x40020000
 80015c8:	40020400 	.word	0x40020400
 80015cc:	40020800 	.word	0x40020800
 80015d0:	40020c00 	.word	0x40020c00
 80015d4:	40021000 	.word	0x40021000
 80015d8:	40013c00 	.word	0x40013c00

080015dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	460b      	mov	r3, r1
 80015e6:	807b      	strh	r3, [r7, #2]
 80015e8:	4613      	mov	r3, r2
 80015ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015ec:	787b      	ldrb	r3, [r7, #1]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d003      	beq.n	80015fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015f2:	887a      	ldrh	r2, [r7, #2]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015f8:	e003      	b.n	8001602 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015fa:	887b      	ldrh	r3, [r7, #2]
 80015fc:	041a      	lsls	r2, r3, #16
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	619a      	str	r2, [r3, #24]
}
 8001602:	bf00      	nop
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
	...

08001610 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d101      	bne.n	8001622 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e267      	b.n	8001af2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	2b00      	cmp	r3, #0
 800162c:	d075      	beq.n	800171a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800162e:	4b88      	ldr	r3, [pc, #544]	; (8001850 <HAL_RCC_OscConfig+0x240>)
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f003 030c 	and.w	r3, r3, #12
 8001636:	2b04      	cmp	r3, #4
 8001638:	d00c      	beq.n	8001654 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800163a:	4b85      	ldr	r3, [pc, #532]	; (8001850 <HAL_RCC_OscConfig+0x240>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001642:	2b08      	cmp	r3, #8
 8001644:	d112      	bne.n	800166c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001646:	4b82      	ldr	r3, [pc, #520]	; (8001850 <HAL_RCC_OscConfig+0x240>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800164e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001652:	d10b      	bne.n	800166c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001654:	4b7e      	ldr	r3, [pc, #504]	; (8001850 <HAL_RCC_OscConfig+0x240>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d05b      	beq.n	8001718 <HAL_RCC_OscConfig+0x108>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d157      	bne.n	8001718 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e242      	b.n	8001af2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001674:	d106      	bne.n	8001684 <HAL_RCC_OscConfig+0x74>
 8001676:	4b76      	ldr	r3, [pc, #472]	; (8001850 <HAL_RCC_OscConfig+0x240>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a75      	ldr	r2, [pc, #468]	; (8001850 <HAL_RCC_OscConfig+0x240>)
 800167c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001680:	6013      	str	r3, [r2, #0]
 8001682:	e01d      	b.n	80016c0 <HAL_RCC_OscConfig+0xb0>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800168c:	d10c      	bne.n	80016a8 <HAL_RCC_OscConfig+0x98>
 800168e:	4b70      	ldr	r3, [pc, #448]	; (8001850 <HAL_RCC_OscConfig+0x240>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a6f      	ldr	r2, [pc, #444]	; (8001850 <HAL_RCC_OscConfig+0x240>)
 8001694:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001698:	6013      	str	r3, [r2, #0]
 800169a:	4b6d      	ldr	r3, [pc, #436]	; (8001850 <HAL_RCC_OscConfig+0x240>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a6c      	ldr	r2, [pc, #432]	; (8001850 <HAL_RCC_OscConfig+0x240>)
 80016a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016a4:	6013      	str	r3, [r2, #0]
 80016a6:	e00b      	b.n	80016c0 <HAL_RCC_OscConfig+0xb0>
 80016a8:	4b69      	ldr	r3, [pc, #420]	; (8001850 <HAL_RCC_OscConfig+0x240>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a68      	ldr	r2, [pc, #416]	; (8001850 <HAL_RCC_OscConfig+0x240>)
 80016ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016b2:	6013      	str	r3, [r2, #0]
 80016b4:	4b66      	ldr	r3, [pc, #408]	; (8001850 <HAL_RCC_OscConfig+0x240>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a65      	ldr	r2, [pc, #404]	; (8001850 <HAL_RCC_OscConfig+0x240>)
 80016ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d013      	beq.n	80016f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c8:	f7ff fcee 	bl	80010a8 <HAL_GetTick>
 80016cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ce:	e008      	b.n	80016e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016d0:	f7ff fcea 	bl	80010a8 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b64      	cmp	r3, #100	; 0x64
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e207      	b.n	8001af2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016e2:	4b5b      	ldr	r3, [pc, #364]	; (8001850 <HAL_RCC_OscConfig+0x240>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d0f0      	beq.n	80016d0 <HAL_RCC_OscConfig+0xc0>
 80016ee:	e014      	b.n	800171a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f0:	f7ff fcda 	bl	80010a8 <HAL_GetTick>
 80016f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016f8:	f7ff fcd6 	bl	80010a8 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b64      	cmp	r3, #100	; 0x64
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e1f3      	b.n	8001af2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800170a:	4b51      	ldr	r3, [pc, #324]	; (8001850 <HAL_RCC_OscConfig+0x240>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1f0      	bne.n	80016f8 <HAL_RCC_OscConfig+0xe8>
 8001716:	e000      	b.n	800171a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001718:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	2b00      	cmp	r3, #0
 8001724:	d063      	beq.n	80017ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001726:	4b4a      	ldr	r3, [pc, #296]	; (8001850 <HAL_RCC_OscConfig+0x240>)
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f003 030c 	and.w	r3, r3, #12
 800172e:	2b00      	cmp	r3, #0
 8001730:	d00b      	beq.n	800174a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001732:	4b47      	ldr	r3, [pc, #284]	; (8001850 <HAL_RCC_OscConfig+0x240>)
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800173a:	2b08      	cmp	r3, #8
 800173c:	d11c      	bne.n	8001778 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800173e:	4b44      	ldr	r3, [pc, #272]	; (8001850 <HAL_RCC_OscConfig+0x240>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d116      	bne.n	8001778 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800174a:	4b41      	ldr	r3, [pc, #260]	; (8001850 <HAL_RCC_OscConfig+0x240>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	2b00      	cmp	r3, #0
 8001754:	d005      	beq.n	8001762 <HAL_RCC_OscConfig+0x152>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	2b01      	cmp	r3, #1
 800175c:	d001      	beq.n	8001762 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e1c7      	b.n	8001af2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001762:	4b3b      	ldr	r3, [pc, #236]	; (8001850 <HAL_RCC_OscConfig+0x240>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	691b      	ldr	r3, [r3, #16]
 800176e:	00db      	lsls	r3, r3, #3
 8001770:	4937      	ldr	r1, [pc, #220]	; (8001850 <HAL_RCC_OscConfig+0x240>)
 8001772:	4313      	orrs	r3, r2
 8001774:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001776:	e03a      	b.n	80017ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d020      	beq.n	80017c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001780:	4b34      	ldr	r3, [pc, #208]	; (8001854 <HAL_RCC_OscConfig+0x244>)
 8001782:	2201      	movs	r2, #1
 8001784:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001786:	f7ff fc8f 	bl	80010a8 <HAL_GetTick>
 800178a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800178c:	e008      	b.n	80017a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800178e:	f7ff fc8b 	bl	80010a8 <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	2b02      	cmp	r3, #2
 800179a:	d901      	bls.n	80017a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e1a8      	b.n	8001af2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017a0:	4b2b      	ldr	r3, [pc, #172]	; (8001850 <HAL_RCC_OscConfig+0x240>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0302 	and.w	r3, r3, #2
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d0f0      	beq.n	800178e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ac:	4b28      	ldr	r3, [pc, #160]	; (8001850 <HAL_RCC_OscConfig+0x240>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	691b      	ldr	r3, [r3, #16]
 80017b8:	00db      	lsls	r3, r3, #3
 80017ba:	4925      	ldr	r1, [pc, #148]	; (8001850 <HAL_RCC_OscConfig+0x240>)
 80017bc:	4313      	orrs	r3, r2
 80017be:	600b      	str	r3, [r1, #0]
 80017c0:	e015      	b.n	80017ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017c2:	4b24      	ldr	r3, [pc, #144]	; (8001854 <HAL_RCC_OscConfig+0x244>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c8:	f7ff fc6e 	bl	80010a8 <HAL_GetTick>
 80017cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ce:	e008      	b.n	80017e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017d0:	f7ff fc6a 	bl	80010a8 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e187      	b.n	8001af2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017e2:	4b1b      	ldr	r3, [pc, #108]	; (8001850 <HAL_RCC_OscConfig+0x240>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d1f0      	bne.n	80017d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0308 	and.w	r3, r3, #8
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d036      	beq.n	8001868 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	695b      	ldr	r3, [r3, #20]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d016      	beq.n	8001830 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001802:	4b15      	ldr	r3, [pc, #84]	; (8001858 <HAL_RCC_OscConfig+0x248>)
 8001804:	2201      	movs	r2, #1
 8001806:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001808:	f7ff fc4e 	bl	80010a8 <HAL_GetTick>
 800180c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800180e:	e008      	b.n	8001822 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001810:	f7ff fc4a 	bl	80010a8 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	2b02      	cmp	r3, #2
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e167      	b.n	8001af2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001822:	4b0b      	ldr	r3, [pc, #44]	; (8001850 <HAL_RCC_OscConfig+0x240>)
 8001824:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	2b00      	cmp	r3, #0
 800182c:	d0f0      	beq.n	8001810 <HAL_RCC_OscConfig+0x200>
 800182e:	e01b      	b.n	8001868 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001830:	4b09      	ldr	r3, [pc, #36]	; (8001858 <HAL_RCC_OscConfig+0x248>)
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001836:	f7ff fc37 	bl	80010a8 <HAL_GetTick>
 800183a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800183c:	e00e      	b.n	800185c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800183e:	f7ff fc33 	bl	80010a8 <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d907      	bls.n	800185c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e150      	b.n	8001af2 <HAL_RCC_OscConfig+0x4e2>
 8001850:	40023800 	.word	0x40023800
 8001854:	42470000 	.word	0x42470000
 8001858:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800185c:	4b88      	ldr	r3, [pc, #544]	; (8001a80 <HAL_RCC_OscConfig+0x470>)
 800185e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001860:	f003 0302 	and.w	r3, r3, #2
 8001864:	2b00      	cmp	r3, #0
 8001866:	d1ea      	bne.n	800183e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0304 	and.w	r3, r3, #4
 8001870:	2b00      	cmp	r3, #0
 8001872:	f000 8097 	beq.w	80019a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001876:	2300      	movs	r3, #0
 8001878:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800187a:	4b81      	ldr	r3, [pc, #516]	; (8001a80 <HAL_RCC_OscConfig+0x470>)
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d10f      	bne.n	80018a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	60bb      	str	r3, [r7, #8]
 800188a:	4b7d      	ldr	r3, [pc, #500]	; (8001a80 <HAL_RCC_OscConfig+0x470>)
 800188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188e:	4a7c      	ldr	r2, [pc, #496]	; (8001a80 <HAL_RCC_OscConfig+0x470>)
 8001890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001894:	6413      	str	r3, [r2, #64]	; 0x40
 8001896:	4b7a      	ldr	r3, [pc, #488]	; (8001a80 <HAL_RCC_OscConfig+0x470>)
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800189e:	60bb      	str	r3, [r7, #8]
 80018a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018a2:	2301      	movs	r3, #1
 80018a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a6:	4b77      	ldr	r3, [pc, #476]	; (8001a84 <HAL_RCC_OscConfig+0x474>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d118      	bne.n	80018e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018b2:	4b74      	ldr	r3, [pc, #464]	; (8001a84 <HAL_RCC_OscConfig+0x474>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a73      	ldr	r2, [pc, #460]	; (8001a84 <HAL_RCC_OscConfig+0x474>)
 80018b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018be:	f7ff fbf3 	bl	80010a8 <HAL_GetTick>
 80018c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c4:	e008      	b.n	80018d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018c6:	f7ff fbef 	bl	80010a8 <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e10c      	b.n	8001af2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d8:	4b6a      	ldr	r3, [pc, #424]	; (8001a84 <HAL_RCC_OscConfig+0x474>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d0f0      	beq.n	80018c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d106      	bne.n	80018fa <HAL_RCC_OscConfig+0x2ea>
 80018ec:	4b64      	ldr	r3, [pc, #400]	; (8001a80 <HAL_RCC_OscConfig+0x470>)
 80018ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018f0:	4a63      	ldr	r2, [pc, #396]	; (8001a80 <HAL_RCC_OscConfig+0x470>)
 80018f2:	f043 0301 	orr.w	r3, r3, #1
 80018f6:	6713      	str	r3, [r2, #112]	; 0x70
 80018f8:	e01c      	b.n	8001934 <HAL_RCC_OscConfig+0x324>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	2b05      	cmp	r3, #5
 8001900:	d10c      	bne.n	800191c <HAL_RCC_OscConfig+0x30c>
 8001902:	4b5f      	ldr	r3, [pc, #380]	; (8001a80 <HAL_RCC_OscConfig+0x470>)
 8001904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001906:	4a5e      	ldr	r2, [pc, #376]	; (8001a80 <HAL_RCC_OscConfig+0x470>)
 8001908:	f043 0304 	orr.w	r3, r3, #4
 800190c:	6713      	str	r3, [r2, #112]	; 0x70
 800190e:	4b5c      	ldr	r3, [pc, #368]	; (8001a80 <HAL_RCC_OscConfig+0x470>)
 8001910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001912:	4a5b      	ldr	r2, [pc, #364]	; (8001a80 <HAL_RCC_OscConfig+0x470>)
 8001914:	f043 0301 	orr.w	r3, r3, #1
 8001918:	6713      	str	r3, [r2, #112]	; 0x70
 800191a:	e00b      	b.n	8001934 <HAL_RCC_OscConfig+0x324>
 800191c:	4b58      	ldr	r3, [pc, #352]	; (8001a80 <HAL_RCC_OscConfig+0x470>)
 800191e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001920:	4a57      	ldr	r2, [pc, #348]	; (8001a80 <HAL_RCC_OscConfig+0x470>)
 8001922:	f023 0301 	bic.w	r3, r3, #1
 8001926:	6713      	str	r3, [r2, #112]	; 0x70
 8001928:	4b55      	ldr	r3, [pc, #340]	; (8001a80 <HAL_RCC_OscConfig+0x470>)
 800192a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800192c:	4a54      	ldr	r2, [pc, #336]	; (8001a80 <HAL_RCC_OscConfig+0x470>)
 800192e:	f023 0304 	bic.w	r3, r3, #4
 8001932:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d015      	beq.n	8001968 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800193c:	f7ff fbb4 	bl	80010a8 <HAL_GetTick>
 8001940:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001942:	e00a      	b.n	800195a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001944:	f7ff fbb0 	bl	80010a8 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001952:	4293      	cmp	r3, r2
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e0cb      	b.n	8001af2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800195a:	4b49      	ldr	r3, [pc, #292]	; (8001a80 <HAL_RCC_OscConfig+0x470>)
 800195c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d0ee      	beq.n	8001944 <HAL_RCC_OscConfig+0x334>
 8001966:	e014      	b.n	8001992 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001968:	f7ff fb9e 	bl	80010a8 <HAL_GetTick>
 800196c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800196e:	e00a      	b.n	8001986 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001970:	f7ff fb9a 	bl	80010a8 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	f241 3288 	movw	r2, #5000	; 0x1388
 800197e:	4293      	cmp	r3, r2
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e0b5      	b.n	8001af2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001986:	4b3e      	ldr	r3, [pc, #248]	; (8001a80 <HAL_RCC_OscConfig+0x470>)
 8001988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1ee      	bne.n	8001970 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001992:	7dfb      	ldrb	r3, [r7, #23]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d105      	bne.n	80019a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001998:	4b39      	ldr	r3, [pc, #228]	; (8001a80 <HAL_RCC_OscConfig+0x470>)
 800199a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199c:	4a38      	ldr	r2, [pc, #224]	; (8001a80 <HAL_RCC_OscConfig+0x470>)
 800199e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	f000 80a1 	beq.w	8001af0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019ae:	4b34      	ldr	r3, [pc, #208]	; (8001a80 <HAL_RCC_OscConfig+0x470>)
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f003 030c 	and.w	r3, r3, #12
 80019b6:	2b08      	cmp	r3, #8
 80019b8:	d05c      	beq.n	8001a74 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	699b      	ldr	r3, [r3, #24]
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d141      	bne.n	8001a46 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019c2:	4b31      	ldr	r3, [pc, #196]	; (8001a88 <HAL_RCC_OscConfig+0x478>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c8:	f7ff fb6e 	bl	80010a8 <HAL_GetTick>
 80019cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ce:	e008      	b.n	80019e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019d0:	f7ff fb6a 	bl	80010a8 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e087      	b.n	8001af2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019e2:	4b27      	ldr	r3, [pc, #156]	; (8001a80 <HAL_RCC_OscConfig+0x470>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d1f0      	bne.n	80019d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	69da      	ldr	r2, [r3, #28]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a1b      	ldr	r3, [r3, #32]
 80019f6:	431a      	orrs	r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fc:	019b      	lsls	r3, r3, #6
 80019fe:	431a      	orrs	r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a04:	085b      	lsrs	r3, r3, #1
 8001a06:	3b01      	subs	r3, #1
 8001a08:	041b      	lsls	r3, r3, #16
 8001a0a:	431a      	orrs	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a10:	061b      	lsls	r3, r3, #24
 8001a12:	491b      	ldr	r1, [pc, #108]	; (8001a80 <HAL_RCC_OscConfig+0x470>)
 8001a14:	4313      	orrs	r3, r2
 8001a16:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a18:	4b1b      	ldr	r3, [pc, #108]	; (8001a88 <HAL_RCC_OscConfig+0x478>)
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a1e:	f7ff fb43 	bl	80010a8 <HAL_GetTick>
 8001a22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a24:	e008      	b.n	8001a38 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a26:	f7ff fb3f 	bl	80010a8 <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d901      	bls.n	8001a38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e05c      	b.n	8001af2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a38:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <HAL_RCC_OscConfig+0x470>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d0f0      	beq.n	8001a26 <HAL_RCC_OscConfig+0x416>
 8001a44:	e054      	b.n	8001af0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a46:	4b10      	ldr	r3, [pc, #64]	; (8001a88 <HAL_RCC_OscConfig+0x478>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a4c:	f7ff fb2c 	bl	80010a8 <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a54:	f7ff fb28 	bl	80010a8 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e045      	b.n	8001af2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a66:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <HAL_RCC_OscConfig+0x470>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d1f0      	bne.n	8001a54 <HAL_RCC_OscConfig+0x444>
 8001a72:	e03d      	b.n	8001af0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d107      	bne.n	8001a8c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e038      	b.n	8001af2 <HAL_RCC_OscConfig+0x4e2>
 8001a80:	40023800 	.word	0x40023800
 8001a84:	40007000 	.word	0x40007000
 8001a88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a8c:	4b1b      	ldr	r3, [pc, #108]	; (8001afc <HAL_RCC_OscConfig+0x4ec>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d028      	beq.n	8001aec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d121      	bne.n	8001aec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d11a      	bne.n	8001aec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ab6:	68fa      	ldr	r2, [r7, #12]
 8001ab8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001abc:	4013      	ands	r3, r2
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ac2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d111      	bne.n	8001aec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad2:	085b      	lsrs	r3, r3, #1
 8001ad4:	3b01      	subs	r3, #1
 8001ad6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d107      	bne.n	8001aec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d001      	beq.n	8001af0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e000      	b.n	8001af2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3718      	adds	r7, #24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40023800 	.word	0x40023800

08001b00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d101      	bne.n	8001b14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e0cc      	b.n	8001cae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b14:	4b68      	ldr	r3, [pc, #416]	; (8001cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0307 	and.w	r3, r3, #7
 8001b1c:	683a      	ldr	r2, [r7, #0]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d90c      	bls.n	8001b3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b22:	4b65      	ldr	r3, [pc, #404]	; (8001cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b24:	683a      	ldr	r2, [r7, #0]
 8001b26:	b2d2      	uxtb	r2, r2
 8001b28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b2a:	4b63      	ldr	r3, [pc, #396]	; (8001cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0307 	and.w	r3, r3, #7
 8001b32:	683a      	ldr	r2, [r7, #0]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d001      	beq.n	8001b3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e0b8      	b.n	8001cae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0302 	and.w	r3, r3, #2
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d020      	beq.n	8001b8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0304 	and.w	r3, r3, #4
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d005      	beq.n	8001b60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b54:	4b59      	ldr	r3, [pc, #356]	; (8001cbc <HAL_RCC_ClockConfig+0x1bc>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	4a58      	ldr	r2, [pc, #352]	; (8001cbc <HAL_RCC_ClockConfig+0x1bc>)
 8001b5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0308 	and.w	r3, r3, #8
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d005      	beq.n	8001b78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b6c:	4b53      	ldr	r3, [pc, #332]	; (8001cbc <HAL_RCC_ClockConfig+0x1bc>)
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	4a52      	ldr	r2, [pc, #328]	; (8001cbc <HAL_RCC_ClockConfig+0x1bc>)
 8001b72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b78:	4b50      	ldr	r3, [pc, #320]	; (8001cbc <HAL_RCC_ClockConfig+0x1bc>)
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	494d      	ldr	r1, [pc, #308]	; (8001cbc <HAL_RCC_ClockConfig+0x1bc>)
 8001b86:	4313      	orrs	r3, r2
 8001b88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d044      	beq.n	8001c20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d107      	bne.n	8001bae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b9e:	4b47      	ldr	r3, [pc, #284]	; (8001cbc <HAL_RCC_ClockConfig+0x1bc>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d119      	bne.n	8001bde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e07f      	b.n	8001cae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d003      	beq.n	8001bbe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bba:	2b03      	cmp	r3, #3
 8001bbc:	d107      	bne.n	8001bce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bbe:	4b3f      	ldr	r3, [pc, #252]	; (8001cbc <HAL_RCC_ClockConfig+0x1bc>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d109      	bne.n	8001bde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e06f      	b.n	8001cae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bce:	4b3b      	ldr	r3, [pc, #236]	; (8001cbc <HAL_RCC_ClockConfig+0x1bc>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d101      	bne.n	8001bde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e067      	b.n	8001cae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bde:	4b37      	ldr	r3, [pc, #220]	; (8001cbc <HAL_RCC_ClockConfig+0x1bc>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f023 0203 	bic.w	r2, r3, #3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	4934      	ldr	r1, [pc, #208]	; (8001cbc <HAL_RCC_ClockConfig+0x1bc>)
 8001bec:	4313      	orrs	r3, r2
 8001bee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bf0:	f7ff fa5a 	bl	80010a8 <HAL_GetTick>
 8001bf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bf6:	e00a      	b.n	8001c0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bf8:	f7ff fa56 	bl	80010a8 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e04f      	b.n	8001cae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c0e:	4b2b      	ldr	r3, [pc, #172]	; (8001cbc <HAL_RCC_ClockConfig+0x1bc>)
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f003 020c 	and.w	r2, r3, #12
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d1eb      	bne.n	8001bf8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c20:	4b25      	ldr	r3, [pc, #148]	; (8001cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0307 	and.w	r3, r3, #7
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d20c      	bcs.n	8001c48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c2e:	4b22      	ldr	r3, [pc, #136]	; (8001cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	b2d2      	uxtb	r2, r2
 8001c34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c36:	4b20      	ldr	r3, [pc, #128]	; (8001cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0307 	and.w	r3, r3, #7
 8001c3e:	683a      	ldr	r2, [r7, #0]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d001      	beq.n	8001c48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e032      	b.n	8001cae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0304 	and.w	r3, r3, #4
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d008      	beq.n	8001c66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c54:	4b19      	ldr	r3, [pc, #100]	; (8001cbc <HAL_RCC_ClockConfig+0x1bc>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	4916      	ldr	r1, [pc, #88]	; (8001cbc <HAL_RCC_ClockConfig+0x1bc>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0308 	and.w	r3, r3, #8
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d009      	beq.n	8001c86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c72:	4b12      	ldr	r3, [pc, #72]	; (8001cbc <HAL_RCC_ClockConfig+0x1bc>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	691b      	ldr	r3, [r3, #16]
 8001c7e:	00db      	lsls	r3, r3, #3
 8001c80:	490e      	ldr	r1, [pc, #56]	; (8001cbc <HAL_RCC_ClockConfig+0x1bc>)
 8001c82:	4313      	orrs	r3, r2
 8001c84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c86:	f000 f821 	bl	8001ccc <HAL_RCC_GetSysClockFreq>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	4b0b      	ldr	r3, [pc, #44]	; (8001cbc <HAL_RCC_ClockConfig+0x1bc>)
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	091b      	lsrs	r3, r3, #4
 8001c92:	f003 030f 	and.w	r3, r3, #15
 8001c96:	490a      	ldr	r1, [pc, #40]	; (8001cc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c98:	5ccb      	ldrb	r3, [r1, r3]
 8001c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c9e:	4a09      	ldr	r2, [pc, #36]	; (8001cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ca2:	4b09      	ldr	r3, [pc, #36]	; (8001cc8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff f9ba 	bl	8001020 <HAL_InitTick>

  return HAL_OK;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40023c00 	.word	0x40023c00
 8001cbc:	40023800 	.word	0x40023800
 8001cc0:	080027d4 	.word	0x080027d4
 8001cc4:	20000000 	.word	0x20000000
 8001cc8:	20000004 	.word	0x20000004

08001ccc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ccc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cd0:	b090      	sub	sp, #64	; 0x40
 8001cd2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	637b      	str	r3, [r7, #52]	; 0x34
 8001cd8:	2300      	movs	r3, #0
 8001cda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cdc:	2300      	movs	r3, #0
 8001cde:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ce4:	4b59      	ldr	r3, [pc, #356]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x180>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f003 030c 	and.w	r3, r3, #12
 8001cec:	2b08      	cmp	r3, #8
 8001cee:	d00d      	beq.n	8001d0c <HAL_RCC_GetSysClockFreq+0x40>
 8001cf0:	2b08      	cmp	r3, #8
 8001cf2:	f200 80a1 	bhi.w	8001e38 <HAL_RCC_GetSysClockFreq+0x16c>
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d002      	beq.n	8001d00 <HAL_RCC_GetSysClockFreq+0x34>
 8001cfa:	2b04      	cmp	r3, #4
 8001cfc:	d003      	beq.n	8001d06 <HAL_RCC_GetSysClockFreq+0x3a>
 8001cfe:	e09b      	b.n	8001e38 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d00:	4b53      	ldr	r3, [pc, #332]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x184>)
 8001d02:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001d04:	e09b      	b.n	8001e3e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d06:	4b53      	ldr	r3, [pc, #332]	; (8001e54 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d08:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001d0a:	e098      	b.n	8001e3e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d0c:	4b4f      	ldr	r3, [pc, #316]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x180>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d14:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d16:	4b4d      	ldr	r3, [pc, #308]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x180>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d028      	beq.n	8001d74 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d22:	4b4a      	ldr	r3, [pc, #296]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x180>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	099b      	lsrs	r3, r3, #6
 8001d28:	2200      	movs	r2, #0
 8001d2a:	623b      	str	r3, [r7, #32]
 8001d2c:	627a      	str	r2, [r7, #36]	; 0x24
 8001d2e:	6a3b      	ldr	r3, [r7, #32]
 8001d30:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001d34:	2100      	movs	r1, #0
 8001d36:	4b47      	ldr	r3, [pc, #284]	; (8001e54 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d38:	fb03 f201 	mul.w	r2, r3, r1
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	fb00 f303 	mul.w	r3, r0, r3
 8001d42:	4413      	add	r3, r2
 8001d44:	4a43      	ldr	r2, [pc, #268]	; (8001e54 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d46:	fba0 1202 	umull	r1, r2, r0, r2
 8001d4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d4c:	460a      	mov	r2, r1
 8001d4e:	62ba      	str	r2, [r7, #40]	; 0x28
 8001d50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d52:	4413      	add	r3, r2
 8001d54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d58:	2200      	movs	r2, #0
 8001d5a:	61bb      	str	r3, [r7, #24]
 8001d5c:	61fa      	str	r2, [r7, #28]
 8001d5e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d62:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001d66:	f7fe fa8b 	bl	8000280 <__aeabi_uldivmod>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	4613      	mov	r3, r2
 8001d70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d72:	e053      	b.n	8001e1c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d74:	4b35      	ldr	r3, [pc, #212]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x180>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	099b      	lsrs	r3, r3, #6
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	613b      	str	r3, [r7, #16]
 8001d7e:	617a      	str	r2, [r7, #20]
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001d86:	f04f 0b00 	mov.w	fp, #0
 8001d8a:	4652      	mov	r2, sl
 8001d8c:	465b      	mov	r3, fp
 8001d8e:	f04f 0000 	mov.w	r0, #0
 8001d92:	f04f 0100 	mov.w	r1, #0
 8001d96:	0159      	lsls	r1, r3, #5
 8001d98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d9c:	0150      	lsls	r0, r2, #5
 8001d9e:	4602      	mov	r2, r0
 8001da0:	460b      	mov	r3, r1
 8001da2:	ebb2 080a 	subs.w	r8, r2, sl
 8001da6:	eb63 090b 	sbc.w	r9, r3, fp
 8001daa:	f04f 0200 	mov.w	r2, #0
 8001dae:	f04f 0300 	mov.w	r3, #0
 8001db2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001db6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001dba:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001dbe:	ebb2 0408 	subs.w	r4, r2, r8
 8001dc2:	eb63 0509 	sbc.w	r5, r3, r9
 8001dc6:	f04f 0200 	mov.w	r2, #0
 8001dca:	f04f 0300 	mov.w	r3, #0
 8001dce:	00eb      	lsls	r3, r5, #3
 8001dd0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001dd4:	00e2      	lsls	r2, r4, #3
 8001dd6:	4614      	mov	r4, r2
 8001dd8:	461d      	mov	r5, r3
 8001dda:	eb14 030a 	adds.w	r3, r4, sl
 8001dde:	603b      	str	r3, [r7, #0]
 8001de0:	eb45 030b 	adc.w	r3, r5, fp
 8001de4:	607b      	str	r3, [r7, #4]
 8001de6:	f04f 0200 	mov.w	r2, #0
 8001dea:	f04f 0300 	mov.w	r3, #0
 8001dee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001df2:	4629      	mov	r1, r5
 8001df4:	028b      	lsls	r3, r1, #10
 8001df6:	4621      	mov	r1, r4
 8001df8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001dfc:	4621      	mov	r1, r4
 8001dfe:	028a      	lsls	r2, r1, #10
 8001e00:	4610      	mov	r0, r2
 8001e02:	4619      	mov	r1, r3
 8001e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e06:	2200      	movs	r2, #0
 8001e08:	60bb      	str	r3, [r7, #8]
 8001e0a:	60fa      	str	r2, [r7, #12]
 8001e0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e10:	f7fe fa36 	bl	8000280 <__aeabi_uldivmod>
 8001e14:	4602      	mov	r2, r0
 8001e16:	460b      	mov	r3, r1
 8001e18:	4613      	mov	r3, r2
 8001e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e1c:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x180>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	0c1b      	lsrs	r3, r3, #16
 8001e22:	f003 0303 	and.w	r3, r3, #3
 8001e26:	3301      	adds	r3, #1
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001e2c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e34:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001e36:	e002      	b.n	8001e3e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e38:	4b05      	ldr	r3, [pc, #20]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x184>)
 8001e3a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001e3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3740      	adds	r7, #64	; 0x40
 8001e44:	46bd      	mov	sp, r7
 8001e46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	00f42400 	.word	0x00f42400
 8001e54:	017d7840 	.word	0x017d7840

08001e58 <__errno>:
 8001e58:	4b01      	ldr	r3, [pc, #4]	; (8001e60 <__errno+0x8>)
 8001e5a:	6818      	ldr	r0, [r3, #0]
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	2000000c 	.word	0x2000000c

08001e64 <__libc_init_array>:
 8001e64:	b570      	push	{r4, r5, r6, lr}
 8001e66:	4d0d      	ldr	r5, [pc, #52]	; (8001e9c <__libc_init_array+0x38>)
 8001e68:	4c0d      	ldr	r4, [pc, #52]	; (8001ea0 <__libc_init_array+0x3c>)
 8001e6a:	1b64      	subs	r4, r4, r5
 8001e6c:	10a4      	asrs	r4, r4, #2
 8001e6e:	2600      	movs	r6, #0
 8001e70:	42a6      	cmp	r6, r4
 8001e72:	d109      	bne.n	8001e88 <__libc_init_array+0x24>
 8001e74:	4d0b      	ldr	r5, [pc, #44]	; (8001ea4 <__libc_init_array+0x40>)
 8001e76:	4c0c      	ldr	r4, [pc, #48]	; (8001ea8 <__libc_init_array+0x44>)
 8001e78:	f000 fc8e 	bl	8002798 <_init>
 8001e7c:	1b64      	subs	r4, r4, r5
 8001e7e:	10a4      	asrs	r4, r4, #2
 8001e80:	2600      	movs	r6, #0
 8001e82:	42a6      	cmp	r6, r4
 8001e84:	d105      	bne.n	8001e92 <__libc_init_array+0x2e>
 8001e86:	bd70      	pop	{r4, r5, r6, pc}
 8001e88:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e8c:	4798      	blx	r3
 8001e8e:	3601      	adds	r6, #1
 8001e90:	e7ee      	b.n	8001e70 <__libc_init_array+0xc>
 8001e92:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e96:	4798      	blx	r3
 8001e98:	3601      	adds	r6, #1
 8001e9a:	e7f2      	b.n	8001e82 <__libc_init_array+0x1e>
 8001e9c:	08002820 	.word	0x08002820
 8001ea0:	08002820 	.word	0x08002820
 8001ea4:	08002820 	.word	0x08002820
 8001ea8:	08002824 	.word	0x08002824

08001eac <memset>:
 8001eac:	4402      	add	r2, r0
 8001eae:	4603      	mov	r3, r0
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d100      	bne.n	8001eb6 <memset+0xa>
 8001eb4:	4770      	bx	lr
 8001eb6:	f803 1b01 	strb.w	r1, [r3], #1
 8001eba:	e7f9      	b.n	8001eb0 <memset+0x4>

08001ebc <siprintf>:
 8001ebc:	b40e      	push	{r1, r2, r3}
 8001ebe:	b500      	push	{lr}
 8001ec0:	b09c      	sub	sp, #112	; 0x70
 8001ec2:	ab1d      	add	r3, sp, #116	; 0x74
 8001ec4:	9002      	str	r0, [sp, #8]
 8001ec6:	9006      	str	r0, [sp, #24]
 8001ec8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001ecc:	4809      	ldr	r0, [pc, #36]	; (8001ef4 <siprintf+0x38>)
 8001ece:	9107      	str	r1, [sp, #28]
 8001ed0:	9104      	str	r1, [sp, #16]
 8001ed2:	4909      	ldr	r1, [pc, #36]	; (8001ef8 <siprintf+0x3c>)
 8001ed4:	f853 2b04 	ldr.w	r2, [r3], #4
 8001ed8:	9105      	str	r1, [sp, #20]
 8001eda:	6800      	ldr	r0, [r0, #0]
 8001edc:	9301      	str	r3, [sp, #4]
 8001ede:	a902      	add	r1, sp, #8
 8001ee0:	f000 f868 	bl	8001fb4 <_svfiprintf_r>
 8001ee4:	9b02      	ldr	r3, [sp, #8]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	701a      	strb	r2, [r3, #0]
 8001eea:	b01c      	add	sp, #112	; 0x70
 8001eec:	f85d eb04 	ldr.w	lr, [sp], #4
 8001ef0:	b003      	add	sp, #12
 8001ef2:	4770      	bx	lr
 8001ef4:	2000000c 	.word	0x2000000c
 8001ef8:	ffff0208 	.word	0xffff0208

08001efc <__ssputs_r>:
 8001efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f00:	688e      	ldr	r6, [r1, #8]
 8001f02:	429e      	cmp	r6, r3
 8001f04:	4682      	mov	sl, r0
 8001f06:	460c      	mov	r4, r1
 8001f08:	4690      	mov	r8, r2
 8001f0a:	461f      	mov	r7, r3
 8001f0c:	d838      	bhi.n	8001f80 <__ssputs_r+0x84>
 8001f0e:	898a      	ldrh	r2, [r1, #12]
 8001f10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001f14:	d032      	beq.n	8001f7c <__ssputs_r+0x80>
 8001f16:	6825      	ldr	r5, [r4, #0]
 8001f18:	6909      	ldr	r1, [r1, #16]
 8001f1a:	eba5 0901 	sub.w	r9, r5, r1
 8001f1e:	6965      	ldr	r5, [r4, #20]
 8001f20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001f24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001f28:	3301      	adds	r3, #1
 8001f2a:	444b      	add	r3, r9
 8001f2c:	106d      	asrs	r5, r5, #1
 8001f2e:	429d      	cmp	r5, r3
 8001f30:	bf38      	it	cc
 8001f32:	461d      	movcc	r5, r3
 8001f34:	0553      	lsls	r3, r2, #21
 8001f36:	d531      	bpl.n	8001f9c <__ssputs_r+0xa0>
 8001f38:	4629      	mov	r1, r5
 8001f3a:	f000 fb63 	bl	8002604 <_malloc_r>
 8001f3e:	4606      	mov	r6, r0
 8001f40:	b950      	cbnz	r0, 8001f58 <__ssputs_r+0x5c>
 8001f42:	230c      	movs	r3, #12
 8001f44:	f8ca 3000 	str.w	r3, [sl]
 8001f48:	89a3      	ldrh	r3, [r4, #12]
 8001f4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f4e:	81a3      	strh	r3, [r4, #12]
 8001f50:	f04f 30ff 	mov.w	r0, #4294967295
 8001f54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f58:	6921      	ldr	r1, [r4, #16]
 8001f5a:	464a      	mov	r2, r9
 8001f5c:	f000 fabe 	bl	80024dc <memcpy>
 8001f60:	89a3      	ldrh	r3, [r4, #12]
 8001f62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001f66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f6a:	81a3      	strh	r3, [r4, #12]
 8001f6c:	6126      	str	r6, [r4, #16]
 8001f6e:	6165      	str	r5, [r4, #20]
 8001f70:	444e      	add	r6, r9
 8001f72:	eba5 0509 	sub.w	r5, r5, r9
 8001f76:	6026      	str	r6, [r4, #0]
 8001f78:	60a5      	str	r5, [r4, #8]
 8001f7a:	463e      	mov	r6, r7
 8001f7c:	42be      	cmp	r6, r7
 8001f7e:	d900      	bls.n	8001f82 <__ssputs_r+0x86>
 8001f80:	463e      	mov	r6, r7
 8001f82:	6820      	ldr	r0, [r4, #0]
 8001f84:	4632      	mov	r2, r6
 8001f86:	4641      	mov	r1, r8
 8001f88:	f000 fab6 	bl	80024f8 <memmove>
 8001f8c:	68a3      	ldr	r3, [r4, #8]
 8001f8e:	1b9b      	subs	r3, r3, r6
 8001f90:	60a3      	str	r3, [r4, #8]
 8001f92:	6823      	ldr	r3, [r4, #0]
 8001f94:	4433      	add	r3, r6
 8001f96:	6023      	str	r3, [r4, #0]
 8001f98:	2000      	movs	r0, #0
 8001f9a:	e7db      	b.n	8001f54 <__ssputs_r+0x58>
 8001f9c:	462a      	mov	r2, r5
 8001f9e:	f000 fba5 	bl	80026ec <_realloc_r>
 8001fa2:	4606      	mov	r6, r0
 8001fa4:	2800      	cmp	r0, #0
 8001fa6:	d1e1      	bne.n	8001f6c <__ssputs_r+0x70>
 8001fa8:	6921      	ldr	r1, [r4, #16]
 8001faa:	4650      	mov	r0, sl
 8001fac:	f000 fabe 	bl	800252c <_free_r>
 8001fb0:	e7c7      	b.n	8001f42 <__ssputs_r+0x46>
	...

08001fb4 <_svfiprintf_r>:
 8001fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fb8:	4698      	mov	r8, r3
 8001fba:	898b      	ldrh	r3, [r1, #12]
 8001fbc:	061b      	lsls	r3, r3, #24
 8001fbe:	b09d      	sub	sp, #116	; 0x74
 8001fc0:	4607      	mov	r7, r0
 8001fc2:	460d      	mov	r5, r1
 8001fc4:	4614      	mov	r4, r2
 8001fc6:	d50e      	bpl.n	8001fe6 <_svfiprintf_r+0x32>
 8001fc8:	690b      	ldr	r3, [r1, #16]
 8001fca:	b963      	cbnz	r3, 8001fe6 <_svfiprintf_r+0x32>
 8001fcc:	2140      	movs	r1, #64	; 0x40
 8001fce:	f000 fb19 	bl	8002604 <_malloc_r>
 8001fd2:	6028      	str	r0, [r5, #0]
 8001fd4:	6128      	str	r0, [r5, #16]
 8001fd6:	b920      	cbnz	r0, 8001fe2 <_svfiprintf_r+0x2e>
 8001fd8:	230c      	movs	r3, #12
 8001fda:	603b      	str	r3, [r7, #0]
 8001fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe0:	e0d1      	b.n	8002186 <_svfiprintf_r+0x1d2>
 8001fe2:	2340      	movs	r3, #64	; 0x40
 8001fe4:	616b      	str	r3, [r5, #20]
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	9309      	str	r3, [sp, #36]	; 0x24
 8001fea:	2320      	movs	r3, #32
 8001fec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001ff0:	f8cd 800c 	str.w	r8, [sp, #12]
 8001ff4:	2330      	movs	r3, #48	; 0x30
 8001ff6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80021a0 <_svfiprintf_r+0x1ec>
 8001ffa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001ffe:	f04f 0901 	mov.w	r9, #1
 8002002:	4623      	mov	r3, r4
 8002004:	469a      	mov	sl, r3
 8002006:	f813 2b01 	ldrb.w	r2, [r3], #1
 800200a:	b10a      	cbz	r2, 8002010 <_svfiprintf_r+0x5c>
 800200c:	2a25      	cmp	r2, #37	; 0x25
 800200e:	d1f9      	bne.n	8002004 <_svfiprintf_r+0x50>
 8002010:	ebba 0b04 	subs.w	fp, sl, r4
 8002014:	d00b      	beq.n	800202e <_svfiprintf_r+0x7a>
 8002016:	465b      	mov	r3, fp
 8002018:	4622      	mov	r2, r4
 800201a:	4629      	mov	r1, r5
 800201c:	4638      	mov	r0, r7
 800201e:	f7ff ff6d 	bl	8001efc <__ssputs_r>
 8002022:	3001      	adds	r0, #1
 8002024:	f000 80aa 	beq.w	800217c <_svfiprintf_r+0x1c8>
 8002028:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800202a:	445a      	add	r2, fp
 800202c:	9209      	str	r2, [sp, #36]	; 0x24
 800202e:	f89a 3000 	ldrb.w	r3, [sl]
 8002032:	2b00      	cmp	r3, #0
 8002034:	f000 80a2 	beq.w	800217c <_svfiprintf_r+0x1c8>
 8002038:	2300      	movs	r3, #0
 800203a:	f04f 32ff 	mov.w	r2, #4294967295
 800203e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002042:	f10a 0a01 	add.w	sl, sl, #1
 8002046:	9304      	str	r3, [sp, #16]
 8002048:	9307      	str	r3, [sp, #28]
 800204a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800204e:	931a      	str	r3, [sp, #104]	; 0x68
 8002050:	4654      	mov	r4, sl
 8002052:	2205      	movs	r2, #5
 8002054:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002058:	4851      	ldr	r0, [pc, #324]	; (80021a0 <_svfiprintf_r+0x1ec>)
 800205a:	f7fe f8c1 	bl	80001e0 <memchr>
 800205e:	9a04      	ldr	r2, [sp, #16]
 8002060:	b9d8      	cbnz	r0, 800209a <_svfiprintf_r+0xe6>
 8002062:	06d0      	lsls	r0, r2, #27
 8002064:	bf44      	itt	mi
 8002066:	2320      	movmi	r3, #32
 8002068:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800206c:	0711      	lsls	r1, r2, #28
 800206e:	bf44      	itt	mi
 8002070:	232b      	movmi	r3, #43	; 0x2b
 8002072:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002076:	f89a 3000 	ldrb.w	r3, [sl]
 800207a:	2b2a      	cmp	r3, #42	; 0x2a
 800207c:	d015      	beq.n	80020aa <_svfiprintf_r+0xf6>
 800207e:	9a07      	ldr	r2, [sp, #28]
 8002080:	4654      	mov	r4, sl
 8002082:	2000      	movs	r0, #0
 8002084:	f04f 0c0a 	mov.w	ip, #10
 8002088:	4621      	mov	r1, r4
 800208a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800208e:	3b30      	subs	r3, #48	; 0x30
 8002090:	2b09      	cmp	r3, #9
 8002092:	d94e      	bls.n	8002132 <_svfiprintf_r+0x17e>
 8002094:	b1b0      	cbz	r0, 80020c4 <_svfiprintf_r+0x110>
 8002096:	9207      	str	r2, [sp, #28]
 8002098:	e014      	b.n	80020c4 <_svfiprintf_r+0x110>
 800209a:	eba0 0308 	sub.w	r3, r0, r8
 800209e:	fa09 f303 	lsl.w	r3, r9, r3
 80020a2:	4313      	orrs	r3, r2
 80020a4:	9304      	str	r3, [sp, #16]
 80020a6:	46a2      	mov	sl, r4
 80020a8:	e7d2      	b.n	8002050 <_svfiprintf_r+0x9c>
 80020aa:	9b03      	ldr	r3, [sp, #12]
 80020ac:	1d19      	adds	r1, r3, #4
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	9103      	str	r1, [sp, #12]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	bfbb      	ittet	lt
 80020b6:	425b      	neglt	r3, r3
 80020b8:	f042 0202 	orrlt.w	r2, r2, #2
 80020bc:	9307      	strge	r3, [sp, #28]
 80020be:	9307      	strlt	r3, [sp, #28]
 80020c0:	bfb8      	it	lt
 80020c2:	9204      	strlt	r2, [sp, #16]
 80020c4:	7823      	ldrb	r3, [r4, #0]
 80020c6:	2b2e      	cmp	r3, #46	; 0x2e
 80020c8:	d10c      	bne.n	80020e4 <_svfiprintf_r+0x130>
 80020ca:	7863      	ldrb	r3, [r4, #1]
 80020cc:	2b2a      	cmp	r3, #42	; 0x2a
 80020ce:	d135      	bne.n	800213c <_svfiprintf_r+0x188>
 80020d0:	9b03      	ldr	r3, [sp, #12]
 80020d2:	1d1a      	adds	r2, r3, #4
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	9203      	str	r2, [sp, #12]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	bfb8      	it	lt
 80020dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80020e0:	3402      	adds	r4, #2
 80020e2:	9305      	str	r3, [sp, #20]
 80020e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80021b0 <_svfiprintf_r+0x1fc>
 80020e8:	7821      	ldrb	r1, [r4, #0]
 80020ea:	2203      	movs	r2, #3
 80020ec:	4650      	mov	r0, sl
 80020ee:	f7fe f877 	bl	80001e0 <memchr>
 80020f2:	b140      	cbz	r0, 8002106 <_svfiprintf_r+0x152>
 80020f4:	2340      	movs	r3, #64	; 0x40
 80020f6:	eba0 000a 	sub.w	r0, r0, sl
 80020fa:	fa03 f000 	lsl.w	r0, r3, r0
 80020fe:	9b04      	ldr	r3, [sp, #16]
 8002100:	4303      	orrs	r3, r0
 8002102:	3401      	adds	r4, #1
 8002104:	9304      	str	r3, [sp, #16]
 8002106:	f814 1b01 	ldrb.w	r1, [r4], #1
 800210a:	4826      	ldr	r0, [pc, #152]	; (80021a4 <_svfiprintf_r+0x1f0>)
 800210c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002110:	2206      	movs	r2, #6
 8002112:	f7fe f865 	bl	80001e0 <memchr>
 8002116:	2800      	cmp	r0, #0
 8002118:	d038      	beq.n	800218c <_svfiprintf_r+0x1d8>
 800211a:	4b23      	ldr	r3, [pc, #140]	; (80021a8 <_svfiprintf_r+0x1f4>)
 800211c:	bb1b      	cbnz	r3, 8002166 <_svfiprintf_r+0x1b2>
 800211e:	9b03      	ldr	r3, [sp, #12]
 8002120:	3307      	adds	r3, #7
 8002122:	f023 0307 	bic.w	r3, r3, #7
 8002126:	3308      	adds	r3, #8
 8002128:	9303      	str	r3, [sp, #12]
 800212a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800212c:	4433      	add	r3, r6
 800212e:	9309      	str	r3, [sp, #36]	; 0x24
 8002130:	e767      	b.n	8002002 <_svfiprintf_r+0x4e>
 8002132:	fb0c 3202 	mla	r2, ip, r2, r3
 8002136:	460c      	mov	r4, r1
 8002138:	2001      	movs	r0, #1
 800213a:	e7a5      	b.n	8002088 <_svfiprintf_r+0xd4>
 800213c:	2300      	movs	r3, #0
 800213e:	3401      	adds	r4, #1
 8002140:	9305      	str	r3, [sp, #20]
 8002142:	4619      	mov	r1, r3
 8002144:	f04f 0c0a 	mov.w	ip, #10
 8002148:	4620      	mov	r0, r4
 800214a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800214e:	3a30      	subs	r2, #48	; 0x30
 8002150:	2a09      	cmp	r2, #9
 8002152:	d903      	bls.n	800215c <_svfiprintf_r+0x1a8>
 8002154:	2b00      	cmp	r3, #0
 8002156:	d0c5      	beq.n	80020e4 <_svfiprintf_r+0x130>
 8002158:	9105      	str	r1, [sp, #20]
 800215a:	e7c3      	b.n	80020e4 <_svfiprintf_r+0x130>
 800215c:	fb0c 2101 	mla	r1, ip, r1, r2
 8002160:	4604      	mov	r4, r0
 8002162:	2301      	movs	r3, #1
 8002164:	e7f0      	b.n	8002148 <_svfiprintf_r+0x194>
 8002166:	ab03      	add	r3, sp, #12
 8002168:	9300      	str	r3, [sp, #0]
 800216a:	462a      	mov	r2, r5
 800216c:	4b0f      	ldr	r3, [pc, #60]	; (80021ac <_svfiprintf_r+0x1f8>)
 800216e:	a904      	add	r1, sp, #16
 8002170:	4638      	mov	r0, r7
 8002172:	f3af 8000 	nop.w
 8002176:	1c42      	adds	r2, r0, #1
 8002178:	4606      	mov	r6, r0
 800217a:	d1d6      	bne.n	800212a <_svfiprintf_r+0x176>
 800217c:	89ab      	ldrh	r3, [r5, #12]
 800217e:	065b      	lsls	r3, r3, #25
 8002180:	f53f af2c 	bmi.w	8001fdc <_svfiprintf_r+0x28>
 8002184:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002186:	b01d      	add	sp, #116	; 0x74
 8002188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800218c:	ab03      	add	r3, sp, #12
 800218e:	9300      	str	r3, [sp, #0]
 8002190:	462a      	mov	r2, r5
 8002192:	4b06      	ldr	r3, [pc, #24]	; (80021ac <_svfiprintf_r+0x1f8>)
 8002194:	a904      	add	r1, sp, #16
 8002196:	4638      	mov	r0, r7
 8002198:	f000 f87a 	bl	8002290 <_printf_i>
 800219c:	e7eb      	b.n	8002176 <_svfiprintf_r+0x1c2>
 800219e:	bf00      	nop
 80021a0:	080027e4 	.word	0x080027e4
 80021a4:	080027ee 	.word	0x080027ee
 80021a8:	00000000 	.word	0x00000000
 80021ac:	08001efd 	.word	0x08001efd
 80021b0:	080027ea 	.word	0x080027ea

080021b4 <_printf_common>:
 80021b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80021b8:	4616      	mov	r6, r2
 80021ba:	4699      	mov	r9, r3
 80021bc:	688a      	ldr	r2, [r1, #8]
 80021be:	690b      	ldr	r3, [r1, #16]
 80021c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80021c4:	4293      	cmp	r3, r2
 80021c6:	bfb8      	it	lt
 80021c8:	4613      	movlt	r3, r2
 80021ca:	6033      	str	r3, [r6, #0]
 80021cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80021d0:	4607      	mov	r7, r0
 80021d2:	460c      	mov	r4, r1
 80021d4:	b10a      	cbz	r2, 80021da <_printf_common+0x26>
 80021d6:	3301      	adds	r3, #1
 80021d8:	6033      	str	r3, [r6, #0]
 80021da:	6823      	ldr	r3, [r4, #0]
 80021dc:	0699      	lsls	r1, r3, #26
 80021de:	bf42      	ittt	mi
 80021e0:	6833      	ldrmi	r3, [r6, #0]
 80021e2:	3302      	addmi	r3, #2
 80021e4:	6033      	strmi	r3, [r6, #0]
 80021e6:	6825      	ldr	r5, [r4, #0]
 80021e8:	f015 0506 	ands.w	r5, r5, #6
 80021ec:	d106      	bne.n	80021fc <_printf_common+0x48>
 80021ee:	f104 0a19 	add.w	sl, r4, #25
 80021f2:	68e3      	ldr	r3, [r4, #12]
 80021f4:	6832      	ldr	r2, [r6, #0]
 80021f6:	1a9b      	subs	r3, r3, r2
 80021f8:	42ab      	cmp	r3, r5
 80021fa:	dc26      	bgt.n	800224a <_printf_common+0x96>
 80021fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002200:	1e13      	subs	r3, r2, #0
 8002202:	6822      	ldr	r2, [r4, #0]
 8002204:	bf18      	it	ne
 8002206:	2301      	movne	r3, #1
 8002208:	0692      	lsls	r2, r2, #26
 800220a:	d42b      	bmi.n	8002264 <_printf_common+0xb0>
 800220c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002210:	4649      	mov	r1, r9
 8002212:	4638      	mov	r0, r7
 8002214:	47c0      	blx	r8
 8002216:	3001      	adds	r0, #1
 8002218:	d01e      	beq.n	8002258 <_printf_common+0xa4>
 800221a:	6823      	ldr	r3, [r4, #0]
 800221c:	68e5      	ldr	r5, [r4, #12]
 800221e:	6832      	ldr	r2, [r6, #0]
 8002220:	f003 0306 	and.w	r3, r3, #6
 8002224:	2b04      	cmp	r3, #4
 8002226:	bf08      	it	eq
 8002228:	1aad      	subeq	r5, r5, r2
 800222a:	68a3      	ldr	r3, [r4, #8]
 800222c:	6922      	ldr	r2, [r4, #16]
 800222e:	bf0c      	ite	eq
 8002230:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002234:	2500      	movne	r5, #0
 8002236:	4293      	cmp	r3, r2
 8002238:	bfc4      	itt	gt
 800223a:	1a9b      	subgt	r3, r3, r2
 800223c:	18ed      	addgt	r5, r5, r3
 800223e:	2600      	movs	r6, #0
 8002240:	341a      	adds	r4, #26
 8002242:	42b5      	cmp	r5, r6
 8002244:	d11a      	bne.n	800227c <_printf_common+0xc8>
 8002246:	2000      	movs	r0, #0
 8002248:	e008      	b.n	800225c <_printf_common+0xa8>
 800224a:	2301      	movs	r3, #1
 800224c:	4652      	mov	r2, sl
 800224e:	4649      	mov	r1, r9
 8002250:	4638      	mov	r0, r7
 8002252:	47c0      	blx	r8
 8002254:	3001      	adds	r0, #1
 8002256:	d103      	bne.n	8002260 <_printf_common+0xac>
 8002258:	f04f 30ff 	mov.w	r0, #4294967295
 800225c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002260:	3501      	adds	r5, #1
 8002262:	e7c6      	b.n	80021f2 <_printf_common+0x3e>
 8002264:	18e1      	adds	r1, r4, r3
 8002266:	1c5a      	adds	r2, r3, #1
 8002268:	2030      	movs	r0, #48	; 0x30
 800226a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800226e:	4422      	add	r2, r4
 8002270:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002274:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002278:	3302      	adds	r3, #2
 800227a:	e7c7      	b.n	800220c <_printf_common+0x58>
 800227c:	2301      	movs	r3, #1
 800227e:	4622      	mov	r2, r4
 8002280:	4649      	mov	r1, r9
 8002282:	4638      	mov	r0, r7
 8002284:	47c0      	blx	r8
 8002286:	3001      	adds	r0, #1
 8002288:	d0e6      	beq.n	8002258 <_printf_common+0xa4>
 800228a:	3601      	adds	r6, #1
 800228c:	e7d9      	b.n	8002242 <_printf_common+0x8e>
	...

08002290 <_printf_i>:
 8002290:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002294:	7e0f      	ldrb	r7, [r1, #24]
 8002296:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002298:	2f78      	cmp	r7, #120	; 0x78
 800229a:	4691      	mov	r9, r2
 800229c:	4680      	mov	r8, r0
 800229e:	460c      	mov	r4, r1
 80022a0:	469a      	mov	sl, r3
 80022a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80022a6:	d807      	bhi.n	80022b8 <_printf_i+0x28>
 80022a8:	2f62      	cmp	r7, #98	; 0x62
 80022aa:	d80a      	bhi.n	80022c2 <_printf_i+0x32>
 80022ac:	2f00      	cmp	r7, #0
 80022ae:	f000 80d8 	beq.w	8002462 <_printf_i+0x1d2>
 80022b2:	2f58      	cmp	r7, #88	; 0x58
 80022b4:	f000 80a3 	beq.w	80023fe <_printf_i+0x16e>
 80022b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80022bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80022c0:	e03a      	b.n	8002338 <_printf_i+0xa8>
 80022c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80022c6:	2b15      	cmp	r3, #21
 80022c8:	d8f6      	bhi.n	80022b8 <_printf_i+0x28>
 80022ca:	a101      	add	r1, pc, #4	; (adr r1, 80022d0 <_printf_i+0x40>)
 80022cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80022d0:	08002329 	.word	0x08002329
 80022d4:	0800233d 	.word	0x0800233d
 80022d8:	080022b9 	.word	0x080022b9
 80022dc:	080022b9 	.word	0x080022b9
 80022e0:	080022b9 	.word	0x080022b9
 80022e4:	080022b9 	.word	0x080022b9
 80022e8:	0800233d 	.word	0x0800233d
 80022ec:	080022b9 	.word	0x080022b9
 80022f0:	080022b9 	.word	0x080022b9
 80022f4:	080022b9 	.word	0x080022b9
 80022f8:	080022b9 	.word	0x080022b9
 80022fc:	08002449 	.word	0x08002449
 8002300:	0800236d 	.word	0x0800236d
 8002304:	0800242b 	.word	0x0800242b
 8002308:	080022b9 	.word	0x080022b9
 800230c:	080022b9 	.word	0x080022b9
 8002310:	0800246b 	.word	0x0800246b
 8002314:	080022b9 	.word	0x080022b9
 8002318:	0800236d 	.word	0x0800236d
 800231c:	080022b9 	.word	0x080022b9
 8002320:	080022b9 	.word	0x080022b9
 8002324:	08002433 	.word	0x08002433
 8002328:	682b      	ldr	r3, [r5, #0]
 800232a:	1d1a      	adds	r2, r3, #4
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	602a      	str	r2, [r5, #0]
 8002330:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002334:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002338:	2301      	movs	r3, #1
 800233a:	e0a3      	b.n	8002484 <_printf_i+0x1f4>
 800233c:	6820      	ldr	r0, [r4, #0]
 800233e:	6829      	ldr	r1, [r5, #0]
 8002340:	0606      	lsls	r6, r0, #24
 8002342:	f101 0304 	add.w	r3, r1, #4
 8002346:	d50a      	bpl.n	800235e <_printf_i+0xce>
 8002348:	680e      	ldr	r6, [r1, #0]
 800234a:	602b      	str	r3, [r5, #0]
 800234c:	2e00      	cmp	r6, #0
 800234e:	da03      	bge.n	8002358 <_printf_i+0xc8>
 8002350:	232d      	movs	r3, #45	; 0x2d
 8002352:	4276      	negs	r6, r6
 8002354:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002358:	485e      	ldr	r0, [pc, #376]	; (80024d4 <_printf_i+0x244>)
 800235a:	230a      	movs	r3, #10
 800235c:	e019      	b.n	8002392 <_printf_i+0x102>
 800235e:	680e      	ldr	r6, [r1, #0]
 8002360:	602b      	str	r3, [r5, #0]
 8002362:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002366:	bf18      	it	ne
 8002368:	b236      	sxthne	r6, r6
 800236a:	e7ef      	b.n	800234c <_printf_i+0xbc>
 800236c:	682b      	ldr	r3, [r5, #0]
 800236e:	6820      	ldr	r0, [r4, #0]
 8002370:	1d19      	adds	r1, r3, #4
 8002372:	6029      	str	r1, [r5, #0]
 8002374:	0601      	lsls	r1, r0, #24
 8002376:	d501      	bpl.n	800237c <_printf_i+0xec>
 8002378:	681e      	ldr	r6, [r3, #0]
 800237a:	e002      	b.n	8002382 <_printf_i+0xf2>
 800237c:	0646      	lsls	r6, r0, #25
 800237e:	d5fb      	bpl.n	8002378 <_printf_i+0xe8>
 8002380:	881e      	ldrh	r6, [r3, #0]
 8002382:	4854      	ldr	r0, [pc, #336]	; (80024d4 <_printf_i+0x244>)
 8002384:	2f6f      	cmp	r7, #111	; 0x6f
 8002386:	bf0c      	ite	eq
 8002388:	2308      	moveq	r3, #8
 800238a:	230a      	movne	r3, #10
 800238c:	2100      	movs	r1, #0
 800238e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002392:	6865      	ldr	r5, [r4, #4]
 8002394:	60a5      	str	r5, [r4, #8]
 8002396:	2d00      	cmp	r5, #0
 8002398:	bfa2      	ittt	ge
 800239a:	6821      	ldrge	r1, [r4, #0]
 800239c:	f021 0104 	bicge.w	r1, r1, #4
 80023a0:	6021      	strge	r1, [r4, #0]
 80023a2:	b90e      	cbnz	r6, 80023a8 <_printf_i+0x118>
 80023a4:	2d00      	cmp	r5, #0
 80023a6:	d04d      	beq.n	8002444 <_printf_i+0x1b4>
 80023a8:	4615      	mov	r5, r2
 80023aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80023ae:	fb03 6711 	mls	r7, r3, r1, r6
 80023b2:	5dc7      	ldrb	r7, [r0, r7]
 80023b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80023b8:	4637      	mov	r7, r6
 80023ba:	42bb      	cmp	r3, r7
 80023bc:	460e      	mov	r6, r1
 80023be:	d9f4      	bls.n	80023aa <_printf_i+0x11a>
 80023c0:	2b08      	cmp	r3, #8
 80023c2:	d10b      	bne.n	80023dc <_printf_i+0x14c>
 80023c4:	6823      	ldr	r3, [r4, #0]
 80023c6:	07de      	lsls	r6, r3, #31
 80023c8:	d508      	bpl.n	80023dc <_printf_i+0x14c>
 80023ca:	6923      	ldr	r3, [r4, #16]
 80023cc:	6861      	ldr	r1, [r4, #4]
 80023ce:	4299      	cmp	r1, r3
 80023d0:	bfde      	ittt	le
 80023d2:	2330      	movle	r3, #48	; 0x30
 80023d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80023d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80023dc:	1b52      	subs	r2, r2, r5
 80023de:	6122      	str	r2, [r4, #16]
 80023e0:	f8cd a000 	str.w	sl, [sp]
 80023e4:	464b      	mov	r3, r9
 80023e6:	aa03      	add	r2, sp, #12
 80023e8:	4621      	mov	r1, r4
 80023ea:	4640      	mov	r0, r8
 80023ec:	f7ff fee2 	bl	80021b4 <_printf_common>
 80023f0:	3001      	adds	r0, #1
 80023f2:	d14c      	bne.n	800248e <_printf_i+0x1fe>
 80023f4:	f04f 30ff 	mov.w	r0, #4294967295
 80023f8:	b004      	add	sp, #16
 80023fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023fe:	4835      	ldr	r0, [pc, #212]	; (80024d4 <_printf_i+0x244>)
 8002400:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002404:	6829      	ldr	r1, [r5, #0]
 8002406:	6823      	ldr	r3, [r4, #0]
 8002408:	f851 6b04 	ldr.w	r6, [r1], #4
 800240c:	6029      	str	r1, [r5, #0]
 800240e:	061d      	lsls	r5, r3, #24
 8002410:	d514      	bpl.n	800243c <_printf_i+0x1ac>
 8002412:	07df      	lsls	r7, r3, #31
 8002414:	bf44      	itt	mi
 8002416:	f043 0320 	orrmi.w	r3, r3, #32
 800241a:	6023      	strmi	r3, [r4, #0]
 800241c:	b91e      	cbnz	r6, 8002426 <_printf_i+0x196>
 800241e:	6823      	ldr	r3, [r4, #0]
 8002420:	f023 0320 	bic.w	r3, r3, #32
 8002424:	6023      	str	r3, [r4, #0]
 8002426:	2310      	movs	r3, #16
 8002428:	e7b0      	b.n	800238c <_printf_i+0xfc>
 800242a:	6823      	ldr	r3, [r4, #0]
 800242c:	f043 0320 	orr.w	r3, r3, #32
 8002430:	6023      	str	r3, [r4, #0]
 8002432:	2378      	movs	r3, #120	; 0x78
 8002434:	4828      	ldr	r0, [pc, #160]	; (80024d8 <_printf_i+0x248>)
 8002436:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800243a:	e7e3      	b.n	8002404 <_printf_i+0x174>
 800243c:	0659      	lsls	r1, r3, #25
 800243e:	bf48      	it	mi
 8002440:	b2b6      	uxthmi	r6, r6
 8002442:	e7e6      	b.n	8002412 <_printf_i+0x182>
 8002444:	4615      	mov	r5, r2
 8002446:	e7bb      	b.n	80023c0 <_printf_i+0x130>
 8002448:	682b      	ldr	r3, [r5, #0]
 800244a:	6826      	ldr	r6, [r4, #0]
 800244c:	6961      	ldr	r1, [r4, #20]
 800244e:	1d18      	adds	r0, r3, #4
 8002450:	6028      	str	r0, [r5, #0]
 8002452:	0635      	lsls	r5, r6, #24
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	d501      	bpl.n	800245c <_printf_i+0x1cc>
 8002458:	6019      	str	r1, [r3, #0]
 800245a:	e002      	b.n	8002462 <_printf_i+0x1d2>
 800245c:	0670      	lsls	r0, r6, #25
 800245e:	d5fb      	bpl.n	8002458 <_printf_i+0x1c8>
 8002460:	8019      	strh	r1, [r3, #0]
 8002462:	2300      	movs	r3, #0
 8002464:	6123      	str	r3, [r4, #16]
 8002466:	4615      	mov	r5, r2
 8002468:	e7ba      	b.n	80023e0 <_printf_i+0x150>
 800246a:	682b      	ldr	r3, [r5, #0]
 800246c:	1d1a      	adds	r2, r3, #4
 800246e:	602a      	str	r2, [r5, #0]
 8002470:	681d      	ldr	r5, [r3, #0]
 8002472:	6862      	ldr	r2, [r4, #4]
 8002474:	2100      	movs	r1, #0
 8002476:	4628      	mov	r0, r5
 8002478:	f7fd feb2 	bl	80001e0 <memchr>
 800247c:	b108      	cbz	r0, 8002482 <_printf_i+0x1f2>
 800247e:	1b40      	subs	r0, r0, r5
 8002480:	6060      	str	r0, [r4, #4]
 8002482:	6863      	ldr	r3, [r4, #4]
 8002484:	6123      	str	r3, [r4, #16]
 8002486:	2300      	movs	r3, #0
 8002488:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800248c:	e7a8      	b.n	80023e0 <_printf_i+0x150>
 800248e:	6923      	ldr	r3, [r4, #16]
 8002490:	462a      	mov	r2, r5
 8002492:	4649      	mov	r1, r9
 8002494:	4640      	mov	r0, r8
 8002496:	47d0      	blx	sl
 8002498:	3001      	adds	r0, #1
 800249a:	d0ab      	beq.n	80023f4 <_printf_i+0x164>
 800249c:	6823      	ldr	r3, [r4, #0]
 800249e:	079b      	lsls	r3, r3, #30
 80024a0:	d413      	bmi.n	80024ca <_printf_i+0x23a>
 80024a2:	68e0      	ldr	r0, [r4, #12]
 80024a4:	9b03      	ldr	r3, [sp, #12]
 80024a6:	4298      	cmp	r0, r3
 80024a8:	bfb8      	it	lt
 80024aa:	4618      	movlt	r0, r3
 80024ac:	e7a4      	b.n	80023f8 <_printf_i+0x168>
 80024ae:	2301      	movs	r3, #1
 80024b0:	4632      	mov	r2, r6
 80024b2:	4649      	mov	r1, r9
 80024b4:	4640      	mov	r0, r8
 80024b6:	47d0      	blx	sl
 80024b8:	3001      	adds	r0, #1
 80024ba:	d09b      	beq.n	80023f4 <_printf_i+0x164>
 80024bc:	3501      	adds	r5, #1
 80024be:	68e3      	ldr	r3, [r4, #12]
 80024c0:	9903      	ldr	r1, [sp, #12]
 80024c2:	1a5b      	subs	r3, r3, r1
 80024c4:	42ab      	cmp	r3, r5
 80024c6:	dcf2      	bgt.n	80024ae <_printf_i+0x21e>
 80024c8:	e7eb      	b.n	80024a2 <_printf_i+0x212>
 80024ca:	2500      	movs	r5, #0
 80024cc:	f104 0619 	add.w	r6, r4, #25
 80024d0:	e7f5      	b.n	80024be <_printf_i+0x22e>
 80024d2:	bf00      	nop
 80024d4:	080027f5 	.word	0x080027f5
 80024d8:	08002806 	.word	0x08002806

080024dc <memcpy>:
 80024dc:	440a      	add	r2, r1
 80024de:	4291      	cmp	r1, r2
 80024e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80024e4:	d100      	bne.n	80024e8 <memcpy+0xc>
 80024e6:	4770      	bx	lr
 80024e8:	b510      	push	{r4, lr}
 80024ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80024ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80024f2:	4291      	cmp	r1, r2
 80024f4:	d1f9      	bne.n	80024ea <memcpy+0xe>
 80024f6:	bd10      	pop	{r4, pc}

080024f8 <memmove>:
 80024f8:	4288      	cmp	r0, r1
 80024fa:	b510      	push	{r4, lr}
 80024fc:	eb01 0402 	add.w	r4, r1, r2
 8002500:	d902      	bls.n	8002508 <memmove+0x10>
 8002502:	4284      	cmp	r4, r0
 8002504:	4623      	mov	r3, r4
 8002506:	d807      	bhi.n	8002518 <memmove+0x20>
 8002508:	1e43      	subs	r3, r0, #1
 800250a:	42a1      	cmp	r1, r4
 800250c:	d008      	beq.n	8002520 <memmove+0x28>
 800250e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002512:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002516:	e7f8      	b.n	800250a <memmove+0x12>
 8002518:	4402      	add	r2, r0
 800251a:	4601      	mov	r1, r0
 800251c:	428a      	cmp	r2, r1
 800251e:	d100      	bne.n	8002522 <memmove+0x2a>
 8002520:	bd10      	pop	{r4, pc}
 8002522:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002526:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800252a:	e7f7      	b.n	800251c <memmove+0x24>

0800252c <_free_r>:
 800252c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800252e:	2900      	cmp	r1, #0
 8002530:	d044      	beq.n	80025bc <_free_r+0x90>
 8002532:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002536:	9001      	str	r0, [sp, #4]
 8002538:	2b00      	cmp	r3, #0
 800253a:	f1a1 0404 	sub.w	r4, r1, #4
 800253e:	bfb8      	it	lt
 8002540:	18e4      	addlt	r4, r4, r3
 8002542:	f000 f913 	bl	800276c <__malloc_lock>
 8002546:	4a1e      	ldr	r2, [pc, #120]	; (80025c0 <_free_r+0x94>)
 8002548:	9801      	ldr	r0, [sp, #4]
 800254a:	6813      	ldr	r3, [r2, #0]
 800254c:	b933      	cbnz	r3, 800255c <_free_r+0x30>
 800254e:	6063      	str	r3, [r4, #4]
 8002550:	6014      	str	r4, [r2, #0]
 8002552:	b003      	add	sp, #12
 8002554:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002558:	f000 b90e 	b.w	8002778 <__malloc_unlock>
 800255c:	42a3      	cmp	r3, r4
 800255e:	d908      	bls.n	8002572 <_free_r+0x46>
 8002560:	6825      	ldr	r5, [r4, #0]
 8002562:	1961      	adds	r1, r4, r5
 8002564:	428b      	cmp	r3, r1
 8002566:	bf01      	itttt	eq
 8002568:	6819      	ldreq	r1, [r3, #0]
 800256a:	685b      	ldreq	r3, [r3, #4]
 800256c:	1949      	addeq	r1, r1, r5
 800256e:	6021      	streq	r1, [r4, #0]
 8002570:	e7ed      	b.n	800254e <_free_r+0x22>
 8002572:	461a      	mov	r2, r3
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	b10b      	cbz	r3, 800257c <_free_r+0x50>
 8002578:	42a3      	cmp	r3, r4
 800257a:	d9fa      	bls.n	8002572 <_free_r+0x46>
 800257c:	6811      	ldr	r1, [r2, #0]
 800257e:	1855      	adds	r5, r2, r1
 8002580:	42a5      	cmp	r5, r4
 8002582:	d10b      	bne.n	800259c <_free_r+0x70>
 8002584:	6824      	ldr	r4, [r4, #0]
 8002586:	4421      	add	r1, r4
 8002588:	1854      	adds	r4, r2, r1
 800258a:	42a3      	cmp	r3, r4
 800258c:	6011      	str	r1, [r2, #0]
 800258e:	d1e0      	bne.n	8002552 <_free_r+0x26>
 8002590:	681c      	ldr	r4, [r3, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	6053      	str	r3, [r2, #4]
 8002596:	4421      	add	r1, r4
 8002598:	6011      	str	r1, [r2, #0]
 800259a:	e7da      	b.n	8002552 <_free_r+0x26>
 800259c:	d902      	bls.n	80025a4 <_free_r+0x78>
 800259e:	230c      	movs	r3, #12
 80025a0:	6003      	str	r3, [r0, #0]
 80025a2:	e7d6      	b.n	8002552 <_free_r+0x26>
 80025a4:	6825      	ldr	r5, [r4, #0]
 80025a6:	1961      	adds	r1, r4, r5
 80025a8:	428b      	cmp	r3, r1
 80025aa:	bf04      	itt	eq
 80025ac:	6819      	ldreq	r1, [r3, #0]
 80025ae:	685b      	ldreq	r3, [r3, #4]
 80025b0:	6063      	str	r3, [r4, #4]
 80025b2:	bf04      	itt	eq
 80025b4:	1949      	addeq	r1, r1, r5
 80025b6:	6021      	streq	r1, [r4, #0]
 80025b8:	6054      	str	r4, [r2, #4]
 80025ba:	e7ca      	b.n	8002552 <_free_r+0x26>
 80025bc:	b003      	add	sp, #12
 80025be:	bd30      	pop	{r4, r5, pc}
 80025c0:	20000094 	.word	0x20000094

080025c4 <sbrk_aligned>:
 80025c4:	b570      	push	{r4, r5, r6, lr}
 80025c6:	4e0e      	ldr	r6, [pc, #56]	; (8002600 <sbrk_aligned+0x3c>)
 80025c8:	460c      	mov	r4, r1
 80025ca:	6831      	ldr	r1, [r6, #0]
 80025cc:	4605      	mov	r5, r0
 80025ce:	b911      	cbnz	r1, 80025d6 <sbrk_aligned+0x12>
 80025d0:	f000 f8bc 	bl	800274c <_sbrk_r>
 80025d4:	6030      	str	r0, [r6, #0]
 80025d6:	4621      	mov	r1, r4
 80025d8:	4628      	mov	r0, r5
 80025da:	f000 f8b7 	bl	800274c <_sbrk_r>
 80025de:	1c43      	adds	r3, r0, #1
 80025e0:	d00a      	beq.n	80025f8 <sbrk_aligned+0x34>
 80025e2:	1cc4      	adds	r4, r0, #3
 80025e4:	f024 0403 	bic.w	r4, r4, #3
 80025e8:	42a0      	cmp	r0, r4
 80025ea:	d007      	beq.n	80025fc <sbrk_aligned+0x38>
 80025ec:	1a21      	subs	r1, r4, r0
 80025ee:	4628      	mov	r0, r5
 80025f0:	f000 f8ac 	bl	800274c <_sbrk_r>
 80025f4:	3001      	adds	r0, #1
 80025f6:	d101      	bne.n	80025fc <sbrk_aligned+0x38>
 80025f8:	f04f 34ff 	mov.w	r4, #4294967295
 80025fc:	4620      	mov	r0, r4
 80025fe:	bd70      	pop	{r4, r5, r6, pc}
 8002600:	20000098 	.word	0x20000098

08002604 <_malloc_r>:
 8002604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002608:	1ccd      	adds	r5, r1, #3
 800260a:	f025 0503 	bic.w	r5, r5, #3
 800260e:	3508      	adds	r5, #8
 8002610:	2d0c      	cmp	r5, #12
 8002612:	bf38      	it	cc
 8002614:	250c      	movcc	r5, #12
 8002616:	2d00      	cmp	r5, #0
 8002618:	4607      	mov	r7, r0
 800261a:	db01      	blt.n	8002620 <_malloc_r+0x1c>
 800261c:	42a9      	cmp	r1, r5
 800261e:	d905      	bls.n	800262c <_malloc_r+0x28>
 8002620:	230c      	movs	r3, #12
 8002622:	603b      	str	r3, [r7, #0]
 8002624:	2600      	movs	r6, #0
 8002626:	4630      	mov	r0, r6
 8002628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800262c:	4e2e      	ldr	r6, [pc, #184]	; (80026e8 <_malloc_r+0xe4>)
 800262e:	f000 f89d 	bl	800276c <__malloc_lock>
 8002632:	6833      	ldr	r3, [r6, #0]
 8002634:	461c      	mov	r4, r3
 8002636:	bb34      	cbnz	r4, 8002686 <_malloc_r+0x82>
 8002638:	4629      	mov	r1, r5
 800263a:	4638      	mov	r0, r7
 800263c:	f7ff ffc2 	bl	80025c4 <sbrk_aligned>
 8002640:	1c43      	adds	r3, r0, #1
 8002642:	4604      	mov	r4, r0
 8002644:	d14d      	bne.n	80026e2 <_malloc_r+0xde>
 8002646:	6834      	ldr	r4, [r6, #0]
 8002648:	4626      	mov	r6, r4
 800264a:	2e00      	cmp	r6, #0
 800264c:	d140      	bne.n	80026d0 <_malloc_r+0xcc>
 800264e:	6823      	ldr	r3, [r4, #0]
 8002650:	4631      	mov	r1, r6
 8002652:	4638      	mov	r0, r7
 8002654:	eb04 0803 	add.w	r8, r4, r3
 8002658:	f000 f878 	bl	800274c <_sbrk_r>
 800265c:	4580      	cmp	r8, r0
 800265e:	d13a      	bne.n	80026d6 <_malloc_r+0xd2>
 8002660:	6821      	ldr	r1, [r4, #0]
 8002662:	3503      	adds	r5, #3
 8002664:	1a6d      	subs	r5, r5, r1
 8002666:	f025 0503 	bic.w	r5, r5, #3
 800266a:	3508      	adds	r5, #8
 800266c:	2d0c      	cmp	r5, #12
 800266e:	bf38      	it	cc
 8002670:	250c      	movcc	r5, #12
 8002672:	4629      	mov	r1, r5
 8002674:	4638      	mov	r0, r7
 8002676:	f7ff ffa5 	bl	80025c4 <sbrk_aligned>
 800267a:	3001      	adds	r0, #1
 800267c:	d02b      	beq.n	80026d6 <_malloc_r+0xd2>
 800267e:	6823      	ldr	r3, [r4, #0]
 8002680:	442b      	add	r3, r5
 8002682:	6023      	str	r3, [r4, #0]
 8002684:	e00e      	b.n	80026a4 <_malloc_r+0xa0>
 8002686:	6822      	ldr	r2, [r4, #0]
 8002688:	1b52      	subs	r2, r2, r5
 800268a:	d41e      	bmi.n	80026ca <_malloc_r+0xc6>
 800268c:	2a0b      	cmp	r2, #11
 800268e:	d916      	bls.n	80026be <_malloc_r+0xba>
 8002690:	1961      	adds	r1, r4, r5
 8002692:	42a3      	cmp	r3, r4
 8002694:	6025      	str	r5, [r4, #0]
 8002696:	bf18      	it	ne
 8002698:	6059      	strne	r1, [r3, #4]
 800269a:	6863      	ldr	r3, [r4, #4]
 800269c:	bf08      	it	eq
 800269e:	6031      	streq	r1, [r6, #0]
 80026a0:	5162      	str	r2, [r4, r5]
 80026a2:	604b      	str	r3, [r1, #4]
 80026a4:	4638      	mov	r0, r7
 80026a6:	f104 060b 	add.w	r6, r4, #11
 80026aa:	f000 f865 	bl	8002778 <__malloc_unlock>
 80026ae:	f026 0607 	bic.w	r6, r6, #7
 80026b2:	1d23      	adds	r3, r4, #4
 80026b4:	1af2      	subs	r2, r6, r3
 80026b6:	d0b6      	beq.n	8002626 <_malloc_r+0x22>
 80026b8:	1b9b      	subs	r3, r3, r6
 80026ba:	50a3      	str	r3, [r4, r2]
 80026bc:	e7b3      	b.n	8002626 <_malloc_r+0x22>
 80026be:	6862      	ldr	r2, [r4, #4]
 80026c0:	42a3      	cmp	r3, r4
 80026c2:	bf0c      	ite	eq
 80026c4:	6032      	streq	r2, [r6, #0]
 80026c6:	605a      	strne	r2, [r3, #4]
 80026c8:	e7ec      	b.n	80026a4 <_malloc_r+0xa0>
 80026ca:	4623      	mov	r3, r4
 80026cc:	6864      	ldr	r4, [r4, #4]
 80026ce:	e7b2      	b.n	8002636 <_malloc_r+0x32>
 80026d0:	4634      	mov	r4, r6
 80026d2:	6876      	ldr	r6, [r6, #4]
 80026d4:	e7b9      	b.n	800264a <_malloc_r+0x46>
 80026d6:	230c      	movs	r3, #12
 80026d8:	603b      	str	r3, [r7, #0]
 80026da:	4638      	mov	r0, r7
 80026dc:	f000 f84c 	bl	8002778 <__malloc_unlock>
 80026e0:	e7a1      	b.n	8002626 <_malloc_r+0x22>
 80026e2:	6025      	str	r5, [r4, #0]
 80026e4:	e7de      	b.n	80026a4 <_malloc_r+0xa0>
 80026e6:	bf00      	nop
 80026e8:	20000094 	.word	0x20000094

080026ec <_realloc_r>:
 80026ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026f0:	4680      	mov	r8, r0
 80026f2:	4614      	mov	r4, r2
 80026f4:	460e      	mov	r6, r1
 80026f6:	b921      	cbnz	r1, 8002702 <_realloc_r+0x16>
 80026f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80026fc:	4611      	mov	r1, r2
 80026fe:	f7ff bf81 	b.w	8002604 <_malloc_r>
 8002702:	b92a      	cbnz	r2, 8002710 <_realloc_r+0x24>
 8002704:	f7ff ff12 	bl	800252c <_free_r>
 8002708:	4625      	mov	r5, r4
 800270a:	4628      	mov	r0, r5
 800270c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002710:	f000 f838 	bl	8002784 <_malloc_usable_size_r>
 8002714:	4284      	cmp	r4, r0
 8002716:	4607      	mov	r7, r0
 8002718:	d802      	bhi.n	8002720 <_realloc_r+0x34>
 800271a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800271e:	d812      	bhi.n	8002746 <_realloc_r+0x5a>
 8002720:	4621      	mov	r1, r4
 8002722:	4640      	mov	r0, r8
 8002724:	f7ff ff6e 	bl	8002604 <_malloc_r>
 8002728:	4605      	mov	r5, r0
 800272a:	2800      	cmp	r0, #0
 800272c:	d0ed      	beq.n	800270a <_realloc_r+0x1e>
 800272e:	42bc      	cmp	r4, r7
 8002730:	4622      	mov	r2, r4
 8002732:	4631      	mov	r1, r6
 8002734:	bf28      	it	cs
 8002736:	463a      	movcs	r2, r7
 8002738:	f7ff fed0 	bl	80024dc <memcpy>
 800273c:	4631      	mov	r1, r6
 800273e:	4640      	mov	r0, r8
 8002740:	f7ff fef4 	bl	800252c <_free_r>
 8002744:	e7e1      	b.n	800270a <_realloc_r+0x1e>
 8002746:	4635      	mov	r5, r6
 8002748:	e7df      	b.n	800270a <_realloc_r+0x1e>
	...

0800274c <_sbrk_r>:
 800274c:	b538      	push	{r3, r4, r5, lr}
 800274e:	4d06      	ldr	r5, [pc, #24]	; (8002768 <_sbrk_r+0x1c>)
 8002750:	2300      	movs	r3, #0
 8002752:	4604      	mov	r4, r0
 8002754:	4608      	mov	r0, r1
 8002756:	602b      	str	r3, [r5, #0]
 8002758:	f7fe fbce 	bl	8000ef8 <_sbrk>
 800275c:	1c43      	adds	r3, r0, #1
 800275e:	d102      	bne.n	8002766 <_sbrk_r+0x1a>
 8002760:	682b      	ldr	r3, [r5, #0]
 8002762:	b103      	cbz	r3, 8002766 <_sbrk_r+0x1a>
 8002764:	6023      	str	r3, [r4, #0]
 8002766:	bd38      	pop	{r3, r4, r5, pc}
 8002768:	2000009c 	.word	0x2000009c

0800276c <__malloc_lock>:
 800276c:	4801      	ldr	r0, [pc, #4]	; (8002774 <__malloc_lock+0x8>)
 800276e:	f000 b811 	b.w	8002794 <__retarget_lock_acquire_recursive>
 8002772:	bf00      	nop
 8002774:	200000a0 	.word	0x200000a0

08002778 <__malloc_unlock>:
 8002778:	4801      	ldr	r0, [pc, #4]	; (8002780 <__malloc_unlock+0x8>)
 800277a:	f000 b80c 	b.w	8002796 <__retarget_lock_release_recursive>
 800277e:	bf00      	nop
 8002780:	200000a0 	.word	0x200000a0

08002784 <_malloc_usable_size_r>:
 8002784:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002788:	1f18      	subs	r0, r3, #4
 800278a:	2b00      	cmp	r3, #0
 800278c:	bfbc      	itt	lt
 800278e:	580b      	ldrlt	r3, [r1, r0]
 8002790:	18c0      	addlt	r0, r0, r3
 8002792:	4770      	bx	lr

08002794 <__retarget_lock_acquire_recursive>:
 8002794:	4770      	bx	lr

08002796 <__retarget_lock_release_recursive>:
 8002796:	4770      	bx	lr

08002798 <_init>:
 8002798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800279a:	bf00      	nop
 800279c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800279e:	bc08      	pop	{r3}
 80027a0:	469e      	mov	lr, r3
 80027a2:	4770      	bx	lr

080027a4 <_fini>:
 80027a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027a6:	bf00      	nop
 80027a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027aa:	bc08      	pop	{r3}
 80027ac:	469e      	mov	lr, r3
 80027ae:	4770      	bx	lr
