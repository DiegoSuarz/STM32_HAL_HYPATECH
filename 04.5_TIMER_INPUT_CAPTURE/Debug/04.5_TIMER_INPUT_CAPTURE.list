
04.5_TIMER_INPUT_CAPTURE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007cf0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  08007e90  08007e90  00017e90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082b4  080082b4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080082b4  080082b4  000182b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080082bc  080082bc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082bc  080082bc  000182bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080082c0  080082c0  000182c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080082c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  200001dc  080084a0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000418  080084a0  00020418  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e185  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e8f  00000000  00000000  0002e391  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d38  00000000  00000000  00030220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c80  00000000  00000000  00030f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017096  00000000  00000000  00031bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e6f0  00000000  00000000  00048c6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ed79  00000000  00000000  0005735e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e60d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004944  00000000  00000000  000e6128  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007e78 	.word	0x08007e78

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08007e78 	.word	0x08007e78

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <delay>:
void LCD_custom_char(unsigned char loc, unsigned char *msg);

void delay(void);

void delay(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
	uint16_t i;
	for(i=0;i<2000;i++);
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	80fb      	strh	r3, [r7, #6]
 8000ec6:	e002      	b.n	8000ece <delay+0x12>
 8000ec8:	88fb      	ldrh	r3, [r7, #6]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	80fb      	strh	r3, [r7, #6]
 8000ece:	88fb      	ldrh	r3, [r7, #6]
 8000ed0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000ed4:	d3f8      	bcc.n	8000ec8 <delay+0xc>
}
 8000ed6:	bf00      	nop
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <LCD_init>:
/*********************************************************
---------------- Inicializacion de LCD -------------------
**********************************************************/

void LCD_init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	2102      	movs	r1, #2
 8000eec:	4821      	ldr	r0, [pc, #132]	; (8000f74 <LCD_init+0x90>)
 8000eee:	f001 fdcd 	bl	8002a8c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_RESET);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2110      	movs	r1, #16
 8000ef6:	481f      	ldr	r0, [pc, #124]	; (8000f74 <LCD_init+0x90>)
 8000ef8:	f001 fdc8 	bl	8002a8c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_RESET);
 8000efc:	2200      	movs	r2, #0
 8000efe:	2101      	movs	r1, #1
 8000f00:	481d      	ldr	r0, [pc, #116]	; (8000f78 <LCD_init+0x94>)
 8000f02:	f001 fdc3 	bl	8002a8c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_RESET);
 8000f06:	2200      	movs	r2, #0
 8000f08:	2102      	movs	r1, #2
 8000f0a:	481c      	ldr	r0, [pc, #112]	; (8000f7c <LCD_init+0x98>)
 8000f0c:	f001 fdbe 	bl	8002a8c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, GPIO_PIN_RESET);
 8000f10:	2200      	movs	r2, #0
 8000f12:	2101      	movs	r1, #1
 8000f14:	4819      	ldr	r0, [pc, #100]	; (8000f7c <LCD_init+0x98>)
 8000f16:	f001 fdb9 	bl	8002a8c <HAL_GPIO_WritePin>


    HAL_Delay(20);             //Espera que se estabilicen puertos
 8000f1a:	2014      	movs	r0, #20
 8000f1c:	f000 ff6a 	bl	8001df4 <HAL_Delay>

    LCD_write_nible(0x03);      //por fabricante
 8000f20:	2003      	movs	r0, #3
 8000f22:	f000 f82d 	bl	8000f80 <LCD_write_nible>
    HAL_Delay(5);
 8000f26:	2005      	movs	r0, #5
 8000f28:	f000 ff64 	bl	8001df4 <HAL_Delay>
    LCD_write_nible(0x03);      //por fabricante
 8000f2c:	2003      	movs	r0, #3
 8000f2e:	f000 f827 	bl	8000f80 <LCD_write_nible>
    HAL_Delay(1);//_delay_us(100);
 8000f32:	2001      	movs	r0, #1
 8000f34:	f000 ff5e 	bl	8001df4 <HAL_Delay>
    LCD_write_nible(0x03);      //por fabricante
 8000f38:	2003      	movs	r0, #3
 8000f3a:	f000 f821 	bl	8000f80 <LCD_write_nible>
    HAL_Delay(1);//_delay_us(100);
 8000f3e:	2001      	movs	r0, #1
 8000f40:	f000 ff58 	bl	8001df4 <HAL_Delay>
    LCD_write_nible(0x02);      //Initial function set to change interface,
 8000f44:	2002      	movs	r0, #2
 8000f46:	f000 f81b 	bl	8000f80 <LCD_write_nible>
    HAL_Delay(1); //_delay_us(100);            //Configurar modo 4 bits
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	f000 ff52 	bl	8001df4 <HAL_Delay>

    LCD_cmd(0x28);				//LCD con fuente de 5*7
 8000f50:	2028      	movs	r0, #40	; 0x28
 8000f52:	f000 f871 	bl	8001038 <LCD_cmd>
    LCD_cmd(LCD_CURSOR_OFF);    //Cursor apagado
 8000f56:	200c      	movs	r0, #12
 8000f58:	f000 f86e 	bl	8001038 <LCD_cmd>
    LCD_cmd(LCD_CLEAR);
 8000f5c:	2001      	movs	r0, #1
 8000f5e:	f000 f86b 	bl	8001038 <LCD_cmd>
    LCD_cmd(0x06);              //Modo incremental, sin desplazamiento
 8000f62:	2006      	movs	r0, #6
 8000f64:	f000 f868 	bl	8001038 <LCD_cmd>
    LCD_cmd(0x80);              //Address DDRam superior izquierda
 8000f68:	2080      	movs	r0, #128	; 0x80
 8000f6a:	f000 f865 	bl	8001038 <LCD_cmd>
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40020000 	.word	0x40020000
 8000f78:	40020400 	.word	0x40020400
 8000f7c:	40020800 	.word	0x40020800

08000f80 <LCD_write_nible>:
	  LD6_Pin

 ****************************************************/

void LCD_write_nible(unsigned char nible)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	71fb      	strb	r3, [r7, #7]
    if (nible & (1<<0))
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	f003 0301 	and.w	r3, r3, #1
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d005      	beq.n	8000fa0 <LCD_write_nible+0x20>
        HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_SET);
 8000f94:	2201      	movs	r2, #1
 8000f96:	2110      	movs	r1, #16
 8000f98:	4824      	ldr	r0, [pc, #144]	; (800102c <LCD_write_nible+0xac>)
 8000f9a:	f001 fd77 	bl	8002a8c <HAL_GPIO_WritePin>
 8000f9e:	e004      	b.n	8000faa <LCD_write_nible+0x2a>
    else
        HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_RESET);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	2110      	movs	r1, #16
 8000fa4:	4821      	ldr	r0, [pc, #132]	; (800102c <LCD_write_nible+0xac>)
 8000fa6:	f001 fd71 	bl	8002a8c <HAL_GPIO_WritePin>

    if (nible & (1<<1))
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	f003 0302 	and.w	r3, r3, #2
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d005      	beq.n	8000fc0 <LCD_write_nible+0x40>
        HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_SET);
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	481d      	ldr	r0, [pc, #116]	; (8001030 <LCD_write_nible+0xb0>)
 8000fba:	f001 fd67 	bl	8002a8c <HAL_GPIO_WritePin>
 8000fbe:	e004      	b.n	8000fca <LCD_write_nible+0x4a>
    else
        HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_RESET);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	481a      	ldr	r0, [pc, #104]	; (8001030 <LCD_write_nible+0xb0>)
 8000fc6:	f001 fd61 	bl	8002a8c <HAL_GPIO_WritePin>

    if (nible & (1<<2))
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	f003 0304 	and.w	r3, r3, #4
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d005      	beq.n	8000fe0 <LCD_write_nible+0x60>
        HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_SET);
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	2102      	movs	r1, #2
 8000fd8:	4816      	ldr	r0, [pc, #88]	; (8001034 <LCD_write_nible+0xb4>)
 8000fda:	f001 fd57 	bl	8002a8c <HAL_GPIO_WritePin>
 8000fde:	e004      	b.n	8000fea <LCD_write_nible+0x6a>
    else
         HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_RESET);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2102      	movs	r1, #2
 8000fe4:	4813      	ldr	r0, [pc, #76]	; (8001034 <LCD_write_nible+0xb4>)
 8000fe6:	f001 fd51 	bl	8002a8c <HAL_GPIO_WritePin>

    if (nible & (1<<3))
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	f003 0308 	and.w	r3, r3, #8
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d005      	beq.n	8001000 <LCD_write_nible+0x80>
        HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, GPIO_PIN_SET);
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	480e      	ldr	r0, [pc, #56]	; (8001034 <LCD_write_nible+0xb4>)
 8000ffa:	f001 fd47 	bl	8002a8c <HAL_GPIO_WritePin>
 8000ffe:	e004      	b.n	800100a <LCD_write_nible+0x8a>
    else
         HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, GPIO_PIN_RESET);
 8001000:	2200      	movs	r2, #0
 8001002:	2101      	movs	r1, #1
 8001004:	480b      	ldr	r0, [pc, #44]	; (8001034 <LCD_write_nible+0xb4>)
 8001006:	f001 fd41 	bl	8002a8c <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);
 800100a:	2201      	movs	r2, #1
 800100c:	2102      	movs	r1, #2
 800100e:	4807      	ldr	r0, [pc, #28]	; (800102c <LCD_write_nible+0xac>)
 8001010:	f001 fd3c 	bl	8002a8c <HAL_GPIO_WritePin>
    delay();//HAL_Delay(1);//_delay_us(1);	                            //Enable pulse width PWeh min 230ns
 8001014:	f7ff ff52 	bl	8000ebc <delay>
    HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 8001018:	2200      	movs	r2, #0
 800101a:	2102      	movs	r1, #2
 800101c:	4803      	ldr	r0, [pc, #12]	; (800102c <LCD_write_nible+0xac>)
 800101e:	f001 fd35 	bl	8002a8c <HAL_GPIO_WritePin>
}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40020000 	.word	0x40020000
 8001030:	40020400 	.word	0x40020400
 8001034:	40020800 	.word	0x40020800

08001038 <LCD_cmd>:
/****************************************************
 ---------- Envia comando al LCD ----------
 ****************************************************/

void LCD_cmd(unsigned char comando)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_RESET);
 8001042:	2200      	movs	r2, #0
 8001044:	2101      	movs	r1, #1
 8001046:	4810      	ldr	r0, [pc, #64]	; (8001088 <LCD_cmd+0x50>)
 8001048:	f001 fd20 	bl	8002a8c <HAL_GPIO_WritePin>
    LCD_write_nible(comando >> 4);
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	091b      	lsrs	r3, r3, #4
 8001050:	b2db      	uxtb	r3, r3
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff ff94 	bl	8000f80 <LCD_write_nible>
    LCD_write_nible(comando & 0x0F);
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	f003 030f 	and.w	r3, r3, #15
 800105e:	b2db      	uxtb	r3, r3
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff ff8d 	bl	8000f80 <LCD_write_nible>
    if(comando == LCD_CLEAR || comando == LCD_HOME)
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	2b01      	cmp	r3, #1
 800106a:	d002      	beq.n	8001072 <LCD_cmd+0x3a>
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	2b02      	cmp	r3, #2
 8001070:	d103      	bne.n	800107a <LCD_cmd+0x42>
    	HAL_Delay(1);//HAL_Delay(2);              //Tiempo m�nimo 1.6ms
 8001072:	2001      	movs	r0, #1
 8001074:	f000 febe 	bl	8001df4 <HAL_Delay>
 8001078:	e002      	b.n	8001080 <LCD_cmd+0x48>
    else
    	 delay();//HAL_Delay(1);//_delay_us(55);             //Tiempo 55us en real
 800107a:	f7ff ff1f 	bl	8000ebc <delay>
}
 800107e:	bf00      	nop
 8001080:	bf00      	nop
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40020000 	.word	0x40020000

0800108c <LCD_char>:
/**************************************************
 -------------- Envia caracter al LCD -------------
 **************************************************/

void LCD_char(char caracter)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_SET);
 8001096:	2201      	movs	r2, #1
 8001098:	2101      	movs	r1, #1
 800109a:	480b      	ldr	r0, [pc, #44]	; (80010c8 <LCD_char+0x3c>)
 800109c:	f001 fcf6 	bl	8002a8c <HAL_GPIO_WritePin>
    LCD_write_nible(caracter >> 4);
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	091b      	lsrs	r3, r3, #4
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff ff6a 	bl	8000f80 <LCD_write_nible>
    LCD_write_nible(caracter & 0x0F);
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	f003 030f 	and.w	r3, r3, #15
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ff63 	bl	8000f80 <LCD_write_nible>
    delay();//HAL_Delay(1);//_delay_us(55);                 //Tiempo 55us en real
 80010ba:	f7ff feff 	bl	8000ebc <delay>
}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40020000 	.word	0x40020000

080010cc <LCD_write_text>:
/*************************************************
 ------ Env�a cadena de caracteres al LCD --------
 ************************************************/

void LCD_write_text(char *dato)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
    while (*dato){
 80010d4:	e007      	b.n	80010e6 <LCD_write_text+0x1a>
        LCD_char(*dato);    // Envio el dato al LCD
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff ffd6 	bl	800108c <LCD_char>
        dato++;             // Incrementa el buffer de dato
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	3301      	adds	r3, #1
 80010e4:	607b      	str	r3, [r7, #4]
    while (*dato){
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d1f3      	bne.n	80010d6 <LCD_write_text+0xa>
    }
}
 80010ee:	bf00      	nop
 80010f0:	bf00      	nop
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <LCD_gotoxy>:
/*********************************************
 -------- Cursior a una posici�n x y ---------
 ********************************************/

void LCD_gotoxy(char x, char y)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	460a      	mov	r2, r1
 8001102:	71fb      	strb	r3, [r7, #7]
 8001104:	4613      	mov	r3, r2
 8001106:	71bb      	strb	r3, [r7, #6]
    char posicion;
    switch (y)
 8001108:	79bb      	ldrb	r3, [r7, #6]
 800110a:	3b01      	subs	r3, #1
 800110c:	2b03      	cmp	r3, #3
 800110e:	d81b      	bhi.n	8001148 <LCD_gotoxy+0x50>
 8001110:	a201      	add	r2, pc, #4	; (adr r2, 8001118 <LCD_gotoxy+0x20>)
 8001112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001116:	bf00      	nop
 8001118:	08001129 	.word	0x08001129
 800111c:	08001131 	.word	0x08001131
 8001120:	08001139 	.word	0x08001139
 8001124:	08001141 	.word	0x08001141
    {
        case 1: posicion = 0x00 + x - 1; break;
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	3b01      	subs	r3, #1
 800112c:	73fb      	strb	r3, [r7, #15]
 800112e:	e00f      	b.n	8001150 <LCD_gotoxy+0x58>
        case 2: posicion = 0x40 + x - 1; break;
 8001130:	79fb      	ldrb	r3, [r7, #7]
 8001132:	333f      	adds	r3, #63	; 0x3f
 8001134:	73fb      	strb	r3, [r7, #15]
 8001136:	e00b      	b.n	8001150 <LCD_gotoxy+0x58>
        case 3: posicion = 0x14 + x - 1; break;
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	3313      	adds	r3, #19
 800113c:	73fb      	strb	r3, [r7, #15]
 800113e:	e007      	b.n	8001150 <LCD_gotoxy+0x58>
        case 4: posicion = 0x54 + x - 1; break;
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	3353      	adds	r3, #83	; 0x53
 8001144:	73fb      	strb	r3, [r7, #15]
 8001146:	e003      	b.n	8001150 <LCD_gotoxy+0x58>
        default: posicion = 0x00 + x - 1; break;
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	3b01      	subs	r3, #1
 800114c:	73fb      	strb	r3, [r7, #15]
 800114e:	bf00      	nop
    }
    LCD_cmd(0x80 | posicion);
 8001150:	7bfb      	ldrb	r3, [r7, #15]
 8001152:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001156:	b2db      	uxtb	r3, r3
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff ff6d 	bl	8001038 <LCD_cmd>
}
 800115e:	bf00      	nop
 8001160:	3710      	adds	r7, #16
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop

08001168 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800116c:	f000 fdd0 	bl	8001d10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001170:	f000 f8c4 	bl	80012fc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  LCD_init();
 8001174:	f7ff feb6 	bl	8000ee4 <LCD_init>
  LCD_cmd(LCD_CLEAR);
 8001178:	2001      	movs	r0, #1
 800117a:	f7ff ff5d 	bl	8001038 <LCD_cmd>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800117e:	f000 fa75 	bl	800166c <MX_GPIO_Init>
  MX_DMA_Init();
 8001182:	f000 fa53 	bl	800162c <MX_DMA_Init>
  MX_TIM3_Init();
 8001186:	f000 f91f 	bl	80013c8 <MX_TIM3_Init>
  MX_TIM4_Init();
 800118a:	f000 f96b 	bl	8001464 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 800118e:	f000 fa23 	bl	80015d8 <MX_USART2_UART_Init>
  MX_TIM10_Init();
 8001192:	f000 f9d9 	bl	8001548 <MX_TIM10_Init>
  MX_TIM11_Init();
 8001196:	f000 f9fb 	bl	8001590 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  LCD_cmd(LCD_CLEAR);
 800119a:	2001      	movs	r0, #1
 800119c:	f7ff ff4c 	bl	8001038 <LCD_cmd>
  LCD_gotoxy(1, 1);
 80011a0:	2101      	movs	r1, #1
 80011a2:	2001      	movs	r0, #1
 80011a4:	f7ff ffa8 	bl	80010f8 <LCD_gotoxy>
  LCD_write_text("INPUT FREQUENCY:");
 80011a8:	4847      	ldr	r0, [pc, #284]	; (80012c8 <main+0x160>)
 80011aa:	f7ff ff8f 	bl	80010cc <LCD_write_text>
  HAL_TIM_Base_Start_IT(&htim11); //temporizador que va a generar la señal a medir de 0.5ms (toggle -> 1ms = 10000 hz)
 80011ae:	4847      	ldr	r0, [pc, #284]	; (80012cc <main+0x164>)
 80011b0:	f002 fa0a 	bl	80035c8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim10); //temporizador que va a generar la señal a medir de 200ms (toggle -> 400ms = 2.5 hz)
 80011b4:	4846      	ldr	r0, [pc, #280]	; (80012d0 <main+0x168>)
 80011b6:	f002 fa07 	bl	80035c8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3); //temporizador que va a generar la señal a medir de 500ms (toggle -> 1000ms = 1 hz)
 80011ba:	4846      	ldr	r0, [pc, #280]	; (80012d4 <main+0x16c>)
 80011bc:	f002 fa04 	bl	80035c8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim4);
 80011c0:	4845      	ldr	r0, [pc, #276]	; (80012d8 <main+0x170>)
 80011c2:	f002 f9a7 	bl	8003514 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_DMA(&htim4, TIM_CHANNEL_1, (uint32_t *)captures, 2);
 80011c6:	2302      	movs	r3, #2
 80011c8:	4a44      	ldr	r2, [pc, #272]	; (80012dc <main+0x174>)
 80011ca:	2100      	movs	r1, #0
 80011cc:	4842      	ldr	r0, [pc, #264]	; (80012d8 <main+0x170>)
 80011ce:	f002 fab7 	bl	8003740 <HAL_TIM_IC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(capture_done == 2){
 80011d2:	4b43      	ldr	r3, [pc, #268]	; (80012e0 <main+0x178>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d1fa      	bne.n	80011d2 <main+0x6a>

		  HAL_TIM_IC_Stop_DMA(&htim4, TIM_CHANNEL_1);
 80011dc:	2100      	movs	r1, #0
 80011de:	483e      	ldr	r0, [pc, #248]	; (80012d8 <main+0x170>)
 80011e0:	f002 fc4a 	bl	8003a78 <HAL_TIM_IC_Stop_DMA>

		  if(captures[1] >= captures[0])
 80011e4:	4b3d      	ldr	r3, [pc, #244]	; (80012dc <main+0x174>)
 80011e6:	885a      	ldrh	r2, [r3, #2]
 80011e8:	4b3c      	ldr	r3, [pc, #240]	; (80012dc <main+0x174>)
 80011ea:	881b      	ldrh	r3, [r3, #0]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d308      	bcc.n	8001202 <main+0x9a>
		  {
			  diff_captures = captures[1]-captures[0];
 80011f0:	4b3a      	ldr	r3, [pc, #232]	; (80012dc <main+0x174>)
 80011f2:	885a      	ldrh	r2, [r3, #2]
 80011f4:	4b39      	ldr	r3, [pc, #228]	; (80012dc <main+0x174>)
 80011f6:	881b      	ldrh	r3, [r3, #0]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	b29a      	uxth	r2, r3
 80011fc:	4b39      	ldr	r3, [pc, #228]	; (80012e4 <main+0x17c>)
 80011fe:	801a      	strh	r2, [r3, #0]
 8001200:	e00d      	b.n	800121e <main+0xb6>
		  }
		  else
		  {
			 diff_captures = ( htim4.Instance->ARR - captures[0]) + captures[1];
 8001202:	4b35      	ldr	r3, [pc, #212]	; (80012d8 <main+0x170>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001208:	b29a      	uxth	r2, r3
 800120a:	4b34      	ldr	r3, [pc, #208]	; (80012dc <main+0x174>)
 800120c:	881b      	ldrh	r3, [r3, #0]
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	b29a      	uxth	r2, r3
 8001212:	4b32      	ldr	r3, [pc, #200]	; (80012dc <main+0x174>)
 8001214:	885b      	ldrh	r3, [r3, #2]
 8001216:	4413      	add	r3, r2
 8001218:	b29a      	uxth	r2, r3
 800121a:	4b32      	ldr	r3, [pc, #200]	; (80012e4 <main+0x17c>)
 800121c:	801a      	strh	r2, [r3, #0]
		  }

		  frequency = HAL_RCC_GetPCLK1Freq() / ( htim4.Instance->PSC + 1);
 800121e:	f002 f901 	bl	8003424 <HAL_RCC_GetPCLK1Freq>
 8001222:	4602      	mov	r2, r0
 8001224:	4b2c      	ldr	r3, [pc, #176]	; (80012d8 <main+0x170>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800122a:	3301      	adds	r3, #1
 800122c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001230:	ee07 3a90 	vmov	s15, r3
 8001234:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001238:	4b2b      	ldr	r3, [pc, #172]	; (80012e8 <main+0x180>)
 800123a:	edc3 7a00 	vstr	s15, [r3]
		  frequency = (float)frequency / diff_captures; //enviar solo cuando usamos  HAL_TIM_IC_CaptureCallback
 800123e:	4b2a      	ldr	r3, [pc, #168]	; (80012e8 <main+0x180>)
 8001240:	edd3 6a00 	vldr	s13, [r3]
 8001244:	4b27      	ldr	r3, [pc, #156]	; (80012e4 <main+0x17c>)
 8001246:	881b      	ldrh	r3, [r3, #0]
 8001248:	ee07 3a90 	vmov	s15, r3
 800124c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001250:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001254:	4b24      	ldr	r3, [pc, #144]	; (80012e8 <main+0x180>)
 8001256:	edc3 7a00 	vstr	s15, [r3]
//		  frequency = frequency*2;//se utiliza al usar DMA1_Stream0_IRQHandler se multiplica por 2 ya que al hacer el toggle del pin estamos midiendo el doble del periodo


		  sprintf(buff_str,"frequency: %4.2f Hz",frequency);
 800125a:	4b23      	ldr	r3, [pc, #140]	; (80012e8 <main+0x180>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff f97a 	bl	8000558 <__aeabi_f2d>
 8001264:	4602      	mov	r2, r0
 8001266:	460b      	mov	r3, r1
 8001268:	4920      	ldr	r1, [pc, #128]	; (80012ec <main+0x184>)
 800126a:	4821      	ldr	r0, [pc, #132]	; (80012f0 <main+0x188>)
 800126c:	f004 fb8c 	bl	8005988 <siprintf>
		  LCD_gotoxy(1, 2);
 8001270:	2102      	movs	r1, #2
 8001272:	2001      	movs	r0, #1
 8001274:	f7ff ff40 	bl	80010f8 <LCD_gotoxy>
		  LCD_write_text(buff_str);
 8001278:	481d      	ldr	r0, [pc, #116]	; (80012f0 <main+0x188>)
 800127a:	f7ff ff27 	bl	80010cc <LCD_write_text>
		  HAL_UART_Transmit(&huart2, (uint8_t *)buff_str, strlen(buff_str), HAL_MAX_DELAY);
 800127e:	481c      	ldr	r0, [pc, #112]	; (80012f0 <main+0x188>)
 8001280:	f7fe ffae 	bl	80001e0 <strlen>
 8001284:	4603      	mov	r3, r0
 8001286:	b29a      	uxth	r2, r3
 8001288:	f04f 33ff 	mov.w	r3, #4294967295
 800128c:	4918      	ldr	r1, [pc, #96]	; (80012f0 <main+0x188>)
 800128e:	4819      	ldr	r0, [pc, #100]	; (80012f4 <main+0x18c>)
 8001290:	f003 fb69 	bl	8004966 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart2, (uint8_t *)"\r\n", strlen("\r\n"), HAL_MAX_DELAY);
 8001294:	f04f 33ff 	mov.w	r3, #4294967295
 8001298:	2202      	movs	r2, #2
 800129a:	4917      	ldr	r1, [pc, #92]	; (80012f8 <main+0x190>)
 800129c:	4815      	ldr	r0, [pc, #84]	; (80012f4 <main+0x18c>)
 800129e:	f003 fb62 	bl	8004966 <HAL_UART_Transmit>
		  capture_done=0;
 80012a2:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <main+0x178>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	701a      	strb	r2, [r3, #0]
		  __HAL_TIM_SET_COUNTER(&htim4, 0);
 80012a8:	4b0b      	ldr	r3, [pc, #44]	; (80012d8 <main+0x170>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2200      	movs	r2, #0
 80012ae:	625a      	str	r2, [r3, #36]	; 0x24
		  HAL_Delay(500);
 80012b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012b4:	f000 fd9e 	bl	8001df4 <HAL_Delay>

		  HAL_TIM_IC_Start_DMA(&htim4, TIM_CHANNEL_1, (uint32_t *)captures, 2);
 80012b8:	2302      	movs	r3, #2
 80012ba:	4a08      	ldr	r2, [pc, #32]	; (80012dc <main+0x174>)
 80012bc:	2100      	movs	r1, #0
 80012be:	4806      	ldr	r0, [pc, #24]	; (80012d8 <main+0x170>)
 80012c0:	f002 fa3e 	bl	8003740 <HAL_TIM_IC_Start_DMA>
	  if(capture_done == 2){
 80012c4:	e785      	b.n	80011d2 <main+0x6a>
 80012c6:	bf00      	nop
 80012c8:	08007e90 	.word	0x08007e90
 80012cc:	200002d0 	.word	0x200002d0
 80012d0:	20000288 	.word	0x20000288
 80012d4:	200001f8 	.word	0x200001f8
 80012d8:	20000240 	.word	0x20000240
 80012dc:	200003bc 	.word	0x200003bc
 80012e0:	200003c8 	.word	0x200003c8
 80012e4:	200003c0 	.word	0x200003c0
 80012e8:	200003c4 	.word	0x200003c4
 80012ec:	08007ea4 	.word	0x08007ea4
 80012f0:	200003cc 	.word	0x200003cc
 80012f4:	20000378 	.word	0x20000378
 80012f8:	08007eb8 	.word	0x08007eb8

080012fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b094      	sub	sp, #80	; 0x50
 8001300:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001302:	f107 0320 	add.w	r3, r7, #32
 8001306:	2230      	movs	r2, #48	; 0x30
 8001308:	2100      	movs	r1, #0
 800130a:	4618      	mov	r0, r3
 800130c:	f003 feca 	bl	80050a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001310:	f107 030c 	add.w	r3, r7, #12
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001320:	2300      	movs	r3, #0
 8001322:	60bb      	str	r3, [r7, #8]
 8001324:	4b26      	ldr	r3, [pc, #152]	; (80013c0 <SystemClock_Config+0xc4>)
 8001326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001328:	4a25      	ldr	r2, [pc, #148]	; (80013c0 <SystemClock_Config+0xc4>)
 800132a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800132e:	6413      	str	r3, [r2, #64]	; 0x40
 8001330:	4b23      	ldr	r3, [pc, #140]	; (80013c0 <SystemClock_Config+0xc4>)
 8001332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001334:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001338:	60bb      	str	r3, [r7, #8]
 800133a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800133c:	2300      	movs	r3, #0
 800133e:	607b      	str	r3, [r7, #4]
 8001340:	4b20      	ldr	r3, [pc, #128]	; (80013c4 <SystemClock_Config+0xc8>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001348:	4a1e      	ldr	r2, [pc, #120]	; (80013c4 <SystemClock_Config+0xc8>)
 800134a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800134e:	6013      	str	r3, [r2, #0]
 8001350:	4b1c      	ldr	r3, [pc, #112]	; (80013c4 <SystemClock_Config+0xc8>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001358:	607b      	str	r3, [r7, #4]
 800135a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800135c:	2302      	movs	r3, #2
 800135e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001360:	2301      	movs	r3, #1
 8001362:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001364:	2310      	movs	r3, #16
 8001366:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001368:	2300      	movs	r3, #0
 800136a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800136c:	f107 0320 	add.w	r3, r7, #32
 8001370:	4618      	mov	r0, r3
 8001372:	f001 fbbf 	bl	8002af4 <HAL_RCC_OscConfig>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800137c:	f000 fa16 	bl	80017ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001380:	230f      	movs	r3, #15
 8001382:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001384:	2300      	movs	r3, #0
 8001386:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800138c:	2300      	movs	r3, #0
 800138e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001390:	2300      	movs	r3, #0
 8001392:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001394:	f107 030c 	add.w	r3, r7, #12
 8001398:	2100      	movs	r1, #0
 800139a:	4618      	mov	r0, r3
 800139c:	f001 fe22 	bl	8002fe4 <HAL_RCC_ClockConfig>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <SystemClock_Config+0xae>
  {
    Error_Handler();
 80013a6:	f000 fa01 	bl	80017ac <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_5);
 80013aa:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 80013ae:	2100      	movs	r1, #0
 80013b0:	2000      	movs	r0, #0
 80013b2:	f001 fefd 	bl	80031b0 <HAL_RCC_MCOConfig>
}
 80013b6:	bf00      	nop
 80013b8:	3750      	adds	r7, #80	; 0x50
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40007000 	.word	0x40007000

080013c8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ce:	f107 0308 	add.w	r3, r7, #8
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	605a      	str	r2, [r3, #4]
 80013d8:	609a      	str	r2, [r3, #8]
 80013da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013dc:	463b      	mov	r3, r7
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013e4:	4b1d      	ldr	r3, [pc, #116]	; (800145c <MX_TIM3_Init+0x94>)
 80013e6:	4a1e      	ldr	r2, [pc, #120]	; (8001460 <MX_TIM3_Init+0x98>)
 80013e8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 124;
 80013ea:	4b1c      	ldr	r3, [pc, #112]	; (800145c <MX_TIM3_Init+0x94>)
 80013ec:	227c      	movs	r2, #124	; 0x7c
 80013ee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f0:	4b1a      	ldr	r3, [pc, #104]	; (800145c <MX_TIM3_Init+0x94>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 63999;
 80013f6:	4b19      	ldr	r3, [pc, #100]	; (800145c <MX_TIM3_Init+0x94>)
 80013f8:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80013fc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013fe:	4b17      	ldr	r3, [pc, #92]	; (800145c <MX_TIM3_Init+0x94>)
 8001400:	2200      	movs	r2, #0
 8001402:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001404:	4b15      	ldr	r3, [pc, #84]	; (800145c <MX_TIM3_Init+0x94>)
 8001406:	2200      	movs	r2, #0
 8001408:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800140a:	4814      	ldr	r0, [pc, #80]	; (800145c <MX_TIM3_Init+0x94>)
 800140c:	f002 f832 	bl	8003474 <HAL_TIM_Base_Init>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001416:	f000 f9c9 	bl	80017ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800141a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800141e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001420:	f107 0308 	add.w	r3, r7, #8
 8001424:	4619      	mov	r1, r3
 8001426:	480d      	ldr	r0, [pc, #52]	; (800145c <MX_TIM3_Init+0x94>)
 8001428:	f002 fd8c 	bl	8003f44 <HAL_TIM_ConfigClockSource>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001432:	f000 f9bb 	bl	80017ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001436:	2300      	movs	r3, #0
 8001438:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800143a:	2300      	movs	r3, #0
 800143c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800143e:	463b      	mov	r3, r7
 8001440:	4619      	mov	r1, r3
 8001442:	4806      	ldr	r0, [pc, #24]	; (800145c <MX_TIM3_Init+0x94>)
 8001444:	f003 f9c0 	bl	80047c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800144e:	f000 f9ad 	bl	80017ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001452:	bf00      	nop
 8001454:	3718      	adds	r7, #24
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	200001f8 	.word	0x200001f8
 8001460:	40000400 	.word	0x40000400

08001464 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08a      	sub	sp, #40	; 0x28
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800146a:	f107 0318 	add.w	r3, r7, #24
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	605a      	str	r2, [r3, #4]
 8001474:	609a      	str	r2, [r3, #8]
 8001476:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001478:	f107 0310 	add.w	r3, r7, #16
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001482:	463b      	mov	r3, r7
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800148e:	4b2c      	ldr	r3, [pc, #176]	; (8001540 <MX_TIM4_Init+0xdc>)
 8001490:	4a2c      	ldr	r2, [pc, #176]	; (8001544 <MX_TIM4_Init+0xe0>)
 8001492:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 999;
 8001494:	4b2a      	ldr	r3, [pc, #168]	; (8001540 <MX_TIM4_Init+0xdc>)
 8001496:	f240 32e7 	movw	r2, #999	; 0x3e7
 800149a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800149c:	4b28      	ldr	r3, [pc, #160]	; (8001540 <MX_TIM4_Init+0xdc>)
 800149e:	2200      	movs	r2, #0
 80014a0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80014a2:	4b27      	ldr	r3, [pc, #156]	; (8001540 <MX_TIM4_Init+0xdc>)
 80014a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014a8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014aa:	4b25      	ldr	r3, [pc, #148]	; (8001540 <MX_TIM4_Init+0xdc>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014b0:	4b23      	ldr	r3, [pc, #140]	; (8001540 <MX_TIM4_Init+0xdc>)
 80014b2:	2280      	movs	r2, #128	; 0x80
 80014b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80014b6:	4822      	ldr	r0, [pc, #136]	; (8001540 <MX_TIM4_Init+0xdc>)
 80014b8:	f001 ffdc 	bl	8003474 <HAL_TIM_Base_Init>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 80014c2:	f000 f973 	bl	80017ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014ca:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80014cc:	f107 0318 	add.w	r3, r7, #24
 80014d0:	4619      	mov	r1, r3
 80014d2:	481b      	ldr	r0, [pc, #108]	; (8001540 <MX_TIM4_Init+0xdc>)
 80014d4:	f002 fd36 	bl	8003f44 <HAL_TIM_ConfigClockSource>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80014de:	f000 f965 	bl	80017ac <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80014e2:	4817      	ldr	r0, [pc, #92]	; (8001540 <MX_TIM4_Init+0xdc>)
 80014e4:	f002 f8d2 	bl	800368c <HAL_TIM_IC_Init>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 80014ee:	f000 f95d 	bl	80017ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014f2:	2300      	movs	r3, #0
 80014f4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014f6:	2300      	movs	r3, #0
 80014f8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014fa:	f107 0310 	add.w	r3, r7, #16
 80014fe:	4619      	mov	r1, r3
 8001500:	480f      	ldr	r0, [pc, #60]	; (8001540 <MX_TIM4_Init+0xdc>)
 8001502:	f003 f961 	bl	80047c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 800150c:	f000 f94e 	bl	80017ac <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001510:	2300      	movs	r3, #0
 8001512:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001514:	2301      	movs	r3, #1
 8001516:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001518:	2300      	movs	r3, #0
 800151a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800151c:	2300      	movs	r3, #0
 800151e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001520:	463b      	mov	r3, r7
 8001522:	2200      	movs	r2, #0
 8001524:	4619      	mov	r1, r3
 8001526:	4806      	ldr	r0, [pc, #24]	; (8001540 <MX_TIM4_Init+0xdc>)
 8001528:	f002 fc70 	bl	8003e0c <HAL_TIM_IC_ConfigChannel>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 8001532:	f000 f93b 	bl	80017ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001536:	bf00      	nop
 8001538:	3728      	adds	r7, #40	; 0x28
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20000240 	.word	0x20000240
 8001544:	40000800 	.word	0x40000800

08001548 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800154c:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <MX_TIM10_Init+0x40>)
 800154e:	4a0f      	ldr	r2, [pc, #60]	; (800158c <MX_TIM10_Init+0x44>)
 8001550:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 49;
 8001552:	4b0d      	ldr	r3, [pc, #52]	; (8001588 <MX_TIM10_Init+0x40>)
 8001554:	2231      	movs	r2, #49	; 0x31
 8001556:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001558:	4b0b      	ldr	r3, [pc, #44]	; (8001588 <MX_TIM10_Init+0x40>)
 800155a:	2200      	movs	r2, #0
 800155c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 63999;
 800155e:	4b0a      	ldr	r3, [pc, #40]	; (8001588 <MX_TIM10_Init+0x40>)
 8001560:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001564:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001566:	4b08      	ldr	r3, [pc, #32]	; (8001588 <MX_TIM10_Init+0x40>)
 8001568:	2200      	movs	r2, #0
 800156a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800156c:	4b06      	ldr	r3, [pc, #24]	; (8001588 <MX_TIM10_Init+0x40>)
 800156e:	2280      	movs	r2, #128	; 0x80
 8001570:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001572:	4805      	ldr	r0, [pc, #20]	; (8001588 <MX_TIM10_Init+0x40>)
 8001574:	f001 ff7e 	bl	8003474 <HAL_TIM_Base_Init>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800157e:	f000 f915 	bl	80017ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20000288 	.word	0x20000288
 800158c:	40014400 	.word	0x40014400

08001590 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001594:	4b0e      	ldr	r3, [pc, #56]	; (80015d0 <MX_TIM11_Init+0x40>)
 8001596:	4a0f      	ldr	r2, [pc, #60]	; (80015d4 <MX_TIM11_Init+0x44>)
 8001598:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 800159a:	4b0d      	ldr	r3, [pc, #52]	; (80015d0 <MX_TIM11_Init+0x40>)
 800159c:	2200      	movs	r2, #0
 800159e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a0:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <MX_TIM11_Init+0x40>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 7999;
 80015a6:	4b0a      	ldr	r3, [pc, #40]	; (80015d0 <MX_TIM11_Init+0x40>)
 80015a8:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80015ac:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ae:	4b08      	ldr	r3, [pc, #32]	; (80015d0 <MX_TIM11_Init+0x40>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015b4:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <MX_TIM11_Init+0x40>)
 80015b6:	2280      	movs	r2, #128	; 0x80
 80015b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80015ba:	4805      	ldr	r0, [pc, #20]	; (80015d0 <MX_TIM11_Init+0x40>)
 80015bc:	f001 ff5a 	bl	8003474 <HAL_TIM_Base_Init>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80015c6:	f000 f8f1 	bl	80017ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	200002d0 	.word	0x200002d0
 80015d4:	40014800 	.word	0x40014800

080015d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015dc:	4b11      	ldr	r3, [pc, #68]	; (8001624 <MX_USART2_UART_Init+0x4c>)
 80015de:	4a12      	ldr	r2, [pc, #72]	; (8001628 <MX_USART2_UART_Init+0x50>)
 80015e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015e2:	4b10      	ldr	r3, [pc, #64]	; (8001624 <MX_USART2_UART_Init+0x4c>)
 80015e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015ea:	4b0e      	ldr	r3, [pc, #56]	; (8001624 <MX_USART2_UART_Init+0x4c>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015f0:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <MX_USART2_UART_Init+0x4c>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015f6:	4b0b      	ldr	r3, [pc, #44]	; (8001624 <MX_USART2_UART_Init+0x4c>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015fc:	4b09      	ldr	r3, [pc, #36]	; (8001624 <MX_USART2_UART_Init+0x4c>)
 80015fe:	220c      	movs	r2, #12
 8001600:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001602:	4b08      	ldr	r3, [pc, #32]	; (8001624 <MX_USART2_UART_Init+0x4c>)
 8001604:	2200      	movs	r2, #0
 8001606:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001608:	4b06      	ldr	r3, [pc, #24]	; (8001624 <MX_USART2_UART_Init+0x4c>)
 800160a:	2200      	movs	r2, #0
 800160c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800160e:	4805      	ldr	r0, [pc, #20]	; (8001624 <MX_USART2_UART_Init+0x4c>)
 8001610:	f003 f95c 	bl	80048cc <HAL_UART_Init>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800161a:	f000 f8c7 	bl	80017ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	20000378 	.word	0x20000378
 8001628:	40004400 	.word	0x40004400

0800162c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	607b      	str	r3, [r7, #4]
 8001636:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <MX_DMA_Init+0x3c>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	4a0b      	ldr	r2, [pc, #44]	; (8001668 <MX_DMA_Init+0x3c>)
 800163c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001640:	6313      	str	r3, [r2, #48]	; 0x30
 8001642:	4b09      	ldr	r3, [pc, #36]	; (8001668 <MX_DMA_Init+0x3c>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800164a:	607b      	str	r3, [r7, #4]
 800164c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800164e:	2200      	movs	r2, #0
 8001650:	2100      	movs	r1, #0
 8001652:	200b      	movs	r0, #11
 8001654:	f000 fccd 	bl	8001ff2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001658:	200b      	movs	r0, #11
 800165a:	f000 fce6 	bl	800202a <HAL_NVIC_EnableIRQ>

}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40023800 	.word	0x40023800

0800166c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b088      	sub	sp, #32
 8001670:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001672:	f107 030c 	add.w	r3, r7, #12
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	605a      	str	r2, [r3, #4]
 800167c:	609a      	str	r2, [r3, #8]
 800167e:	60da      	str	r2, [r3, #12]
 8001680:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	60bb      	str	r3, [r7, #8]
 8001686:	4b3b      	ldr	r3, [pc, #236]	; (8001774 <MX_GPIO_Init+0x108>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	4a3a      	ldr	r2, [pc, #232]	; (8001774 <MX_GPIO_Init+0x108>)
 800168c:	f043 0304 	orr.w	r3, r3, #4
 8001690:	6313      	str	r3, [r2, #48]	; 0x30
 8001692:	4b38      	ldr	r3, [pc, #224]	; (8001774 <MX_GPIO_Init+0x108>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	f003 0304 	and.w	r3, r3, #4
 800169a:	60bb      	str	r3, [r7, #8]
 800169c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	607b      	str	r3, [r7, #4]
 80016a2:	4b34      	ldr	r3, [pc, #208]	; (8001774 <MX_GPIO_Init+0x108>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	4a33      	ldr	r2, [pc, #204]	; (8001774 <MX_GPIO_Init+0x108>)
 80016a8:	f043 0301 	orr.w	r3, r3, #1
 80016ac:	6313      	str	r3, [r2, #48]	; 0x30
 80016ae:	4b31      	ldr	r3, [pc, #196]	; (8001774 <MX_GPIO_Init+0x108>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	607b      	str	r3, [r7, #4]
 80016b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	603b      	str	r3, [r7, #0]
 80016be:	4b2d      	ldr	r3, [pc, #180]	; (8001774 <MX_GPIO_Init+0x108>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	4a2c      	ldr	r2, [pc, #176]	; (8001774 <MX_GPIO_Init+0x108>)
 80016c4:	f043 0302 	orr.w	r3, r3, #2
 80016c8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ca:	4b2a      	ldr	r3, [pc, #168]	; (8001774 <MX_GPIO_Init+0x108>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	603b      	str	r3, [r7, #0]
 80016d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, D7_Pin|D6_Pin, GPIO_PIN_RESET);
 80016d6:	2200      	movs	r2, #0
 80016d8:	2103      	movs	r1, #3
 80016da:	4827      	ldr	r0, [pc, #156]	; (8001778 <MX_GPIO_Init+0x10c>)
 80016dc:	f001 f9d6 	bl	8002a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RS_Pin|EN_Pin|D4_Pin|LED_USER_Pin, GPIO_PIN_RESET);
 80016e0:	2200      	movs	r2, #0
 80016e2:	2133      	movs	r1, #51	; 0x33
 80016e4:	4825      	ldr	r0, [pc, #148]	; (800177c <MX_GPIO_Init+0x110>)
 80016e6:	f001 f9d1 	bl	8002a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D5_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 80016ea:	2200      	movs	r2, #0
 80016ec:	2131      	movs	r1, #49	; 0x31
 80016ee:	4824      	ldr	r0, [pc, #144]	; (8001780 <MX_GPIO_Init+0x114>)
 80016f0:	f001 f9cc 	bl	8002a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : D7_Pin D6_Pin */
  GPIO_InitStruct.Pin = D7_Pin|D6_Pin;
 80016f4:	2303      	movs	r3, #3
 80016f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f8:	2301      	movs	r3, #1
 80016fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001700:	2300      	movs	r3, #0
 8001702:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001704:	f107 030c 	add.w	r3, r7, #12
 8001708:	4619      	mov	r1, r3
 800170a:	481b      	ldr	r0, [pc, #108]	; (8001778 <MX_GPIO_Init+0x10c>)
 800170c:	f001 f83a 	bl	8002784 <HAL_GPIO_Init>

  /*Configure GPIO pins : RS_Pin EN_Pin D4_Pin LED_USER_Pin */
  GPIO_InitStruct.Pin = RS_Pin|EN_Pin|D4_Pin|LED_USER_Pin;
 8001710:	2333      	movs	r3, #51	; 0x33
 8001712:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001714:	2301      	movs	r3, #1
 8001716:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	2300      	movs	r3, #0
 800171a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171c:	2300      	movs	r3, #0
 800171e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001720:	f107 030c 	add.w	r3, r7, #12
 8001724:	4619      	mov	r1, r3
 8001726:	4815      	ldr	r0, [pc, #84]	; (800177c <MX_GPIO_Init+0x110>)
 8001728:	f001 f82c 	bl	8002784 <HAL_GPIO_Init>

  /*Configure GPIO pins : D5_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = D5_Pin|LED2_Pin|LED3_Pin;
 800172c:	2331      	movs	r3, #49	; 0x31
 800172e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001730:	2301      	movs	r3, #1
 8001732:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001738:	2300      	movs	r3, #0
 800173a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800173c:	f107 030c 	add.w	r3, r7, #12
 8001740:	4619      	mov	r1, r3
 8001742:	480f      	ldr	r0, [pc, #60]	; (8001780 <MX_GPIO_Init+0x114>)
 8001744:	f001 f81e 	bl	8002784 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001748:	f44f 7380 	mov.w	r3, #256	; 0x100
 800174c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174e:	2302      	movs	r3, #2
 8001750:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001756:	2300      	movs	r3, #0
 8001758:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800175a:	2300      	movs	r3, #0
 800175c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175e:	f107 030c 	add.w	r3, r7, #12
 8001762:	4619      	mov	r1, r3
 8001764:	4805      	ldr	r0, [pc, #20]	; (800177c <MX_GPIO_Init+0x110>)
 8001766:	f001 f80d 	bl	8002784 <HAL_GPIO_Init>

}
 800176a:	bf00      	nop
 800176c:	3720      	adds	r7, #32
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40023800 	.word	0x40023800
 8001778:	40020800 	.word	0x40020800
 800177c:	40020000 	.word	0x40020000
 8001780:	40020400 	.word	0x40020400

08001784 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]

	capture_done++;
 800178c:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <HAL_TIM_IC_CaptureCallback+0x24>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	b2db      	uxtb	r3, r3
 8001792:	3301      	adds	r3, #1
 8001794:	b2da      	uxtb	r2, r3
 8001796:	4b04      	ldr	r3, [pc, #16]	; (80017a8 <HAL_TIM_IC_CaptureCallback+0x24>)
 8001798:	701a      	strb	r2, [r3, #0]

}
 800179a:	bf00      	nop
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	200003c8 	.word	0x200003c8

080017ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017b0:	b672      	cpsid	i
}
 80017b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017b4:	e7fe      	b.n	80017b4 <Error_Handler+0x8>
	...

080017b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	607b      	str	r3, [r7, #4]
 80017c2:	4b10      	ldr	r3, [pc, #64]	; (8001804 <HAL_MspInit+0x4c>)
 80017c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c6:	4a0f      	ldr	r2, [pc, #60]	; (8001804 <HAL_MspInit+0x4c>)
 80017c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017cc:	6453      	str	r3, [r2, #68]	; 0x44
 80017ce:	4b0d      	ldr	r3, [pc, #52]	; (8001804 <HAL_MspInit+0x4c>)
 80017d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017d6:	607b      	str	r3, [r7, #4]
 80017d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	603b      	str	r3, [r7, #0]
 80017de:	4b09      	ldr	r3, [pc, #36]	; (8001804 <HAL_MspInit+0x4c>)
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	4a08      	ldr	r2, [pc, #32]	; (8001804 <HAL_MspInit+0x4c>)
 80017e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017e8:	6413      	str	r3, [r2, #64]	; 0x40
 80017ea:	4b06      	ldr	r3, [pc, #24]	; (8001804 <HAL_MspInit+0x4c>)
 80017ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f2:	603b      	str	r3, [r7, #0]
 80017f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017f6:	bf00      	nop
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	40023800 	.word	0x40023800

08001808 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b08c      	sub	sp, #48	; 0x30
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001810:	f107 031c 	add.w	r3, r7, #28
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	605a      	str	r2, [r3, #4]
 800181a:	609a      	str	r2, [r3, #8]
 800181c:	60da      	str	r2, [r3, #12]
 800181e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a5b      	ldr	r2, [pc, #364]	; (8001994 <HAL_TIM_Base_MspInit+0x18c>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d116      	bne.n	8001858 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	61bb      	str	r3, [r7, #24]
 800182e:	4b5a      	ldr	r3, [pc, #360]	; (8001998 <HAL_TIM_Base_MspInit+0x190>)
 8001830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001832:	4a59      	ldr	r2, [pc, #356]	; (8001998 <HAL_TIM_Base_MspInit+0x190>)
 8001834:	f043 0302 	orr.w	r3, r3, #2
 8001838:	6413      	str	r3, [r2, #64]	; 0x40
 800183a:	4b57      	ldr	r3, [pc, #348]	; (8001998 <HAL_TIM_Base_MspInit+0x190>)
 800183c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	61bb      	str	r3, [r7, #24]
 8001844:	69bb      	ldr	r3, [r7, #24]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001846:	2200      	movs	r2, #0
 8001848:	2100      	movs	r1, #0
 800184a:	201d      	movs	r0, #29
 800184c:	f000 fbd1 	bl	8001ff2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001850:	201d      	movs	r0, #29
 8001852:	f000 fbea 	bl	800202a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001856:	e099      	b.n	800198c <HAL_TIM_Base_MspInit+0x184>
  else if(htim_base->Instance==TIM4)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a4f      	ldr	r2, [pc, #316]	; (800199c <HAL_TIM_Base_MspInit+0x194>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d15d      	bne.n	800191e <HAL_TIM_Base_MspInit+0x116>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	617b      	str	r3, [r7, #20]
 8001866:	4b4c      	ldr	r3, [pc, #304]	; (8001998 <HAL_TIM_Base_MspInit+0x190>)
 8001868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186a:	4a4b      	ldr	r2, [pc, #300]	; (8001998 <HAL_TIM_Base_MspInit+0x190>)
 800186c:	f043 0304 	orr.w	r3, r3, #4
 8001870:	6413      	str	r3, [r2, #64]	; 0x40
 8001872:	4b49      	ldr	r3, [pc, #292]	; (8001998 <HAL_TIM_Base_MspInit+0x190>)
 8001874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001876:	f003 0304 	and.w	r3, r3, #4
 800187a:	617b      	str	r3, [r7, #20]
 800187c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	613b      	str	r3, [r7, #16]
 8001882:	4b45      	ldr	r3, [pc, #276]	; (8001998 <HAL_TIM_Base_MspInit+0x190>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	4a44      	ldr	r2, [pc, #272]	; (8001998 <HAL_TIM_Base_MspInit+0x190>)
 8001888:	f043 0302 	orr.w	r3, r3, #2
 800188c:	6313      	str	r3, [r2, #48]	; 0x30
 800188e:	4b42      	ldr	r3, [pc, #264]	; (8001998 <HAL_TIM_Base_MspInit+0x190>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	613b      	str	r3, [r7, #16]
 8001898:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800189a:	2340      	movs	r3, #64	; 0x40
 800189c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189e:	2302      	movs	r3, #2
 80018a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a6:	2300      	movs	r3, #0
 80018a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80018aa:	2302      	movs	r3, #2
 80018ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ae:	f107 031c 	add.w	r3, r7, #28
 80018b2:	4619      	mov	r1, r3
 80018b4:	483a      	ldr	r0, [pc, #232]	; (80019a0 <HAL_TIM_Base_MspInit+0x198>)
 80018b6:	f000 ff65 	bl	8002784 <HAL_GPIO_Init>
    hdma_tim4_ch1.Instance = DMA1_Stream0;
 80018ba:	4b3a      	ldr	r3, [pc, #232]	; (80019a4 <HAL_TIM_Base_MspInit+0x19c>)
 80018bc:	4a3a      	ldr	r2, [pc, #232]	; (80019a8 <HAL_TIM_Base_MspInit+0x1a0>)
 80018be:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Channel = DMA_CHANNEL_2;
 80018c0:	4b38      	ldr	r3, [pc, #224]	; (80019a4 <HAL_TIM_Base_MspInit+0x19c>)
 80018c2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80018c6:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018c8:	4b36      	ldr	r3, [pc, #216]	; (80019a4 <HAL_TIM_Base_MspInit+0x19c>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80018ce:	4b35      	ldr	r3, [pc, #212]	; (80019a4 <HAL_TIM_Base_MspInit+0x19c>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80018d4:	4b33      	ldr	r3, [pc, #204]	; (80019a4 <HAL_TIM_Base_MspInit+0x19c>)
 80018d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018da:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80018dc:	4b31      	ldr	r3, [pc, #196]	; (80019a4 <HAL_TIM_Base_MspInit+0x19c>)
 80018de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018e2:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80018e4:	4b2f      	ldr	r3, [pc, #188]	; (80019a4 <HAL_TIM_Base_MspInit+0x19c>)
 80018e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018ea:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_CIRCULAR;
 80018ec:	4b2d      	ldr	r3, [pc, #180]	; (80019a4 <HAL_TIM_Base_MspInit+0x19c>)
 80018ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018f2:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80018f4:	4b2b      	ldr	r3, [pc, #172]	; (80019a4 <HAL_TIM_Base_MspInit+0x19c>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018fa:	4b2a      	ldr	r3, [pc, #168]	; (80019a4 <HAL_TIM_Base_MspInit+0x19c>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 8001900:	4828      	ldr	r0, [pc, #160]	; (80019a4 <HAL_TIM_Base_MspInit+0x19c>)
 8001902:	f000 fbad 	bl	8002060 <HAL_DMA_Init>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <HAL_TIM_Base_MspInit+0x108>
      Error_Handler();
 800190c:	f7ff ff4e 	bl	80017ac <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4a24      	ldr	r2, [pc, #144]	; (80019a4 <HAL_TIM_Base_MspInit+0x19c>)
 8001914:	625a      	str	r2, [r3, #36]	; 0x24
 8001916:	4a23      	ldr	r2, [pc, #140]	; (80019a4 <HAL_TIM_Base_MspInit+0x19c>)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800191c:	e036      	b.n	800198c <HAL_TIM_Base_MspInit+0x184>
  else if(htim_base->Instance==TIM10)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a22      	ldr	r2, [pc, #136]	; (80019ac <HAL_TIM_Base_MspInit+0x1a4>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d116      	bne.n	8001956 <HAL_TIM_Base_MspInit+0x14e>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001928:	2300      	movs	r3, #0
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	4b1a      	ldr	r3, [pc, #104]	; (8001998 <HAL_TIM_Base_MspInit+0x190>)
 800192e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001930:	4a19      	ldr	r2, [pc, #100]	; (8001998 <HAL_TIM_Base_MspInit+0x190>)
 8001932:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001936:	6453      	str	r3, [r2, #68]	; 0x44
 8001938:	4b17      	ldr	r3, [pc, #92]	; (8001998 <HAL_TIM_Base_MspInit+0x190>)
 800193a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001940:	60fb      	str	r3, [r7, #12]
 8001942:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001944:	2200      	movs	r2, #0
 8001946:	2100      	movs	r1, #0
 8001948:	2019      	movs	r0, #25
 800194a:	f000 fb52 	bl	8001ff2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800194e:	2019      	movs	r0, #25
 8001950:	f000 fb6b 	bl	800202a <HAL_NVIC_EnableIRQ>
}
 8001954:	e01a      	b.n	800198c <HAL_TIM_Base_MspInit+0x184>
  else if(htim_base->Instance==TIM11)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a15      	ldr	r2, [pc, #84]	; (80019b0 <HAL_TIM_Base_MspInit+0x1a8>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d115      	bne.n	800198c <HAL_TIM_Base_MspInit+0x184>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001960:	2300      	movs	r3, #0
 8001962:	60bb      	str	r3, [r7, #8]
 8001964:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <HAL_TIM_Base_MspInit+0x190>)
 8001966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001968:	4a0b      	ldr	r2, [pc, #44]	; (8001998 <HAL_TIM_Base_MspInit+0x190>)
 800196a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800196e:	6453      	str	r3, [r2, #68]	; 0x44
 8001970:	4b09      	ldr	r3, [pc, #36]	; (8001998 <HAL_TIM_Base_MspInit+0x190>)
 8001972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001974:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001978:	60bb      	str	r3, [r7, #8]
 800197a:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800197c:	2200      	movs	r2, #0
 800197e:	2100      	movs	r1, #0
 8001980:	201a      	movs	r0, #26
 8001982:	f000 fb36 	bl	8001ff2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001986:	201a      	movs	r0, #26
 8001988:	f000 fb4f 	bl	800202a <HAL_NVIC_EnableIRQ>
}
 800198c:	bf00      	nop
 800198e:	3730      	adds	r7, #48	; 0x30
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40000400 	.word	0x40000400
 8001998:	40023800 	.word	0x40023800
 800199c:	40000800 	.word	0x40000800
 80019a0:	40020400 	.word	0x40020400
 80019a4:	20000318 	.word	0x20000318
 80019a8:	40026010 	.word	0x40026010
 80019ac:	40014400 	.word	0x40014400
 80019b0:	40014800 	.word	0x40014800

080019b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b08a      	sub	sp, #40	; 0x28
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019bc:	f107 0314 	add.w	r3, r7, #20
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	605a      	str	r2, [r3, #4]
 80019c6:	609a      	str	r2, [r3, #8]
 80019c8:	60da      	str	r2, [r3, #12]
 80019ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a19      	ldr	r2, [pc, #100]	; (8001a38 <HAL_UART_MspInit+0x84>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d12b      	bne.n	8001a2e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	613b      	str	r3, [r7, #16]
 80019da:	4b18      	ldr	r3, [pc, #96]	; (8001a3c <HAL_UART_MspInit+0x88>)
 80019dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019de:	4a17      	ldr	r2, [pc, #92]	; (8001a3c <HAL_UART_MspInit+0x88>)
 80019e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019e4:	6413      	str	r3, [r2, #64]	; 0x40
 80019e6:	4b15      	ldr	r3, [pc, #84]	; (8001a3c <HAL_UART_MspInit+0x88>)
 80019e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ee:	613b      	str	r3, [r7, #16]
 80019f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	60fb      	str	r3, [r7, #12]
 80019f6:	4b11      	ldr	r3, [pc, #68]	; (8001a3c <HAL_UART_MspInit+0x88>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	4a10      	ldr	r2, [pc, #64]	; (8001a3c <HAL_UART_MspInit+0x88>)
 80019fc:	f043 0301 	orr.w	r3, r3, #1
 8001a00:	6313      	str	r3, [r2, #48]	; 0x30
 8001a02:	4b0e      	ldr	r3, [pc, #56]	; (8001a3c <HAL_UART_MspInit+0x88>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a0e:	230c      	movs	r3, #12
 8001a10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a12:	2302      	movs	r3, #2
 8001a14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a16:	2300      	movs	r3, #0
 8001a18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a1e:	2307      	movs	r3, #7
 8001a20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a22:	f107 0314 	add.w	r3, r7, #20
 8001a26:	4619      	mov	r1, r3
 8001a28:	4805      	ldr	r0, [pc, #20]	; (8001a40 <HAL_UART_MspInit+0x8c>)
 8001a2a:	f000 feab 	bl	8002784 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a2e:	bf00      	nop
 8001a30:	3728      	adds	r7, #40	; 0x28
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40004400 	.word	0x40004400
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	40020000 	.word	0x40020000

08001a44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a48:	e7fe      	b.n	8001a48 <NMI_Handler+0x4>

08001a4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a4e:	e7fe      	b.n	8001a4e <HardFault_Handler+0x4>

08001a50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a54:	e7fe      	b.n	8001a54 <MemManage_Handler+0x4>

08001a56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a56:	b480      	push	{r7}
 8001a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a5a:	e7fe      	b.n	8001a5a <BusFault_Handler+0x4>

08001a5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a60:	e7fe      	b.n	8001a60 <UsageFault_Handler+0x4>

08001a62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a62:	b480      	push	{r7}
 8001a64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a66:	bf00      	nop
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a82:	bf00      	nop
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a90:	f000 f990 	bl	8001db4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a94:	bf00      	nop
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

//	capture_done++; //se activa al realizar las 2 transferencias del DMA

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8001a9c:	4802      	ldr	r0, [pc, #8]	; (8001aa8 <DMA1_Stream0_IRQHandler+0x10>)
 8001a9e:	f000 fc07 	bl	80022b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20000318 	.word	0x20000318

08001aac <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001ab0:	2110      	movs	r1, #16
 8001ab2:	4804      	ldr	r0, [pc, #16]	; (8001ac4 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8001ab4:	f001 f803 	bl	8002abe <HAL_GPIO_TogglePin>
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001ab8:	4803      	ldr	r0, [pc, #12]	; (8001ac8 <TIM1_UP_TIM10_IRQHandler+0x1c>)
 8001aba:	f002 f89f 	bl	8003bfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40020400 	.word	0x40020400
 8001ac8:	20000288 	.word	0x20000288

08001acc <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */
	HAL_GPIO_TogglePin(LED3_GPIO_Port,LED3_Pin);
 8001ad0:	2120      	movs	r1, #32
 8001ad2:	4804      	ldr	r0, [pc, #16]	; (8001ae4 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8001ad4:	f000 fff3 	bl	8002abe <HAL_GPIO_TogglePin>
  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001ad8:	4803      	ldr	r0, [pc, #12]	; (8001ae8 <TIM1_TRG_COM_TIM11_IRQHandler+0x1c>)
 8001ada:	f002 f88f 	bl	8003bfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40020400 	.word	0x40020400
 8001ae8:	200002d0 	.word	0x200002d0

08001aec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  HAL_GPIO_TogglePin(LED_USER_GPIO_Port, LED_USER_Pin);
 8001af0:	2120      	movs	r1, #32
 8001af2:	4804      	ldr	r0, [pc, #16]	; (8001b04 <TIM3_IRQHandler+0x18>)
 8001af4:	f000 ffe3 	bl	8002abe <HAL_GPIO_TogglePin>
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001af8:	4803      	ldr	r0, [pc, #12]	; (8001b08 <TIM3_IRQHandler+0x1c>)
 8001afa:	f002 f87f 	bl	8003bfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40020000 	.word	0x40020000
 8001b08:	200001f8 	.word	0x200001f8

08001b0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  return 1;
 8001b10:	2301      	movs	r3, #1
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <_kill>:

int _kill(int pid, int sig)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b26:	f003 fa93 	bl	8005050 <__errno>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2216      	movs	r2, #22
 8001b2e:	601a      	str	r2, [r3, #0]
  return -1;
 8001b30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <_exit>:

void _exit (int status)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b44:	f04f 31ff 	mov.w	r1, #4294967295
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f7ff ffe7 	bl	8001b1c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b4e:	e7fe      	b.n	8001b4e <_exit+0x12>

08001b50 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	617b      	str	r3, [r7, #20]
 8001b60:	e00a      	b.n	8001b78 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b62:	f3af 8000 	nop.w
 8001b66:	4601      	mov	r1, r0
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	1c5a      	adds	r2, r3, #1
 8001b6c:	60ba      	str	r2, [r7, #8]
 8001b6e:	b2ca      	uxtb	r2, r1
 8001b70:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	3301      	adds	r3, #1
 8001b76:	617b      	str	r3, [r7, #20]
 8001b78:	697a      	ldr	r2, [r7, #20]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	dbf0      	blt.n	8001b62 <_read+0x12>
  }

  return len;
 8001b80:	687b      	ldr	r3, [r7, #4]
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3718      	adds	r7, #24
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b086      	sub	sp, #24
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	60f8      	str	r0, [r7, #12]
 8001b92:	60b9      	str	r1, [r7, #8]
 8001b94:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b96:	2300      	movs	r3, #0
 8001b98:	617b      	str	r3, [r7, #20]
 8001b9a:	e009      	b.n	8001bb0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	1c5a      	adds	r2, r3, #1
 8001ba0:	60ba      	str	r2, [r7, #8]
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	3301      	adds	r3, #1
 8001bae:	617b      	str	r3, [r7, #20]
 8001bb0:	697a      	ldr	r2, [r7, #20]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	dbf1      	blt.n	8001b9c <_write+0x12>
  }
  return len;
 8001bb8:	687b      	ldr	r3, [r7, #4]
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3718      	adds	r7, #24
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <_close>:

int _close(int file)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	b083      	sub	sp, #12
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	b083      	sub	sp, #12
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
 8001be2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bea:	605a      	str	r2, [r3, #4]
  return 0;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <_isatty>:

int _isatty(int file)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	b083      	sub	sp, #12
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c02:	2301      	movs	r3, #1
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3714      	adds	r7, #20
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
	...

08001c2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c34:	4a14      	ldr	r2, [pc, #80]	; (8001c88 <_sbrk+0x5c>)
 8001c36:	4b15      	ldr	r3, [pc, #84]	; (8001c8c <_sbrk+0x60>)
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c40:	4b13      	ldr	r3, [pc, #76]	; (8001c90 <_sbrk+0x64>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d102      	bne.n	8001c4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c48:	4b11      	ldr	r3, [pc, #68]	; (8001c90 <_sbrk+0x64>)
 8001c4a:	4a12      	ldr	r2, [pc, #72]	; (8001c94 <_sbrk+0x68>)
 8001c4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c4e:	4b10      	ldr	r3, [pc, #64]	; (8001c90 <_sbrk+0x64>)
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4413      	add	r3, r2
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d207      	bcs.n	8001c6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c5c:	f003 f9f8 	bl	8005050 <__errno>
 8001c60:	4603      	mov	r3, r0
 8001c62:	220c      	movs	r2, #12
 8001c64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c66:	f04f 33ff 	mov.w	r3, #4294967295
 8001c6a:	e009      	b.n	8001c80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c6c:	4b08      	ldr	r3, [pc, #32]	; (8001c90 <_sbrk+0x64>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c72:	4b07      	ldr	r3, [pc, #28]	; (8001c90 <_sbrk+0x64>)
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4413      	add	r3, r2
 8001c7a:	4a05      	ldr	r2, [pc, #20]	; (8001c90 <_sbrk+0x64>)
 8001c7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3718      	adds	r7, #24
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	20018000 	.word	0x20018000
 8001c8c:	00000400 	.word	0x00000400
 8001c90:	20000400 	.word	0x20000400
 8001c94:	20000418 	.word	0x20000418

08001c98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c9c:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <SystemInit+0x20>)
 8001c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ca2:	4a05      	ldr	r2, [pc, #20]	; (8001cb8 <SystemInit+0x20>)
 8001ca4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ca8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cac:	bf00      	nop
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	e000ed00 	.word	0xe000ed00

08001cbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001cbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cf4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cc0:	480d      	ldr	r0, [pc, #52]	; (8001cf8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001cc2:	490e      	ldr	r1, [pc, #56]	; (8001cfc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001cc4:	4a0e      	ldr	r2, [pc, #56]	; (8001d00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cc8:	e002      	b.n	8001cd0 <LoopCopyDataInit>

08001cca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ccc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cce:	3304      	adds	r3, #4

08001cd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cd4:	d3f9      	bcc.n	8001cca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cd6:	4a0b      	ldr	r2, [pc, #44]	; (8001d04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001cd8:	4c0b      	ldr	r4, [pc, #44]	; (8001d08 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001cda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cdc:	e001      	b.n	8001ce2 <LoopFillZerobss>

08001cde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ce0:	3204      	adds	r2, #4

08001ce2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ce2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ce4:	d3fb      	bcc.n	8001cde <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ce6:	f7ff ffd7 	bl	8001c98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cea:	f003 f9b7 	bl	800505c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cee:	f7ff fa3b 	bl	8001168 <main>
  bx  lr    
 8001cf2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001cf4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001cf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cfc:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001d00:	080082c4 	.word	0x080082c4
  ldr r2, =_sbss
 8001d04:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001d08:	20000418 	.word	0x20000418

08001d0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d0c:	e7fe      	b.n	8001d0c <ADC_IRQHandler>
	...

08001d10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d14:	4b0e      	ldr	r3, [pc, #56]	; (8001d50 <HAL_Init+0x40>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a0d      	ldr	r2, [pc, #52]	; (8001d50 <HAL_Init+0x40>)
 8001d1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d20:	4b0b      	ldr	r3, [pc, #44]	; (8001d50 <HAL_Init+0x40>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a0a      	ldr	r2, [pc, #40]	; (8001d50 <HAL_Init+0x40>)
 8001d26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d2c:	4b08      	ldr	r3, [pc, #32]	; (8001d50 <HAL_Init+0x40>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a07      	ldr	r2, [pc, #28]	; (8001d50 <HAL_Init+0x40>)
 8001d32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d38:	2003      	movs	r0, #3
 8001d3a:	f000 f94f 	bl	8001fdc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d3e:	200f      	movs	r0, #15
 8001d40:	f000 f808 	bl	8001d54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d44:	f7ff fd38 	bl	80017b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	40023c00 	.word	0x40023c00

08001d54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d5c:	4b12      	ldr	r3, [pc, #72]	; (8001da8 <HAL_InitTick+0x54>)
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	4b12      	ldr	r3, [pc, #72]	; (8001dac <HAL_InitTick+0x58>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	4619      	mov	r1, r3
 8001d66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d72:	4618      	mov	r0, r3
 8001d74:	f000 f967 	bl	8002046 <HAL_SYSTICK_Config>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e00e      	b.n	8001da0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2b0f      	cmp	r3, #15
 8001d86:	d80a      	bhi.n	8001d9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d88:	2200      	movs	r2, #0
 8001d8a:	6879      	ldr	r1, [r7, #4]
 8001d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d90:	f000 f92f 	bl	8001ff2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d94:	4a06      	ldr	r2, [pc, #24]	; (8001db0 <HAL_InitTick+0x5c>)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	e000      	b.n	8001da0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	20000000 	.word	0x20000000
 8001dac:	20000008 	.word	0x20000008
 8001db0:	20000004 	.word	0x20000004

08001db4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001db8:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <HAL_IncTick+0x20>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <HAL_IncTick+0x24>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	4a04      	ldr	r2, [pc, #16]	; (8001dd8 <HAL_IncTick+0x24>)
 8001dc6:	6013      	str	r3, [r2, #0]
}
 8001dc8:	bf00      	nop
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	20000008 	.word	0x20000008
 8001dd8:	20000404 	.word	0x20000404

08001ddc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  return uwTick;
 8001de0:	4b03      	ldr	r3, [pc, #12]	; (8001df0 <HAL_GetTick+0x14>)
 8001de2:	681b      	ldr	r3, [r3, #0]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	20000404 	.word	0x20000404

08001df4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dfc:	f7ff ffee 	bl	8001ddc <HAL_GetTick>
 8001e00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e0c:	d005      	beq.n	8001e1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e0e:	4b0a      	ldr	r3, [pc, #40]	; (8001e38 <HAL_Delay+0x44>)
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	461a      	mov	r2, r3
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	4413      	add	r3, r2
 8001e18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e1a:	bf00      	nop
 8001e1c:	f7ff ffde 	bl	8001ddc <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	68fa      	ldr	r2, [r7, #12]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d8f7      	bhi.n	8001e1c <HAL_Delay+0x28>
  {
  }
}
 8001e2c:	bf00      	nop
 8001e2e:	bf00      	nop
 8001e30:	3710      	adds	r7, #16
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	20000008 	.word	0x20000008

08001e3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f003 0307 	and.w	r3, r3, #7
 8001e4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e4c:	4b0c      	ldr	r3, [pc, #48]	; (8001e80 <__NVIC_SetPriorityGrouping+0x44>)
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e52:	68ba      	ldr	r2, [r7, #8]
 8001e54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e58:	4013      	ands	r3, r2
 8001e5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e6e:	4a04      	ldr	r2, [pc, #16]	; (8001e80 <__NVIC_SetPriorityGrouping+0x44>)
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	60d3      	str	r3, [r2, #12]
}
 8001e74:	bf00      	nop
 8001e76:	3714      	adds	r7, #20
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr
 8001e80:	e000ed00 	.word	0xe000ed00

08001e84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e88:	4b04      	ldr	r3, [pc, #16]	; (8001e9c <__NVIC_GetPriorityGrouping+0x18>)
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	0a1b      	lsrs	r3, r3, #8
 8001e8e:	f003 0307 	and.w	r3, r3, #7
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr
 8001e9c:	e000ed00 	.word	0xe000ed00

08001ea0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	db0b      	blt.n	8001eca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eb2:	79fb      	ldrb	r3, [r7, #7]
 8001eb4:	f003 021f 	and.w	r2, r3, #31
 8001eb8:	4907      	ldr	r1, [pc, #28]	; (8001ed8 <__NVIC_EnableIRQ+0x38>)
 8001eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ebe:	095b      	lsrs	r3, r3, #5
 8001ec0:	2001      	movs	r0, #1
 8001ec2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001eca:	bf00      	nop
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	e000e100 	.word	0xe000e100

08001edc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	6039      	str	r1, [r7, #0]
 8001ee6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	db0a      	blt.n	8001f06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	b2da      	uxtb	r2, r3
 8001ef4:	490c      	ldr	r1, [pc, #48]	; (8001f28 <__NVIC_SetPriority+0x4c>)
 8001ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efa:	0112      	lsls	r2, r2, #4
 8001efc:	b2d2      	uxtb	r2, r2
 8001efe:	440b      	add	r3, r1
 8001f00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f04:	e00a      	b.n	8001f1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	b2da      	uxtb	r2, r3
 8001f0a:	4908      	ldr	r1, [pc, #32]	; (8001f2c <__NVIC_SetPriority+0x50>)
 8001f0c:	79fb      	ldrb	r3, [r7, #7]
 8001f0e:	f003 030f 	and.w	r3, r3, #15
 8001f12:	3b04      	subs	r3, #4
 8001f14:	0112      	lsls	r2, r2, #4
 8001f16:	b2d2      	uxtb	r2, r2
 8001f18:	440b      	add	r3, r1
 8001f1a:	761a      	strb	r2, [r3, #24]
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	e000e100 	.word	0xe000e100
 8001f2c:	e000ed00 	.word	0xe000ed00

08001f30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b089      	sub	sp, #36	; 0x24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f003 0307 	and.w	r3, r3, #7
 8001f42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	f1c3 0307 	rsb	r3, r3, #7
 8001f4a:	2b04      	cmp	r3, #4
 8001f4c:	bf28      	it	cs
 8001f4e:	2304      	movcs	r3, #4
 8001f50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	3304      	adds	r3, #4
 8001f56:	2b06      	cmp	r3, #6
 8001f58:	d902      	bls.n	8001f60 <NVIC_EncodePriority+0x30>
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	3b03      	subs	r3, #3
 8001f5e:	e000      	b.n	8001f62 <NVIC_EncodePriority+0x32>
 8001f60:	2300      	movs	r3, #0
 8001f62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f64:	f04f 32ff 	mov.w	r2, #4294967295
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	43da      	mvns	r2, r3
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	401a      	ands	r2, r3
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f78:	f04f 31ff 	mov.w	r1, #4294967295
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f82:	43d9      	mvns	r1, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f88:	4313      	orrs	r3, r2
         );
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3724      	adds	r7, #36	; 0x24
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
	...

08001f98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fa8:	d301      	bcc.n	8001fae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001faa:	2301      	movs	r3, #1
 8001fac:	e00f      	b.n	8001fce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fae:	4a0a      	ldr	r2, [pc, #40]	; (8001fd8 <SysTick_Config+0x40>)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fb6:	210f      	movs	r1, #15
 8001fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fbc:	f7ff ff8e 	bl	8001edc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fc0:	4b05      	ldr	r3, [pc, #20]	; (8001fd8 <SysTick_Config+0x40>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fc6:	4b04      	ldr	r3, [pc, #16]	; (8001fd8 <SysTick_Config+0x40>)
 8001fc8:	2207      	movs	r2, #7
 8001fca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	e000e010 	.word	0xe000e010

08001fdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f7ff ff29 	bl	8001e3c <__NVIC_SetPriorityGrouping>
}
 8001fea:	bf00      	nop
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b086      	sub	sp, #24
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	60b9      	str	r1, [r7, #8]
 8001ffc:	607a      	str	r2, [r7, #4]
 8001ffe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002000:	2300      	movs	r3, #0
 8002002:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002004:	f7ff ff3e 	bl	8001e84 <__NVIC_GetPriorityGrouping>
 8002008:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	68b9      	ldr	r1, [r7, #8]
 800200e:	6978      	ldr	r0, [r7, #20]
 8002010:	f7ff ff8e 	bl	8001f30 <NVIC_EncodePriority>
 8002014:	4602      	mov	r2, r0
 8002016:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800201a:	4611      	mov	r1, r2
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff ff5d 	bl	8001edc <__NVIC_SetPriority>
}
 8002022:	bf00      	nop
 8002024:	3718      	adds	r7, #24
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b082      	sub	sp, #8
 800202e:	af00      	add	r7, sp, #0
 8002030:	4603      	mov	r3, r0
 8002032:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff ff31 	bl	8001ea0 <__NVIC_EnableIRQ>
}
 800203e:	bf00      	nop
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	b082      	sub	sp, #8
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f7ff ffa2 	bl	8001f98 <SysTick_Config>
 8002054:	4603      	mov	r3, r0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
	...

08002060 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002068:	2300      	movs	r3, #0
 800206a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800206c:	f7ff feb6 	bl	8001ddc <HAL_GetTick>
 8002070:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d101      	bne.n	800207c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e099      	b.n	80021b0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2202      	movs	r2, #2
 8002080:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f022 0201 	bic.w	r2, r2, #1
 800209a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800209c:	e00f      	b.n	80020be <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800209e:	f7ff fe9d 	bl	8001ddc <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	2b05      	cmp	r3, #5
 80020aa:	d908      	bls.n	80020be <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2220      	movs	r2, #32
 80020b0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2203      	movs	r2, #3
 80020b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e078      	b.n	80021b0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d1e8      	bne.n	800209e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80020d4:	697a      	ldr	r2, [r7, #20]
 80020d6:	4b38      	ldr	r3, [pc, #224]	; (80021b8 <HAL_DMA_Init+0x158>)
 80020d8:	4013      	ands	r3, r2
 80020da:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685a      	ldr	r2, [r3, #4]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	691b      	ldr	r3, [r3, #16]
 80020f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002102:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a1b      	ldr	r3, [r3, #32]
 8002108:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800210a:	697a      	ldr	r2, [r7, #20]
 800210c:	4313      	orrs	r3, r2
 800210e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002114:	2b04      	cmp	r3, #4
 8002116:	d107      	bne.n	8002128 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002120:	4313      	orrs	r3, r2
 8002122:	697a      	ldr	r2, [r7, #20]
 8002124:	4313      	orrs	r3, r2
 8002126:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	697a      	ldr	r2, [r7, #20]
 800212e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	f023 0307 	bic.w	r3, r3, #7
 800213e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002144:	697a      	ldr	r2, [r7, #20]
 8002146:	4313      	orrs	r3, r2
 8002148:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214e:	2b04      	cmp	r3, #4
 8002150:	d117      	bne.n	8002182 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002156:	697a      	ldr	r2, [r7, #20]
 8002158:	4313      	orrs	r3, r2
 800215a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002160:	2b00      	cmp	r3, #0
 8002162:	d00e      	beq.n	8002182 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f000 fa91 	bl	800268c <DMA_CheckFifoParam>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d008      	beq.n	8002182 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2240      	movs	r2, #64	; 0x40
 8002174:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800217e:	2301      	movs	r3, #1
 8002180:	e016      	b.n	80021b0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	697a      	ldr	r2, [r7, #20]
 8002188:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f000 fa48 	bl	8002620 <DMA_CalcBaseAndBitshift>
 8002190:	4603      	mov	r3, r0
 8002192:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002198:	223f      	movs	r2, #63	; 0x3f
 800219a:	409a      	lsls	r2, r3
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2201      	movs	r2, #1
 80021aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80021ae:	2300      	movs	r3, #0
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3718      	adds	r7, #24
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	f010803f 	.word	0xf010803f

080021bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]
 80021c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021ca:	2300      	movs	r3, #0
 80021cc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d101      	bne.n	80021e2 <HAL_DMA_Start_IT+0x26>
 80021de:	2302      	movs	r3, #2
 80021e0:	e040      	b.n	8002264 <HAL_DMA_Start_IT+0xa8>
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2201      	movs	r2, #1
 80021e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d12f      	bne.n	8002256 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2202      	movs	r2, #2
 80021fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2200      	movs	r2, #0
 8002202:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	68b9      	ldr	r1, [r7, #8]
 800220a:	68f8      	ldr	r0, [r7, #12]
 800220c:	f000 f9da 	bl	80025c4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002214:	223f      	movs	r2, #63	; 0x3f
 8002216:	409a      	lsls	r2, r3
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f042 0216 	orr.w	r2, r2, #22
 800222a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002230:	2b00      	cmp	r3, #0
 8002232:	d007      	beq.n	8002244 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f042 0208 	orr.w	r2, r2, #8
 8002242:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f042 0201 	orr.w	r2, r2, #1
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	e005      	b.n	8002262 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800225e:	2302      	movs	r3, #2
 8002260:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002262:	7dfb      	ldrb	r3, [r7, #23]
}
 8002264:	4618      	mov	r0, r3
 8002266:	3718      	adds	r7, #24
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800227a:	b2db      	uxtb	r3, r3
 800227c:	2b02      	cmp	r3, #2
 800227e:	d004      	beq.n	800228a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2280      	movs	r2, #128	; 0x80
 8002284:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e00c      	b.n	80022a4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2205      	movs	r2, #5
 800228e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f022 0201 	bic.w	r2, r2, #1
 80022a0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b086      	sub	sp, #24
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80022b8:	2300      	movs	r3, #0
 80022ba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80022bc:	4b8e      	ldr	r3, [pc, #568]	; (80024f8 <HAL_DMA_IRQHandler+0x248>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a8e      	ldr	r2, [pc, #568]	; (80024fc <HAL_DMA_IRQHandler+0x24c>)
 80022c2:	fba2 2303 	umull	r2, r3, r2, r3
 80022c6:	0a9b      	lsrs	r3, r3, #10
 80022c8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022da:	2208      	movs	r2, #8
 80022dc:	409a      	lsls	r2, r3
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	4013      	ands	r3, r2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d01a      	beq.n	800231c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0304 	and.w	r3, r3, #4
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d013      	beq.n	800231c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f022 0204 	bic.w	r2, r2, #4
 8002302:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002308:	2208      	movs	r2, #8
 800230a:	409a      	lsls	r2, r3
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002314:	f043 0201 	orr.w	r2, r3, #1
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002320:	2201      	movs	r2, #1
 8002322:	409a      	lsls	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	4013      	ands	r3, r2
 8002328:	2b00      	cmp	r3, #0
 800232a:	d012      	beq.n	8002352 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00b      	beq.n	8002352 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800233e:	2201      	movs	r2, #1
 8002340:	409a      	lsls	r2, r3
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800234a:	f043 0202 	orr.w	r2, r3, #2
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002356:	2204      	movs	r2, #4
 8002358:	409a      	lsls	r2, r3
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	4013      	ands	r3, r2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d012      	beq.n	8002388 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	2b00      	cmp	r3, #0
 800236e:	d00b      	beq.n	8002388 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002374:	2204      	movs	r2, #4
 8002376:	409a      	lsls	r2, r3
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002380:	f043 0204 	orr.w	r2, r3, #4
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800238c:	2210      	movs	r2, #16
 800238e:	409a      	lsls	r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	4013      	ands	r3, r2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d043      	beq.n	8002420 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0308 	and.w	r3, r3, #8
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d03c      	beq.n	8002420 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023aa:	2210      	movs	r2, #16
 80023ac:	409a      	lsls	r2, r3
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d018      	beq.n	80023f2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d108      	bne.n	80023e0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d024      	beq.n	8002420 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	4798      	blx	r3
 80023de:	e01f      	b.n	8002420 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d01b      	beq.n	8002420 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	4798      	blx	r3
 80023f0:	e016      	b.n	8002420 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d107      	bne.n	8002410 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f022 0208 	bic.w	r2, r2, #8
 800240e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002414:	2b00      	cmp	r3, #0
 8002416:	d003      	beq.n	8002420 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002424:	2220      	movs	r2, #32
 8002426:	409a      	lsls	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	4013      	ands	r3, r2
 800242c:	2b00      	cmp	r3, #0
 800242e:	f000 808f 	beq.w	8002550 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0310 	and.w	r3, r3, #16
 800243c:	2b00      	cmp	r3, #0
 800243e:	f000 8087 	beq.w	8002550 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002446:	2220      	movs	r2, #32
 8002448:	409a      	lsls	r2, r3
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b05      	cmp	r3, #5
 8002458:	d136      	bne.n	80024c8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f022 0216 	bic.w	r2, r2, #22
 8002468:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	695a      	ldr	r2, [r3, #20]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002478:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247e:	2b00      	cmp	r3, #0
 8002480:	d103      	bne.n	800248a <HAL_DMA_IRQHandler+0x1da>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002486:	2b00      	cmp	r3, #0
 8002488:	d007      	beq.n	800249a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f022 0208 	bic.w	r2, r2, #8
 8002498:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800249e:	223f      	movs	r2, #63	; 0x3f
 80024a0:	409a      	lsls	r2, r3
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2201      	movs	r2, #1
 80024aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d07e      	beq.n	80025bc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	4798      	blx	r3
        }
        return;
 80024c6:	e079      	b.n	80025bc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d01d      	beq.n	8002512 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d10d      	bne.n	8002500 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d031      	beq.n	8002550 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	4798      	blx	r3
 80024f4:	e02c      	b.n	8002550 <HAL_DMA_IRQHandler+0x2a0>
 80024f6:	bf00      	nop
 80024f8:	20000000 	.word	0x20000000
 80024fc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002504:	2b00      	cmp	r3, #0
 8002506:	d023      	beq.n	8002550 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	4798      	blx	r3
 8002510:	e01e      	b.n	8002550 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800251c:	2b00      	cmp	r3, #0
 800251e:	d10f      	bne.n	8002540 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f022 0210 	bic.w	r2, r2, #16
 800252e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002544:	2b00      	cmp	r3, #0
 8002546:	d003      	beq.n	8002550 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002554:	2b00      	cmp	r3, #0
 8002556:	d032      	beq.n	80025be <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800255c:	f003 0301 	and.w	r3, r3, #1
 8002560:	2b00      	cmp	r3, #0
 8002562:	d022      	beq.n	80025aa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2205      	movs	r2, #5
 8002568:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f022 0201 	bic.w	r2, r2, #1
 800257a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	3301      	adds	r3, #1
 8002580:	60bb      	str	r3, [r7, #8]
 8002582:	697a      	ldr	r2, [r7, #20]
 8002584:	429a      	cmp	r2, r3
 8002586:	d307      	bcc.n	8002598 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1f2      	bne.n	800257c <HAL_DMA_IRQHandler+0x2cc>
 8002596:	e000      	b.n	800259a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002598:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2201      	movs	r2, #1
 800259e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d005      	beq.n	80025be <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	4798      	blx	r3
 80025ba:	e000      	b.n	80025be <HAL_DMA_IRQHandler+0x30e>
        return;
 80025bc:	bf00      	nop
    }
  }
}
 80025be:	3718      	adds	r7, #24
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	607a      	str	r2, [r7, #4]
 80025d0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80025e0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	2b40      	cmp	r3, #64	; 0x40
 80025f0:	d108      	bne.n	8002604 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	68ba      	ldr	r2, [r7, #8]
 8002600:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002602:	e007      	b.n	8002614 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	68ba      	ldr	r2, [r7, #8]
 800260a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	60da      	str	r2, [r3, #12]
}
 8002614:	bf00      	nop
 8002616:	3714      	adds	r7, #20
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002620:	b480      	push	{r7}
 8002622:	b085      	sub	sp, #20
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	b2db      	uxtb	r3, r3
 800262e:	3b10      	subs	r3, #16
 8002630:	4a14      	ldr	r2, [pc, #80]	; (8002684 <DMA_CalcBaseAndBitshift+0x64>)
 8002632:	fba2 2303 	umull	r2, r3, r2, r3
 8002636:	091b      	lsrs	r3, r3, #4
 8002638:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800263a:	4a13      	ldr	r2, [pc, #76]	; (8002688 <DMA_CalcBaseAndBitshift+0x68>)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	4413      	add	r3, r2
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	461a      	mov	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2b03      	cmp	r3, #3
 800264c:	d909      	bls.n	8002662 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002656:	f023 0303 	bic.w	r3, r3, #3
 800265a:	1d1a      	adds	r2, r3, #4
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	659a      	str	r2, [r3, #88]	; 0x58
 8002660:	e007      	b.n	8002672 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800266a:	f023 0303 	bic.w	r3, r3, #3
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002676:	4618      	mov	r0, r3
 8002678:	3714      	adds	r7, #20
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	aaaaaaab 	.word	0xaaaaaaab
 8002688:	08007ed4 	.word	0x08007ed4

0800268c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800268c:	b480      	push	{r7}
 800268e:	b085      	sub	sp, #20
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002694:	2300      	movs	r3, #0
 8002696:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d11f      	bne.n	80026e6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	2b03      	cmp	r3, #3
 80026aa:	d856      	bhi.n	800275a <DMA_CheckFifoParam+0xce>
 80026ac:	a201      	add	r2, pc, #4	; (adr r2, 80026b4 <DMA_CheckFifoParam+0x28>)
 80026ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026b2:	bf00      	nop
 80026b4:	080026c5 	.word	0x080026c5
 80026b8:	080026d7 	.word	0x080026d7
 80026bc:	080026c5 	.word	0x080026c5
 80026c0:	0800275b 	.word	0x0800275b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d046      	beq.n	800275e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026d4:	e043      	b.n	800275e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026da:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80026de:	d140      	bne.n	8002762 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026e4:	e03d      	b.n	8002762 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026ee:	d121      	bne.n	8002734 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	2b03      	cmp	r3, #3
 80026f4:	d837      	bhi.n	8002766 <DMA_CheckFifoParam+0xda>
 80026f6:	a201      	add	r2, pc, #4	; (adr r2, 80026fc <DMA_CheckFifoParam+0x70>)
 80026f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026fc:	0800270d 	.word	0x0800270d
 8002700:	08002713 	.word	0x08002713
 8002704:	0800270d 	.word	0x0800270d
 8002708:	08002725 	.word	0x08002725
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	73fb      	strb	r3, [r7, #15]
      break;
 8002710:	e030      	b.n	8002774 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002716:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d025      	beq.n	800276a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002722:	e022      	b.n	800276a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002728:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800272c:	d11f      	bne.n	800276e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002732:	e01c      	b.n	800276e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	2b02      	cmp	r3, #2
 8002738:	d903      	bls.n	8002742 <DMA_CheckFifoParam+0xb6>
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	2b03      	cmp	r3, #3
 800273e:	d003      	beq.n	8002748 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002740:	e018      	b.n	8002774 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	73fb      	strb	r3, [r7, #15]
      break;
 8002746:	e015      	b.n	8002774 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800274c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00e      	beq.n	8002772 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	73fb      	strb	r3, [r7, #15]
      break;
 8002758:	e00b      	b.n	8002772 <DMA_CheckFifoParam+0xe6>
      break;
 800275a:	bf00      	nop
 800275c:	e00a      	b.n	8002774 <DMA_CheckFifoParam+0xe8>
      break;
 800275e:	bf00      	nop
 8002760:	e008      	b.n	8002774 <DMA_CheckFifoParam+0xe8>
      break;
 8002762:	bf00      	nop
 8002764:	e006      	b.n	8002774 <DMA_CheckFifoParam+0xe8>
      break;
 8002766:	bf00      	nop
 8002768:	e004      	b.n	8002774 <DMA_CheckFifoParam+0xe8>
      break;
 800276a:	bf00      	nop
 800276c:	e002      	b.n	8002774 <DMA_CheckFifoParam+0xe8>
      break;   
 800276e:	bf00      	nop
 8002770:	e000      	b.n	8002774 <DMA_CheckFifoParam+0xe8>
      break;
 8002772:	bf00      	nop
    }
  } 
  
  return status; 
 8002774:	7bfb      	ldrb	r3, [r7, #15]
}
 8002776:	4618      	mov	r0, r3
 8002778:	3714      	adds	r7, #20
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop

08002784 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002784:	b480      	push	{r7}
 8002786:	b089      	sub	sp, #36	; 0x24
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800278e:	2300      	movs	r3, #0
 8002790:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002792:	2300      	movs	r3, #0
 8002794:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002796:	2300      	movs	r3, #0
 8002798:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800279a:	2300      	movs	r3, #0
 800279c:	61fb      	str	r3, [r7, #28]
 800279e:	e159      	b.n	8002a54 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027a0:	2201      	movs	r2, #1
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	697a      	ldr	r2, [r7, #20]
 80027b0:	4013      	ands	r3, r2
 80027b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027b4:	693a      	ldr	r2, [r7, #16]
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	f040 8148 	bne.w	8002a4e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f003 0303 	and.w	r3, r3, #3
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d005      	beq.n	80027d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d130      	bne.n	8002838 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	2203      	movs	r2, #3
 80027e2:	fa02 f303 	lsl.w	r3, r2, r3
 80027e6:	43db      	mvns	r3, r3
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	4013      	ands	r3, r2
 80027ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	68da      	ldr	r2, [r3, #12]
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	fa02 f303 	lsl.w	r3, r2, r3
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800280c:	2201      	movs	r2, #1
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	43db      	mvns	r3, r3
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	4013      	ands	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	091b      	lsrs	r3, r3, #4
 8002822:	f003 0201 	and.w	r2, r3, #1
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	4313      	orrs	r3, r2
 8002830:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f003 0303 	and.w	r3, r3, #3
 8002840:	2b03      	cmp	r3, #3
 8002842:	d017      	beq.n	8002874 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	2203      	movs	r2, #3
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	43db      	mvns	r3, r3
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	4013      	ands	r3, r2
 800285a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	689a      	ldr	r2, [r3, #8]
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	4313      	orrs	r3, r2
 800286c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f003 0303 	and.w	r3, r3, #3
 800287c:	2b02      	cmp	r3, #2
 800287e:	d123      	bne.n	80028c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	08da      	lsrs	r2, r3, #3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	3208      	adds	r2, #8
 8002888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800288c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	f003 0307 	and.w	r3, r3, #7
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	220f      	movs	r2, #15
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	43db      	mvns	r3, r3
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	4013      	ands	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	691a      	ldr	r2, [r3, #16]
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	f003 0307 	and.w	r3, r3, #7
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	08da      	lsrs	r2, r3, #3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	3208      	adds	r2, #8
 80028c2:	69b9      	ldr	r1, [r7, #24]
 80028c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	2203      	movs	r2, #3
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	43db      	mvns	r3, r3
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	4013      	ands	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f003 0203 	and.w	r2, r3, #3
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002904:	2b00      	cmp	r3, #0
 8002906:	f000 80a2 	beq.w	8002a4e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800290a:	2300      	movs	r3, #0
 800290c:	60fb      	str	r3, [r7, #12]
 800290e:	4b57      	ldr	r3, [pc, #348]	; (8002a6c <HAL_GPIO_Init+0x2e8>)
 8002910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002912:	4a56      	ldr	r2, [pc, #344]	; (8002a6c <HAL_GPIO_Init+0x2e8>)
 8002914:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002918:	6453      	str	r3, [r2, #68]	; 0x44
 800291a:	4b54      	ldr	r3, [pc, #336]	; (8002a6c <HAL_GPIO_Init+0x2e8>)
 800291c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002922:	60fb      	str	r3, [r7, #12]
 8002924:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002926:	4a52      	ldr	r2, [pc, #328]	; (8002a70 <HAL_GPIO_Init+0x2ec>)
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	089b      	lsrs	r3, r3, #2
 800292c:	3302      	adds	r3, #2
 800292e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002932:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	f003 0303 	and.w	r3, r3, #3
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	220f      	movs	r2, #15
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	43db      	mvns	r3, r3
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	4013      	ands	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a49      	ldr	r2, [pc, #292]	; (8002a74 <HAL_GPIO_Init+0x2f0>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d019      	beq.n	8002986 <HAL_GPIO_Init+0x202>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a48      	ldr	r2, [pc, #288]	; (8002a78 <HAL_GPIO_Init+0x2f4>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d013      	beq.n	8002982 <HAL_GPIO_Init+0x1fe>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a47      	ldr	r2, [pc, #284]	; (8002a7c <HAL_GPIO_Init+0x2f8>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d00d      	beq.n	800297e <HAL_GPIO_Init+0x1fa>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a46      	ldr	r2, [pc, #280]	; (8002a80 <HAL_GPIO_Init+0x2fc>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d007      	beq.n	800297a <HAL_GPIO_Init+0x1f6>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a45      	ldr	r2, [pc, #276]	; (8002a84 <HAL_GPIO_Init+0x300>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d101      	bne.n	8002976 <HAL_GPIO_Init+0x1f2>
 8002972:	2304      	movs	r3, #4
 8002974:	e008      	b.n	8002988 <HAL_GPIO_Init+0x204>
 8002976:	2307      	movs	r3, #7
 8002978:	e006      	b.n	8002988 <HAL_GPIO_Init+0x204>
 800297a:	2303      	movs	r3, #3
 800297c:	e004      	b.n	8002988 <HAL_GPIO_Init+0x204>
 800297e:	2302      	movs	r3, #2
 8002980:	e002      	b.n	8002988 <HAL_GPIO_Init+0x204>
 8002982:	2301      	movs	r3, #1
 8002984:	e000      	b.n	8002988 <HAL_GPIO_Init+0x204>
 8002986:	2300      	movs	r3, #0
 8002988:	69fa      	ldr	r2, [r7, #28]
 800298a:	f002 0203 	and.w	r2, r2, #3
 800298e:	0092      	lsls	r2, r2, #2
 8002990:	4093      	lsls	r3, r2
 8002992:	69ba      	ldr	r2, [r7, #24]
 8002994:	4313      	orrs	r3, r2
 8002996:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002998:	4935      	ldr	r1, [pc, #212]	; (8002a70 <HAL_GPIO_Init+0x2ec>)
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	089b      	lsrs	r3, r3, #2
 800299e:	3302      	adds	r3, #2
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029a6:	4b38      	ldr	r3, [pc, #224]	; (8002a88 <HAL_GPIO_Init+0x304>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	43db      	mvns	r3, r3
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	4013      	ands	r3, r2
 80029b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d003      	beq.n	80029ca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029ca:	4a2f      	ldr	r2, [pc, #188]	; (8002a88 <HAL_GPIO_Init+0x304>)
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029d0:	4b2d      	ldr	r3, [pc, #180]	; (8002a88 <HAL_GPIO_Init+0x304>)
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	43db      	mvns	r3, r3
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	4013      	ands	r3, r2
 80029de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d003      	beq.n	80029f4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029f4:	4a24      	ldr	r2, [pc, #144]	; (8002a88 <HAL_GPIO_Init+0x304>)
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029fa:	4b23      	ldr	r3, [pc, #140]	; (8002a88 <HAL_GPIO_Init+0x304>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	43db      	mvns	r3, r3
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	4013      	ands	r3, r2
 8002a08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d003      	beq.n	8002a1e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a1e:	4a1a      	ldr	r2, [pc, #104]	; (8002a88 <HAL_GPIO_Init+0x304>)
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a24:	4b18      	ldr	r3, [pc, #96]	; (8002a88 <HAL_GPIO_Init+0x304>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	43db      	mvns	r3, r3
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	4013      	ands	r3, r2
 8002a32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d003      	beq.n	8002a48 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a48:	4a0f      	ldr	r2, [pc, #60]	; (8002a88 <HAL_GPIO_Init+0x304>)
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	3301      	adds	r3, #1
 8002a52:	61fb      	str	r3, [r7, #28]
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	2b0f      	cmp	r3, #15
 8002a58:	f67f aea2 	bls.w	80027a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a5c:	bf00      	nop
 8002a5e:	bf00      	nop
 8002a60:	3724      	adds	r7, #36	; 0x24
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	40023800 	.word	0x40023800
 8002a70:	40013800 	.word	0x40013800
 8002a74:	40020000 	.word	0x40020000
 8002a78:	40020400 	.word	0x40020400
 8002a7c:	40020800 	.word	0x40020800
 8002a80:	40020c00 	.word	0x40020c00
 8002a84:	40021000 	.word	0x40021000
 8002a88:	40013c00 	.word	0x40013c00

08002a8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	460b      	mov	r3, r1
 8002a96:	807b      	strh	r3, [r7, #2]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a9c:	787b      	ldrb	r3, [r7, #1]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d003      	beq.n	8002aaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002aa2:	887a      	ldrh	r2, [r7, #2]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002aa8:	e003      	b.n	8002ab2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002aaa:	887b      	ldrh	r3, [r7, #2]
 8002aac:	041a      	lsls	r2, r3, #16
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	619a      	str	r2, [r3, #24]
}
 8002ab2:	bf00      	nop
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr

08002abe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	b085      	sub	sp, #20
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ad0:	887a      	ldrh	r2, [r7, #2]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	041a      	lsls	r2, r3, #16
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	43d9      	mvns	r1, r3
 8002adc:	887b      	ldrh	r3, [r7, #2]
 8002ade:	400b      	ands	r3, r1
 8002ae0:	431a      	orrs	r2, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	619a      	str	r2, [r3, #24]
}
 8002ae6:	bf00      	nop
 8002ae8:	3714      	adds	r7, #20
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
	...

08002af4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e267      	b.n	8002fd6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d075      	beq.n	8002bfe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b12:	4b88      	ldr	r3, [pc, #544]	; (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f003 030c 	and.w	r3, r3, #12
 8002b1a:	2b04      	cmp	r3, #4
 8002b1c:	d00c      	beq.n	8002b38 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b1e:	4b85      	ldr	r3, [pc, #532]	; (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b26:	2b08      	cmp	r3, #8
 8002b28:	d112      	bne.n	8002b50 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b2a:	4b82      	ldr	r3, [pc, #520]	; (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b36:	d10b      	bne.n	8002b50 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b38:	4b7e      	ldr	r3, [pc, #504]	; (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d05b      	beq.n	8002bfc <HAL_RCC_OscConfig+0x108>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d157      	bne.n	8002bfc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e242      	b.n	8002fd6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b58:	d106      	bne.n	8002b68 <HAL_RCC_OscConfig+0x74>
 8002b5a:	4b76      	ldr	r3, [pc, #472]	; (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a75      	ldr	r2, [pc, #468]	; (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002b60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b64:	6013      	str	r3, [r2, #0]
 8002b66:	e01d      	b.n	8002ba4 <HAL_RCC_OscConfig+0xb0>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b70:	d10c      	bne.n	8002b8c <HAL_RCC_OscConfig+0x98>
 8002b72:	4b70      	ldr	r3, [pc, #448]	; (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a6f      	ldr	r2, [pc, #444]	; (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002b78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b7c:	6013      	str	r3, [r2, #0]
 8002b7e:	4b6d      	ldr	r3, [pc, #436]	; (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a6c      	ldr	r2, [pc, #432]	; (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002b84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b88:	6013      	str	r3, [r2, #0]
 8002b8a:	e00b      	b.n	8002ba4 <HAL_RCC_OscConfig+0xb0>
 8002b8c:	4b69      	ldr	r3, [pc, #420]	; (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a68      	ldr	r2, [pc, #416]	; (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002b92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b96:	6013      	str	r3, [r2, #0]
 8002b98:	4b66      	ldr	r3, [pc, #408]	; (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a65      	ldr	r2, [pc, #404]	; (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002b9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ba2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d013      	beq.n	8002bd4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bac:	f7ff f916 	bl	8001ddc <HAL_GetTick>
 8002bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bb2:	e008      	b.n	8002bc6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bb4:	f7ff f912 	bl	8001ddc <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b64      	cmp	r3, #100	; 0x64
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e207      	b.n	8002fd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bc6:	4b5b      	ldr	r3, [pc, #364]	; (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d0f0      	beq.n	8002bb4 <HAL_RCC_OscConfig+0xc0>
 8002bd2:	e014      	b.n	8002bfe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd4:	f7ff f902 	bl	8001ddc <HAL_GetTick>
 8002bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bda:	e008      	b.n	8002bee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bdc:	f7ff f8fe 	bl	8001ddc <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b64      	cmp	r3, #100	; 0x64
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e1f3      	b.n	8002fd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bee:	4b51      	ldr	r3, [pc, #324]	; (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1f0      	bne.n	8002bdc <HAL_RCC_OscConfig+0xe8>
 8002bfa:	e000      	b.n	8002bfe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d063      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c0a:	4b4a      	ldr	r3, [pc, #296]	; (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f003 030c 	and.w	r3, r3, #12
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d00b      	beq.n	8002c2e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c16:	4b47      	ldr	r3, [pc, #284]	; (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c1e:	2b08      	cmp	r3, #8
 8002c20:	d11c      	bne.n	8002c5c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c22:	4b44      	ldr	r3, [pc, #272]	; (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d116      	bne.n	8002c5c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c2e:	4b41      	ldr	r3, [pc, #260]	; (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d005      	beq.n	8002c46 <HAL_RCC_OscConfig+0x152>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d001      	beq.n	8002c46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e1c7      	b.n	8002fd6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c46:	4b3b      	ldr	r3, [pc, #236]	; (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	4937      	ldr	r1, [pc, #220]	; (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c5a:	e03a      	b.n	8002cd2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d020      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c64:	4b34      	ldr	r3, [pc, #208]	; (8002d38 <HAL_RCC_OscConfig+0x244>)
 8002c66:	2201      	movs	r2, #1
 8002c68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c6a:	f7ff f8b7 	bl	8001ddc <HAL_GetTick>
 8002c6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c70:	e008      	b.n	8002c84 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c72:	f7ff f8b3 	bl	8001ddc <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d901      	bls.n	8002c84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e1a8      	b.n	8002fd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c84:	4b2b      	ldr	r3, [pc, #172]	; (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0302 	and.w	r3, r3, #2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d0f0      	beq.n	8002c72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c90:	4b28      	ldr	r3, [pc, #160]	; (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	4925      	ldr	r1, [pc, #148]	; (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	600b      	str	r3, [r1, #0]
 8002ca4:	e015      	b.n	8002cd2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ca6:	4b24      	ldr	r3, [pc, #144]	; (8002d38 <HAL_RCC_OscConfig+0x244>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cac:	f7ff f896 	bl	8001ddc <HAL_GetTick>
 8002cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cb2:	e008      	b.n	8002cc6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cb4:	f7ff f892 	bl	8001ddc <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e187      	b.n	8002fd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cc6:	4b1b      	ldr	r3, [pc, #108]	; (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d1f0      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0308 	and.w	r3, r3, #8
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d036      	beq.n	8002d4c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	695b      	ldr	r3, [r3, #20]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d016      	beq.n	8002d14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ce6:	4b15      	ldr	r3, [pc, #84]	; (8002d3c <HAL_RCC_OscConfig+0x248>)
 8002ce8:	2201      	movs	r2, #1
 8002cea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cec:	f7ff f876 	bl	8001ddc <HAL_GetTick>
 8002cf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cf2:	e008      	b.n	8002d06 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cf4:	f7ff f872 	bl	8001ddc <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e167      	b.n	8002fd6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d06:	4b0b      	ldr	r3, [pc, #44]	; (8002d34 <HAL_RCC_OscConfig+0x240>)
 8002d08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d0f0      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x200>
 8002d12:	e01b      	b.n	8002d4c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d14:	4b09      	ldr	r3, [pc, #36]	; (8002d3c <HAL_RCC_OscConfig+0x248>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d1a:	f7ff f85f 	bl	8001ddc <HAL_GetTick>
 8002d1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d20:	e00e      	b.n	8002d40 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d22:	f7ff f85b 	bl	8001ddc <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d907      	bls.n	8002d40 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e150      	b.n	8002fd6 <HAL_RCC_OscConfig+0x4e2>
 8002d34:	40023800 	.word	0x40023800
 8002d38:	42470000 	.word	0x42470000
 8002d3c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d40:	4b88      	ldr	r3, [pc, #544]	; (8002f64 <HAL_RCC_OscConfig+0x470>)
 8002d42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1ea      	bne.n	8002d22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0304 	and.w	r3, r3, #4
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f000 8097 	beq.w	8002e88 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d5e:	4b81      	ldr	r3, [pc, #516]	; (8002f64 <HAL_RCC_OscConfig+0x470>)
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d10f      	bne.n	8002d8a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	60bb      	str	r3, [r7, #8]
 8002d6e:	4b7d      	ldr	r3, [pc, #500]	; (8002f64 <HAL_RCC_OscConfig+0x470>)
 8002d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d72:	4a7c      	ldr	r2, [pc, #496]	; (8002f64 <HAL_RCC_OscConfig+0x470>)
 8002d74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d78:	6413      	str	r3, [r2, #64]	; 0x40
 8002d7a:	4b7a      	ldr	r3, [pc, #488]	; (8002f64 <HAL_RCC_OscConfig+0x470>)
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d82:	60bb      	str	r3, [r7, #8]
 8002d84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d86:	2301      	movs	r3, #1
 8002d88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d8a:	4b77      	ldr	r3, [pc, #476]	; (8002f68 <HAL_RCC_OscConfig+0x474>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d118      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d96:	4b74      	ldr	r3, [pc, #464]	; (8002f68 <HAL_RCC_OscConfig+0x474>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a73      	ldr	r2, [pc, #460]	; (8002f68 <HAL_RCC_OscConfig+0x474>)
 8002d9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002da0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002da2:	f7ff f81b 	bl	8001ddc <HAL_GetTick>
 8002da6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da8:	e008      	b.n	8002dbc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002daa:	f7ff f817 	bl	8001ddc <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d901      	bls.n	8002dbc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e10c      	b.n	8002fd6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dbc:	4b6a      	ldr	r3, [pc, #424]	; (8002f68 <HAL_RCC_OscConfig+0x474>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d0f0      	beq.n	8002daa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d106      	bne.n	8002dde <HAL_RCC_OscConfig+0x2ea>
 8002dd0:	4b64      	ldr	r3, [pc, #400]	; (8002f64 <HAL_RCC_OscConfig+0x470>)
 8002dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd4:	4a63      	ldr	r2, [pc, #396]	; (8002f64 <HAL_RCC_OscConfig+0x470>)
 8002dd6:	f043 0301 	orr.w	r3, r3, #1
 8002dda:	6713      	str	r3, [r2, #112]	; 0x70
 8002ddc:	e01c      	b.n	8002e18 <HAL_RCC_OscConfig+0x324>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	2b05      	cmp	r3, #5
 8002de4:	d10c      	bne.n	8002e00 <HAL_RCC_OscConfig+0x30c>
 8002de6:	4b5f      	ldr	r3, [pc, #380]	; (8002f64 <HAL_RCC_OscConfig+0x470>)
 8002de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dea:	4a5e      	ldr	r2, [pc, #376]	; (8002f64 <HAL_RCC_OscConfig+0x470>)
 8002dec:	f043 0304 	orr.w	r3, r3, #4
 8002df0:	6713      	str	r3, [r2, #112]	; 0x70
 8002df2:	4b5c      	ldr	r3, [pc, #368]	; (8002f64 <HAL_RCC_OscConfig+0x470>)
 8002df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df6:	4a5b      	ldr	r2, [pc, #364]	; (8002f64 <HAL_RCC_OscConfig+0x470>)
 8002df8:	f043 0301 	orr.w	r3, r3, #1
 8002dfc:	6713      	str	r3, [r2, #112]	; 0x70
 8002dfe:	e00b      	b.n	8002e18 <HAL_RCC_OscConfig+0x324>
 8002e00:	4b58      	ldr	r3, [pc, #352]	; (8002f64 <HAL_RCC_OscConfig+0x470>)
 8002e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e04:	4a57      	ldr	r2, [pc, #348]	; (8002f64 <HAL_RCC_OscConfig+0x470>)
 8002e06:	f023 0301 	bic.w	r3, r3, #1
 8002e0a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e0c:	4b55      	ldr	r3, [pc, #340]	; (8002f64 <HAL_RCC_OscConfig+0x470>)
 8002e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e10:	4a54      	ldr	r2, [pc, #336]	; (8002f64 <HAL_RCC_OscConfig+0x470>)
 8002e12:	f023 0304 	bic.w	r3, r3, #4
 8002e16:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d015      	beq.n	8002e4c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e20:	f7fe ffdc 	bl	8001ddc <HAL_GetTick>
 8002e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e26:	e00a      	b.n	8002e3e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e28:	f7fe ffd8 	bl	8001ddc <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e0cb      	b.n	8002fd6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e3e:	4b49      	ldr	r3, [pc, #292]	; (8002f64 <HAL_RCC_OscConfig+0x470>)
 8002e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d0ee      	beq.n	8002e28 <HAL_RCC_OscConfig+0x334>
 8002e4a:	e014      	b.n	8002e76 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e4c:	f7fe ffc6 	bl	8001ddc <HAL_GetTick>
 8002e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e52:	e00a      	b.n	8002e6a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e54:	f7fe ffc2 	bl	8001ddc <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e0b5      	b.n	8002fd6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e6a:	4b3e      	ldr	r3, [pc, #248]	; (8002f64 <HAL_RCC_OscConfig+0x470>)
 8002e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1ee      	bne.n	8002e54 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e76:	7dfb      	ldrb	r3, [r7, #23]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d105      	bne.n	8002e88 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e7c:	4b39      	ldr	r3, [pc, #228]	; (8002f64 <HAL_RCC_OscConfig+0x470>)
 8002e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e80:	4a38      	ldr	r2, [pc, #224]	; (8002f64 <HAL_RCC_OscConfig+0x470>)
 8002e82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e86:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	f000 80a1 	beq.w	8002fd4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e92:	4b34      	ldr	r3, [pc, #208]	; (8002f64 <HAL_RCC_OscConfig+0x470>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f003 030c 	and.w	r3, r3, #12
 8002e9a:	2b08      	cmp	r3, #8
 8002e9c:	d05c      	beq.n	8002f58 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d141      	bne.n	8002f2a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ea6:	4b31      	ldr	r3, [pc, #196]	; (8002f6c <HAL_RCC_OscConfig+0x478>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eac:	f7fe ff96 	bl	8001ddc <HAL_GetTick>
 8002eb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eb2:	e008      	b.n	8002ec6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eb4:	f7fe ff92 	bl	8001ddc <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e087      	b.n	8002fd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ec6:	4b27      	ldr	r3, [pc, #156]	; (8002f64 <HAL_RCC_OscConfig+0x470>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1f0      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	69da      	ldr	r2, [r3, #28]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a1b      	ldr	r3, [r3, #32]
 8002eda:	431a      	orrs	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee0:	019b      	lsls	r3, r3, #6
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee8:	085b      	lsrs	r3, r3, #1
 8002eea:	3b01      	subs	r3, #1
 8002eec:	041b      	lsls	r3, r3, #16
 8002eee:	431a      	orrs	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef4:	061b      	lsls	r3, r3, #24
 8002ef6:	491b      	ldr	r1, [pc, #108]	; (8002f64 <HAL_RCC_OscConfig+0x470>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002efc:	4b1b      	ldr	r3, [pc, #108]	; (8002f6c <HAL_RCC_OscConfig+0x478>)
 8002efe:	2201      	movs	r2, #1
 8002f00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f02:	f7fe ff6b 	bl	8001ddc <HAL_GetTick>
 8002f06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f08:	e008      	b.n	8002f1c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f0a:	f7fe ff67 	bl	8001ddc <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d901      	bls.n	8002f1c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e05c      	b.n	8002fd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f1c:	4b11      	ldr	r3, [pc, #68]	; (8002f64 <HAL_RCC_OscConfig+0x470>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d0f0      	beq.n	8002f0a <HAL_RCC_OscConfig+0x416>
 8002f28:	e054      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f2a:	4b10      	ldr	r3, [pc, #64]	; (8002f6c <HAL_RCC_OscConfig+0x478>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f30:	f7fe ff54 	bl	8001ddc <HAL_GetTick>
 8002f34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f36:	e008      	b.n	8002f4a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f38:	f7fe ff50 	bl	8001ddc <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e045      	b.n	8002fd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f4a:	4b06      	ldr	r3, [pc, #24]	; (8002f64 <HAL_RCC_OscConfig+0x470>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1f0      	bne.n	8002f38 <HAL_RCC_OscConfig+0x444>
 8002f56:	e03d      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d107      	bne.n	8002f70 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e038      	b.n	8002fd6 <HAL_RCC_OscConfig+0x4e2>
 8002f64:	40023800 	.word	0x40023800
 8002f68:	40007000 	.word	0x40007000
 8002f6c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f70:	4b1b      	ldr	r3, [pc, #108]	; (8002fe0 <HAL_RCC_OscConfig+0x4ec>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d028      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d121      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d11a      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002fa6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d111      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb6:	085b      	lsrs	r3, r3, #1
 8002fb8:	3b01      	subs	r3, #1
 8002fba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d107      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d001      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e000      	b.n	8002fd6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3718      	adds	r7, #24
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	40023800 	.word	0x40023800

08002fe4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d101      	bne.n	8002ff8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e0cc      	b.n	8003192 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ff8:	4b68      	ldr	r3, [pc, #416]	; (800319c <HAL_RCC_ClockConfig+0x1b8>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0307 	and.w	r3, r3, #7
 8003000:	683a      	ldr	r2, [r7, #0]
 8003002:	429a      	cmp	r2, r3
 8003004:	d90c      	bls.n	8003020 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003006:	4b65      	ldr	r3, [pc, #404]	; (800319c <HAL_RCC_ClockConfig+0x1b8>)
 8003008:	683a      	ldr	r2, [r7, #0]
 800300a:	b2d2      	uxtb	r2, r2
 800300c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800300e:	4b63      	ldr	r3, [pc, #396]	; (800319c <HAL_RCC_ClockConfig+0x1b8>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0307 	and.w	r3, r3, #7
 8003016:	683a      	ldr	r2, [r7, #0]
 8003018:	429a      	cmp	r2, r3
 800301a:	d001      	beq.n	8003020 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e0b8      	b.n	8003192 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0302 	and.w	r3, r3, #2
 8003028:	2b00      	cmp	r3, #0
 800302a:	d020      	beq.n	800306e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0304 	and.w	r3, r3, #4
 8003034:	2b00      	cmp	r3, #0
 8003036:	d005      	beq.n	8003044 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003038:	4b59      	ldr	r3, [pc, #356]	; (80031a0 <HAL_RCC_ClockConfig+0x1bc>)
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	4a58      	ldr	r2, [pc, #352]	; (80031a0 <HAL_RCC_ClockConfig+0x1bc>)
 800303e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003042:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0308 	and.w	r3, r3, #8
 800304c:	2b00      	cmp	r3, #0
 800304e:	d005      	beq.n	800305c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003050:	4b53      	ldr	r3, [pc, #332]	; (80031a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	4a52      	ldr	r2, [pc, #328]	; (80031a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003056:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800305a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800305c:	4b50      	ldr	r3, [pc, #320]	; (80031a0 <HAL_RCC_ClockConfig+0x1bc>)
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	494d      	ldr	r1, [pc, #308]	; (80031a0 <HAL_RCC_ClockConfig+0x1bc>)
 800306a:	4313      	orrs	r3, r2
 800306c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	2b00      	cmp	r3, #0
 8003078:	d044      	beq.n	8003104 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d107      	bne.n	8003092 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003082:	4b47      	ldr	r3, [pc, #284]	; (80031a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d119      	bne.n	80030c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e07f      	b.n	8003192 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	2b02      	cmp	r3, #2
 8003098:	d003      	beq.n	80030a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800309e:	2b03      	cmp	r3, #3
 80030a0:	d107      	bne.n	80030b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030a2:	4b3f      	ldr	r3, [pc, #252]	; (80031a0 <HAL_RCC_ClockConfig+0x1bc>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d109      	bne.n	80030c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e06f      	b.n	8003192 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030b2:	4b3b      	ldr	r3, [pc, #236]	; (80031a0 <HAL_RCC_ClockConfig+0x1bc>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d101      	bne.n	80030c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e067      	b.n	8003192 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030c2:	4b37      	ldr	r3, [pc, #220]	; (80031a0 <HAL_RCC_ClockConfig+0x1bc>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f023 0203 	bic.w	r2, r3, #3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	4934      	ldr	r1, [pc, #208]	; (80031a0 <HAL_RCC_ClockConfig+0x1bc>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030d4:	f7fe fe82 	bl	8001ddc <HAL_GetTick>
 80030d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030da:	e00a      	b.n	80030f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030dc:	f7fe fe7e 	bl	8001ddc <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d901      	bls.n	80030f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e04f      	b.n	8003192 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030f2:	4b2b      	ldr	r3, [pc, #172]	; (80031a0 <HAL_RCC_ClockConfig+0x1bc>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f003 020c 	and.w	r2, r3, #12
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	429a      	cmp	r2, r3
 8003102:	d1eb      	bne.n	80030dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003104:	4b25      	ldr	r3, [pc, #148]	; (800319c <HAL_RCC_ClockConfig+0x1b8>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0307 	and.w	r3, r3, #7
 800310c:	683a      	ldr	r2, [r7, #0]
 800310e:	429a      	cmp	r2, r3
 8003110:	d20c      	bcs.n	800312c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003112:	4b22      	ldr	r3, [pc, #136]	; (800319c <HAL_RCC_ClockConfig+0x1b8>)
 8003114:	683a      	ldr	r2, [r7, #0]
 8003116:	b2d2      	uxtb	r2, r2
 8003118:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800311a:	4b20      	ldr	r3, [pc, #128]	; (800319c <HAL_RCC_ClockConfig+0x1b8>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0307 	and.w	r3, r3, #7
 8003122:	683a      	ldr	r2, [r7, #0]
 8003124:	429a      	cmp	r2, r3
 8003126:	d001      	beq.n	800312c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e032      	b.n	8003192 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0304 	and.w	r3, r3, #4
 8003134:	2b00      	cmp	r3, #0
 8003136:	d008      	beq.n	800314a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003138:	4b19      	ldr	r3, [pc, #100]	; (80031a0 <HAL_RCC_ClockConfig+0x1bc>)
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	4916      	ldr	r1, [pc, #88]	; (80031a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003146:	4313      	orrs	r3, r2
 8003148:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0308 	and.w	r3, r3, #8
 8003152:	2b00      	cmp	r3, #0
 8003154:	d009      	beq.n	800316a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003156:	4b12      	ldr	r3, [pc, #72]	; (80031a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	00db      	lsls	r3, r3, #3
 8003164:	490e      	ldr	r1, [pc, #56]	; (80031a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003166:	4313      	orrs	r3, r2
 8003168:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800316a:	f000 f889 	bl	8003280 <HAL_RCC_GetSysClockFreq>
 800316e:	4602      	mov	r2, r0
 8003170:	4b0b      	ldr	r3, [pc, #44]	; (80031a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	091b      	lsrs	r3, r3, #4
 8003176:	f003 030f 	and.w	r3, r3, #15
 800317a:	490a      	ldr	r1, [pc, #40]	; (80031a4 <HAL_RCC_ClockConfig+0x1c0>)
 800317c:	5ccb      	ldrb	r3, [r1, r3]
 800317e:	fa22 f303 	lsr.w	r3, r2, r3
 8003182:	4a09      	ldr	r2, [pc, #36]	; (80031a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003184:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003186:	4b09      	ldr	r3, [pc, #36]	; (80031ac <HAL_RCC_ClockConfig+0x1c8>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4618      	mov	r0, r3
 800318c:	f7fe fde2 	bl	8001d54 <HAL_InitTick>

  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3710      	adds	r7, #16
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	40023c00 	.word	0x40023c00
 80031a0:	40023800 	.word	0x40023800
 80031a4:	08007ebc 	.word	0x08007ebc
 80031a8:	20000000 	.word	0x20000000
 80031ac:	20000004 	.word	0x20000004

080031b0 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b08c      	sub	sp, #48	; 0x30
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d129      	bne.n	8003216 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 80031c2:	2300      	movs	r3, #0
 80031c4:	61bb      	str	r3, [r7, #24]
 80031c6:	4b2b      	ldr	r3, [pc, #172]	; (8003274 <HAL_RCC_MCOConfig+0xc4>)
 80031c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ca:	4a2a      	ldr	r2, [pc, #168]	; (8003274 <HAL_RCC_MCOConfig+0xc4>)
 80031cc:	f043 0301 	orr.w	r3, r3, #1
 80031d0:	6313      	str	r3, [r2, #48]	; 0x30
 80031d2:	4b28      	ldr	r3, [pc, #160]	; (8003274 <HAL_RCC_MCOConfig+0xc4>)
 80031d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	61bb      	str	r3, [r7, #24]
 80031dc:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80031de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031e4:	2302      	movs	r3, #2
 80031e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031e8:	2303      	movs	r3, #3
 80031ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ec:	2300      	movs	r3, #0
 80031ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80031f0:	2300      	movs	r3, #0
 80031f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80031f4:	f107 031c 	add.w	r3, r7, #28
 80031f8:	4619      	mov	r1, r3
 80031fa:	481f      	ldr	r0, [pc, #124]	; (8003278 <HAL_RCC_MCOConfig+0xc8>)
 80031fc:	f7ff fac2 	bl	8002784 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8003200:	4b1c      	ldr	r3, [pc, #112]	; (8003274 <HAL_RCC_MCOConfig+0xc4>)
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8003208:	68b9      	ldr	r1, [r7, #8]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	430b      	orrs	r3, r1
 800320e:	4919      	ldr	r1, [pc, #100]	; (8003274 <HAL_RCC_MCOConfig+0xc4>)
 8003210:	4313      	orrs	r3, r2
 8003212:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8003214:	e029      	b.n	800326a <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8003216:	2300      	movs	r3, #0
 8003218:	617b      	str	r3, [r7, #20]
 800321a:	4b16      	ldr	r3, [pc, #88]	; (8003274 <HAL_RCC_MCOConfig+0xc4>)
 800321c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321e:	4a15      	ldr	r2, [pc, #84]	; (8003274 <HAL_RCC_MCOConfig+0xc4>)
 8003220:	f043 0304 	orr.w	r3, r3, #4
 8003224:	6313      	str	r3, [r2, #48]	; 0x30
 8003226:	4b13      	ldr	r3, [pc, #76]	; (8003274 <HAL_RCC_MCOConfig+0xc4>)
 8003228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322a:	f003 0304 	and.w	r3, r3, #4
 800322e:	617b      	str	r3, [r7, #20]
 8003230:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8003232:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003236:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003238:	2302      	movs	r3, #2
 800323a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800323c:	2303      	movs	r3, #3
 800323e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003240:	2300      	movs	r3, #0
 8003242:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003244:	2300      	movs	r3, #0
 8003246:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8003248:	f107 031c 	add.w	r3, r7, #28
 800324c:	4619      	mov	r1, r3
 800324e:	480b      	ldr	r0, [pc, #44]	; (800327c <HAL_RCC_MCOConfig+0xcc>)
 8003250:	f7ff fa98 	bl	8002784 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8003254:	4b07      	ldr	r3, [pc, #28]	; (8003274 <HAL_RCC_MCOConfig+0xc4>)
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	00d9      	lsls	r1, r3, #3
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	430b      	orrs	r3, r1
 8003264:	4903      	ldr	r1, [pc, #12]	; (8003274 <HAL_RCC_MCOConfig+0xc4>)
 8003266:	4313      	orrs	r3, r2
 8003268:	608b      	str	r3, [r1, #8]
}
 800326a:	bf00      	nop
 800326c:	3730      	adds	r7, #48	; 0x30
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	40023800 	.word	0x40023800
 8003278:	40020000 	.word	0x40020000
 800327c:	40020800 	.word	0x40020800

08003280 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003280:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003284:	b090      	sub	sp, #64	; 0x40
 8003286:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003288:	2300      	movs	r3, #0
 800328a:	637b      	str	r3, [r7, #52]	; 0x34
 800328c:	2300      	movs	r3, #0
 800328e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003290:	2300      	movs	r3, #0
 8003292:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003294:	2300      	movs	r3, #0
 8003296:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003298:	4b59      	ldr	r3, [pc, #356]	; (8003400 <HAL_RCC_GetSysClockFreq+0x180>)
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f003 030c 	and.w	r3, r3, #12
 80032a0:	2b08      	cmp	r3, #8
 80032a2:	d00d      	beq.n	80032c0 <HAL_RCC_GetSysClockFreq+0x40>
 80032a4:	2b08      	cmp	r3, #8
 80032a6:	f200 80a1 	bhi.w	80033ec <HAL_RCC_GetSysClockFreq+0x16c>
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d002      	beq.n	80032b4 <HAL_RCC_GetSysClockFreq+0x34>
 80032ae:	2b04      	cmp	r3, #4
 80032b0:	d003      	beq.n	80032ba <HAL_RCC_GetSysClockFreq+0x3a>
 80032b2:	e09b      	b.n	80033ec <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032b4:	4b53      	ldr	r3, [pc, #332]	; (8003404 <HAL_RCC_GetSysClockFreq+0x184>)
 80032b6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80032b8:	e09b      	b.n	80033f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032ba:	4b53      	ldr	r3, [pc, #332]	; (8003408 <HAL_RCC_GetSysClockFreq+0x188>)
 80032bc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80032be:	e098      	b.n	80033f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032c0:	4b4f      	ldr	r3, [pc, #316]	; (8003400 <HAL_RCC_GetSysClockFreq+0x180>)
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032c8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032ca:	4b4d      	ldr	r3, [pc, #308]	; (8003400 <HAL_RCC_GetSysClockFreq+0x180>)
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d028      	beq.n	8003328 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032d6:	4b4a      	ldr	r3, [pc, #296]	; (8003400 <HAL_RCC_GetSysClockFreq+0x180>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	099b      	lsrs	r3, r3, #6
 80032dc:	2200      	movs	r2, #0
 80032de:	623b      	str	r3, [r7, #32]
 80032e0:	627a      	str	r2, [r7, #36]	; 0x24
 80032e2:	6a3b      	ldr	r3, [r7, #32]
 80032e4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80032e8:	2100      	movs	r1, #0
 80032ea:	4b47      	ldr	r3, [pc, #284]	; (8003408 <HAL_RCC_GetSysClockFreq+0x188>)
 80032ec:	fb03 f201 	mul.w	r2, r3, r1
 80032f0:	2300      	movs	r3, #0
 80032f2:	fb00 f303 	mul.w	r3, r0, r3
 80032f6:	4413      	add	r3, r2
 80032f8:	4a43      	ldr	r2, [pc, #268]	; (8003408 <HAL_RCC_GetSysClockFreq+0x188>)
 80032fa:	fba0 1202 	umull	r1, r2, r0, r2
 80032fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003300:	460a      	mov	r2, r1
 8003302:	62ba      	str	r2, [r7, #40]	; 0x28
 8003304:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003306:	4413      	add	r3, r2
 8003308:	62fb      	str	r3, [r7, #44]	; 0x2c
 800330a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800330c:	2200      	movs	r2, #0
 800330e:	61bb      	str	r3, [r7, #24]
 8003310:	61fa      	str	r2, [r7, #28]
 8003312:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003316:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800331a:	f7fd fc4d 	bl	8000bb8 <__aeabi_uldivmod>
 800331e:	4602      	mov	r2, r0
 8003320:	460b      	mov	r3, r1
 8003322:	4613      	mov	r3, r2
 8003324:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003326:	e053      	b.n	80033d0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003328:	4b35      	ldr	r3, [pc, #212]	; (8003400 <HAL_RCC_GetSysClockFreq+0x180>)
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	099b      	lsrs	r3, r3, #6
 800332e:	2200      	movs	r2, #0
 8003330:	613b      	str	r3, [r7, #16]
 8003332:	617a      	str	r2, [r7, #20]
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800333a:	f04f 0b00 	mov.w	fp, #0
 800333e:	4652      	mov	r2, sl
 8003340:	465b      	mov	r3, fp
 8003342:	f04f 0000 	mov.w	r0, #0
 8003346:	f04f 0100 	mov.w	r1, #0
 800334a:	0159      	lsls	r1, r3, #5
 800334c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003350:	0150      	lsls	r0, r2, #5
 8003352:	4602      	mov	r2, r0
 8003354:	460b      	mov	r3, r1
 8003356:	ebb2 080a 	subs.w	r8, r2, sl
 800335a:	eb63 090b 	sbc.w	r9, r3, fp
 800335e:	f04f 0200 	mov.w	r2, #0
 8003362:	f04f 0300 	mov.w	r3, #0
 8003366:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800336a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800336e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003372:	ebb2 0408 	subs.w	r4, r2, r8
 8003376:	eb63 0509 	sbc.w	r5, r3, r9
 800337a:	f04f 0200 	mov.w	r2, #0
 800337e:	f04f 0300 	mov.w	r3, #0
 8003382:	00eb      	lsls	r3, r5, #3
 8003384:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003388:	00e2      	lsls	r2, r4, #3
 800338a:	4614      	mov	r4, r2
 800338c:	461d      	mov	r5, r3
 800338e:	eb14 030a 	adds.w	r3, r4, sl
 8003392:	603b      	str	r3, [r7, #0]
 8003394:	eb45 030b 	adc.w	r3, r5, fp
 8003398:	607b      	str	r3, [r7, #4]
 800339a:	f04f 0200 	mov.w	r2, #0
 800339e:	f04f 0300 	mov.w	r3, #0
 80033a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033a6:	4629      	mov	r1, r5
 80033a8:	028b      	lsls	r3, r1, #10
 80033aa:	4621      	mov	r1, r4
 80033ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033b0:	4621      	mov	r1, r4
 80033b2:	028a      	lsls	r2, r1, #10
 80033b4:	4610      	mov	r0, r2
 80033b6:	4619      	mov	r1, r3
 80033b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033ba:	2200      	movs	r2, #0
 80033bc:	60bb      	str	r3, [r7, #8]
 80033be:	60fa      	str	r2, [r7, #12]
 80033c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033c4:	f7fd fbf8 	bl	8000bb8 <__aeabi_uldivmod>
 80033c8:	4602      	mov	r2, r0
 80033ca:	460b      	mov	r3, r1
 80033cc:	4613      	mov	r3, r2
 80033ce:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033d0:	4b0b      	ldr	r3, [pc, #44]	; (8003400 <HAL_RCC_GetSysClockFreq+0x180>)
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	0c1b      	lsrs	r3, r3, #16
 80033d6:	f003 0303 	and.w	r3, r3, #3
 80033da:	3301      	adds	r3, #1
 80033dc:	005b      	lsls	r3, r3, #1
 80033de:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80033e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033e8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80033ea:	e002      	b.n	80033f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033ec:	4b05      	ldr	r3, [pc, #20]	; (8003404 <HAL_RCC_GetSysClockFreq+0x184>)
 80033ee:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80033f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3740      	adds	r7, #64	; 0x40
 80033f8:	46bd      	mov	sp, r7
 80033fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033fe:	bf00      	nop
 8003400:	40023800 	.word	0x40023800
 8003404:	00f42400 	.word	0x00f42400
 8003408:	017d7840 	.word	0x017d7840

0800340c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800340c:	b480      	push	{r7}
 800340e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003410:	4b03      	ldr	r3, [pc, #12]	; (8003420 <HAL_RCC_GetHCLKFreq+0x14>)
 8003412:	681b      	ldr	r3, [r3, #0]
}
 8003414:	4618      	mov	r0, r3
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	20000000 	.word	0x20000000

08003424 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003428:	f7ff fff0 	bl	800340c <HAL_RCC_GetHCLKFreq>
 800342c:	4602      	mov	r2, r0
 800342e:	4b05      	ldr	r3, [pc, #20]	; (8003444 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	0a9b      	lsrs	r3, r3, #10
 8003434:	f003 0307 	and.w	r3, r3, #7
 8003438:	4903      	ldr	r1, [pc, #12]	; (8003448 <HAL_RCC_GetPCLK1Freq+0x24>)
 800343a:	5ccb      	ldrb	r3, [r1, r3]
 800343c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003440:	4618      	mov	r0, r3
 8003442:	bd80      	pop	{r7, pc}
 8003444:	40023800 	.word	0x40023800
 8003448:	08007ecc 	.word	0x08007ecc

0800344c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003450:	f7ff ffdc 	bl	800340c <HAL_RCC_GetHCLKFreq>
 8003454:	4602      	mov	r2, r0
 8003456:	4b05      	ldr	r3, [pc, #20]	; (800346c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	0b5b      	lsrs	r3, r3, #13
 800345c:	f003 0307 	and.w	r3, r3, #7
 8003460:	4903      	ldr	r1, [pc, #12]	; (8003470 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003462:	5ccb      	ldrb	r3, [r1, r3]
 8003464:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003468:	4618      	mov	r0, r3
 800346a:	bd80      	pop	{r7, pc}
 800346c:	40023800 	.word	0x40023800
 8003470:	08007ecc 	.word	0x08007ecc

08003474 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e041      	b.n	800350a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d106      	bne.n	80034a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f7fe f9b4 	bl	8001808 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2202      	movs	r2, #2
 80034a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	3304      	adds	r3, #4
 80034b0:	4619      	mov	r1, r3
 80034b2:	4610      	mov	r0, r2
 80034b4:	f000 ff2a 	bl	800430c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
	...

08003514 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003514:	b480      	push	{r7}
 8003516:	b085      	sub	sp, #20
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003522:	b2db      	uxtb	r3, r3
 8003524:	2b01      	cmp	r3, #1
 8003526:	d001      	beq.n	800352c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e03c      	b.n	80035a6 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2202      	movs	r2, #2
 8003530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a1e      	ldr	r2, [pc, #120]	; (80035b4 <HAL_TIM_Base_Start+0xa0>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d018      	beq.n	8003570 <HAL_TIM_Base_Start+0x5c>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003546:	d013      	beq.n	8003570 <HAL_TIM_Base_Start+0x5c>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a1a      	ldr	r2, [pc, #104]	; (80035b8 <HAL_TIM_Base_Start+0xa4>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d00e      	beq.n	8003570 <HAL_TIM_Base_Start+0x5c>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a19      	ldr	r2, [pc, #100]	; (80035bc <HAL_TIM_Base_Start+0xa8>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d009      	beq.n	8003570 <HAL_TIM_Base_Start+0x5c>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a17      	ldr	r2, [pc, #92]	; (80035c0 <HAL_TIM_Base_Start+0xac>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d004      	beq.n	8003570 <HAL_TIM_Base_Start+0x5c>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a16      	ldr	r2, [pc, #88]	; (80035c4 <HAL_TIM_Base_Start+0xb0>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d111      	bne.n	8003594 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f003 0307 	and.w	r3, r3, #7
 800357a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2b06      	cmp	r3, #6
 8003580:	d010      	beq.n	80035a4 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f042 0201 	orr.w	r2, r2, #1
 8003590:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003592:	e007      	b.n	80035a4 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f042 0201 	orr.w	r2, r2, #1
 80035a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3714      	adds	r7, #20
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	40010000 	.word	0x40010000
 80035b8:	40000400 	.word	0x40000400
 80035bc:	40000800 	.word	0x40000800
 80035c0:	40000c00 	.word	0x40000c00
 80035c4:	40014000 	.word	0x40014000

080035c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b085      	sub	sp, #20
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d001      	beq.n	80035e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e044      	b.n	800366a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2202      	movs	r2, #2
 80035e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68da      	ldr	r2, [r3, #12]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f042 0201 	orr.w	r2, r2, #1
 80035f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a1e      	ldr	r2, [pc, #120]	; (8003678 <HAL_TIM_Base_Start_IT+0xb0>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d018      	beq.n	8003634 <HAL_TIM_Base_Start_IT+0x6c>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800360a:	d013      	beq.n	8003634 <HAL_TIM_Base_Start_IT+0x6c>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a1a      	ldr	r2, [pc, #104]	; (800367c <HAL_TIM_Base_Start_IT+0xb4>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d00e      	beq.n	8003634 <HAL_TIM_Base_Start_IT+0x6c>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a19      	ldr	r2, [pc, #100]	; (8003680 <HAL_TIM_Base_Start_IT+0xb8>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d009      	beq.n	8003634 <HAL_TIM_Base_Start_IT+0x6c>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a17      	ldr	r2, [pc, #92]	; (8003684 <HAL_TIM_Base_Start_IT+0xbc>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d004      	beq.n	8003634 <HAL_TIM_Base_Start_IT+0x6c>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a16      	ldr	r2, [pc, #88]	; (8003688 <HAL_TIM_Base_Start_IT+0xc0>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d111      	bne.n	8003658 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f003 0307 	and.w	r3, r3, #7
 800363e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2b06      	cmp	r3, #6
 8003644:	d010      	beq.n	8003668 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f042 0201 	orr.w	r2, r2, #1
 8003654:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003656:	e007      	b.n	8003668 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f042 0201 	orr.w	r2, r2, #1
 8003666:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3714      	adds	r7, #20
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	40010000 	.word	0x40010000
 800367c:	40000400 	.word	0x40000400
 8003680:	40000800 	.word	0x40000800
 8003684:	40000c00 	.word	0x40000c00
 8003688:	40014000 	.word	0x40014000

0800368c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d101      	bne.n	800369e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e041      	b.n	8003722 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d106      	bne.n	80036b8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f000 f839 	bl	800372a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2202      	movs	r2, #2
 80036bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	3304      	adds	r3, #4
 80036c8:	4619      	mov	r1, r3
 80036ca:	4610      	mov	r0, r2
 80036cc:	f000 fe1e 	bl	800430c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3708      	adds	r7, #8
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800372a:	b480      	push	{r7}
 800372c:	b083      	sub	sp, #12
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003732:	bf00      	nop
 8003734:	370c      	adds	r7, #12
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
	...

08003740 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b086      	sub	sp, #24
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]
 800374c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800374e:	2300      	movs	r3, #0
 8003750:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d104      	bne.n	8003762 <HAL_TIM_IC_Start_DMA+0x22>
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800375e:	b2db      	uxtb	r3, r3
 8003760:	e013      	b.n	800378a <HAL_TIM_IC_Start_DMA+0x4a>
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	2b04      	cmp	r3, #4
 8003766:	d104      	bne.n	8003772 <HAL_TIM_IC_Start_DMA+0x32>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800376e:	b2db      	uxtb	r3, r3
 8003770:	e00b      	b.n	800378a <HAL_TIM_IC_Start_DMA+0x4a>
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	2b08      	cmp	r3, #8
 8003776:	d104      	bne.n	8003782 <HAL_TIM_IC_Start_DMA+0x42>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800377e:	b2db      	uxtb	r3, r3
 8003780:	e003      	b.n	800378a <HAL_TIM_IC_Start_DMA+0x4a>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003788:	b2db      	uxtb	r3, r3
 800378a:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d104      	bne.n	800379c <HAL_TIM_IC_Start_DMA+0x5c>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003798:	b2db      	uxtb	r3, r3
 800379a:	e013      	b.n	80037c4 <HAL_TIM_IC_Start_DMA+0x84>
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	2b04      	cmp	r3, #4
 80037a0:	d104      	bne.n	80037ac <HAL_TIM_IC_Start_DMA+0x6c>
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	e00b      	b.n	80037c4 <HAL_TIM_IC_Start_DMA+0x84>
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	2b08      	cmp	r3, #8
 80037b0:	d104      	bne.n	80037bc <HAL_TIM_IC_Start_DMA+0x7c>
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	e003      	b.n	80037c4 <HAL_TIM_IC_Start_DMA+0x84>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 80037c6:	7dbb      	ldrb	r3, [r7, #22]
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d002      	beq.n	80037d2 <HAL_TIM_IC_Start_DMA+0x92>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 80037cc:	7d7b      	ldrb	r3, [r7, #21]
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d101      	bne.n	80037d6 <HAL_TIM_IC_Start_DMA+0x96>
  {
    return HAL_BUSY;
 80037d2:	2302      	movs	r3, #2
 80037d4:	e13c      	b.n	8003a50 <HAL_TIM_IC_Start_DMA+0x310>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 80037d6:	7dbb      	ldrb	r3, [r7, #22]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d143      	bne.n	8003864 <HAL_TIM_IC_Start_DMA+0x124>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 80037dc:	7d7b      	ldrb	r3, [r7, #21]
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d140      	bne.n	8003864 <HAL_TIM_IC_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d104      	bne.n	80037f2 <HAL_TIM_IC_Start_DMA+0xb2>
 80037e8:	887b      	ldrh	r3, [r7, #2]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d001      	beq.n	80037f2 <HAL_TIM_IC_Start_DMA+0xb2>
    {
      return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e12e      	b.n	8003a50 <HAL_TIM_IC_Start_DMA+0x310>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d104      	bne.n	8003802 <HAL_TIM_IC_Start_DMA+0xc2>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2202      	movs	r2, #2
 80037fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003800:	e013      	b.n	800382a <HAL_TIM_IC_Start_DMA+0xea>
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	2b04      	cmp	r3, #4
 8003806:	d104      	bne.n	8003812 <HAL_TIM_IC_Start_DMA+0xd2>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2202      	movs	r2, #2
 800380c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003810:	e00b      	b.n	800382a <HAL_TIM_IC_Start_DMA+0xea>
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	2b08      	cmp	r3, #8
 8003816:	d104      	bne.n	8003822 <HAL_TIM_IC_Start_DMA+0xe2>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2202      	movs	r2, #2
 800381c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003820:	e003      	b.n	800382a <HAL_TIM_IC_Start_DMA+0xea>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2202      	movs	r2, #2
 8003826:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d104      	bne.n	800383a <HAL_TIM_IC_Start_DMA+0xfa>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2202      	movs	r2, #2
 8003834:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ((pData == NULL) && (Length > 0U))
 8003838:	e016      	b.n	8003868 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	2b04      	cmp	r3, #4
 800383e:	d104      	bne.n	800384a <HAL_TIM_IC_Start_DMA+0x10a>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2202      	movs	r2, #2
 8003844:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ((pData == NULL) && (Length > 0U))
 8003848:	e00e      	b.n	8003868 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	2b08      	cmp	r3, #8
 800384e:	d104      	bne.n	800385a <HAL_TIM_IC_Start_DMA+0x11a>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2202      	movs	r2, #2
 8003854:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 8003858:	e006      	b.n	8003868 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2202      	movs	r2, #2
 800385e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 8003862:	e001      	b.n	8003868 <HAL_TIM_IC_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e0f3      	b.n	8003a50 <HAL_TIM_IC_Start_DMA+0x310>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2201      	movs	r2, #1
 800386e:	68b9      	ldr	r1, [r7, #8]
 8003870:	4618      	mov	r0, r3
 8003872:	f000 ff83 	bl	800477c <TIM_CCxChannelCmd>

  switch (Channel)
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	2b0c      	cmp	r3, #12
 800387a:	f200 80ad 	bhi.w	80039d8 <HAL_TIM_IC_Start_DMA+0x298>
 800387e:	a201      	add	r2, pc, #4	; (adr r2, 8003884 <HAL_TIM_IC_Start_DMA+0x144>)
 8003880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003884:	080038b9 	.word	0x080038b9
 8003888:	080039d9 	.word	0x080039d9
 800388c:	080039d9 	.word	0x080039d9
 8003890:	080039d9 	.word	0x080039d9
 8003894:	08003901 	.word	0x08003901
 8003898:	080039d9 	.word	0x080039d9
 800389c:	080039d9 	.word	0x080039d9
 80038a0:	080039d9 	.word	0x080039d9
 80038a4:	08003949 	.word	0x08003949
 80038a8:	080039d9 	.word	0x080039d9
 80038ac:	080039d9 	.word	0x080039d9
 80038b0:	080039d9 	.word	0x080039d9
 80038b4:	08003991 	.word	0x08003991
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038bc:	4a66      	ldr	r2, [pc, #408]	; (8003a58 <HAL_TIM_IC_Start_DMA+0x318>)
 80038be:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c4:	4a65      	ldr	r2, [pc, #404]	; (8003a5c <HAL_TIM_IC_Start_DMA+0x31c>)
 80038c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038cc:	4a64      	ldr	r2, [pc, #400]	; (8003a60 <HAL_TIM_IC_Start_DMA+0x320>)
 80038ce:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	3334      	adds	r3, #52	; 0x34
 80038da:	4619      	mov	r1, r3
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	887b      	ldrh	r3, [r7, #2]
 80038e0:	f7fe fc6c 	bl	80021bc <HAL_DMA_Start_IT>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <HAL_TIM_IC_Start_DMA+0x1ae>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e0b0      	b.n	8003a50 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68da      	ldr	r2, [r3, #12]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038fc:	60da      	str	r2, [r3, #12]
      break;
 80038fe:	e06e      	b.n	80039de <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003904:	4a54      	ldr	r2, [pc, #336]	; (8003a58 <HAL_TIM_IC_Start_DMA+0x318>)
 8003906:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390c:	4a53      	ldr	r2, [pc, #332]	; (8003a5c <HAL_TIM_IC_Start_DMA+0x31c>)
 800390e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003914:	4a52      	ldr	r2, [pc, #328]	; (8003a60 <HAL_TIM_IC_Start_DMA+0x320>)
 8003916:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	3338      	adds	r3, #56	; 0x38
 8003922:	4619      	mov	r1, r3
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	887b      	ldrh	r3, [r7, #2]
 8003928:	f7fe fc48 	bl	80021bc <HAL_DMA_Start_IT>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d001      	beq.n	8003936 <HAL_TIM_IC_Start_DMA+0x1f6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e08c      	b.n	8003a50 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	68da      	ldr	r2, [r3, #12]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003944:	60da      	str	r2, [r3, #12]
      break;
 8003946:	e04a      	b.n	80039de <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394c:	4a42      	ldr	r2, [pc, #264]	; (8003a58 <HAL_TIM_IC_Start_DMA+0x318>)
 800394e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003954:	4a41      	ldr	r2, [pc, #260]	; (8003a5c <HAL_TIM_IC_Start_DMA+0x31c>)
 8003956:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395c:	4a40      	ldr	r2, [pc, #256]	; (8003a60 <HAL_TIM_IC_Start_DMA+0x320>)
 800395e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	333c      	adds	r3, #60	; 0x3c
 800396a:	4619      	mov	r1, r3
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	887b      	ldrh	r3, [r7, #2]
 8003970:	f7fe fc24 	bl	80021bc <HAL_DMA_Start_IT>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d001      	beq.n	800397e <HAL_TIM_IC_Start_DMA+0x23e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e068      	b.n	8003a50 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68da      	ldr	r2, [r3, #12]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800398c:	60da      	str	r2, [r3, #12]
      break;
 800398e:	e026      	b.n	80039de <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003994:	4a30      	ldr	r2, [pc, #192]	; (8003a58 <HAL_TIM_IC_Start_DMA+0x318>)
 8003996:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399c:	4a2f      	ldr	r2, [pc, #188]	; (8003a5c <HAL_TIM_IC_Start_DMA+0x31c>)
 800399e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a4:	4a2e      	ldr	r2, [pc, #184]	; (8003a60 <HAL_TIM_IC_Start_DMA+0x320>)
 80039a6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	3340      	adds	r3, #64	; 0x40
 80039b2:	4619      	mov	r1, r3
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	887b      	ldrh	r3, [r7, #2]
 80039b8:	f7fe fc00 	bl	80021bc <HAL_DMA_Start_IT>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d001      	beq.n	80039c6 <HAL_TIM_IC_Start_DMA+0x286>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e044      	b.n	8003a50 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68da      	ldr	r2, [r3, #12]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80039d4:	60da      	str	r2, [r3, #12]
      break;
 80039d6:	e002      	b.n	80039de <HAL_TIM_IC_Start_DMA+0x29e>
    }

    default:
      status = HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	75fb      	strb	r3, [r7, #23]
      break;
 80039dc:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a20      	ldr	r2, [pc, #128]	; (8003a64 <HAL_TIM_IC_Start_DMA+0x324>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d018      	beq.n	8003a1a <HAL_TIM_IC_Start_DMA+0x2da>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039f0:	d013      	beq.n	8003a1a <HAL_TIM_IC_Start_DMA+0x2da>
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a1c      	ldr	r2, [pc, #112]	; (8003a68 <HAL_TIM_IC_Start_DMA+0x328>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d00e      	beq.n	8003a1a <HAL_TIM_IC_Start_DMA+0x2da>
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a1a      	ldr	r2, [pc, #104]	; (8003a6c <HAL_TIM_IC_Start_DMA+0x32c>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d009      	beq.n	8003a1a <HAL_TIM_IC_Start_DMA+0x2da>
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a19      	ldr	r2, [pc, #100]	; (8003a70 <HAL_TIM_IC_Start_DMA+0x330>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d004      	beq.n	8003a1a <HAL_TIM_IC_Start_DMA+0x2da>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a17      	ldr	r2, [pc, #92]	; (8003a74 <HAL_TIM_IC_Start_DMA+0x334>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d111      	bne.n	8003a3e <HAL_TIM_IC_Start_DMA+0x2fe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f003 0307 	and.w	r3, r3, #7
 8003a24:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	2b06      	cmp	r3, #6
 8003a2a:	d010      	beq.n	8003a4e <HAL_TIM_IC_Start_DMA+0x30e>
    {
      __HAL_TIM_ENABLE(htim);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f042 0201 	orr.w	r2, r2, #1
 8003a3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a3c:	e007      	b.n	8003a4e <HAL_TIM_IC_Start_DMA+0x30e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f042 0201 	orr.w	r2, r2, #1
 8003a4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003a4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3718      	adds	r7, #24
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	080041dd 	.word	0x080041dd
 8003a5c:	080042a5 	.word	0x080042a5
 8003a60:	0800414b 	.word	0x0800414b
 8003a64:	40010000 	.word	0x40010000
 8003a68:	40000400 	.word	0x40000400
 8003a6c:	40000800 	.word	0x40000800
 8003a70:	40000c00 	.word	0x40000c00
 8003a74:	40014000 	.word	0x40014000

08003a78 <HAL_TIM_IC_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a82:	2300      	movs	r3, #0
 8003a84:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	6839      	ldr	r1, [r7, #0]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f000 fe74 	bl	800477c <TIM_CCxChannelCmd>

  switch (Channel)
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	2b0c      	cmp	r3, #12
 8003a98:	d854      	bhi.n	8003b44 <HAL_TIM_IC_Stop_DMA+0xcc>
 8003a9a:	a201      	add	r2, pc, #4	; (adr r2, 8003aa0 <HAL_TIM_IC_Stop_DMA+0x28>)
 8003a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aa0:	08003ad5 	.word	0x08003ad5
 8003aa4:	08003b45 	.word	0x08003b45
 8003aa8:	08003b45 	.word	0x08003b45
 8003aac:	08003b45 	.word	0x08003b45
 8003ab0:	08003af1 	.word	0x08003af1
 8003ab4:	08003b45 	.word	0x08003b45
 8003ab8:	08003b45 	.word	0x08003b45
 8003abc:	08003b45 	.word	0x08003b45
 8003ac0:	08003b0d 	.word	0x08003b0d
 8003ac4:	08003b45 	.word	0x08003b45
 8003ac8:	08003b45 	.word	0x08003b45
 8003acc:	08003b45 	.word	0x08003b45
 8003ad0:	08003b29 	.word	0x08003b29
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68da      	ldr	r2, [r3, #12]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003ae2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7fe fbbf 	bl	800226c <HAL_DMA_Abort_IT>
      break;
 8003aee:	e02c      	b.n	8003b4a <HAL_TIM_IC_Stop_DMA+0xd2>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68da      	ldr	r2, [r3, #12]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003afe:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7fe fbb1 	bl	800226c <HAL_DMA_Abort_IT>
      break;
 8003b0a:	e01e      	b.n	8003b4a <HAL_TIM_IC_Stop_DMA+0xd2>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68da      	ldr	r2, [r3, #12]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b1a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b20:	4618      	mov	r0, r3
 8003b22:	f7fe fba3 	bl	800226c <HAL_DMA_Abort_IT>
      break;
 8003b26:	e010      	b.n	8003b4a <HAL_TIM_IC_Stop_DMA+0xd2>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68da      	ldr	r2, [r3, #12]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003b36:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7fe fb95 	bl	800226c <HAL_DMA_Abort_IT>
      break;
 8003b42:	e002      	b.n	8003b4a <HAL_TIM_IC_Stop_DMA+0xd2>
    }

    default:
      status = HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	73fb      	strb	r3, [r7, #15]
      break;
 8003b48:	bf00      	nop
  }

  if (status == HAL_OK)
 8003b4a:	7bfb      	ldrb	r3, [r7, #15]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d14f      	bne.n	8003bf0 <HAL_TIM_IC_Stop_DMA+0x178>
  {
    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	6a1a      	ldr	r2, [r3, #32]
 8003b56:	f241 1311 	movw	r3, #4369	; 0x1111
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d10f      	bne.n	8003b80 <HAL_TIM_IC_Stop_DMA+0x108>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	6a1a      	ldr	r2, [r3, #32]
 8003b66:	f240 4344 	movw	r3, #1092	; 0x444
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d107      	bne.n	8003b80 <HAL_TIM_IC_Stop_DMA+0x108>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f022 0201 	bic.w	r2, r2, #1
 8003b7e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d104      	bne.n	8003b90 <HAL_TIM_IC_Stop_DMA+0x118>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b8e:	e013      	b.n	8003bb8 <HAL_TIM_IC_Stop_DMA+0x140>
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	2b04      	cmp	r3, #4
 8003b94:	d104      	bne.n	8003ba0 <HAL_TIM_IC_Stop_DMA+0x128>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b9e:	e00b      	b.n	8003bb8 <HAL_TIM_IC_Stop_DMA+0x140>
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	2b08      	cmp	r3, #8
 8003ba4:	d104      	bne.n	8003bb0 <HAL_TIM_IC_Stop_DMA+0x138>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bae:	e003      	b.n	8003bb8 <HAL_TIM_IC_Stop_DMA+0x140>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d104      	bne.n	8003bc8 <HAL_TIM_IC_Stop_DMA+0x150>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bc6:	e013      	b.n	8003bf0 <HAL_TIM_IC_Stop_DMA+0x178>
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	2b04      	cmp	r3, #4
 8003bcc:	d104      	bne.n	8003bd8 <HAL_TIM_IC_Stop_DMA+0x160>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003bd6:	e00b      	b.n	8003bf0 <HAL_TIM_IC_Stop_DMA+0x178>
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	2b08      	cmp	r3, #8
 8003bdc:	d104      	bne.n	8003be8 <HAL_TIM_IC_Stop_DMA+0x170>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2201      	movs	r2, #1
 8003be2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003be6:	e003      	b.n	8003bf0 <HAL_TIM_IC_Stop_DMA+0x178>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return status;
 8003bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3710      	adds	r7, #16
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop

08003bfc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d122      	bne.n	8003c58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	f003 0302 	and.w	r3, r3, #2
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d11b      	bne.n	8003c58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f06f 0202 	mvn.w	r2, #2
 8003c28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	f003 0303 	and.w	r3, r3, #3
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d003      	beq.n	8003c46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f7fd fda0 	bl	8001784 <HAL_TIM_IC_CaptureCallback>
 8003c44:	e005      	b.n	8003c52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 fa4d 	bl	80040e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f000 fa5e 	bl	800410e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	f003 0304 	and.w	r3, r3, #4
 8003c62:	2b04      	cmp	r3, #4
 8003c64:	d122      	bne.n	8003cac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	f003 0304 	and.w	r3, r3, #4
 8003c70:	2b04      	cmp	r3, #4
 8003c72:	d11b      	bne.n	8003cac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f06f 0204 	mvn.w	r2, #4
 8003c7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2202      	movs	r2, #2
 8003c82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	699b      	ldr	r3, [r3, #24]
 8003c8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d003      	beq.n	8003c9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f7fd fd76 	bl	8001784 <HAL_TIM_IC_CaptureCallback>
 8003c98:	e005      	b.n	8003ca6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 fa23 	bl	80040e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f000 fa34 	bl	800410e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	f003 0308 	and.w	r3, r3, #8
 8003cb6:	2b08      	cmp	r3, #8
 8003cb8:	d122      	bne.n	8003d00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	f003 0308 	and.w	r3, r3, #8
 8003cc4:	2b08      	cmp	r3, #8
 8003cc6:	d11b      	bne.n	8003d00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f06f 0208 	mvn.w	r2, #8
 8003cd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2204      	movs	r2, #4
 8003cd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	69db      	ldr	r3, [r3, #28]
 8003cde:	f003 0303 	and.w	r3, r3, #3
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d003      	beq.n	8003cee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f7fd fd4c 	bl	8001784 <HAL_TIM_IC_CaptureCallback>
 8003cec:	e005      	b.n	8003cfa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 f9f9 	bl	80040e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 fa0a 	bl	800410e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	f003 0310 	and.w	r3, r3, #16
 8003d0a:	2b10      	cmp	r3, #16
 8003d0c:	d122      	bne.n	8003d54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	f003 0310 	and.w	r3, r3, #16
 8003d18:	2b10      	cmp	r3, #16
 8003d1a:	d11b      	bne.n	8003d54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f06f 0210 	mvn.w	r2, #16
 8003d24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2208      	movs	r2, #8
 8003d2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	69db      	ldr	r3, [r3, #28]
 8003d32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d003      	beq.n	8003d42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f7fd fd22 	bl	8001784 <HAL_TIM_IC_CaptureCallback>
 8003d40:	e005      	b.n	8003d4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f000 f9cf 	bl	80040e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f000 f9e0 	bl	800410e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	f003 0301 	and.w	r3, r3, #1
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d10e      	bne.n	8003d80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	f003 0301 	and.w	r3, r3, #1
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d107      	bne.n	8003d80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f06f 0201 	mvn.w	r2, #1
 8003d78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f000 f9a9 	bl	80040d2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d8a:	2b80      	cmp	r3, #128	; 0x80
 8003d8c:	d10e      	bne.n	8003dac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d98:	2b80      	cmp	r3, #128	; 0x80
 8003d9a:	d107      	bne.n	8003dac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003da4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 fd86 	bl	80048b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db6:	2b40      	cmp	r3, #64	; 0x40
 8003db8:	d10e      	bne.n	8003dd8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc4:	2b40      	cmp	r3, #64	; 0x40
 8003dc6:	d107      	bne.n	8003dd8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003dd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 f9a5 	bl	8004122 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	f003 0320 	and.w	r3, r3, #32
 8003de2:	2b20      	cmp	r3, #32
 8003de4:	d10e      	bne.n	8003e04 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	f003 0320 	and.w	r3, r3, #32
 8003df0:	2b20      	cmp	r3, #32
 8003df2:	d107      	bne.n	8003e04 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f06f 0220 	mvn.w	r2, #32
 8003dfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 fd50 	bl	80048a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e04:	bf00      	nop
 8003e06:	3708      	adds	r7, #8
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b086      	sub	sp, #24
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d101      	bne.n	8003e2a <HAL_TIM_IC_ConfigChannel+0x1e>
 8003e26:	2302      	movs	r3, #2
 8003e28:	e088      	b.n	8003f3c <HAL_TIM_IC_ConfigChannel+0x130>
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d11b      	bne.n	8003e70 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6818      	ldr	r0, [r3, #0]
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	6819      	ldr	r1, [r3, #0]
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	685a      	ldr	r2, [r3, #4]
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	f000 fae0 	bl	800440c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	699a      	ldr	r2, [r3, #24]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f022 020c 	bic.w	r2, r2, #12
 8003e5a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	6999      	ldr	r1, [r3, #24]
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	689a      	ldr	r2, [r3, #8]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	430a      	orrs	r2, r1
 8003e6c:	619a      	str	r2, [r3, #24]
 8003e6e:	e060      	b.n	8003f32 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2b04      	cmp	r3, #4
 8003e74:	d11c      	bne.n	8003eb0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6818      	ldr	r0, [r3, #0]
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	6819      	ldr	r1, [r3, #0]
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	685a      	ldr	r2, [r3, #4]
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	f000 fb58 	bl	800453a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	699a      	ldr	r2, [r3, #24]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003e98:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	6999      	ldr	r1, [r3, #24]
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	021a      	lsls	r2, r3, #8
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	619a      	str	r2, [r3, #24]
 8003eae:	e040      	b.n	8003f32 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2b08      	cmp	r3, #8
 8003eb4:	d11b      	bne.n	8003eee <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6818      	ldr	r0, [r3, #0]
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	6819      	ldr	r1, [r3, #0]
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	685a      	ldr	r2, [r3, #4]
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	f000 fba5 	bl	8004614 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	69da      	ldr	r2, [r3, #28]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f022 020c 	bic.w	r2, r2, #12
 8003ed8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	69d9      	ldr	r1, [r3, #28]
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	689a      	ldr	r2, [r3, #8]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	430a      	orrs	r2, r1
 8003eea:	61da      	str	r2, [r3, #28]
 8003eec:	e021      	b.n	8003f32 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2b0c      	cmp	r3, #12
 8003ef2:	d11c      	bne.n	8003f2e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6818      	ldr	r0, [r3, #0]
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	6819      	ldr	r1, [r3, #0]
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	685a      	ldr	r2, [r3, #4]
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	f000 fbc2 	bl	800468c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	69da      	ldr	r2, [r3, #28]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003f16:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	69d9      	ldr	r1, [r3, #28]
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	021a      	lsls	r2, r3, #8
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	61da      	str	r2, [r3, #28]
 8003f2c:	e001      	b.n	8003f32 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3718      	adds	r7, #24
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d101      	bne.n	8003f60 <HAL_TIM_ConfigClockSource+0x1c>
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	e0b4      	b.n	80040ca <HAL_TIM_ConfigClockSource+0x186>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2202      	movs	r2, #2
 8003f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68ba      	ldr	r2, [r7, #8]
 8003f8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f98:	d03e      	beq.n	8004018 <HAL_TIM_ConfigClockSource+0xd4>
 8003f9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f9e:	f200 8087 	bhi.w	80040b0 <HAL_TIM_ConfigClockSource+0x16c>
 8003fa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fa6:	f000 8086 	beq.w	80040b6 <HAL_TIM_ConfigClockSource+0x172>
 8003faa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fae:	d87f      	bhi.n	80040b0 <HAL_TIM_ConfigClockSource+0x16c>
 8003fb0:	2b70      	cmp	r3, #112	; 0x70
 8003fb2:	d01a      	beq.n	8003fea <HAL_TIM_ConfigClockSource+0xa6>
 8003fb4:	2b70      	cmp	r3, #112	; 0x70
 8003fb6:	d87b      	bhi.n	80040b0 <HAL_TIM_ConfigClockSource+0x16c>
 8003fb8:	2b60      	cmp	r3, #96	; 0x60
 8003fba:	d050      	beq.n	800405e <HAL_TIM_ConfigClockSource+0x11a>
 8003fbc:	2b60      	cmp	r3, #96	; 0x60
 8003fbe:	d877      	bhi.n	80040b0 <HAL_TIM_ConfigClockSource+0x16c>
 8003fc0:	2b50      	cmp	r3, #80	; 0x50
 8003fc2:	d03c      	beq.n	800403e <HAL_TIM_ConfigClockSource+0xfa>
 8003fc4:	2b50      	cmp	r3, #80	; 0x50
 8003fc6:	d873      	bhi.n	80040b0 <HAL_TIM_ConfigClockSource+0x16c>
 8003fc8:	2b40      	cmp	r3, #64	; 0x40
 8003fca:	d058      	beq.n	800407e <HAL_TIM_ConfigClockSource+0x13a>
 8003fcc:	2b40      	cmp	r3, #64	; 0x40
 8003fce:	d86f      	bhi.n	80040b0 <HAL_TIM_ConfigClockSource+0x16c>
 8003fd0:	2b30      	cmp	r3, #48	; 0x30
 8003fd2:	d064      	beq.n	800409e <HAL_TIM_ConfigClockSource+0x15a>
 8003fd4:	2b30      	cmp	r3, #48	; 0x30
 8003fd6:	d86b      	bhi.n	80040b0 <HAL_TIM_ConfigClockSource+0x16c>
 8003fd8:	2b20      	cmp	r3, #32
 8003fda:	d060      	beq.n	800409e <HAL_TIM_ConfigClockSource+0x15a>
 8003fdc:	2b20      	cmp	r3, #32
 8003fde:	d867      	bhi.n	80040b0 <HAL_TIM_ConfigClockSource+0x16c>
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d05c      	beq.n	800409e <HAL_TIM_ConfigClockSource+0x15a>
 8003fe4:	2b10      	cmp	r3, #16
 8003fe6:	d05a      	beq.n	800409e <HAL_TIM_ConfigClockSource+0x15a>
 8003fe8:	e062      	b.n	80040b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6818      	ldr	r0, [r3, #0]
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	6899      	ldr	r1, [r3, #8]
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	685a      	ldr	r2, [r3, #4]
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	f000 fb9f 	bl	800473c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800400c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68ba      	ldr	r2, [r7, #8]
 8004014:	609a      	str	r2, [r3, #8]
      break;
 8004016:	e04f      	b.n	80040b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6818      	ldr	r0, [r3, #0]
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	6899      	ldr	r1, [r3, #8]
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	685a      	ldr	r2, [r3, #4]
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	f000 fb88 	bl	800473c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	689a      	ldr	r2, [r3, #8]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800403a:	609a      	str	r2, [r3, #8]
      break;
 800403c:	e03c      	b.n	80040b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6818      	ldr	r0, [r3, #0]
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	6859      	ldr	r1, [r3, #4]
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	461a      	mov	r2, r3
 800404c:	f000 fa46 	bl	80044dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2150      	movs	r1, #80	; 0x50
 8004056:	4618      	mov	r0, r3
 8004058:	f000 fb55 	bl	8004706 <TIM_ITRx_SetConfig>
      break;
 800405c:	e02c      	b.n	80040b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6818      	ldr	r0, [r3, #0]
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	6859      	ldr	r1, [r3, #4]
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	461a      	mov	r2, r3
 800406c:	f000 faa2 	bl	80045b4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2160      	movs	r1, #96	; 0x60
 8004076:	4618      	mov	r0, r3
 8004078:	f000 fb45 	bl	8004706 <TIM_ITRx_SetConfig>
      break;
 800407c:	e01c      	b.n	80040b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6818      	ldr	r0, [r3, #0]
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	6859      	ldr	r1, [r3, #4]
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	461a      	mov	r2, r3
 800408c:	f000 fa26 	bl	80044dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2140      	movs	r1, #64	; 0x40
 8004096:	4618      	mov	r0, r3
 8004098:	f000 fb35 	bl	8004706 <TIM_ITRx_SetConfig>
      break;
 800409c:	e00c      	b.n	80040b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4619      	mov	r1, r3
 80040a8:	4610      	mov	r0, r2
 80040aa:	f000 fb2c 	bl	8004706 <TIM_ITRx_SetConfig>
      break;
 80040ae:	e003      	b.n	80040b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	73fb      	strb	r3, [r7, #15]
      break;
 80040b4:	e000      	b.n	80040b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80040b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80040c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3710      	adds	r7, #16
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}

080040d2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040d2:	b480      	push	{r7}
 80040d4:	b083      	sub	sp, #12
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80040da:	bf00      	nop
 80040dc:	370c      	adds	r7, #12
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr

080040e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040e6:	b480      	push	{r7}
 80040e8:	b083      	sub	sp, #12
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040ee:	bf00      	nop
 80040f0:	370c      	adds	r7, #12
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr

080040fa <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80040fa:	b480      	push	{r7}
 80040fc:	b083      	sub	sp, #12
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8004102:	bf00      	nop
 8004104:	370c      	adds	r7, #12
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr

0800410e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800410e:	b480      	push	{r7}
 8004110:	b083      	sub	sp, #12
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004116:	bf00      	nop
 8004118:	370c      	adds	r7, #12
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr

08004122 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004122:	b480      	push	{r7}
 8004124:	b083      	sub	sp, #12
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800412a:	bf00      	nop
 800412c:	370c      	adds	r7, #12
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr

08004136 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004136:	b480      	push	{r7}
 8004138:	b083      	sub	sp, #12
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800413e:	bf00      	nop
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr

0800414a <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800414a:	b580      	push	{r7, lr}
 800414c:	b084      	sub	sp, #16
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004156:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	429a      	cmp	r2, r3
 8004160:	d107      	bne.n	8004172 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2201      	movs	r2, #1
 8004166:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004170:	e02a      	b.n	80041c8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	429a      	cmp	r2, r3
 800417a:	d107      	bne.n	800418c <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2202      	movs	r2, #2
 8004180:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2201      	movs	r2, #1
 8004186:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800418a:	e01d      	b.n	80041c8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	429a      	cmp	r2, r3
 8004194:	d107      	bne.n	80041a6 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2204      	movs	r2, #4
 800419a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041a4:	e010      	b.n	80041c8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d107      	bne.n	80041c0 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2208      	movs	r2, #8
 80041b4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2201      	movs	r2, #1
 80041ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80041be:	e003      	b.n	80041c8 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80041c8:	68f8      	ldr	r0, [r7, #12]
 80041ca:	f7ff ffb4 	bl	8004136 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2200      	movs	r2, #0
 80041d2:	771a      	strb	r2, [r3, #28]
}
 80041d4:	bf00      	nop
 80041d6:	3710      	adds	r7, #16
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d10f      	bne.n	8004214 <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2201      	movs	r2, #1
 80041f8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	69db      	ldr	r3, [r3, #28]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d146      	bne.n	8004290 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2201      	movs	r2, #1
 8004206:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2201      	movs	r2, #1
 800420e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004212:	e03d      	b.n	8004290 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	429a      	cmp	r2, r3
 800421c:	d10f      	bne.n	800423e <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2202      	movs	r2, #2
 8004222:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	69db      	ldr	r3, [r3, #28]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d131      	bne.n	8004290 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800423c:	e028      	b.n	8004290 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	429a      	cmp	r2, r3
 8004246:	d10f      	bne.n	8004268 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2204      	movs	r2, #4
 800424c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	69db      	ldr	r3, [r3, #28]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d11c      	bne.n	8004290 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2201      	movs	r2, #1
 800425a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2201      	movs	r2, #1
 8004262:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004266:	e013      	b.n	8004290 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	429a      	cmp	r2, r3
 8004270:	d10e      	bne.n	8004290 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2208      	movs	r2, #8
 8004276:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	69db      	ldr	r3, [r3, #28]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d107      	bne.n	8004290 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8004290:	68f8      	ldr	r0, [r7, #12]
 8004292:	f7fd fa77 	bl	8001784 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2200      	movs	r2, #0
 800429a:	771a      	strb	r2, [r3, #28]
}
 800429c:	bf00      	nop
 800429e:	3710      	adds	r7, #16
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d103      	bne.n	80042c4 <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2201      	movs	r2, #1
 80042c0:	771a      	strb	r2, [r3, #28]
 80042c2:	e019      	b.n	80042f8 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d103      	bne.n	80042d6 <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2202      	movs	r2, #2
 80042d2:	771a      	strb	r2, [r3, #28]
 80042d4:	e010      	b.n	80042f8 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	429a      	cmp	r2, r3
 80042de:	d103      	bne.n	80042e8 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2204      	movs	r2, #4
 80042e4:	771a      	strb	r2, [r3, #28]
 80042e6:	e007      	b.n	80042f8 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d102      	bne.n	80042f8 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2208      	movs	r2, #8
 80042f6:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 80042f8:	68f8      	ldr	r0, [r7, #12]
 80042fa:	f7ff fefe 	bl	80040fa <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2200      	movs	r2, #0
 8004302:	771a      	strb	r2, [r3, #28]
}
 8004304:	bf00      	nop
 8004306:	3710      	adds	r7, #16
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800430c:	b480      	push	{r7}
 800430e:	b085      	sub	sp, #20
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	4a34      	ldr	r2, [pc, #208]	; (80043f0 <TIM_Base_SetConfig+0xe4>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d00f      	beq.n	8004344 <TIM_Base_SetConfig+0x38>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800432a:	d00b      	beq.n	8004344 <TIM_Base_SetConfig+0x38>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	4a31      	ldr	r2, [pc, #196]	; (80043f4 <TIM_Base_SetConfig+0xe8>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d007      	beq.n	8004344 <TIM_Base_SetConfig+0x38>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4a30      	ldr	r2, [pc, #192]	; (80043f8 <TIM_Base_SetConfig+0xec>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d003      	beq.n	8004344 <TIM_Base_SetConfig+0x38>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a2f      	ldr	r2, [pc, #188]	; (80043fc <TIM_Base_SetConfig+0xf0>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d108      	bne.n	8004356 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800434a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	68fa      	ldr	r2, [r7, #12]
 8004352:	4313      	orrs	r3, r2
 8004354:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a25      	ldr	r2, [pc, #148]	; (80043f0 <TIM_Base_SetConfig+0xe4>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d01b      	beq.n	8004396 <TIM_Base_SetConfig+0x8a>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004364:	d017      	beq.n	8004396 <TIM_Base_SetConfig+0x8a>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a22      	ldr	r2, [pc, #136]	; (80043f4 <TIM_Base_SetConfig+0xe8>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d013      	beq.n	8004396 <TIM_Base_SetConfig+0x8a>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a21      	ldr	r2, [pc, #132]	; (80043f8 <TIM_Base_SetConfig+0xec>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d00f      	beq.n	8004396 <TIM_Base_SetConfig+0x8a>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a20      	ldr	r2, [pc, #128]	; (80043fc <TIM_Base_SetConfig+0xf0>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d00b      	beq.n	8004396 <TIM_Base_SetConfig+0x8a>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a1f      	ldr	r2, [pc, #124]	; (8004400 <TIM_Base_SetConfig+0xf4>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d007      	beq.n	8004396 <TIM_Base_SetConfig+0x8a>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a1e      	ldr	r2, [pc, #120]	; (8004404 <TIM_Base_SetConfig+0xf8>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d003      	beq.n	8004396 <TIM_Base_SetConfig+0x8a>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a1d      	ldr	r2, [pc, #116]	; (8004408 <TIM_Base_SetConfig+0xfc>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d108      	bne.n	80043a8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800439c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	68fa      	ldr	r2, [r7, #12]
 80043ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	689a      	ldr	r2, [r3, #8]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4a08      	ldr	r2, [pc, #32]	; (80043f0 <TIM_Base_SetConfig+0xe4>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d103      	bne.n	80043dc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	691a      	ldr	r2, [r3, #16]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	615a      	str	r2, [r3, #20]
}
 80043e2:	bf00      	nop
 80043e4:	3714      	adds	r7, #20
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	40010000 	.word	0x40010000
 80043f4:	40000400 	.word	0x40000400
 80043f8:	40000800 	.word	0x40000800
 80043fc:	40000c00 	.word	0x40000c00
 8004400:	40014000 	.word	0x40014000
 8004404:	40014400 	.word	0x40014400
 8004408:	40014800 	.word	0x40014800

0800440c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800440c:	b480      	push	{r7}
 800440e:	b087      	sub	sp, #28
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	607a      	str	r2, [r7, #4]
 8004418:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6a1b      	ldr	r3, [r3, #32]
 800441e:	f023 0201 	bic.w	r2, r3, #1
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6a1b      	ldr	r3, [r3, #32]
 8004430:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	4a24      	ldr	r2, [pc, #144]	; (80044c8 <TIM_TI1_SetConfig+0xbc>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d013      	beq.n	8004462 <TIM_TI1_SetConfig+0x56>
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004440:	d00f      	beq.n	8004462 <TIM_TI1_SetConfig+0x56>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	4a21      	ldr	r2, [pc, #132]	; (80044cc <TIM_TI1_SetConfig+0xc0>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d00b      	beq.n	8004462 <TIM_TI1_SetConfig+0x56>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	4a20      	ldr	r2, [pc, #128]	; (80044d0 <TIM_TI1_SetConfig+0xc4>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d007      	beq.n	8004462 <TIM_TI1_SetConfig+0x56>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	4a1f      	ldr	r2, [pc, #124]	; (80044d4 <TIM_TI1_SetConfig+0xc8>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d003      	beq.n	8004462 <TIM_TI1_SetConfig+0x56>
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	4a1e      	ldr	r2, [pc, #120]	; (80044d8 <TIM_TI1_SetConfig+0xcc>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d101      	bne.n	8004466 <TIM_TI1_SetConfig+0x5a>
 8004462:	2301      	movs	r3, #1
 8004464:	e000      	b.n	8004468 <TIM_TI1_SetConfig+0x5c>
 8004466:	2300      	movs	r3, #0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d008      	beq.n	800447e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	f023 0303 	bic.w	r3, r3, #3
 8004472:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004474:	697a      	ldr	r2, [r7, #20]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4313      	orrs	r3, r2
 800447a:	617b      	str	r3, [r7, #20]
 800447c:	e003      	b.n	8004486 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	f043 0301 	orr.w	r3, r3, #1
 8004484:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800448c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	011b      	lsls	r3, r3, #4
 8004492:	b2db      	uxtb	r3, r3
 8004494:	697a      	ldr	r2, [r7, #20]
 8004496:	4313      	orrs	r3, r2
 8004498:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	f023 030a 	bic.w	r3, r3, #10
 80044a0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	f003 030a 	and.w	r3, r3, #10
 80044a8:	693a      	ldr	r2, [r7, #16]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	697a      	ldr	r2, [r7, #20]
 80044b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	693a      	ldr	r2, [r7, #16]
 80044b8:	621a      	str	r2, [r3, #32]
}
 80044ba:	bf00      	nop
 80044bc:	371c      	adds	r7, #28
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop
 80044c8:	40010000 	.word	0x40010000
 80044cc:	40000400 	.word	0x40000400
 80044d0:	40000800 	.word	0x40000800
 80044d4:	40000c00 	.word	0x40000c00
 80044d8:	40014000 	.word	0x40014000

080044dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044dc:	b480      	push	{r7}
 80044de:	b087      	sub	sp, #28
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	60b9      	str	r1, [r7, #8]
 80044e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6a1b      	ldr	r3, [r3, #32]
 80044ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6a1b      	ldr	r3, [r3, #32]
 80044f2:	f023 0201 	bic.w	r2, r3, #1
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	699b      	ldr	r3, [r3, #24]
 80044fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004506:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	011b      	lsls	r3, r3, #4
 800450c:	693a      	ldr	r2, [r7, #16]
 800450e:	4313      	orrs	r3, r2
 8004510:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	f023 030a 	bic.w	r3, r3, #10
 8004518:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800451a:	697a      	ldr	r2, [r7, #20]
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	4313      	orrs	r3, r2
 8004520:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	693a      	ldr	r2, [r7, #16]
 8004526:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	697a      	ldr	r2, [r7, #20]
 800452c:	621a      	str	r2, [r3, #32]
}
 800452e:	bf00      	nop
 8004530:	371c      	adds	r7, #28
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr

0800453a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800453a:	b480      	push	{r7}
 800453c:	b087      	sub	sp, #28
 800453e:	af00      	add	r7, sp, #0
 8004540:	60f8      	str	r0, [r7, #12]
 8004542:	60b9      	str	r1, [r7, #8]
 8004544:	607a      	str	r2, [r7, #4]
 8004546:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6a1b      	ldr	r3, [r3, #32]
 800454c:	f023 0210 	bic.w	r2, r3, #16
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6a1b      	ldr	r3, [r3, #32]
 800455e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004566:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	021b      	lsls	r3, r3, #8
 800456c:	697a      	ldr	r2, [r7, #20]
 800456e:	4313      	orrs	r3, r2
 8004570:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004578:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	031b      	lsls	r3, r3, #12
 800457e:	b29b      	uxth	r3, r3
 8004580:	697a      	ldr	r2, [r7, #20]
 8004582:	4313      	orrs	r3, r2
 8004584:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800458c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	011b      	lsls	r3, r3, #4
 8004592:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004596:	693a      	ldr	r2, [r7, #16]
 8004598:	4313      	orrs	r3, r2
 800459a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	697a      	ldr	r2, [r7, #20]
 80045a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	693a      	ldr	r2, [r7, #16]
 80045a6:	621a      	str	r2, [r3, #32]
}
 80045a8:	bf00      	nop
 80045aa:	371c      	adds	r7, #28
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr

080045b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b087      	sub	sp, #28
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6a1b      	ldr	r3, [r3, #32]
 80045c4:	f023 0210 	bic.w	r2, r3, #16
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	699b      	ldr	r3, [r3, #24]
 80045d0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6a1b      	ldr	r3, [r3, #32]
 80045d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045de:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	031b      	lsls	r3, r3, #12
 80045e4:	697a      	ldr	r2, [r7, #20]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80045f0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	011b      	lsls	r3, r3, #4
 80045f6:	693a      	ldr	r2, [r7, #16]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	697a      	ldr	r2, [r7, #20]
 8004600:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	621a      	str	r2, [r3, #32]
}
 8004608:	bf00      	nop
 800460a:	371c      	adds	r7, #28
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004614:	b480      	push	{r7}
 8004616:	b087      	sub	sp, #28
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	607a      	str	r2, [r7, #4]
 8004620:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	69db      	ldr	r3, [r3, #28]
 8004632:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6a1b      	ldr	r3, [r3, #32]
 8004638:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	f023 0303 	bic.w	r3, r3, #3
 8004640:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004642:	697a      	ldr	r2, [r7, #20]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	4313      	orrs	r3, r2
 8004648:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004650:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	011b      	lsls	r3, r3, #4
 8004656:	b2db      	uxtb	r3, r3
 8004658:	697a      	ldr	r2, [r7, #20]
 800465a:	4313      	orrs	r3, r2
 800465c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004664:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	021b      	lsls	r3, r3, #8
 800466a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800466e:	693a      	ldr	r2, [r7, #16]
 8004670:	4313      	orrs	r3, r2
 8004672:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	697a      	ldr	r2, [r7, #20]
 8004678:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	621a      	str	r2, [r3, #32]
}
 8004680:	bf00      	nop
 8004682:	371c      	adds	r7, #28
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800468c:	b480      	push	{r7}
 800468e:	b087      	sub	sp, #28
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	607a      	str	r2, [r7, #4]
 8004698:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6a1b      	ldr	r3, [r3, #32]
 800469e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	69db      	ldr	r3, [r3, #28]
 80046aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6a1b      	ldr	r3, [r3, #32]
 80046b0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046b8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	021b      	lsls	r3, r3, #8
 80046be:	697a      	ldr	r2, [r7, #20]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80046ca:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	031b      	lsls	r3, r3, #12
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	697a      	ldr	r2, [r7, #20]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80046de:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	031b      	lsls	r3, r3, #12
 80046e4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80046e8:	693a      	ldr	r2, [r7, #16]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	697a      	ldr	r2, [r7, #20]
 80046f2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	693a      	ldr	r2, [r7, #16]
 80046f8:	621a      	str	r2, [r3, #32]
}
 80046fa:	bf00      	nop
 80046fc:	371c      	adds	r7, #28
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr

08004706 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004706:	b480      	push	{r7}
 8004708:	b085      	sub	sp, #20
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
 800470e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800471c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800471e:	683a      	ldr	r2, [r7, #0]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	4313      	orrs	r3, r2
 8004724:	f043 0307 	orr.w	r3, r3, #7
 8004728:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	68fa      	ldr	r2, [r7, #12]
 800472e:	609a      	str	r2, [r3, #8]
}
 8004730:	bf00      	nop
 8004732:	3714      	adds	r7, #20
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800473c:	b480      	push	{r7}
 800473e:	b087      	sub	sp, #28
 8004740:	af00      	add	r7, sp, #0
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	607a      	str	r2, [r7, #4]
 8004748:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004756:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	021a      	lsls	r2, r3, #8
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	431a      	orrs	r2, r3
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	4313      	orrs	r3, r2
 8004764:	697a      	ldr	r2, [r7, #20]
 8004766:	4313      	orrs	r3, r2
 8004768:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	697a      	ldr	r2, [r7, #20]
 800476e:	609a      	str	r2, [r3, #8]
}
 8004770:	bf00      	nop
 8004772:	371c      	adds	r7, #28
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800477c:	b480      	push	{r7}
 800477e:	b087      	sub	sp, #28
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	f003 031f 	and.w	r3, r3, #31
 800478e:	2201      	movs	r2, #1
 8004790:	fa02 f303 	lsl.w	r3, r2, r3
 8004794:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	6a1a      	ldr	r2, [r3, #32]
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	43db      	mvns	r3, r3
 800479e:	401a      	ands	r2, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6a1a      	ldr	r2, [r3, #32]
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	f003 031f 	and.w	r3, r3, #31
 80047ae:	6879      	ldr	r1, [r7, #4]
 80047b0:	fa01 f303 	lsl.w	r3, r1, r3
 80047b4:	431a      	orrs	r2, r3
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	621a      	str	r2, [r3, #32]
}
 80047ba:	bf00      	nop
 80047bc:	371c      	adds	r7, #28
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr
	...

080047c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b085      	sub	sp, #20
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d101      	bne.n	80047e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047dc:	2302      	movs	r3, #2
 80047de:	e050      	b.n	8004882 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2202      	movs	r2, #2
 80047ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004806:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68fa      	ldr	r2, [r7, #12]
 800480e:	4313      	orrs	r3, r2
 8004810:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68fa      	ldr	r2, [r7, #12]
 8004818:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a1c      	ldr	r2, [pc, #112]	; (8004890 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d018      	beq.n	8004856 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800482c:	d013      	beq.n	8004856 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a18      	ldr	r2, [pc, #96]	; (8004894 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d00e      	beq.n	8004856 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a16      	ldr	r2, [pc, #88]	; (8004898 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d009      	beq.n	8004856 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a15      	ldr	r2, [pc, #84]	; (800489c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d004      	beq.n	8004856 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a13      	ldr	r2, [pc, #76]	; (80048a0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d10c      	bne.n	8004870 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800485c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	68ba      	ldr	r2, [r7, #8]
 8004864:	4313      	orrs	r3, r2
 8004866:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	68ba      	ldr	r2, [r7, #8]
 800486e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	3714      	adds	r7, #20
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	40010000 	.word	0x40010000
 8004894:	40000400 	.word	0x40000400
 8004898:	40000800 	.word	0x40000800
 800489c:	40000c00 	.word	0x40000c00
 80048a0:	40014000 	.word	0x40014000

080048a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048ac:	bf00      	nop
 80048ae:	370c      	adds	r7, #12
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048c0:	bf00      	nop
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d101      	bne.n	80048de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e03f      	b.n	800495e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d106      	bne.n	80048f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f7fd f85e 	bl	80019b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2224      	movs	r2, #36	; 0x24
 80048fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	68da      	ldr	r2, [r3, #12]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800490e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 f929 	bl	8004b68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	691a      	ldr	r2, [r3, #16]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004924:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	695a      	ldr	r2, [r3, #20]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004934:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68da      	ldr	r2, [r3, #12]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004944:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2220      	movs	r2, #32
 8004950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2220      	movs	r2, #32
 8004958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3708      	adds	r7, #8
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}

08004966 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004966:	b580      	push	{r7, lr}
 8004968:	b08a      	sub	sp, #40	; 0x28
 800496a:	af02      	add	r7, sp, #8
 800496c:	60f8      	str	r0, [r7, #12]
 800496e:	60b9      	str	r1, [r7, #8]
 8004970:	603b      	str	r3, [r7, #0]
 8004972:	4613      	mov	r3, r2
 8004974:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004976:	2300      	movs	r3, #0
 8004978:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004980:	b2db      	uxtb	r3, r3
 8004982:	2b20      	cmp	r3, #32
 8004984:	d17c      	bne.n	8004a80 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d002      	beq.n	8004992 <HAL_UART_Transmit+0x2c>
 800498c:	88fb      	ldrh	r3, [r7, #6]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d101      	bne.n	8004996 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e075      	b.n	8004a82 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800499c:	2b01      	cmp	r3, #1
 800499e:	d101      	bne.n	80049a4 <HAL_UART_Transmit+0x3e>
 80049a0:	2302      	movs	r3, #2
 80049a2:	e06e      	b.n	8004a82 <HAL_UART_Transmit+0x11c>
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2200      	movs	r2, #0
 80049b0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2221      	movs	r2, #33	; 0x21
 80049b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049ba:	f7fd fa0f 	bl	8001ddc <HAL_GetTick>
 80049be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	88fa      	ldrh	r2, [r7, #6]
 80049c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	88fa      	ldrh	r2, [r7, #6]
 80049ca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049d4:	d108      	bne.n	80049e8 <HAL_UART_Transmit+0x82>
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d104      	bne.n	80049e8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80049de:	2300      	movs	r3, #0
 80049e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	61bb      	str	r3, [r7, #24]
 80049e6:	e003      	b.n	80049f0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049ec:	2300      	movs	r3, #0
 80049ee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80049f8:	e02a      	b.n	8004a50 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	9300      	str	r3, [sp, #0]
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	2200      	movs	r2, #0
 8004a02:	2180      	movs	r1, #128	; 0x80
 8004a04:	68f8      	ldr	r0, [r7, #12]
 8004a06:	f000 f840 	bl	8004a8a <UART_WaitOnFlagUntilTimeout>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d001      	beq.n	8004a14 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e036      	b.n	8004a82 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004a14:	69fb      	ldr	r3, [r7, #28]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d10b      	bne.n	8004a32 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	881b      	ldrh	r3, [r3, #0]
 8004a1e:	461a      	mov	r2, r3
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a28:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	3302      	adds	r3, #2
 8004a2e:	61bb      	str	r3, [r7, #24]
 8004a30:	e007      	b.n	8004a42 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	781a      	ldrb	r2, [r3, #0]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	3301      	adds	r3, #1
 8004a40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	b29a      	uxth	r2, r3
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d1cf      	bne.n	80049fa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	9300      	str	r3, [sp, #0]
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	2200      	movs	r2, #0
 8004a62:	2140      	movs	r1, #64	; 0x40
 8004a64:	68f8      	ldr	r0, [r7, #12]
 8004a66:	f000 f810 	bl	8004a8a <UART_WaitOnFlagUntilTimeout>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d001      	beq.n	8004a74 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004a70:	2303      	movs	r3, #3
 8004a72:	e006      	b.n	8004a82 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2220      	movs	r2, #32
 8004a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	e000      	b.n	8004a82 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004a80:	2302      	movs	r3, #2
  }
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3720      	adds	r7, #32
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}

08004a8a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004a8a:	b580      	push	{r7, lr}
 8004a8c:	b090      	sub	sp, #64	; 0x40
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	60f8      	str	r0, [r7, #12]
 8004a92:	60b9      	str	r1, [r7, #8]
 8004a94:	603b      	str	r3, [r7, #0]
 8004a96:	4613      	mov	r3, r2
 8004a98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a9a:	e050      	b.n	8004b3e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa2:	d04c      	beq.n	8004b3e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004aa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d007      	beq.n	8004aba <UART_WaitOnFlagUntilTimeout+0x30>
 8004aaa:	f7fd f997 	bl	8001ddc <HAL_GetTick>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d241      	bcs.n	8004b3e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	330c      	adds	r3, #12
 8004ac0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac4:	e853 3f00 	ldrex	r3, [r3]
 8004ac8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004acc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	330c      	adds	r3, #12
 8004ad8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ada:	637a      	str	r2, [r7, #52]	; 0x34
 8004adc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ade:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ae0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ae2:	e841 2300 	strex	r3, r2, [r1]
 8004ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1e5      	bne.n	8004aba <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	3314      	adds	r3, #20
 8004af4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	e853 3f00 	ldrex	r3, [r3]
 8004afc:	613b      	str	r3, [r7, #16]
   return(result);
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	f023 0301 	bic.w	r3, r3, #1
 8004b04:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	3314      	adds	r3, #20
 8004b0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b0e:	623a      	str	r2, [r7, #32]
 8004b10:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b12:	69f9      	ldr	r1, [r7, #28]
 8004b14:	6a3a      	ldr	r2, [r7, #32]
 8004b16:	e841 2300 	strex	r3, r2, [r1]
 8004b1a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d1e5      	bne.n	8004aee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2220      	movs	r2, #32
 8004b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2220      	movs	r2, #32
 8004b2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e00f      	b.n	8004b5e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	4013      	ands	r3, r2
 8004b48:	68ba      	ldr	r2, [r7, #8]
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	bf0c      	ite	eq
 8004b4e:	2301      	moveq	r3, #1
 8004b50:	2300      	movne	r3, #0
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	461a      	mov	r2, r3
 8004b56:	79fb      	ldrb	r3, [r7, #7]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d09f      	beq.n	8004a9c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3740      	adds	r7, #64	; 0x40
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
	...

08004b68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b6c:	b0c0      	sub	sp, #256	; 0x100
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b84:	68d9      	ldr	r1, [r3, #12]
 8004b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	ea40 0301 	orr.w	r3, r0, r1
 8004b90:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b96:	689a      	ldr	r2, [r3, #8]
 8004b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	431a      	orrs	r2, r3
 8004ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ba4:	695b      	ldr	r3, [r3, #20]
 8004ba6:	431a      	orrs	r2, r3
 8004ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bac:	69db      	ldr	r3, [r3, #28]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004bc0:	f021 010c 	bic.w	r1, r1, #12
 8004bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004bce:	430b      	orrs	r3, r1
 8004bd0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004be2:	6999      	ldr	r1, [r3, #24]
 8004be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	ea40 0301 	orr.w	r3, r0, r1
 8004bee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	4b8f      	ldr	r3, [pc, #572]	; (8004e34 <UART_SetConfig+0x2cc>)
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d005      	beq.n	8004c08 <UART_SetConfig+0xa0>
 8004bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	4b8d      	ldr	r3, [pc, #564]	; (8004e38 <UART_SetConfig+0x2d0>)
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d104      	bne.n	8004c12 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c08:	f7fe fc20 	bl	800344c <HAL_RCC_GetPCLK2Freq>
 8004c0c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004c10:	e003      	b.n	8004c1a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c12:	f7fe fc07 	bl	8003424 <HAL_RCC_GetPCLK1Freq>
 8004c16:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c1e:	69db      	ldr	r3, [r3, #28]
 8004c20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c24:	f040 810c 	bne.w	8004e40 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004c32:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004c36:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004c3a:	4622      	mov	r2, r4
 8004c3c:	462b      	mov	r3, r5
 8004c3e:	1891      	adds	r1, r2, r2
 8004c40:	65b9      	str	r1, [r7, #88]	; 0x58
 8004c42:	415b      	adcs	r3, r3
 8004c44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c46:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004c4a:	4621      	mov	r1, r4
 8004c4c:	eb12 0801 	adds.w	r8, r2, r1
 8004c50:	4629      	mov	r1, r5
 8004c52:	eb43 0901 	adc.w	r9, r3, r1
 8004c56:	f04f 0200 	mov.w	r2, #0
 8004c5a:	f04f 0300 	mov.w	r3, #0
 8004c5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c6a:	4690      	mov	r8, r2
 8004c6c:	4699      	mov	r9, r3
 8004c6e:	4623      	mov	r3, r4
 8004c70:	eb18 0303 	adds.w	r3, r8, r3
 8004c74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004c78:	462b      	mov	r3, r5
 8004c7a:	eb49 0303 	adc.w	r3, r9, r3
 8004c7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004c8e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004c92:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004c96:	460b      	mov	r3, r1
 8004c98:	18db      	adds	r3, r3, r3
 8004c9a:	653b      	str	r3, [r7, #80]	; 0x50
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	eb42 0303 	adc.w	r3, r2, r3
 8004ca2:	657b      	str	r3, [r7, #84]	; 0x54
 8004ca4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004ca8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004cac:	f7fb ff84 	bl	8000bb8 <__aeabi_uldivmod>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	460b      	mov	r3, r1
 8004cb4:	4b61      	ldr	r3, [pc, #388]	; (8004e3c <UART_SetConfig+0x2d4>)
 8004cb6:	fba3 2302 	umull	r2, r3, r3, r2
 8004cba:	095b      	lsrs	r3, r3, #5
 8004cbc:	011c      	lsls	r4, r3, #4
 8004cbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004cc8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004ccc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004cd0:	4642      	mov	r2, r8
 8004cd2:	464b      	mov	r3, r9
 8004cd4:	1891      	adds	r1, r2, r2
 8004cd6:	64b9      	str	r1, [r7, #72]	; 0x48
 8004cd8:	415b      	adcs	r3, r3
 8004cda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cdc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004ce0:	4641      	mov	r1, r8
 8004ce2:	eb12 0a01 	adds.w	sl, r2, r1
 8004ce6:	4649      	mov	r1, r9
 8004ce8:	eb43 0b01 	adc.w	fp, r3, r1
 8004cec:	f04f 0200 	mov.w	r2, #0
 8004cf0:	f04f 0300 	mov.w	r3, #0
 8004cf4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004cf8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004cfc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d00:	4692      	mov	sl, r2
 8004d02:	469b      	mov	fp, r3
 8004d04:	4643      	mov	r3, r8
 8004d06:	eb1a 0303 	adds.w	r3, sl, r3
 8004d0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d0e:	464b      	mov	r3, r9
 8004d10:	eb4b 0303 	adc.w	r3, fp, r3
 8004d14:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d24:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004d28:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	18db      	adds	r3, r3, r3
 8004d30:	643b      	str	r3, [r7, #64]	; 0x40
 8004d32:	4613      	mov	r3, r2
 8004d34:	eb42 0303 	adc.w	r3, r2, r3
 8004d38:	647b      	str	r3, [r7, #68]	; 0x44
 8004d3a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004d3e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004d42:	f7fb ff39 	bl	8000bb8 <__aeabi_uldivmod>
 8004d46:	4602      	mov	r2, r0
 8004d48:	460b      	mov	r3, r1
 8004d4a:	4611      	mov	r1, r2
 8004d4c:	4b3b      	ldr	r3, [pc, #236]	; (8004e3c <UART_SetConfig+0x2d4>)
 8004d4e:	fba3 2301 	umull	r2, r3, r3, r1
 8004d52:	095b      	lsrs	r3, r3, #5
 8004d54:	2264      	movs	r2, #100	; 0x64
 8004d56:	fb02 f303 	mul.w	r3, r2, r3
 8004d5a:	1acb      	subs	r3, r1, r3
 8004d5c:	00db      	lsls	r3, r3, #3
 8004d5e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004d62:	4b36      	ldr	r3, [pc, #216]	; (8004e3c <UART_SetConfig+0x2d4>)
 8004d64:	fba3 2302 	umull	r2, r3, r3, r2
 8004d68:	095b      	lsrs	r3, r3, #5
 8004d6a:	005b      	lsls	r3, r3, #1
 8004d6c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004d70:	441c      	add	r4, r3
 8004d72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d76:	2200      	movs	r2, #0
 8004d78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d7c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004d80:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004d84:	4642      	mov	r2, r8
 8004d86:	464b      	mov	r3, r9
 8004d88:	1891      	adds	r1, r2, r2
 8004d8a:	63b9      	str	r1, [r7, #56]	; 0x38
 8004d8c:	415b      	adcs	r3, r3
 8004d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004d94:	4641      	mov	r1, r8
 8004d96:	1851      	adds	r1, r2, r1
 8004d98:	6339      	str	r1, [r7, #48]	; 0x30
 8004d9a:	4649      	mov	r1, r9
 8004d9c:	414b      	adcs	r3, r1
 8004d9e:	637b      	str	r3, [r7, #52]	; 0x34
 8004da0:	f04f 0200 	mov.w	r2, #0
 8004da4:	f04f 0300 	mov.w	r3, #0
 8004da8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004dac:	4659      	mov	r1, fp
 8004dae:	00cb      	lsls	r3, r1, #3
 8004db0:	4651      	mov	r1, sl
 8004db2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004db6:	4651      	mov	r1, sl
 8004db8:	00ca      	lsls	r2, r1, #3
 8004dba:	4610      	mov	r0, r2
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	4642      	mov	r2, r8
 8004dc2:	189b      	adds	r3, r3, r2
 8004dc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004dc8:	464b      	mov	r3, r9
 8004dca:	460a      	mov	r2, r1
 8004dcc:	eb42 0303 	adc.w	r3, r2, r3
 8004dd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004de0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004de4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004de8:	460b      	mov	r3, r1
 8004dea:	18db      	adds	r3, r3, r3
 8004dec:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dee:	4613      	mov	r3, r2
 8004df0:	eb42 0303 	adc.w	r3, r2, r3
 8004df4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004df6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004dfa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004dfe:	f7fb fedb 	bl	8000bb8 <__aeabi_uldivmod>
 8004e02:	4602      	mov	r2, r0
 8004e04:	460b      	mov	r3, r1
 8004e06:	4b0d      	ldr	r3, [pc, #52]	; (8004e3c <UART_SetConfig+0x2d4>)
 8004e08:	fba3 1302 	umull	r1, r3, r3, r2
 8004e0c:	095b      	lsrs	r3, r3, #5
 8004e0e:	2164      	movs	r1, #100	; 0x64
 8004e10:	fb01 f303 	mul.w	r3, r1, r3
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	00db      	lsls	r3, r3, #3
 8004e18:	3332      	adds	r3, #50	; 0x32
 8004e1a:	4a08      	ldr	r2, [pc, #32]	; (8004e3c <UART_SetConfig+0x2d4>)
 8004e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e20:	095b      	lsrs	r3, r3, #5
 8004e22:	f003 0207 	and.w	r2, r3, #7
 8004e26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4422      	add	r2, r4
 8004e2e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e30:	e105      	b.n	800503e <UART_SetConfig+0x4d6>
 8004e32:	bf00      	nop
 8004e34:	40011000 	.word	0x40011000
 8004e38:	40011400 	.word	0x40011400
 8004e3c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e44:	2200      	movs	r2, #0
 8004e46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004e4a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004e4e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004e52:	4642      	mov	r2, r8
 8004e54:	464b      	mov	r3, r9
 8004e56:	1891      	adds	r1, r2, r2
 8004e58:	6239      	str	r1, [r7, #32]
 8004e5a:	415b      	adcs	r3, r3
 8004e5c:	627b      	str	r3, [r7, #36]	; 0x24
 8004e5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e62:	4641      	mov	r1, r8
 8004e64:	1854      	adds	r4, r2, r1
 8004e66:	4649      	mov	r1, r9
 8004e68:	eb43 0501 	adc.w	r5, r3, r1
 8004e6c:	f04f 0200 	mov.w	r2, #0
 8004e70:	f04f 0300 	mov.w	r3, #0
 8004e74:	00eb      	lsls	r3, r5, #3
 8004e76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e7a:	00e2      	lsls	r2, r4, #3
 8004e7c:	4614      	mov	r4, r2
 8004e7e:	461d      	mov	r5, r3
 8004e80:	4643      	mov	r3, r8
 8004e82:	18e3      	adds	r3, r4, r3
 8004e84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004e88:	464b      	mov	r3, r9
 8004e8a:	eb45 0303 	adc.w	r3, r5, r3
 8004e8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004e9e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004ea2:	f04f 0200 	mov.w	r2, #0
 8004ea6:	f04f 0300 	mov.w	r3, #0
 8004eaa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004eae:	4629      	mov	r1, r5
 8004eb0:	008b      	lsls	r3, r1, #2
 8004eb2:	4621      	mov	r1, r4
 8004eb4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004eb8:	4621      	mov	r1, r4
 8004eba:	008a      	lsls	r2, r1, #2
 8004ebc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004ec0:	f7fb fe7a 	bl	8000bb8 <__aeabi_uldivmod>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	4b60      	ldr	r3, [pc, #384]	; (800504c <UART_SetConfig+0x4e4>)
 8004eca:	fba3 2302 	umull	r2, r3, r3, r2
 8004ece:	095b      	lsrs	r3, r3, #5
 8004ed0:	011c      	lsls	r4, r3, #4
 8004ed2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004edc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004ee0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004ee4:	4642      	mov	r2, r8
 8004ee6:	464b      	mov	r3, r9
 8004ee8:	1891      	adds	r1, r2, r2
 8004eea:	61b9      	str	r1, [r7, #24]
 8004eec:	415b      	adcs	r3, r3
 8004eee:	61fb      	str	r3, [r7, #28]
 8004ef0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ef4:	4641      	mov	r1, r8
 8004ef6:	1851      	adds	r1, r2, r1
 8004ef8:	6139      	str	r1, [r7, #16]
 8004efa:	4649      	mov	r1, r9
 8004efc:	414b      	adcs	r3, r1
 8004efe:	617b      	str	r3, [r7, #20]
 8004f00:	f04f 0200 	mov.w	r2, #0
 8004f04:	f04f 0300 	mov.w	r3, #0
 8004f08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f0c:	4659      	mov	r1, fp
 8004f0e:	00cb      	lsls	r3, r1, #3
 8004f10:	4651      	mov	r1, sl
 8004f12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f16:	4651      	mov	r1, sl
 8004f18:	00ca      	lsls	r2, r1, #3
 8004f1a:	4610      	mov	r0, r2
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	4603      	mov	r3, r0
 8004f20:	4642      	mov	r2, r8
 8004f22:	189b      	adds	r3, r3, r2
 8004f24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004f28:	464b      	mov	r3, r9
 8004f2a:	460a      	mov	r2, r1
 8004f2c:	eb42 0303 	adc.w	r3, r2, r3
 8004f30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f3e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004f40:	f04f 0200 	mov.w	r2, #0
 8004f44:	f04f 0300 	mov.w	r3, #0
 8004f48:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004f4c:	4649      	mov	r1, r9
 8004f4e:	008b      	lsls	r3, r1, #2
 8004f50:	4641      	mov	r1, r8
 8004f52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f56:	4641      	mov	r1, r8
 8004f58:	008a      	lsls	r2, r1, #2
 8004f5a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004f5e:	f7fb fe2b 	bl	8000bb8 <__aeabi_uldivmod>
 8004f62:	4602      	mov	r2, r0
 8004f64:	460b      	mov	r3, r1
 8004f66:	4b39      	ldr	r3, [pc, #228]	; (800504c <UART_SetConfig+0x4e4>)
 8004f68:	fba3 1302 	umull	r1, r3, r3, r2
 8004f6c:	095b      	lsrs	r3, r3, #5
 8004f6e:	2164      	movs	r1, #100	; 0x64
 8004f70:	fb01 f303 	mul.w	r3, r1, r3
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	011b      	lsls	r3, r3, #4
 8004f78:	3332      	adds	r3, #50	; 0x32
 8004f7a:	4a34      	ldr	r2, [pc, #208]	; (800504c <UART_SetConfig+0x4e4>)
 8004f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f80:	095b      	lsrs	r3, r3, #5
 8004f82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f86:	441c      	add	r4, r3
 8004f88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	673b      	str	r3, [r7, #112]	; 0x70
 8004f90:	677a      	str	r2, [r7, #116]	; 0x74
 8004f92:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004f96:	4642      	mov	r2, r8
 8004f98:	464b      	mov	r3, r9
 8004f9a:	1891      	adds	r1, r2, r2
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	415b      	adcs	r3, r3
 8004fa0:	60fb      	str	r3, [r7, #12]
 8004fa2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004fa6:	4641      	mov	r1, r8
 8004fa8:	1851      	adds	r1, r2, r1
 8004faa:	6039      	str	r1, [r7, #0]
 8004fac:	4649      	mov	r1, r9
 8004fae:	414b      	adcs	r3, r1
 8004fb0:	607b      	str	r3, [r7, #4]
 8004fb2:	f04f 0200 	mov.w	r2, #0
 8004fb6:	f04f 0300 	mov.w	r3, #0
 8004fba:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004fbe:	4659      	mov	r1, fp
 8004fc0:	00cb      	lsls	r3, r1, #3
 8004fc2:	4651      	mov	r1, sl
 8004fc4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fc8:	4651      	mov	r1, sl
 8004fca:	00ca      	lsls	r2, r1, #3
 8004fcc:	4610      	mov	r0, r2
 8004fce:	4619      	mov	r1, r3
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	4642      	mov	r2, r8
 8004fd4:	189b      	adds	r3, r3, r2
 8004fd6:	66bb      	str	r3, [r7, #104]	; 0x68
 8004fd8:	464b      	mov	r3, r9
 8004fda:	460a      	mov	r2, r1
 8004fdc:	eb42 0303 	adc.w	r3, r2, r3
 8004fe0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	663b      	str	r3, [r7, #96]	; 0x60
 8004fec:	667a      	str	r2, [r7, #100]	; 0x64
 8004fee:	f04f 0200 	mov.w	r2, #0
 8004ff2:	f04f 0300 	mov.w	r3, #0
 8004ff6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004ffa:	4649      	mov	r1, r9
 8004ffc:	008b      	lsls	r3, r1, #2
 8004ffe:	4641      	mov	r1, r8
 8005000:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005004:	4641      	mov	r1, r8
 8005006:	008a      	lsls	r2, r1, #2
 8005008:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800500c:	f7fb fdd4 	bl	8000bb8 <__aeabi_uldivmod>
 8005010:	4602      	mov	r2, r0
 8005012:	460b      	mov	r3, r1
 8005014:	4b0d      	ldr	r3, [pc, #52]	; (800504c <UART_SetConfig+0x4e4>)
 8005016:	fba3 1302 	umull	r1, r3, r3, r2
 800501a:	095b      	lsrs	r3, r3, #5
 800501c:	2164      	movs	r1, #100	; 0x64
 800501e:	fb01 f303 	mul.w	r3, r1, r3
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	011b      	lsls	r3, r3, #4
 8005026:	3332      	adds	r3, #50	; 0x32
 8005028:	4a08      	ldr	r2, [pc, #32]	; (800504c <UART_SetConfig+0x4e4>)
 800502a:	fba2 2303 	umull	r2, r3, r2, r3
 800502e:	095b      	lsrs	r3, r3, #5
 8005030:	f003 020f 	and.w	r2, r3, #15
 8005034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4422      	add	r2, r4
 800503c:	609a      	str	r2, [r3, #8]
}
 800503e:	bf00      	nop
 8005040:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005044:	46bd      	mov	sp, r7
 8005046:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800504a:	bf00      	nop
 800504c:	51eb851f 	.word	0x51eb851f

08005050 <__errno>:
 8005050:	4b01      	ldr	r3, [pc, #4]	; (8005058 <__errno+0x8>)
 8005052:	6818      	ldr	r0, [r3, #0]
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	2000000c 	.word	0x2000000c

0800505c <__libc_init_array>:
 800505c:	b570      	push	{r4, r5, r6, lr}
 800505e:	4d0d      	ldr	r5, [pc, #52]	; (8005094 <__libc_init_array+0x38>)
 8005060:	4c0d      	ldr	r4, [pc, #52]	; (8005098 <__libc_init_array+0x3c>)
 8005062:	1b64      	subs	r4, r4, r5
 8005064:	10a4      	asrs	r4, r4, #2
 8005066:	2600      	movs	r6, #0
 8005068:	42a6      	cmp	r6, r4
 800506a:	d109      	bne.n	8005080 <__libc_init_array+0x24>
 800506c:	4d0b      	ldr	r5, [pc, #44]	; (800509c <__libc_init_array+0x40>)
 800506e:	4c0c      	ldr	r4, [pc, #48]	; (80050a0 <__libc_init_array+0x44>)
 8005070:	f002 ff02 	bl	8007e78 <_init>
 8005074:	1b64      	subs	r4, r4, r5
 8005076:	10a4      	asrs	r4, r4, #2
 8005078:	2600      	movs	r6, #0
 800507a:	42a6      	cmp	r6, r4
 800507c:	d105      	bne.n	800508a <__libc_init_array+0x2e>
 800507e:	bd70      	pop	{r4, r5, r6, pc}
 8005080:	f855 3b04 	ldr.w	r3, [r5], #4
 8005084:	4798      	blx	r3
 8005086:	3601      	adds	r6, #1
 8005088:	e7ee      	b.n	8005068 <__libc_init_array+0xc>
 800508a:	f855 3b04 	ldr.w	r3, [r5], #4
 800508e:	4798      	blx	r3
 8005090:	3601      	adds	r6, #1
 8005092:	e7f2      	b.n	800507a <__libc_init_array+0x1e>
 8005094:	080082bc 	.word	0x080082bc
 8005098:	080082bc 	.word	0x080082bc
 800509c:	080082bc 	.word	0x080082bc
 80050a0:	080082c0 	.word	0x080082c0

080050a4 <memset>:
 80050a4:	4402      	add	r2, r0
 80050a6:	4603      	mov	r3, r0
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d100      	bne.n	80050ae <memset+0xa>
 80050ac:	4770      	bx	lr
 80050ae:	f803 1b01 	strb.w	r1, [r3], #1
 80050b2:	e7f9      	b.n	80050a8 <memset+0x4>

080050b4 <__cvt>:
 80050b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050b8:	ec55 4b10 	vmov	r4, r5, d0
 80050bc:	2d00      	cmp	r5, #0
 80050be:	460e      	mov	r6, r1
 80050c0:	4619      	mov	r1, r3
 80050c2:	462b      	mov	r3, r5
 80050c4:	bfbb      	ittet	lt
 80050c6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80050ca:	461d      	movlt	r5, r3
 80050cc:	2300      	movge	r3, #0
 80050ce:	232d      	movlt	r3, #45	; 0x2d
 80050d0:	700b      	strb	r3, [r1, #0]
 80050d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80050d4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80050d8:	4691      	mov	r9, r2
 80050da:	f023 0820 	bic.w	r8, r3, #32
 80050de:	bfbc      	itt	lt
 80050e0:	4622      	movlt	r2, r4
 80050e2:	4614      	movlt	r4, r2
 80050e4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80050e8:	d005      	beq.n	80050f6 <__cvt+0x42>
 80050ea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80050ee:	d100      	bne.n	80050f2 <__cvt+0x3e>
 80050f0:	3601      	adds	r6, #1
 80050f2:	2102      	movs	r1, #2
 80050f4:	e000      	b.n	80050f8 <__cvt+0x44>
 80050f6:	2103      	movs	r1, #3
 80050f8:	ab03      	add	r3, sp, #12
 80050fa:	9301      	str	r3, [sp, #4]
 80050fc:	ab02      	add	r3, sp, #8
 80050fe:	9300      	str	r3, [sp, #0]
 8005100:	ec45 4b10 	vmov	d0, r4, r5
 8005104:	4653      	mov	r3, sl
 8005106:	4632      	mov	r2, r6
 8005108:	f000 fcea 	bl	8005ae0 <_dtoa_r>
 800510c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005110:	4607      	mov	r7, r0
 8005112:	d102      	bne.n	800511a <__cvt+0x66>
 8005114:	f019 0f01 	tst.w	r9, #1
 8005118:	d022      	beq.n	8005160 <__cvt+0xac>
 800511a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800511e:	eb07 0906 	add.w	r9, r7, r6
 8005122:	d110      	bne.n	8005146 <__cvt+0x92>
 8005124:	783b      	ldrb	r3, [r7, #0]
 8005126:	2b30      	cmp	r3, #48	; 0x30
 8005128:	d10a      	bne.n	8005140 <__cvt+0x8c>
 800512a:	2200      	movs	r2, #0
 800512c:	2300      	movs	r3, #0
 800512e:	4620      	mov	r0, r4
 8005130:	4629      	mov	r1, r5
 8005132:	f7fb fcd1 	bl	8000ad8 <__aeabi_dcmpeq>
 8005136:	b918      	cbnz	r0, 8005140 <__cvt+0x8c>
 8005138:	f1c6 0601 	rsb	r6, r6, #1
 800513c:	f8ca 6000 	str.w	r6, [sl]
 8005140:	f8da 3000 	ldr.w	r3, [sl]
 8005144:	4499      	add	r9, r3
 8005146:	2200      	movs	r2, #0
 8005148:	2300      	movs	r3, #0
 800514a:	4620      	mov	r0, r4
 800514c:	4629      	mov	r1, r5
 800514e:	f7fb fcc3 	bl	8000ad8 <__aeabi_dcmpeq>
 8005152:	b108      	cbz	r0, 8005158 <__cvt+0xa4>
 8005154:	f8cd 900c 	str.w	r9, [sp, #12]
 8005158:	2230      	movs	r2, #48	; 0x30
 800515a:	9b03      	ldr	r3, [sp, #12]
 800515c:	454b      	cmp	r3, r9
 800515e:	d307      	bcc.n	8005170 <__cvt+0xbc>
 8005160:	9b03      	ldr	r3, [sp, #12]
 8005162:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005164:	1bdb      	subs	r3, r3, r7
 8005166:	4638      	mov	r0, r7
 8005168:	6013      	str	r3, [r2, #0]
 800516a:	b004      	add	sp, #16
 800516c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005170:	1c59      	adds	r1, r3, #1
 8005172:	9103      	str	r1, [sp, #12]
 8005174:	701a      	strb	r2, [r3, #0]
 8005176:	e7f0      	b.n	800515a <__cvt+0xa6>

08005178 <__exponent>:
 8005178:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800517a:	4603      	mov	r3, r0
 800517c:	2900      	cmp	r1, #0
 800517e:	bfb8      	it	lt
 8005180:	4249      	neglt	r1, r1
 8005182:	f803 2b02 	strb.w	r2, [r3], #2
 8005186:	bfb4      	ite	lt
 8005188:	222d      	movlt	r2, #45	; 0x2d
 800518a:	222b      	movge	r2, #43	; 0x2b
 800518c:	2909      	cmp	r1, #9
 800518e:	7042      	strb	r2, [r0, #1]
 8005190:	dd2a      	ble.n	80051e8 <__exponent+0x70>
 8005192:	f10d 0407 	add.w	r4, sp, #7
 8005196:	46a4      	mov	ip, r4
 8005198:	270a      	movs	r7, #10
 800519a:	46a6      	mov	lr, r4
 800519c:	460a      	mov	r2, r1
 800519e:	fb91 f6f7 	sdiv	r6, r1, r7
 80051a2:	fb07 1516 	mls	r5, r7, r6, r1
 80051a6:	3530      	adds	r5, #48	; 0x30
 80051a8:	2a63      	cmp	r2, #99	; 0x63
 80051aa:	f104 34ff 	add.w	r4, r4, #4294967295
 80051ae:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80051b2:	4631      	mov	r1, r6
 80051b4:	dcf1      	bgt.n	800519a <__exponent+0x22>
 80051b6:	3130      	adds	r1, #48	; 0x30
 80051b8:	f1ae 0502 	sub.w	r5, lr, #2
 80051bc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80051c0:	1c44      	adds	r4, r0, #1
 80051c2:	4629      	mov	r1, r5
 80051c4:	4561      	cmp	r1, ip
 80051c6:	d30a      	bcc.n	80051de <__exponent+0x66>
 80051c8:	f10d 0209 	add.w	r2, sp, #9
 80051cc:	eba2 020e 	sub.w	r2, r2, lr
 80051d0:	4565      	cmp	r5, ip
 80051d2:	bf88      	it	hi
 80051d4:	2200      	movhi	r2, #0
 80051d6:	4413      	add	r3, r2
 80051d8:	1a18      	subs	r0, r3, r0
 80051da:	b003      	add	sp, #12
 80051dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80051e2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80051e6:	e7ed      	b.n	80051c4 <__exponent+0x4c>
 80051e8:	2330      	movs	r3, #48	; 0x30
 80051ea:	3130      	adds	r1, #48	; 0x30
 80051ec:	7083      	strb	r3, [r0, #2]
 80051ee:	70c1      	strb	r1, [r0, #3]
 80051f0:	1d03      	adds	r3, r0, #4
 80051f2:	e7f1      	b.n	80051d8 <__exponent+0x60>

080051f4 <_printf_float>:
 80051f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051f8:	ed2d 8b02 	vpush	{d8}
 80051fc:	b08d      	sub	sp, #52	; 0x34
 80051fe:	460c      	mov	r4, r1
 8005200:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005204:	4616      	mov	r6, r2
 8005206:	461f      	mov	r7, r3
 8005208:	4605      	mov	r5, r0
 800520a:	f001 fa57 	bl	80066bc <_localeconv_r>
 800520e:	f8d0 a000 	ldr.w	sl, [r0]
 8005212:	4650      	mov	r0, sl
 8005214:	f7fa ffe4 	bl	80001e0 <strlen>
 8005218:	2300      	movs	r3, #0
 800521a:	930a      	str	r3, [sp, #40]	; 0x28
 800521c:	6823      	ldr	r3, [r4, #0]
 800521e:	9305      	str	r3, [sp, #20]
 8005220:	f8d8 3000 	ldr.w	r3, [r8]
 8005224:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005228:	3307      	adds	r3, #7
 800522a:	f023 0307 	bic.w	r3, r3, #7
 800522e:	f103 0208 	add.w	r2, r3, #8
 8005232:	f8c8 2000 	str.w	r2, [r8]
 8005236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800523a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800523e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005242:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005246:	9307      	str	r3, [sp, #28]
 8005248:	f8cd 8018 	str.w	r8, [sp, #24]
 800524c:	ee08 0a10 	vmov	s16, r0
 8005250:	4b9f      	ldr	r3, [pc, #636]	; (80054d0 <_printf_float+0x2dc>)
 8005252:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005256:	f04f 32ff 	mov.w	r2, #4294967295
 800525a:	f7fb fc6f 	bl	8000b3c <__aeabi_dcmpun>
 800525e:	bb88      	cbnz	r0, 80052c4 <_printf_float+0xd0>
 8005260:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005264:	4b9a      	ldr	r3, [pc, #616]	; (80054d0 <_printf_float+0x2dc>)
 8005266:	f04f 32ff 	mov.w	r2, #4294967295
 800526a:	f7fb fc49 	bl	8000b00 <__aeabi_dcmple>
 800526e:	bb48      	cbnz	r0, 80052c4 <_printf_float+0xd0>
 8005270:	2200      	movs	r2, #0
 8005272:	2300      	movs	r3, #0
 8005274:	4640      	mov	r0, r8
 8005276:	4649      	mov	r1, r9
 8005278:	f7fb fc38 	bl	8000aec <__aeabi_dcmplt>
 800527c:	b110      	cbz	r0, 8005284 <_printf_float+0x90>
 800527e:	232d      	movs	r3, #45	; 0x2d
 8005280:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005284:	4b93      	ldr	r3, [pc, #588]	; (80054d4 <_printf_float+0x2e0>)
 8005286:	4894      	ldr	r0, [pc, #592]	; (80054d8 <_printf_float+0x2e4>)
 8005288:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800528c:	bf94      	ite	ls
 800528e:	4698      	movls	r8, r3
 8005290:	4680      	movhi	r8, r0
 8005292:	2303      	movs	r3, #3
 8005294:	6123      	str	r3, [r4, #16]
 8005296:	9b05      	ldr	r3, [sp, #20]
 8005298:	f023 0204 	bic.w	r2, r3, #4
 800529c:	6022      	str	r2, [r4, #0]
 800529e:	f04f 0900 	mov.w	r9, #0
 80052a2:	9700      	str	r7, [sp, #0]
 80052a4:	4633      	mov	r3, r6
 80052a6:	aa0b      	add	r2, sp, #44	; 0x2c
 80052a8:	4621      	mov	r1, r4
 80052aa:	4628      	mov	r0, r5
 80052ac:	f000 f9d8 	bl	8005660 <_printf_common>
 80052b0:	3001      	adds	r0, #1
 80052b2:	f040 8090 	bne.w	80053d6 <_printf_float+0x1e2>
 80052b6:	f04f 30ff 	mov.w	r0, #4294967295
 80052ba:	b00d      	add	sp, #52	; 0x34
 80052bc:	ecbd 8b02 	vpop	{d8}
 80052c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052c4:	4642      	mov	r2, r8
 80052c6:	464b      	mov	r3, r9
 80052c8:	4640      	mov	r0, r8
 80052ca:	4649      	mov	r1, r9
 80052cc:	f7fb fc36 	bl	8000b3c <__aeabi_dcmpun>
 80052d0:	b140      	cbz	r0, 80052e4 <_printf_float+0xf0>
 80052d2:	464b      	mov	r3, r9
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	bfbc      	itt	lt
 80052d8:	232d      	movlt	r3, #45	; 0x2d
 80052da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80052de:	487f      	ldr	r0, [pc, #508]	; (80054dc <_printf_float+0x2e8>)
 80052e0:	4b7f      	ldr	r3, [pc, #508]	; (80054e0 <_printf_float+0x2ec>)
 80052e2:	e7d1      	b.n	8005288 <_printf_float+0x94>
 80052e4:	6863      	ldr	r3, [r4, #4]
 80052e6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80052ea:	9206      	str	r2, [sp, #24]
 80052ec:	1c5a      	adds	r2, r3, #1
 80052ee:	d13f      	bne.n	8005370 <_printf_float+0x17c>
 80052f0:	2306      	movs	r3, #6
 80052f2:	6063      	str	r3, [r4, #4]
 80052f4:	9b05      	ldr	r3, [sp, #20]
 80052f6:	6861      	ldr	r1, [r4, #4]
 80052f8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80052fc:	2300      	movs	r3, #0
 80052fe:	9303      	str	r3, [sp, #12]
 8005300:	ab0a      	add	r3, sp, #40	; 0x28
 8005302:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005306:	ab09      	add	r3, sp, #36	; 0x24
 8005308:	ec49 8b10 	vmov	d0, r8, r9
 800530c:	9300      	str	r3, [sp, #0]
 800530e:	6022      	str	r2, [r4, #0]
 8005310:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005314:	4628      	mov	r0, r5
 8005316:	f7ff fecd 	bl	80050b4 <__cvt>
 800531a:	9b06      	ldr	r3, [sp, #24]
 800531c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800531e:	2b47      	cmp	r3, #71	; 0x47
 8005320:	4680      	mov	r8, r0
 8005322:	d108      	bne.n	8005336 <_printf_float+0x142>
 8005324:	1cc8      	adds	r0, r1, #3
 8005326:	db02      	blt.n	800532e <_printf_float+0x13a>
 8005328:	6863      	ldr	r3, [r4, #4]
 800532a:	4299      	cmp	r1, r3
 800532c:	dd41      	ble.n	80053b2 <_printf_float+0x1be>
 800532e:	f1ab 0b02 	sub.w	fp, fp, #2
 8005332:	fa5f fb8b 	uxtb.w	fp, fp
 8005336:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800533a:	d820      	bhi.n	800537e <_printf_float+0x18a>
 800533c:	3901      	subs	r1, #1
 800533e:	465a      	mov	r2, fp
 8005340:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005344:	9109      	str	r1, [sp, #36]	; 0x24
 8005346:	f7ff ff17 	bl	8005178 <__exponent>
 800534a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800534c:	1813      	adds	r3, r2, r0
 800534e:	2a01      	cmp	r2, #1
 8005350:	4681      	mov	r9, r0
 8005352:	6123      	str	r3, [r4, #16]
 8005354:	dc02      	bgt.n	800535c <_printf_float+0x168>
 8005356:	6822      	ldr	r2, [r4, #0]
 8005358:	07d2      	lsls	r2, r2, #31
 800535a:	d501      	bpl.n	8005360 <_printf_float+0x16c>
 800535c:	3301      	adds	r3, #1
 800535e:	6123      	str	r3, [r4, #16]
 8005360:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005364:	2b00      	cmp	r3, #0
 8005366:	d09c      	beq.n	80052a2 <_printf_float+0xae>
 8005368:	232d      	movs	r3, #45	; 0x2d
 800536a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800536e:	e798      	b.n	80052a2 <_printf_float+0xae>
 8005370:	9a06      	ldr	r2, [sp, #24]
 8005372:	2a47      	cmp	r2, #71	; 0x47
 8005374:	d1be      	bne.n	80052f4 <_printf_float+0x100>
 8005376:	2b00      	cmp	r3, #0
 8005378:	d1bc      	bne.n	80052f4 <_printf_float+0x100>
 800537a:	2301      	movs	r3, #1
 800537c:	e7b9      	b.n	80052f2 <_printf_float+0xfe>
 800537e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005382:	d118      	bne.n	80053b6 <_printf_float+0x1c2>
 8005384:	2900      	cmp	r1, #0
 8005386:	6863      	ldr	r3, [r4, #4]
 8005388:	dd0b      	ble.n	80053a2 <_printf_float+0x1ae>
 800538a:	6121      	str	r1, [r4, #16]
 800538c:	b913      	cbnz	r3, 8005394 <_printf_float+0x1a0>
 800538e:	6822      	ldr	r2, [r4, #0]
 8005390:	07d0      	lsls	r0, r2, #31
 8005392:	d502      	bpl.n	800539a <_printf_float+0x1a6>
 8005394:	3301      	adds	r3, #1
 8005396:	440b      	add	r3, r1
 8005398:	6123      	str	r3, [r4, #16]
 800539a:	65a1      	str	r1, [r4, #88]	; 0x58
 800539c:	f04f 0900 	mov.w	r9, #0
 80053a0:	e7de      	b.n	8005360 <_printf_float+0x16c>
 80053a2:	b913      	cbnz	r3, 80053aa <_printf_float+0x1b6>
 80053a4:	6822      	ldr	r2, [r4, #0]
 80053a6:	07d2      	lsls	r2, r2, #31
 80053a8:	d501      	bpl.n	80053ae <_printf_float+0x1ba>
 80053aa:	3302      	adds	r3, #2
 80053ac:	e7f4      	b.n	8005398 <_printf_float+0x1a4>
 80053ae:	2301      	movs	r3, #1
 80053b0:	e7f2      	b.n	8005398 <_printf_float+0x1a4>
 80053b2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80053b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053b8:	4299      	cmp	r1, r3
 80053ba:	db05      	blt.n	80053c8 <_printf_float+0x1d4>
 80053bc:	6823      	ldr	r3, [r4, #0]
 80053be:	6121      	str	r1, [r4, #16]
 80053c0:	07d8      	lsls	r0, r3, #31
 80053c2:	d5ea      	bpl.n	800539a <_printf_float+0x1a6>
 80053c4:	1c4b      	adds	r3, r1, #1
 80053c6:	e7e7      	b.n	8005398 <_printf_float+0x1a4>
 80053c8:	2900      	cmp	r1, #0
 80053ca:	bfd4      	ite	le
 80053cc:	f1c1 0202 	rsble	r2, r1, #2
 80053d0:	2201      	movgt	r2, #1
 80053d2:	4413      	add	r3, r2
 80053d4:	e7e0      	b.n	8005398 <_printf_float+0x1a4>
 80053d6:	6823      	ldr	r3, [r4, #0]
 80053d8:	055a      	lsls	r2, r3, #21
 80053da:	d407      	bmi.n	80053ec <_printf_float+0x1f8>
 80053dc:	6923      	ldr	r3, [r4, #16]
 80053de:	4642      	mov	r2, r8
 80053e0:	4631      	mov	r1, r6
 80053e2:	4628      	mov	r0, r5
 80053e4:	47b8      	blx	r7
 80053e6:	3001      	adds	r0, #1
 80053e8:	d12c      	bne.n	8005444 <_printf_float+0x250>
 80053ea:	e764      	b.n	80052b6 <_printf_float+0xc2>
 80053ec:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80053f0:	f240 80e0 	bls.w	80055b4 <_printf_float+0x3c0>
 80053f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80053f8:	2200      	movs	r2, #0
 80053fa:	2300      	movs	r3, #0
 80053fc:	f7fb fb6c 	bl	8000ad8 <__aeabi_dcmpeq>
 8005400:	2800      	cmp	r0, #0
 8005402:	d034      	beq.n	800546e <_printf_float+0x27a>
 8005404:	4a37      	ldr	r2, [pc, #220]	; (80054e4 <_printf_float+0x2f0>)
 8005406:	2301      	movs	r3, #1
 8005408:	4631      	mov	r1, r6
 800540a:	4628      	mov	r0, r5
 800540c:	47b8      	blx	r7
 800540e:	3001      	adds	r0, #1
 8005410:	f43f af51 	beq.w	80052b6 <_printf_float+0xc2>
 8005414:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005418:	429a      	cmp	r2, r3
 800541a:	db02      	blt.n	8005422 <_printf_float+0x22e>
 800541c:	6823      	ldr	r3, [r4, #0]
 800541e:	07d8      	lsls	r0, r3, #31
 8005420:	d510      	bpl.n	8005444 <_printf_float+0x250>
 8005422:	ee18 3a10 	vmov	r3, s16
 8005426:	4652      	mov	r2, sl
 8005428:	4631      	mov	r1, r6
 800542a:	4628      	mov	r0, r5
 800542c:	47b8      	blx	r7
 800542e:	3001      	adds	r0, #1
 8005430:	f43f af41 	beq.w	80052b6 <_printf_float+0xc2>
 8005434:	f04f 0800 	mov.w	r8, #0
 8005438:	f104 091a 	add.w	r9, r4, #26
 800543c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800543e:	3b01      	subs	r3, #1
 8005440:	4543      	cmp	r3, r8
 8005442:	dc09      	bgt.n	8005458 <_printf_float+0x264>
 8005444:	6823      	ldr	r3, [r4, #0]
 8005446:	079b      	lsls	r3, r3, #30
 8005448:	f100 8105 	bmi.w	8005656 <_printf_float+0x462>
 800544c:	68e0      	ldr	r0, [r4, #12]
 800544e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005450:	4298      	cmp	r0, r3
 8005452:	bfb8      	it	lt
 8005454:	4618      	movlt	r0, r3
 8005456:	e730      	b.n	80052ba <_printf_float+0xc6>
 8005458:	2301      	movs	r3, #1
 800545a:	464a      	mov	r2, r9
 800545c:	4631      	mov	r1, r6
 800545e:	4628      	mov	r0, r5
 8005460:	47b8      	blx	r7
 8005462:	3001      	adds	r0, #1
 8005464:	f43f af27 	beq.w	80052b6 <_printf_float+0xc2>
 8005468:	f108 0801 	add.w	r8, r8, #1
 800546c:	e7e6      	b.n	800543c <_printf_float+0x248>
 800546e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005470:	2b00      	cmp	r3, #0
 8005472:	dc39      	bgt.n	80054e8 <_printf_float+0x2f4>
 8005474:	4a1b      	ldr	r2, [pc, #108]	; (80054e4 <_printf_float+0x2f0>)
 8005476:	2301      	movs	r3, #1
 8005478:	4631      	mov	r1, r6
 800547a:	4628      	mov	r0, r5
 800547c:	47b8      	blx	r7
 800547e:	3001      	adds	r0, #1
 8005480:	f43f af19 	beq.w	80052b6 <_printf_float+0xc2>
 8005484:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005488:	4313      	orrs	r3, r2
 800548a:	d102      	bne.n	8005492 <_printf_float+0x29e>
 800548c:	6823      	ldr	r3, [r4, #0]
 800548e:	07d9      	lsls	r1, r3, #31
 8005490:	d5d8      	bpl.n	8005444 <_printf_float+0x250>
 8005492:	ee18 3a10 	vmov	r3, s16
 8005496:	4652      	mov	r2, sl
 8005498:	4631      	mov	r1, r6
 800549a:	4628      	mov	r0, r5
 800549c:	47b8      	blx	r7
 800549e:	3001      	adds	r0, #1
 80054a0:	f43f af09 	beq.w	80052b6 <_printf_float+0xc2>
 80054a4:	f04f 0900 	mov.w	r9, #0
 80054a8:	f104 0a1a 	add.w	sl, r4, #26
 80054ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054ae:	425b      	negs	r3, r3
 80054b0:	454b      	cmp	r3, r9
 80054b2:	dc01      	bgt.n	80054b8 <_printf_float+0x2c4>
 80054b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054b6:	e792      	b.n	80053de <_printf_float+0x1ea>
 80054b8:	2301      	movs	r3, #1
 80054ba:	4652      	mov	r2, sl
 80054bc:	4631      	mov	r1, r6
 80054be:	4628      	mov	r0, r5
 80054c0:	47b8      	blx	r7
 80054c2:	3001      	adds	r0, #1
 80054c4:	f43f aef7 	beq.w	80052b6 <_printf_float+0xc2>
 80054c8:	f109 0901 	add.w	r9, r9, #1
 80054cc:	e7ee      	b.n	80054ac <_printf_float+0x2b8>
 80054ce:	bf00      	nop
 80054d0:	7fefffff 	.word	0x7fefffff
 80054d4:	08007ee0 	.word	0x08007ee0
 80054d8:	08007ee4 	.word	0x08007ee4
 80054dc:	08007eec 	.word	0x08007eec
 80054e0:	08007ee8 	.word	0x08007ee8
 80054e4:	08007ef0 	.word	0x08007ef0
 80054e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80054ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80054ec:	429a      	cmp	r2, r3
 80054ee:	bfa8      	it	ge
 80054f0:	461a      	movge	r2, r3
 80054f2:	2a00      	cmp	r2, #0
 80054f4:	4691      	mov	r9, r2
 80054f6:	dc37      	bgt.n	8005568 <_printf_float+0x374>
 80054f8:	f04f 0b00 	mov.w	fp, #0
 80054fc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005500:	f104 021a 	add.w	r2, r4, #26
 8005504:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005506:	9305      	str	r3, [sp, #20]
 8005508:	eba3 0309 	sub.w	r3, r3, r9
 800550c:	455b      	cmp	r3, fp
 800550e:	dc33      	bgt.n	8005578 <_printf_float+0x384>
 8005510:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005514:	429a      	cmp	r2, r3
 8005516:	db3b      	blt.n	8005590 <_printf_float+0x39c>
 8005518:	6823      	ldr	r3, [r4, #0]
 800551a:	07da      	lsls	r2, r3, #31
 800551c:	d438      	bmi.n	8005590 <_printf_float+0x39c>
 800551e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005520:	9a05      	ldr	r2, [sp, #20]
 8005522:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005524:	1a9a      	subs	r2, r3, r2
 8005526:	eba3 0901 	sub.w	r9, r3, r1
 800552a:	4591      	cmp	r9, r2
 800552c:	bfa8      	it	ge
 800552e:	4691      	movge	r9, r2
 8005530:	f1b9 0f00 	cmp.w	r9, #0
 8005534:	dc35      	bgt.n	80055a2 <_printf_float+0x3ae>
 8005536:	f04f 0800 	mov.w	r8, #0
 800553a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800553e:	f104 0a1a 	add.w	sl, r4, #26
 8005542:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005546:	1a9b      	subs	r3, r3, r2
 8005548:	eba3 0309 	sub.w	r3, r3, r9
 800554c:	4543      	cmp	r3, r8
 800554e:	f77f af79 	ble.w	8005444 <_printf_float+0x250>
 8005552:	2301      	movs	r3, #1
 8005554:	4652      	mov	r2, sl
 8005556:	4631      	mov	r1, r6
 8005558:	4628      	mov	r0, r5
 800555a:	47b8      	blx	r7
 800555c:	3001      	adds	r0, #1
 800555e:	f43f aeaa 	beq.w	80052b6 <_printf_float+0xc2>
 8005562:	f108 0801 	add.w	r8, r8, #1
 8005566:	e7ec      	b.n	8005542 <_printf_float+0x34e>
 8005568:	4613      	mov	r3, r2
 800556a:	4631      	mov	r1, r6
 800556c:	4642      	mov	r2, r8
 800556e:	4628      	mov	r0, r5
 8005570:	47b8      	blx	r7
 8005572:	3001      	adds	r0, #1
 8005574:	d1c0      	bne.n	80054f8 <_printf_float+0x304>
 8005576:	e69e      	b.n	80052b6 <_printf_float+0xc2>
 8005578:	2301      	movs	r3, #1
 800557a:	4631      	mov	r1, r6
 800557c:	4628      	mov	r0, r5
 800557e:	9205      	str	r2, [sp, #20]
 8005580:	47b8      	blx	r7
 8005582:	3001      	adds	r0, #1
 8005584:	f43f ae97 	beq.w	80052b6 <_printf_float+0xc2>
 8005588:	9a05      	ldr	r2, [sp, #20]
 800558a:	f10b 0b01 	add.w	fp, fp, #1
 800558e:	e7b9      	b.n	8005504 <_printf_float+0x310>
 8005590:	ee18 3a10 	vmov	r3, s16
 8005594:	4652      	mov	r2, sl
 8005596:	4631      	mov	r1, r6
 8005598:	4628      	mov	r0, r5
 800559a:	47b8      	blx	r7
 800559c:	3001      	adds	r0, #1
 800559e:	d1be      	bne.n	800551e <_printf_float+0x32a>
 80055a0:	e689      	b.n	80052b6 <_printf_float+0xc2>
 80055a2:	9a05      	ldr	r2, [sp, #20]
 80055a4:	464b      	mov	r3, r9
 80055a6:	4442      	add	r2, r8
 80055a8:	4631      	mov	r1, r6
 80055aa:	4628      	mov	r0, r5
 80055ac:	47b8      	blx	r7
 80055ae:	3001      	adds	r0, #1
 80055b0:	d1c1      	bne.n	8005536 <_printf_float+0x342>
 80055b2:	e680      	b.n	80052b6 <_printf_float+0xc2>
 80055b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80055b6:	2a01      	cmp	r2, #1
 80055b8:	dc01      	bgt.n	80055be <_printf_float+0x3ca>
 80055ba:	07db      	lsls	r3, r3, #31
 80055bc:	d538      	bpl.n	8005630 <_printf_float+0x43c>
 80055be:	2301      	movs	r3, #1
 80055c0:	4642      	mov	r2, r8
 80055c2:	4631      	mov	r1, r6
 80055c4:	4628      	mov	r0, r5
 80055c6:	47b8      	blx	r7
 80055c8:	3001      	adds	r0, #1
 80055ca:	f43f ae74 	beq.w	80052b6 <_printf_float+0xc2>
 80055ce:	ee18 3a10 	vmov	r3, s16
 80055d2:	4652      	mov	r2, sl
 80055d4:	4631      	mov	r1, r6
 80055d6:	4628      	mov	r0, r5
 80055d8:	47b8      	blx	r7
 80055da:	3001      	adds	r0, #1
 80055dc:	f43f ae6b 	beq.w	80052b6 <_printf_float+0xc2>
 80055e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80055e4:	2200      	movs	r2, #0
 80055e6:	2300      	movs	r3, #0
 80055e8:	f7fb fa76 	bl	8000ad8 <__aeabi_dcmpeq>
 80055ec:	b9d8      	cbnz	r0, 8005626 <_printf_float+0x432>
 80055ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055f0:	f108 0201 	add.w	r2, r8, #1
 80055f4:	3b01      	subs	r3, #1
 80055f6:	4631      	mov	r1, r6
 80055f8:	4628      	mov	r0, r5
 80055fa:	47b8      	blx	r7
 80055fc:	3001      	adds	r0, #1
 80055fe:	d10e      	bne.n	800561e <_printf_float+0x42a>
 8005600:	e659      	b.n	80052b6 <_printf_float+0xc2>
 8005602:	2301      	movs	r3, #1
 8005604:	4652      	mov	r2, sl
 8005606:	4631      	mov	r1, r6
 8005608:	4628      	mov	r0, r5
 800560a:	47b8      	blx	r7
 800560c:	3001      	adds	r0, #1
 800560e:	f43f ae52 	beq.w	80052b6 <_printf_float+0xc2>
 8005612:	f108 0801 	add.w	r8, r8, #1
 8005616:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005618:	3b01      	subs	r3, #1
 800561a:	4543      	cmp	r3, r8
 800561c:	dcf1      	bgt.n	8005602 <_printf_float+0x40e>
 800561e:	464b      	mov	r3, r9
 8005620:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005624:	e6dc      	b.n	80053e0 <_printf_float+0x1ec>
 8005626:	f04f 0800 	mov.w	r8, #0
 800562a:	f104 0a1a 	add.w	sl, r4, #26
 800562e:	e7f2      	b.n	8005616 <_printf_float+0x422>
 8005630:	2301      	movs	r3, #1
 8005632:	4642      	mov	r2, r8
 8005634:	e7df      	b.n	80055f6 <_printf_float+0x402>
 8005636:	2301      	movs	r3, #1
 8005638:	464a      	mov	r2, r9
 800563a:	4631      	mov	r1, r6
 800563c:	4628      	mov	r0, r5
 800563e:	47b8      	blx	r7
 8005640:	3001      	adds	r0, #1
 8005642:	f43f ae38 	beq.w	80052b6 <_printf_float+0xc2>
 8005646:	f108 0801 	add.w	r8, r8, #1
 800564a:	68e3      	ldr	r3, [r4, #12]
 800564c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800564e:	1a5b      	subs	r3, r3, r1
 8005650:	4543      	cmp	r3, r8
 8005652:	dcf0      	bgt.n	8005636 <_printf_float+0x442>
 8005654:	e6fa      	b.n	800544c <_printf_float+0x258>
 8005656:	f04f 0800 	mov.w	r8, #0
 800565a:	f104 0919 	add.w	r9, r4, #25
 800565e:	e7f4      	b.n	800564a <_printf_float+0x456>

08005660 <_printf_common>:
 8005660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005664:	4616      	mov	r6, r2
 8005666:	4699      	mov	r9, r3
 8005668:	688a      	ldr	r2, [r1, #8]
 800566a:	690b      	ldr	r3, [r1, #16]
 800566c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005670:	4293      	cmp	r3, r2
 8005672:	bfb8      	it	lt
 8005674:	4613      	movlt	r3, r2
 8005676:	6033      	str	r3, [r6, #0]
 8005678:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800567c:	4607      	mov	r7, r0
 800567e:	460c      	mov	r4, r1
 8005680:	b10a      	cbz	r2, 8005686 <_printf_common+0x26>
 8005682:	3301      	adds	r3, #1
 8005684:	6033      	str	r3, [r6, #0]
 8005686:	6823      	ldr	r3, [r4, #0]
 8005688:	0699      	lsls	r1, r3, #26
 800568a:	bf42      	ittt	mi
 800568c:	6833      	ldrmi	r3, [r6, #0]
 800568e:	3302      	addmi	r3, #2
 8005690:	6033      	strmi	r3, [r6, #0]
 8005692:	6825      	ldr	r5, [r4, #0]
 8005694:	f015 0506 	ands.w	r5, r5, #6
 8005698:	d106      	bne.n	80056a8 <_printf_common+0x48>
 800569a:	f104 0a19 	add.w	sl, r4, #25
 800569e:	68e3      	ldr	r3, [r4, #12]
 80056a0:	6832      	ldr	r2, [r6, #0]
 80056a2:	1a9b      	subs	r3, r3, r2
 80056a4:	42ab      	cmp	r3, r5
 80056a6:	dc26      	bgt.n	80056f6 <_printf_common+0x96>
 80056a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80056ac:	1e13      	subs	r3, r2, #0
 80056ae:	6822      	ldr	r2, [r4, #0]
 80056b0:	bf18      	it	ne
 80056b2:	2301      	movne	r3, #1
 80056b4:	0692      	lsls	r2, r2, #26
 80056b6:	d42b      	bmi.n	8005710 <_printf_common+0xb0>
 80056b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80056bc:	4649      	mov	r1, r9
 80056be:	4638      	mov	r0, r7
 80056c0:	47c0      	blx	r8
 80056c2:	3001      	adds	r0, #1
 80056c4:	d01e      	beq.n	8005704 <_printf_common+0xa4>
 80056c6:	6823      	ldr	r3, [r4, #0]
 80056c8:	68e5      	ldr	r5, [r4, #12]
 80056ca:	6832      	ldr	r2, [r6, #0]
 80056cc:	f003 0306 	and.w	r3, r3, #6
 80056d0:	2b04      	cmp	r3, #4
 80056d2:	bf08      	it	eq
 80056d4:	1aad      	subeq	r5, r5, r2
 80056d6:	68a3      	ldr	r3, [r4, #8]
 80056d8:	6922      	ldr	r2, [r4, #16]
 80056da:	bf0c      	ite	eq
 80056dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056e0:	2500      	movne	r5, #0
 80056e2:	4293      	cmp	r3, r2
 80056e4:	bfc4      	itt	gt
 80056e6:	1a9b      	subgt	r3, r3, r2
 80056e8:	18ed      	addgt	r5, r5, r3
 80056ea:	2600      	movs	r6, #0
 80056ec:	341a      	adds	r4, #26
 80056ee:	42b5      	cmp	r5, r6
 80056f0:	d11a      	bne.n	8005728 <_printf_common+0xc8>
 80056f2:	2000      	movs	r0, #0
 80056f4:	e008      	b.n	8005708 <_printf_common+0xa8>
 80056f6:	2301      	movs	r3, #1
 80056f8:	4652      	mov	r2, sl
 80056fa:	4649      	mov	r1, r9
 80056fc:	4638      	mov	r0, r7
 80056fe:	47c0      	blx	r8
 8005700:	3001      	adds	r0, #1
 8005702:	d103      	bne.n	800570c <_printf_common+0xac>
 8005704:	f04f 30ff 	mov.w	r0, #4294967295
 8005708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800570c:	3501      	adds	r5, #1
 800570e:	e7c6      	b.n	800569e <_printf_common+0x3e>
 8005710:	18e1      	adds	r1, r4, r3
 8005712:	1c5a      	adds	r2, r3, #1
 8005714:	2030      	movs	r0, #48	; 0x30
 8005716:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800571a:	4422      	add	r2, r4
 800571c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005720:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005724:	3302      	adds	r3, #2
 8005726:	e7c7      	b.n	80056b8 <_printf_common+0x58>
 8005728:	2301      	movs	r3, #1
 800572a:	4622      	mov	r2, r4
 800572c:	4649      	mov	r1, r9
 800572e:	4638      	mov	r0, r7
 8005730:	47c0      	blx	r8
 8005732:	3001      	adds	r0, #1
 8005734:	d0e6      	beq.n	8005704 <_printf_common+0xa4>
 8005736:	3601      	adds	r6, #1
 8005738:	e7d9      	b.n	80056ee <_printf_common+0x8e>
	...

0800573c <_printf_i>:
 800573c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005740:	7e0f      	ldrb	r7, [r1, #24]
 8005742:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005744:	2f78      	cmp	r7, #120	; 0x78
 8005746:	4691      	mov	r9, r2
 8005748:	4680      	mov	r8, r0
 800574a:	460c      	mov	r4, r1
 800574c:	469a      	mov	sl, r3
 800574e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005752:	d807      	bhi.n	8005764 <_printf_i+0x28>
 8005754:	2f62      	cmp	r7, #98	; 0x62
 8005756:	d80a      	bhi.n	800576e <_printf_i+0x32>
 8005758:	2f00      	cmp	r7, #0
 800575a:	f000 80d8 	beq.w	800590e <_printf_i+0x1d2>
 800575e:	2f58      	cmp	r7, #88	; 0x58
 8005760:	f000 80a3 	beq.w	80058aa <_printf_i+0x16e>
 8005764:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005768:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800576c:	e03a      	b.n	80057e4 <_printf_i+0xa8>
 800576e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005772:	2b15      	cmp	r3, #21
 8005774:	d8f6      	bhi.n	8005764 <_printf_i+0x28>
 8005776:	a101      	add	r1, pc, #4	; (adr r1, 800577c <_printf_i+0x40>)
 8005778:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800577c:	080057d5 	.word	0x080057d5
 8005780:	080057e9 	.word	0x080057e9
 8005784:	08005765 	.word	0x08005765
 8005788:	08005765 	.word	0x08005765
 800578c:	08005765 	.word	0x08005765
 8005790:	08005765 	.word	0x08005765
 8005794:	080057e9 	.word	0x080057e9
 8005798:	08005765 	.word	0x08005765
 800579c:	08005765 	.word	0x08005765
 80057a0:	08005765 	.word	0x08005765
 80057a4:	08005765 	.word	0x08005765
 80057a8:	080058f5 	.word	0x080058f5
 80057ac:	08005819 	.word	0x08005819
 80057b0:	080058d7 	.word	0x080058d7
 80057b4:	08005765 	.word	0x08005765
 80057b8:	08005765 	.word	0x08005765
 80057bc:	08005917 	.word	0x08005917
 80057c0:	08005765 	.word	0x08005765
 80057c4:	08005819 	.word	0x08005819
 80057c8:	08005765 	.word	0x08005765
 80057cc:	08005765 	.word	0x08005765
 80057d0:	080058df 	.word	0x080058df
 80057d4:	682b      	ldr	r3, [r5, #0]
 80057d6:	1d1a      	adds	r2, r3, #4
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	602a      	str	r2, [r5, #0]
 80057dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80057e4:	2301      	movs	r3, #1
 80057e6:	e0a3      	b.n	8005930 <_printf_i+0x1f4>
 80057e8:	6820      	ldr	r0, [r4, #0]
 80057ea:	6829      	ldr	r1, [r5, #0]
 80057ec:	0606      	lsls	r6, r0, #24
 80057ee:	f101 0304 	add.w	r3, r1, #4
 80057f2:	d50a      	bpl.n	800580a <_printf_i+0xce>
 80057f4:	680e      	ldr	r6, [r1, #0]
 80057f6:	602b      	str	r3, [r5, #0]
 80057f8:	2e00      	cmp	r6, #0
 80057fa:	da03      	bge.n	8005804 <_printf_i+0xc8>
 80057fc:	232d      	movs	r3, #45	; 0x2d
 80057fe:	4276      	negs	r6, r6
 8005800:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005804:	485e      	ldr	r0, [pc, #376]	; (8005980 <_printf_i+0x244>)
 8005806:	230a      	movs	r3, #10
 8005808:	e019      	b.n	800583e <_printf_i+0x102>
 800580a:	680e      	ldr	r6, [r1, #0]
 800580c:	602b      	str	r3, [r5, #0]
 800580e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005812:	bf18      	it	ne
 8005814:	b236      	sxthne	r6, r6
 8005816:	e7ef      	b.n	80057f8 <_printf_i+0xbc>
 8005818:	682b      	ldr	r3, [r5, #0]
 800581a:	6820      	ldr	r0, [r4, #0]
 800581c:	1d19      	adds	r1, r3, #4
 800581e:	6029      	str	r1, [r5, #0]
 8005820:	0601      	lsls	r1, r0, #24
 8005822:	d501      	bpl.n	8005828 <_printf_i+0xec>
 8005824:	681e      	ldr	r6, [r3, #0]
 8005826:	e002      	b.n	800582e <_printf_i+0xf2>
 8005828:	0646      	lsls	r6, r0, #25
 800582a:	d5fb      	bpl.n	8005824 <_printf_i+0xe8>
 800582c:	881e      	ldrh	r6, [r3, #0]
 800582e:	4854      	ldr	r0, [pc, #336]	; (8005980 <_printf_i+0x244>)
 8005830:	2f6f      	cmp	r7, #111	; 0x6f
 8005832:	bf0c      	ite	eq
 8005834:	2308      	moveq	r3, #8
 8005836:	230a      	movne	r3, #10
 8005838:	2100      	movs	r1, #0
 800583a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800583e:	6865      	ldr	r5, [r4, #4]
 8005840:	60a5      	str	r5, [r4, #8]
 8005842:	2d00      	cmp	r5, #0
 8005844:	bfa2      	ittt	ge
 8005846:	6821      	ldrge	r1, [r4, #0]
 8005848:	f021 0104 	bicge.w	r1, r1, #4
 800584c:	6021      	strge	r1, [r4, #0]
 800584e:	b90e      	cbnz	r6, 8005854 <_printf_i+0x118>
 8005850:	2d00      	cmp	r5, #0
 8005852:	d04d      	beq.n	80058f0 <_printf_i+0x1b4>
 8005854:	4615      	mov	r5, r2
 8005856:	fbb6 f1f3 	udiv	r1, r6, r3
 800585a:	fb03 6711 	mls	r7, r3, r1, r6
 800585e:	5dc7      	ldrb	r7, [r0, r7]
 8005860:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005864:	4637      	mov	r7, r6
 8005866:	42bb      	cmp	r3, r7
 8005868:	460e      	mov	r6, r1
 800586a:	d9f4      	bls.n	8005856 <_printf_i+0x11a>
 800586c:	2b08      	cmp	r3, #8
 800586e:	d10b      	bne.n	8005888 <_printf_i+0x14c>
 8005870:	6823      	ldr	r3, [r4, #0]
 8005872:	07de      	lsls	r6, r3, #31
 8005874:	d508      	bpl.n	8005888 <_printf_i+0x14c>
 8005876:	6923      	ldr	r3, [r4, #16]
 8005878:	6861      	ldr	r1, [r4, #4]
 800587a:	4299      	cmp	r1, r3
 800587c:	bfde      	ittt	le
 800587e:	2330      	movle	r3, #48	; 0x30
 8005880:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005884:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005888:	1b52      	subs	r2, r2, r5
 800588a:	6122      	str	r2, [r4, #16]
 800588c:	f8cd a000 	str.w	sl, [sp]
 8005890:	464b      	mov	r3, r9
 8005892:	aa03      	add	r2, sp, #12
 8005894:	4621      	mov	r1, r4
 8005896:	4640      	mov	r0, r8
 8005898:	f7ff fee2 	bl	8005660 <_printf_common>
 800589c:	3001      	adds	r0, #1
 800589e:	d14c      	bne.n	800593a <_printf_i+0x1fe>
 80058a0:	f04f 30ff 	mov.w	r0, #4294967295
 80058a4:	b004      	add	sp, #16
 80058a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058aa:	4835      	ldr	r0, [pc, #212]	; (8005980 <_printf_i+0x244>)
 80058ac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80058b0:	6829      	ldr	r1, [r5, #0]
 80058b2:	6823      	ldr	r3, [r4, #0]
 80058b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80058b8:	6029      	str	r1, [r5, #0]
 80058ba:	061d      	lsls	r5, r3, #24
 80058bc:	d514      	bpl.n	80058e8 <_printf_i+0x1ac>
 80058be:	07df      	lsls	r7, r3, #31
 80058c0:	bf44      	itt	mi
 80058c2:	f043 0320 	orrmi.w	r3, r3, #32
 80058c6:	6023      	strmi	r3, [r4, #0]
 80058c8:	b91e      	cbnz	r6, 80058d2 <_printf_i+0x196>
 80058ca:	6823      	ldr	r3, [r4, #0]
 80058cc:	f023 0320 	bic.w	r3, r3, #32
 80058d0:	6023      	str	r3, [r4, #0]
 80058d2:	2310      	movs	r3, #16
 80058d4:	e7b0      	b.n	8005838 <_printf_i+0xfc>
 80058d6:	6823      	ldr	r3, [r4, #0]
 80058d8:	f043 0320 	orr.w	r3, r3, #32
 80058dc:	6023      	str	r3, [r4, #0]
 80058de:	2378      	movs	r3, #120	; 0x78
 80058e0:	4828      	ldr	r0, [pc, #160]	; (8005984 <_printf_i+0x248>)
 80058e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80058e6:	e7e3      	b.n	80058b0 <_printf_i+0x174>
 80058e8:	0659      	lsls	r1, r3, #25
 80058ea:	bf48      	it	mi
 80058ec:	b2b6      	uxthmi	r6, r6
 80058ee:	e7e6      	b.n	80058be <_printf_i+0x182>
 80058f0:	4615      	mov	r5, r2
 80058f2:	e7bb      	b.n	800586c <_printf_i+0x130>
 80058f4:	682b      	ldr	r3, [r5, #0]
 80058f6:	6826      	ldr	r6, [r4, #0]
 80058f8:	6961      	ldr	r1, [r4, #20]
 80058fa:	1d18      	adds	r0, r3, #4
 80058fc:	6028      	str	r0, [r5, #0]
 80058fe:	0635      	lsls	r5, r6, #24
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	d501      	bpl.n	8005908 <_printf_i+0x1cc>
 8005904:	6019      	str	r1, [r3, #0]
 8005906:	e002      	b.n	800590e <_printf_i+0x1d2>
 8005908:	0670      	lsls	r0, r6, #25
 800590a:	d5fb      	bpl.n	8005904 <_printf_i+0x1c8>
 800590c:	8019      	strh	r1, [r3, #0]
 800590e:	2300      	movs	r3, #0
 8005910:	6123      	str	r3, [r4, #16]
 8005912:	4615      	mov	r5, r2
 8005914:	e7ba      	b.n	800588c <_printf_i+0x150>
 8005916:	682b      	ldr	r3, [r5, #0]
 8005918:	1d1a      	adds	r2, r3, #4
 800591a:	602a      	str	r2, [r5, #0]
 800591c:	681d      	ldr	r5, [r3, #0]
 800591e:	6862      	ldr	r2, [r4, #4]
 8005920:	2100      	movs	r1, #0
 8005922:	4628      	mov	r0, r5
 8005924:	f7fa fc64 	bl	80001f0 <memchr>
 8005928:	b108      	cbz	r0, 800592e <_printf_i+0x1f2>
 800592a:	1b40      	subs	r0, r0, r5
 800592c:	6060      	str	r0, [r4, #4]
 800592e:	6863      	ldr	r3, [r4, #4]
 8005930:	6123      	str	r3, [r4, #16]
 8005932:	2300      	movs	r3, #0
 8005934:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005938:	e7a8      	b.n	800588c <_printf_i+0x150>
 800593a:	6923      	ldr	r3, [r4, #16]
 800593c:	462a      	mov	r2, r5
 800593e:	4649      	mov	r1, r9
 8005940:	4640      	mov	r0, r8
 8005942:	47d0      	blx	sl
 8005944:	3001      	adds	r0, #1
 8005946:	d0ab      	beq.n	80058a0 <_printf_i+0x164>
 8005948:	6823      	ldr	r3, [r4, #0]
 800594a:	079b      	lsls	r3, r3, #30
 800594c:	d413      	bmi.n	8005976 <_printf_i+0x23a>
 800594e:	68e0      	ldr	r0, [r4, #12]
 8005950:	9b03      	ldr	r3, [sp, #12]
 8005952:	4298      	cmp	r0, r3
 8005954:	bfb8      	it	lt
 8005956:	4618      	movlt	r0, r3
 8005958:	e7a4      	b.n	80058a4 <_printf_i+0x168>
 800595a:	2301      	movs	r3, #1
 800595c:	4632      	mov	r2, r6
 800595e:	4649      	mov	r1, r9
 8005960:	4640      	mov	r0, r8
 8005962:	47d0      	blx	sl
 8005964:	3001      	adds	r0, #1
 8005966:	d09b      	beq.n	80058a0 <_printf_i+0x164>
 8005968:	3501      	adds	r5, #1
 800596a:	68e3      	ldr	r3, [r4, #12]
 800596c:	9903      	ldr	r1, [sp, #12]
 800596e:	1a5b      	subs	r3, r3, r1
 8005970:	42ab      	cmp	r3, r5
 8005972:	dcf2      	bgt.n	800595a <_printf_i+0x21e>
 8005974:	e7eb      	b.n	800594e <_printf_i+0x212>
 8005976:	2500      	movs	r5, #0
 8005978:	f104 0619 	add.w	r6, r4, #25
 800597c:	e7f5      	b.n	800596a <_printf_i+0x22e>
 800597e:	bf00      	nop
 8005980:	08007ef2 	.word	0x08007ef2
 8005984:	08007f03 	.word	0x08007f03

08005988 <siprintf>:
 8005988:	b40e      	push	{r1, r2, r3}
 800598a:	b500      	push	{lr}
 800598c:	b09c      	sub	sp, #112	; 0x70
 800598e:	ab1d      	add	r3, sp, #116	; 0x74
 8005990:	9002      	str	r0, [sp, #8]
 8005992:	9006      	str	r0, [sp, #24]
 8005994:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005998:	4809      	ldr	r0, [pc, #36]	; (80059c0 <siprintf+0x38>)
 800599a:	9107      	str	r1, [sp, #28]
 800599c:	9104      	str	r1, [sp, #16]
 800599e:	4909      	ldr	r1, [pc, #36]	; (80059c4 <siprintf+0x3c>)
 80059a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80059a4:	9105      	str	r1, [sp, #20]
 80059a6:	6800      	ldr	r0, [r0, #0]
 80059a8:	9301      	str	r3, [sp, #4]
 80059aa:	a902      	add	r1, sp, #8
 80059ac:	f001 fb76 	bl	800709c <_svfiprintf_r>
 80059b0:	9b02      	ldr	r3, [sp, #8]
 80059b2:	2200      	movs	r2, #0
 80059b4:	701a      	strb	r2, [r3, #0]
 80059b6:	b01c      	add	sp, #112	; 0x70
 80059b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80059bc:	b003      	add	sp, #12
 80059be:	4770      	bx	lr
 80059c0:	2000000c 	.word	0x2000000c
 80059c4:	ffff0208 	.word	0xffff0208

080059c8 <quorem>:
 80059c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059cc:	6903      	ldr	r3, [r0, #16]
 80059ce:	690c      	ldr	r4, [r1, #16]
 80059d0:	42a3      	cmp	r3, r4
 80059d2:	4607      	mov	r7, r0
 80059d4:	f2c0 8081 	blt.w	8005ada <quorem+0x112>
 80059d8:	3c01      	subs	r4, #1
 80059da:	f101 0814 	add.w	r8, r1, #20
 80059de:	f100 0514 	add.w	r5, r0, #20
 80059e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80059e6:	9301      	str	r3, [sp, #4]
 80059e8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80059ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80059f0:	3301      	adds	r3, #1
 80059f2:	429a      	cmp	r2, r3
 80059f4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80059f8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80059fc:	fbb2 f6f3 	udiv	r6, r2, r3
 8005a00:	d331      	bcc.n	8005a66 <quorem+0x9e>
 8005a02:	f04f 0e00 	mov.w	lr, #0
 8005a06:	4640      	mov	r0, r8
 8005a08:	46ac      	mov	ip, r5
 8005a0a:	46f2      	mov	sl, lr
 8005a0c:	f850 2b04 	ldr.w	r2, [r0], #4
 8005a10:	b293      	uxth	r3, r2
 8005a12:	fb06 e303 	mla	r3, r6, r3, lr
 8005a16:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	ebaa 0303 	sub.w	r3, sl, r3
 8005a20:	f8dc a000 	ldr.w	sl, [ip]
 8005a24:	0c12      	lsrs	r2, r2, #16
 8005a26:	fa13 f38a 	uxtah	r3, r3, sl
 8005a2a:	fb06 e202 	mla	r2, r6, r2, lr
 8005a2e:	9300      	str	r3, [sp, #0]
 8005a30:	9b00      	ldr	r3, [sp, #0]
 8005a32:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005a36:	b292      	uxth	r2, r2
 8005a38:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005a3c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005a40:	f8bd 3000 	ldrh.w	r3, [sp]
 8005a44:	4581      	cmp	r9, r0
 8005a46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a4a:	f84c 3b04 	str.w	r3, [ip], #4
 8005a4e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005a52:	d2db      	bcs.n	8005a0c <quorem+0x44>
 8005a54:	f855 300b 	ldr.w	r3, [r5, fp]
 8005a58:	b92b      	cbnz	r3, 8005a66 <quorem+0x9e>
 8005a5a:	9b01      	ldr	r3, [sp, #4]
 8005a5c:	3b04      	subs	r3, #4
 8005a5e:	429d      	cmp	r5, r3
 8005a60:	461a      	mov	r2, r3
 8005a62:	d32e      	bcc.n	8005ac2 <quorem+0xfa>
 8005a64:	613c      	str	r4, [r7, #16]
 8005a66:	4638      	mov	r0, r7
 8005a68:	f001 f8c4 	bl	8006bf4 <__mcmp>
 8005a6c:	2800      	cmp	r0, #0
 8005a6e:	db24      	blt.n	8005aba <quorem+0xf2>
 8005a70:	3601      	adds	r6, #1
 8005a72:	4628      	mov	r0, r5
 8005a74:	f04f 0c00 	mov.w	ip, #0
 8005a78:	f858 2b04 	ldr.w	r2, [r8], #4
 8005a7c:	f8d0 e000 	ldr.w	lr, [r0]
 8005a80:	b293      	uxth	r3, r2
 8005a82:	ebac 0303 	sub.w	r3, ip, r3
 8005a86:	0c12      	lsrs	r2, r2, #16
 8005a88:	fa13 f38e 	uxtah	r3, r3, lr
 8005a8c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005a90:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a9a:	45c1      	cmp	r9, r8
 8005a9c:	f840 3b04 	str.w	r3, [r0], #4
 8005aa0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005aa4:	d2e8      	bcs.n	8005a78 <quorem+0xb0>
 8005aa6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005aaa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005aae:	b922      	cbnz	r2, 8005aba <quorem+0xf2>
 8005ab0:	3b04      	subs	r3, #4
 8005ab2:	429d      	cmp	r5, r3
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	d30a      	bcc.n	8005ace <quorem+0x106>
 8005ab8:	613c      	str	r4, [r7, #16]
 8005aba:	4630      	mov	r0, r6
 8005abc:	b003      	add	sp, #12
 8005abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ac2:	6812      	ldr	r2, [r2, #0]
 8005ac4:	3b04      	subs	r3, #4
 8005ac6:	2a00      	cmp	r2, #0
 8005ac8:	d1cc      	bne.n	8005a64 <quorem+0x9c>
 8005aca:	3c01      	subs	r4, #1
 8005acc:	e7c7      	b.n	8005a5e <quorem+0x96>
 8005ace:	6812      	ldr	r2, [r2, #0]
 8005ad0:	3b04      	subs	r3, #4
 8005ad2:	2a00      	cmp	r2, #0
 8005ad4:	d1f0      	bne.n	8005ab8 <quorem+0xf0>
 8005ad6:	3c01      	subs	r4, #1
 8005ad8:	e7eb      	b.n	8005ab2 <quorem+0xea>
 8005ada:	2000      	movs	r0, #0
 8005adc:	e7ee      	b.n	8005abc <quorem+0xf4>
	...

08005ae0 <_dtoa_r>:
 8005ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ae4:	ed2d 8b04 	vpush	{d8-d9}
 8005ae8:	ec57 6b10 	vmov	r6, r7, d0
 8005aec:	b093      	sub	sp, #76	; 0x4c
 8005aee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005af0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005af4:	9106      	str	r1, [sp, #24]
 8005af6:	ee10 aa10 	vmov	sl, s0
 8005afa:	4604      	mov	r4, r0
 8005afc:	9209      	str	r2, [sp, #36]	; 0x24
 8005afe:	930c      	str	r3, [sp, #48]	; 0x30
 8005b00:	46bb      	mov	fp, r7
 8005b02:	b975      	cbnz	r5, 8005b22 <_dtoa_r+0x42>
 8005b04:	2010      	movs	r0, #16
 8005b06:	f000 fddd 	bl	80066c4 <malloc>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	6260      	str	r0, [r4, #36]	; 0x24
 8005b0e:	b920      	cbnz	r0, 8005b1a <_dtoa_r+0x3a>
 8005b10:	4ba7      	ldr	r3, [pc, #668]	; (8005db0 <_dtoa_r+0x2d0>)
 8005b12:	21ea      	movs	r1, #234	; 0xea
 8005b14:	48a7      	ldr	r0, [pc, #668]	; (8005db4 <_dtoa_r+0x2d4>)
 8005b16:	f001 fbd1 	bl	80072bc <__assert_func>
 8005b1a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005b1e:	6005      	str	r5, [r0, #0]
 8005b20:	60c5      	str	r5, [r0, #12]
 8005b22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b24:	6819      	ldr	r1, [r3, #0]
 8005b26:	b151      	cbz	r1, 8005b3e <_dtoa_r+0x5e>
 8005b28:	685a      	ldr	r2, [r3, #4]
 8005b2a:	604a      	str	r2, [r1, #4]
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	4093      	lsls	r3, r2
 8005b30:	608b      	str	r3, [r1, #8]
 8005b32:	4620      	mov	r0, r4
 8005b34:	f000 fe1c 	bl	8006770 <_Bfree>
 8005b38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	601a      	str	r2, [r3, #0]
 8005b3e:	1e3b      	subs	r3, r7, #0
 8005b40:	bfaa      	itet	ge
 8005b42:	2300      	movge	r3, #0
 8005b44:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005b48:	f8c8 3000 	strge.w	r3, [r8]
 8005b4c:	4b9a      	ldr	r3, [pc, #616]	; (8005db8 <_dtoa_r+0x2d8>)
 8005b4e:	bfbc      	itt	lt
 8005b50:	2201      	movlt	r2, #1
 8005b52:	f8c8 2000 	strlt.w	r2, [r8]
 8005b56:	ea33 030b 	bics.w	r3, r3, fp
 8005b5a:	d11b      	bne.n	8005b94 <_dtoa_r+0xb4>
 8005b5c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005b5e:	f242 730f 	movw	r3, #9999	; 0x270f
 8005b62:	6013      	str	r3, [r2, #0]
 8005b64:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005b68:	4333      	orrs	r3, r6
 8005b6a:	f000 8592 	beq.w	8006692 <_dtoa_r+0xbb2>
 8005b6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b70:	b963      	cbnz	r3, 8005b8c <_dtoa_r+0xac>
 8005b72:	4b92      	ldr	r3, [pc, #584]	; (8005dbc <_dtoa_r+0x2dc>)
 8005b74:	e022      	b.n	8005bbc <_dtoa_r+0xdc>
 8005b76:	4b92      	ldr	r3, [pc, #584]	; (8005dc0 <_dtoa_r+0x2e0>)
 8005b78:	9301      	str	r3, [sp, #4]
 8005b7a:	3308      	adds	r3, #8
 8005b7c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005b7e:	6013      	str	r3, [r2, #0]
 8005b80:	9801      	ldr	r0, [sp, #4]
 8005b82:	b013      	add	sp, #76	; 0x4c
 8005b84:	ecbd 8b04 	vpop	{d8-d9}
 8005b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b8c:	4b8b      	ldr	r3, [pc, #556]	; (8005dbc <_dtoa_r+0x2dc>)
 8005b8e:	9301      	str	r3, [sp, #4]
 8005b90:	3303      	adds	r3, #3
 8005b92:	e7f3      	b.n	8005b7c <_dtoa_r+0x9c>
 8005b94:	2200      	movs	r2, #0
 8005b96:	2300      	movs	r3, #0
 8005b98:	4650      	mov	r0, sl
 8005b9a:	4659      	mov	r1, fp
 8005b9c:	f7fa ff9c 	bl	8000ad8 <__aeabi_dcmpeq>
 8005ba0:	ec4b ab19 	vmov	d9, sl, fp
 8005ba4:	4680      	mov	r8, r0
 8005ba6:	b158      	cbz	r0, 8005bc0 <_dtoa_r+0xe0>
 8005ba8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005baa:	2301      	movs	r3, #1
 8005bac:	6013      	str	r3, [r2, #0]
 8005bae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	f000 856b 	beq.w	800668c <_dtoa_r+0xbac>
 8005bb6:	4883      	ldr	r0, [pc, #524]	; (8005dc4 <_dtoa_r+0x2e4>)
 8005bb8:	6018      	str	r0, [r3, #0]
 8005bba:	1e43      	subs	r3, r0, #1
 8005bbc:	9301      	str	r3, [sp, #4]
 8005bbe:	e7df      	b.n	8005b80 <_dtoa_r+0xa0>
 8005bc0:	ec4b ab10 	vmov	d0, sl, fp
 8005bc4:	aa10      	add	r2, sp, #64	; 0x40
 8005bc6:	a911      	add	r1, sp, #68	; 0x44
 8005bc8:	4620      	mov	r0, r4
 8005bca:	f001 f8b9 	bl	8006d40 <__d2b>
 8005bce:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005bd2:	ee08 0a10 	vmov	s16, r0
 8005bd6:	2d00      	cmp	r5, #0
 8005bd8:	f000 8084 	beq.w	8005ce4 <_dtoa_r+0x204>
 8005bdc:	ee19 3a90 	vmov	r3, s19
 8005be0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005be4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005be8:	4656      	mov	r6, sl
 8005bea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005bee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005bf2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005bf6:	4b74      	ldr	r3, [pc, #464]	; (8005dc8 <_dtoa_r+0x2e8>)
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	4630      	mov	r0, r6
 8005bfc:	4639      	mov	r1, r7
 8005bfe:	f7fa fb4b 	bl	8000298 <__aeabi_dsub>
 8005c02:	a365      	add	r3, pc, #404	; (adr r3, 8005d98 <_dtoa_r+0x2b8>)
 8005c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c08:	f7fa fcfe 	bl	8000608 <__aeabi_dmul>
 8005c0c:	a364      	add	r3, pc, #400	; (adr r3, 8005da0 <_dtoa_r+0x2c0>)
 8005c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c12:	f7fa fb43 	bl	800029c <__adddf3>
 8005c16:	4606      	mov	r6, r0
 8005c18:	4628      	mov	r0, r5
 8005c1a:	460f      	mov	r7, r1
 8005c1c:	f7fa fc8a 	bl	8000534 <__aeabi_i2d>
 8005c20:	a361      	add	r3, pc, #388	; (adr r3, 8005da8 <_dtoa_r+0x2c8>)
 8005c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c26:	f7fa fcef 	bl	8000608 <__aeabi_dmul>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	460b      	mov	r3, r1
 8005c2e:	4630      	mov	r0, r6
 8005c30:	4639      	mov	r1, r7
 8005c32:	f7fa fb33 	bl	800029c <__adddf3>
 8005c36:	4606      	mov	r6, r0
 8005c38:	460f      	mov	r7, r1
 8005c3a:	f7fa ff95 	bl	8000b68 <__aeabi_d2iz>
 8005c3e:	2200      	movs	r2, #0
 8005c40:	9000      	str	r0, [sp, #0]
 8005c42:	2300      	movs	r3, #0
 8005c44:	4630      	mov	r0, r6
 8005c46:	4639      	mov	r1, r7
 8005c48:	f7fa ff50 	bl	8000aec <__aeabi_dcmplt>
 8005c4c:	b150      	cbz	r0, 8005c64 <_dtoa_r+0x184>
 8005c4e:	9800      	ldr	r0, [sp, #0]
 8005c50:	f7fa fc70 	bl	8000534 <__aeabi_i2d>
 8005c54:	4632      	mov	r2, r6
 8005c56:	463b      	mov	r3, r7
 8005c58:	f7fa ff3e 	bl	8000ad8 <__aeabi_dcmpeq>
 8005c5c:	b910      	cbnz	r0, 8005c64 <_dtoa_r+0x184>
 8005c5e:	9b00      	ldr	r3, [sp, #0]
 8005c60:	3b01      	subs	r3, #1
 8005c62:	9300      	str	r3, [sp, #0]
 8005c64:	9b00      	ldr	r3, [sp, #0]
 8005c66:	2b16      	cmp	r3, #22
 8005c68:	d85a      	bhi.n	8005d20 <_dtoa_r+0x240>
 8005c6a:	9a00      	ldr	r2, [sp, #0]
 8005c6c:	4b57      	ldr	r3, [pc, #348]	; (8005dcc <_dtoa_r+0x2ec>)
 8005c6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c76:	ec51 0b19 	vmov	r0, r1, d9
 8005c7a:	f7fa ff37 	bl	8000aec <__aeabi_dcmplt>
 8005c7e:	2800      	cmp	r0, #0
 8005c80:	d050      	beq.n	8005d24 <_dtoa_r+0x244>
 8005c82:	9b00      	ldr	r3, [sp, #0]
 8005c84:	3b01      	subs	r3, #1
 8005c86:	9300      	str	r3, [sp, #0]
 8005c88:	2300      	movs	r3, #0
 8005c8a:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005c8e:	1b5d      	subs	r5, r3, r5
 8005c90:	1e6b      	subs	r3, r5, #1
 8005c92:	9305      	str	r3, [sp, #20]
 8005c94:	bf45      	ittet	mi
 8005c96:	f1c5 0301 	rsbmi	r3, r5, #1
 8005c9a:	9304      	strmi	r3, [sp, #16]
 8005c9c:	2300      	movpl	r3, #0
 8005c9e:	2300      	movmi	r3, #0
 8005ca0:	bf4c      	ite	mi
 8005ca2:	9305      	strmi	r3, [sp, #20]
 8005ca4:	9304      	strpl	r3, [sp, #16]
 8005ca6:	9b00      	ldr	r3, [sp, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	db3d      	blt.n	8005d28 <_dtoa_r+0x248>
 8005cac:	9b05      	ldr	r3, [sp, #20]
 8005cae:	9a00      	ldr	r2, [sp, #0]
 8005cb0:	920a      	str	r2, [sp, #40]	; 0x28
 8005cb2:	4413      	add	r3, r2
 8005cb4:	9305      	str	r3, [sp, #20]
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	9307      	str	r3, [sp, #28]
 8005cba:	9b06      	ldr	r3, [sp, #24]
 8005cbc:	2b09      	cmp	r3, #9
 8005cbe:	f200 8089 	bhi.w	8005dd4 <_dtoa_r+0x2f4>
 8005cc2:	2b05      	cmp	r3, #5
 8005cc4:	bfc4      	itt	gt
 8005cc6:	3b04      	subgt	r3, #4
 8005cc8:	9306      	strgt	r3, [sp, #24]
 8005cca:	9b06      	ldr	r3, [sp, #24]
 8005ccc:	f1a3 0302 	sub.w	r3, r3, #2
 8005cd0:	bfcc      	ite	gt
 8005cd2:	2500      	movgt	r5, #0
 8005cd4:	2501      	movle	r5, #1
 8005cd6:	2b03      	cmp	r3, #3
 8005cd8:	f200 8087 	bhi.w	8005dea <_dtoa_r+0x30a>
 8005cdc:	e8df f003 	tbb	[pc, r3]
 8005ce0:	59383a2d 	.word	0x59383a2d
 8005ce4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005ce8:	441d      	add	r5, r3
 8005cea:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005cee:	2b20      	cmp	r3, #32
 8005cf0:	bfc1      	itttt	gt
 8005cf2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005cf6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005cfa:	fa0b f303 	lslgt.w	r3, fp, r3
 8005cfe:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005d02:	bfda      	itte	le
 8005d04:	f1c3 0320 	rsble	r3, r3, #32
 8005d08:	fa06 f003 	lslle.w	r0, r6, r3
 8005d0c:	4318      	orrgt	r0, r3
 8005d0e:	f7fa fc01 	bl	8000514 <__aeabi_ui2d>
 8005d12:	2301      	movs	r3, #1
 8005d14:	4606      	mov	r6, r0
 8005d16:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005d1a:	3d01      	subs	r5, #1
 8005d1c:	930e      	str	r3, [sp, #56]	; 0x38
 8005d1e:	e76a      	b.n	8005bf6 <_dtoa_r+0x116>
 8005d20:	2301      	movs	r3, #1
 8005d22:	e7b2      	b.n	8005c8a <_dtoa_r+0x1aa>
 8005d24:	900b      	str	r0, [sp, #44]	; 0x2c
 8005d26:	e7b1      	b.n	8005c8c <_dtoa_r+0x1ac>
 8005d28:	9b04      	ldr	r3, [sp, #16]
 8005d2a:	9a00      	ldr	r2, [sp, #0]
 8005d2c:	1a9b      	subs	r3, r3, r2
 8005d2e:	9304      	str	r3, [sp, #16]
 8005d30:	4253      	negs	r3, r2
 8005d32:	9307      	str	r3, [sp, #28]
 8005d34:	2300      	movs	r3, #0
 8005d36:	930a      	str	r3, [sp, #40]	; 0x28
 8005d38:	e7bf      	b.n	8005cba <_dtoa_r+0x1da>
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	9308      	str	r3, [sp, #32]
 8005d3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	dc55      	bgt.n	8005df0 <_dtoa_r+0x310>
 8005d44:	2301      	movs	r3, #1
 8005d46:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	9209      	str	r2, [sp, #36]	; 0x24
 8005d4e:	e00c      	b.n	8005d6a <_dtoa_r+0x28a>
 8005d50:	2301      	movs	r3, #1
 8005d52:	e7f3      	b.n	8005d3c <_dtoa_r+0x25c>
 8005d54:	2300      	movs	r3, #0
 8005d56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d58:	9308      	str	r3, [sp, #32]
 8005d5a:	9b00      	ldr	r3, [sp, #0]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	9302      	str	r3, [sp, #8]
 8005d60:	3301      	adds	r3, #1
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	9303      	str	r3, [sp, #12]
 8005d66:	bfb8      	it	lt
 8005d68:	2301      	movlt	r3, #1
 8005d6a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	6042      	str	r2, [r0, #4]
 8005d70:	2204      	movs	r2, #4
 8005d72:	f102 0614 	add.w	r6, r2, #20
 8005d76:	429e      	cmp	r6, r3
 8005d78:	6841      	ldr	r1, [r0, #4]
 8005d7a:	d93d      	bls.n	8005df8 <_dtoa_r+0x318>
 8005d7c:	4620      	mov	r0, r4
 8005d7e:	f000 fcb7 	bl	80066f0 <_Balloc>
 8005d82:	9001      	str	r0, [sp, #4]
 8005d84:	2800      	cmp	r0, #0
 8005d86:	d13b      	bne.n	8005e00 <_dtoa_r+0x320>
 8005d88:	4b11      	ldr	r3, [pc, #68]	; (8005dd0 <_dtoa_r+0x2f0>)
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005d90:	e6c0      	b.n	8005b14 <_dtoa_r+0x34>
 8005d92:	2301      	movs	r3, #1
 8005d94:	e7df      	b.n	8005d56 <_dtoa_r+0x276>
 8005d96:	bf00      	nop
 8005d98:	636f4361 	.word	0x636f4361
 8005d9c:	3fd287a7 	.word	0x3fd287a7
 8005da0:	8b60c8b3 	.word	0x8b60c8b3
 8005da4:	3fc68a28 	.word	0x3fc68a28
 8005da8:	509f79fb 	.word	0x509f79fb
 8005dac:	3fd34413 	.word	0x3fd34413
 8005db0:	08007f21 	.word	0x08007f21
 8005db4:	08007f38 	.word	0x08007f38
 8005db8:	7ff00000 	.word	0x7ff00000
 8005dbc:	08007f1d 	.word	0x08007f1d
 8005dc0:	08007f14 	.word	0x08007f14
 8005dc4:	08007ef1 	.word	0x08007ef1
 8005dc8:	3ff80000 	.word	0x3ff80000
 8005dcc:	08008028 	.word	0x08008028
 8005dd0:	08007f93 	.word	0x08007f93
 8005dd4:	2501      	movs	r5, #1
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	9306      	str	r3, [sp, #24]
 8005dda:	9508      	str	r5, [sp, #32]
 8005ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8005de0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005de4:	2200      	movs	r2, #0
 8005de6:	2312      	movs	r3, #18
 8005de8:	e7b0      	b.n	8005d4c <_dtoa_r+0x26c>
 8005dea:	2301      	movs	r3, #1
 8005dec:	9308      	str	r3, [sp, #32]
 8005dee:	e7f5      	b.n	8005ddc <_dtoa_r+0x2fc>
 8005df0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005df2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005df6:	e7b8      	b.n	8005d6a <_dtoa_r+0x28a>
 8005df8:	3101      	adds	r1, #1
 8005dfa:	6041      	str	r1, [r0, #4]
 8005dfc:	0052      	lsls	r2, r2, #1
 8005dfe:	e7b8      	b.n	8005d72 <_dtoa_r+0x292>
 8005e00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e02:	9a01      	ldr	r2, [sp, #4]
 8005e04:	601a      	str	r2, [r3, #0]
 8005e06:	9b03      	ldr	r3, [sp, #12]
 8005e08:	2b0e      	cmp	r3, #14
 8005e0a:	f200 809d 	bhi.w	8005f48 <_dtoa_r+0x468>
 8005e0e:	2d00      	cmp	r5, #0
 8005e10:	f000 809a 	beq.w	8005f48 <_dtoa_r+0x468>
 8005e14:	9b00      	ldr	r3, [sp, #0]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	dd32      	ble.n	8005e80 <_dtoa_r+0x3a0>
 8005e1a:	4ab7      	ldr	r2, [pc, #732]	; (80060f8 <_dtoa_r+0x618>)
 8005e1c:	f003 030f 	and.w	r3, r3, #15
 8005e20:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005e24:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005e28:	9b00      	ldr	r3, [sp, #0]
 8005e2a:	05d8      	lsls	r0, r3, #23
 8005e2c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005e30:	d516      	bpl.n	8005e60 <_dtoa_r+0x380>
 8005e32:	4bb2      	ldr	r3, [pc, #712]	; (80060fc <_dtoa_r+0x61c>)
 8005e34:	ec51 0b19 	vmov	r0, r1, d9
 8005e38:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005e3c:	f7fa fd0e 	bl	800085c <__aeabi_ddiv>
 8005e40:	f007 070f 	and.w	r7, r7, #15
 8005e44:	4682      	mov	sl, r0
 8005e46:	468b      	mov	fp, r1
 8005e48:	2503      	movs	r5, #3
 8005e4a:	4eac      	ldr	r6, [pc, #688]	; (80060fc <_dtoa_r+0x61c>)
 8005e4c:	b957      	cbnz	r7, 8005e64 <_dtoa_r+0x384>
 8005e4e:	4642      	mov	r2, r8
 8005e50:	464b      	mov	r3, r9
 8005e52:	4650      	mov	r0, sl
 8005e54:	4659      	mov	r1, fp
 8005e56:	f7fa fd01 	bl	800085c <__aeabi_ddiv>
 8005e5a:	4682      	mov	sl, r0
 8005e5c:	468b      	mov	fp, r1
 8005e5e:	e028      	b.n	8005eb2 <_dtoa_r+0x3d2>
 8005e60:	2502      	movs	r5, #2
 8005e62:	e7f2      	b.n	8005e4a <_dtoa_r+0x36a>
 8005e64:	07f9      	lsls	r1, r7, #31
 8005e66:	d508      	bpl.n	8005e7a <_dtoa_r+0x39a>
 8005e68:	4640      	mov	r0, r8
 8005e6a:	4649      	mov	r1, r9
 8005e6c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005e70:	f7fa fbca 	bl	8000608 <__aeabi_dmul>
 8005e74:	3501      	adds	r5, #1
 8005e76:	4680      	mov	r8, r0
 8005e78:	4689      	mov	r9, r1
 8005e7a:	107f      	asrs	r7, r7, #1
 8005e7c:	3608      	adds	r6, #8
 8005e7e:	e7e5      	b.n	8005e4c <_dtoa_r+0x36c>
 8005e80:	f000 809b 	beq.w	8005fba <_dtoa_r+0x4da>
 8005e84:	9b00      	ldr	r3, [sp, #0]
 8005e86:	4f9d      	ldr	r7, [pc, #628]	; (80060fc <_dtoa_r+0x61c>)
 8005e88:	425e      	negs	r6, r3
 8005e8a:	4b9b      	ldr	r3, [pc, #620]	; (80060f8 <_dtoa_r+0x618>)
 8005e8c:	f006 020f 	and.w	r2, r6, #15
 8005e90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e98:	ec51 0b19 	vmov	r0, r1, d9
 8005e9c:	f7fa fbb4 	bl	8000608 <__aeabi_dmul>
 8005ea0:	1136      	asrs	r6, r6, #4
 8005ea2:	4682      	mov	sl, r0
 8005ea4:	468b      	mov	fp, r1
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	2502      	movs	r5, #2
 8005eaa:	2e00      	cmp	r6, #0
 8005eac:	d17a      	bne.n	8005fa4 <_dtoa_r+0x4c4>
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d1d3      	bne.n	8005e5a <_dtoa_r+0x37a>
 8005eb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	f000 8082 	beq.w	8005fbe <_dtoa_r+0x4de>
 8005eba:	4b91      	ldr	r3, [pc, #580]	; (8006100 <_dtoa_r+0x620>)
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	4650      	mov	r0, sl
 8005ec0:	4659      	mov	r1, fp
 8005ec2:	f7fa fe13 	bl	8000aec <__aeabi_dcmplt>
 8005ec6:	2800      	cmp	r0, #0
 8005ec8:	d079      	beq.n	8005fbe <_dtoa_r+0x4de>
 8005eca:	9b03      	ldr	r3, [sp, #12]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d076      	beq.n	8005fbe <_dtoa_r+0x4de>
 8005ed0:	9b02      	ldr	r3, [sp, #8]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	dd36      	ble.n	8005f44 <_dtoa_r+0x464>
 8005ed6:	9b00      	ldr	r3, [sp, #0]
 8005ed8:	4650      	mov	r0, sl
 8005eda:	4659      	mov	r1, fp
 8005edc:	1e5f      	subs	r7, r3, #1
 8005ede:	2200      	movs	r2, #0
 8005ee0:	4b88      	ldr	r3, [pc, #544]	; (8006104 <_dtoa_r+0x624>)
 8005ee2:	f7fa fb91 	bl	8000608 <__aeabi_dmul>
 8005ee6:	9e02      	ldr	r6, [sp, #8]
 8005ee8:	4682      	mov	sl, r0
 8005eea:	468b      	mov	fp, r1
 8005eec:	3501      	adds	r5, #1
 8005eee:	4628      	mov	r0, r5
 8005ef0:	f7fa fb20 	bl	8000534 <__aeabi_i2d>
 8005ef4:	4652      	mov	r2, sl
 8005ef6:	465b      	mov	r3, fp
 8005ef8:	f7fa fb86 	bl	8000608 <__aeabi_dmul>
 8005efc:	4b82      	ldr	r3, [pc, #520]	; (8006108 <_dtoa_r+0x628>)
 8005efe:	2200      	movs	r2, #0
 8005f00:	f7fa f9cc 	bl	800029c <__adddf3>
 8005f04:	46d0      	mov	r8, sl
 8005f06:	46d9      	mov	r9, fp
 8005f08:	4682      	mov	sl, r0
 8005f0a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005f0e:	2e00      	cmp	r6, #0
 8005f10:	d158      	bne.n	8005fc4 <_dtoa_r+0x4e4>
 8005f12:	4b7e      	ldr	r3, [pc, #504]	; (800610c <_dtoa_r+0x62c>)
 8005f14:	2200      	movs	r2, #0
 8005f16:	4640      	mov	r0, r8
 8005f18:	4649      	mov	r1, r9
 8005f1a:	f7fa f9bd 	bl	8000298 <__aeabi_dsub>
 8005f1e:	4652      	mov	r2, sl
 8005f20:	465b      	mov	r3, fp
 8005f22:	4680      	mov	r8, r0
 8005f24:	4689      	mov	r9, r1
 8005f26:	f7fa fdff 	bl	8000b28 <__aeabi_dcmpgt>
 8005f2a:	2800      	cmp	r0, #0
 8005f2c:	f040 8295 	bne.w	800645a <_dtoa_r+0x97a>
 8005f30:	4652      	mov	r2, sl
 8005f32:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005f36:	4640      	mov	r0, r8
 8005f38:	4649      	mov	r1, r9
 8005f3a:	f7fa fdd7 	bl	8000aec <__aeabi_dcmplt>
 8005f3e:	2800      	cmp	r0, #0
 8005f40:	f040 8289 	bne.w	8006456 <_dtoa_r+0x976>
 8005f44:	ec5b ab19 	vmov	sl, fp, d9
 8005f48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	f2c0 8148 	blt.w	80061e0 <_dtoa_r+0x700>
 8005f50:	9a00      	ldr	r2, [sp, #0]
 8005f52:	2a0e      	cmp	r2, #14
 8005f54:	f300 8144 	bgt.w	80061e0 <_dtoa_r+0x700>
 8005f58:	4b67      	ldr	r3, [pc, #412]	; (80060f8 <_dtoa_r+0x618>)
 8005f5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f5e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005f62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	f280 80d5 	bge.w	8006114 <_dtoa_r+0x634>
 8005f6a:	9b03      	ldr	r3, [sp, #12]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	f300 80d1 	bgt.w	8006114 <_dtoa_r+0x634>
 8005f72:	f040 826f 	bne.w	8006454 <_dtoa_r+0x974>
 8005f76:	4b65      	ldr	r3, [pc, #404]	; (800610c <_dtoa_r+0x62c>)
 8005f78:	2200      	movs	r2, #0
 8005f7a:	4640      	mov	r0, r8
 8005f7c:	4649      	mov	r1, r9
 8005f7e:	f7fa fb43 	bl	8000608 <__aeabi_dmul>
 8005f82:	4652      	mov	r2, sl
 8005f84:	465b      	mov	r3, fp
 8005f86:	f7fa fdc5 	bl	8000b14 <__aeabi_dcmpge>
 8005f8a:	9e03      	ldr	r6, [sp, #12]
 8005f8c:	4637      	mov	r7, r6
 8005f8e:	2800      	cmp	r0, #0
 8005f90:	f040 8245 	bne.w	800641e <_dtoa_r+0x93e>
 8005f94:	9d01      	ldr	r5, [sp, #4]
 8005f96:	2331      	movs	r3, #49	; 0x31
 8005f98:	f805 3b01 	strb.w	r3, [r5], #1
 8005f9c:	9b00      	ldr	r3, [sp, #0]
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	9300      	str	r3, [sp, #0]
 8005fa2:	e240      	b.n	8006426 <_dtoa_r+0x946>
 8005fa4:	07f2      	lsls	r2, r6, #31
 8005fa6:	d505      	bpl.n	8005fb4 <_dtoa_r+0x4d4>
 8005fa8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fac:	f7fa fb2c 	bl	8000608 <__aeabi_dmul>
 8005fb0:	3501      	adds	r5, #1
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	1076      	asrs	r6, r6, #1
 8005fb6:	3708      	adds	r7, #8
 8005fb8:	e777      	b.n	8005eaa <_dtoa_r+0x3ca>
 8005fba:	2502      	movs	r5, #2
 8005fbc:	e779      	b.n	8005eb2 <_dtoa_r+0x3d2>
 8005fbe:	9f00      	ldr	r7, [sp, #0]
 8005fc0:	9e03      	ldr	r6, [sp, #12]
 8005fc2:	e794      	b.n	8005eee <_dtoa_r+0x40e>
 8005fc4:	9901      	ldr	r1, [sp, #4]
 8005fc6:	4b4c      	ldr	r3, [pc, #304]	; (80060f8 <_dtoa_r+0x618>)
 8005fc8:	4431      	add	r1, r6
 8005fca:	910d      	str	r1, [sp, #52]	; 0x34
 8005fcc:	9908      	ldr	r1, [sp, #32]
 8005fce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005fd2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005fd6:	2900      	cmp	r1, #0
 8005fd8:	d043      	beq.n	8006062 <_dtoa_r+0x582>
 8005fda:	494d      	ldr	r1, [pc, #308]	; (8006110 <_dtoa_r+0x630>)
 8005fdc:	2000      	movs	r0, #0
 8005fde:	f7fa fc3d 	bl	800085c <__aeabi_ddiv>
 8005fe2:	4652      	mov	r2, sl
 8005fe4:	465b      	mov	r3, fp
 8005fe6:	f7fa f957 	bl	8000298 <__aeabi_dsub>
 8005fea:	9d01      	ldr	r5, [sp, #4]
 8005fec:	4682      	mov	sl, r0
 8005fee:	468b      	mov	fp, r1
 8005ff0:	4649      	mov	r1, r9
 8005ff2:	4640      	mov	r0, r8
 8005ff4:	f7fa fdb8 	bl	8000b68 <__aeabi_d2iz>
 8005ff8:	4606      	mov	r6, r0
 8005ffa:	f7fa fa9b 	bl	8000534 <__aeabi_i2d>
 8005ffe:	4602      	mov	r2, r0
 8006000:	460b      	mov	r3, r1
 8006002:	4640      	mov	r0, r8
 8006004:	4649      	mov	r1, r9
 8006006:	f7fa f947 	bl	8000298 <__aeabi_dsub>
 800600a:	3630      	adds	r6, #48	; 0x30
 800600c:	f805 6b01 	strb.w	r6, [r5], #1
 8006010:	4652      	mov	r2, sl
 8006012:	465b      	mov	r3, fp
 8006014:	4680      	mov	r8, r0
 8006016:	4689      	mov	r9, r1
 8006018:	f7fa fd68 	bl	8000aec <__aeabi_dcmplt>
 800601c:	2800      	cmp	r0, #0
 800601e:	d163      	bne.n	80060e8 <_dtoa_r+0x608>
 8006020:	4642      	mov	r2, r8
 8006022:	464b      	mov	r3, r9
 8006024:	4936      	ldr	r1, [pc, #216]	; (8006100 <_dtoa_r+0x620>)
 8006026:	2000      	movs	r0, #0
 8006028:	f7fa f936 	bl	8000298 <__aeabi_dsub>
 800602c:	4652      	mov	r2, sl
 800602e:	465b      	mov	r3, fp
 8006030:	f7fa fd5c 	bl	8000aec <__aeabi_dcmplt>
 8006034:	2800      	cmp	r0, #0
 8006036:	f040 80b5 	bne.w	80061a4 <_dtoa_r+0x6c4>
 800603a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800603c:	429d      	cmp	r5, r3
 800603e:	d081      	beq.n	8005f44 <_dtoa_r+0x464>
 8006040:	4b30      	ldr	r3, [pc, #192]	; (8006104 <_dtoa_r+0x624>)
 8006042:	2200      	movs	r2, #0
 8006044:	4650      	mov	r0, sl
 8006046:	4659      	mov	r1, fp
 8006048:	f7fa fade 	bl	8000608 <__aeabi_dmul>
 800604c:	4b2d      	ldr	r3, [pc, #180]	; (8006104 <_dtoa_r+0x624>)
 800604e:	4682      	mov	sl, r0
 8006050:	468b      	mov	fp, r1
 8006052:	4640      	mov	r0, r8
 8006054:	4649      	mov	r1, r9
 8006056:	2200      	movs	r2, #0
 8006058:	f7fa fad6 	bl	8000608 <__aeabi_dmul>
 800605c:	4680      	mov	r8, r0
 800605e:	4689      	mov	r9, r1
 8006060:	e7c6      	b.n	8005ff0 <_dtoa_r+0x510>
 8006062:	4650      	mov	r0, sl
 8006064:	4659      	mov	r1, fp
 8006066:	f7fa facf 	bl	8000608 <__aeabi_dmul>
 800606a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800606c:	9d01      	ldr	r5, [sp, #4]
 800606e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006070:	4682      	mov	sl, r0
 8006072:	468b      	mov	fp, r1
 8006074:	4649      	mov	r1, r9
 8006076:	4640      	mov	r0, r8
 8006078:	f7fa fd76 	bl	8000b68 <__aeabi_d2iz>
 800607c:	4606      	mov	r6, r0
 800607e:	f7fa fa59 	bl	8000534 <__aeabi_i2d>
 8006082:	3630      	adds	r6, #48	; 0x30
 8006084:	4602      	mov	r2, r0
 8006086:	460b      	mov	r3, r1
 8006088:	4640      	mov	r0, r8
 800608a:	4649      	mov	r1, r9
 800608c:	f7fa f904 	bl	8000298 <__aeabi_dsub>
 8006090:	f805 6b01 	strb.w	r6, [r5], #1
 8006094:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006096:	429d      	cmp	r5, r3
 8006098:	4680      	mov	r8, r0
 800609a:	4689      	mov	r9, r1
 800609c:	f04f 0200 	mov.w	r2, #0
 80060a0:	d124      	bne.n	80060ec <_dtoa_r+0x60c>
 80060a2:	4b1b      	ldr	r3, [pc, #108]	; (8006110 <_dtoa_r+0x630>)
 80060a4:	4650      	mov	r0, sl
 80060a6:	4659      	mov	r1, fp
 80060a8:	f7fa f8f8 	bl	800029c <__adddf3>
 80060ac:	4602      	mov	r2, r0
 80060ae:	460b      	mov	r3, r1
 80060b0:	4640      	mov	r0, r8
 80060b2:	4649      	mov	r1, r9
 80060b4:	f7fa fd38 	bl	8000b28 <__aeabi_dcmpgt>
 80060b8:	2800      	cmp	r0, #0
 80060ba:	d173      	bne.n	80061a4 <_dtoa_r+0x6c4>
 80060bc:	4652      	mov	r2, sl
 80060be:	465b      	mov	r3, fp
 80060c0:	4913      	ldr	r1, [pc, #76]	; (8006110 <_dtoa_r+0x630>)
 80060c2:	2000      	movs	r0, #0
 80060c4:	f7fa f8e8 	bl	8000298 <__aeabi_dsub>
 80060c8:	4602      	mov	r2, r0
 80060ca:	460b      	mov	r3, r1
 80060cc:	4640      	mov	r0, r8
 80060ce:	4649      	mov	r1, r9
 80060d0:	f7fa fd0c 	bl	8000aec <__aeabi_dcmplt>
 80060d4:	2800      	cmp	r0, #0
 80060d6:	f43f af35 	beq.w	8005f44 <_dtoa_r+0x464>
 80060da:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80060dc:	1e6b      	subs	r3, r5, #1
 80060de:	930f      	str	r3, [sp, #60]	; 0x3c
 80060e0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80060e4:	2b30      	cmp	r3, #48	; 0x30
 80060e6:	d0f8      	beq.n	80060da <_dtoa_r+0x5fa>
 80060e8:	9700      	str	r7, [sp, #0]
 80060ea:	e049      	b.n	8006180 <_dtoa_r+0x6a0>
 80060ec:	4b05      	ldr	r3, [pc, #20]	; (8006104 <_dtoa_r+0x624>)
 80060ee:	f7fa fa8b 	bl	8000608 <__aeabi_dmul>
 80060f2:	4680      	mov	r8, r0
 80060f4:	4689      	mov	r9, r1
 80060f6:	e7bd      	b.n	8006074 <_dtoa_r+0x594>
 80060f8:	08008028 	.word	0x08008028
 80060fc:	08008000 	.word	0x08008000
 8006100:	3ff00000 	.word	0x3ff00000
 8006104:	40240000 	.word	0x40240000
 8006108:	401c0000 	.word	0x401c0000
 800610c:	40140000 	.word	0x40140000
 8006110:	3fe00000 	.word	0x3fe00000
 8006114:	9d01      	ldr	r5, [sp, #4]
 8006116:	4656      	mov	r6, sl
 8006118:	465f      	mov	r7, fp
 800611a:	4642      	mov	r2, r8
 800611c:	464b      	mov	r3, r9
 800611e:	4630      	mov	r0, r6
 8006120:	4639      	mov	r1, r7
 8006122:	f7fa fb9b 	bl	800085c <__aeabi_ddiv>
 8006126:	f7fa fd1f 	bl	8000b68 <__aeabi_d2iz>
 800612a:	4682      	mov	sl, r0
 800612c:	f7fa fa02 	bl	8000534 <__aeabi_i2d>
 8006130:	4642      	mov	r2, r8
 8006132:	464b      	mov	r3, r9
 8006134:	f7fa fa68 	bl	8000608 <__aeabi_dmul>
 8006138:	4602      	mov	r2, r0
 800613a:	460b      	mov	r3, r1
 800613c:	4630      	mov	r0, r6
 800613e:	4639      	mov	r1, r7
 8006140:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006144:	f7fa f8a8 	bl	8000298 <__aeabi_dsub>
 8006148:	f805 6b01 	strb.w	r6, [r5], #1
 800614c:	9e01      	ldr	r6, [sp, #4]
 800614e:	9f03      	ldr	r7, [sp, #12]
 8006150:	1bae      	subs	r6, r5, r6
 8006152:	42b7      	cmp	r7, r6
 8006154:	4602      	mov	r2, r0
 8006156:	460b      	mov	r3, r1
 8006158:	d135      	bne.n	80061c6 <_dtoa_r+0x6e6>
 800615a:	f7fa f89f 	bl	800029c <__adddf3>
 800615e:	4642      	mov	r2, r8
 8006160:	464b      	mov	r3, r9
 8006162:	4606      	mov	r6, r0
 8006164:	460f      	mov	r7, r1
 8006166:	f7fa fcdf 	bl	8000b28 <__aeabi_dcmpgt>
 800616a:	b9d0      	cbnz	r0, 80061a2 <_dtoa_r+0x6c2>
 800616c:	4642      	mov	r2, r8
 800616e:	464b      	mov	r3, r9
 8006170:	4630      	mov	r0, r6
 8006172:	4639      	mov	r1, r7
 8006174:	f7fa fcb0 	bl	8000ad8 <__aeabi_dcmpeq>
 8006178:	b110      	cbz	r0, 8006180 <_dtoa_r+0x6a0>
 800617a:	f01a 0f01 	tst.w	sl, #1
 800617e:	d110      	bne.n	80061a2 <_dtoa_r+0x6c2>
 8006180:	4620      	mov	r0, r4
 8006182:	ee18 1a10 	vmov	r1, s16
 8006186:	f000 faf3 	bl	8006770 <_Bfree>
 800618a:	2300      	movs	r3, #0
 800618c:	9800      	ldr	r0, [sp, #0]
 800618e:	702b      	strb	r3, [r5, #0]
 8006190:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006192:	3001      	adds	r0, #1
 8006194:	6018      	str	r0, [r3, #0]
 8006196:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006198:	2b00      	cmp	r3, #0
 800619a:	f43f acf1 	beq.w	8005b80 <_dtoa_r+0xa0>
 800619e:	601d      	str	r5, [r3, #0]
 80061a0:	e4ee      	b.n	8005b80 <_dtoa_r+0xa0>
 80061a2:	9f00      	ldr	r7, [sp, #0]
 80061a4:	462b      	mov	r3, r5
 80061a6:	461d      	mov	r5, r3
 80061a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80061ac:	2a39      	cmp	r2, #57	; 0x39
 80061ae:	d106      	bne.n	80061be <_dtoa_r+0x6de>
 80061b0:	9a01      	ldr	r2, [sp, #4]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d1f7      	bne.n	80061a6 <_dtoa_r+0x6c6>
 80061b6:	9901      	ldr	r1, [sp, #4]
 80061b8:	2230      	movs	r2, #48	; 0x30
 80061ba:	3701      	adds	r7, #1
 80061bc:	700a      	strb	r2, [r1, #0]
 80061be:	781a      	ldrb	r2, [r3, #0]
 80061c0:	3201      	adds	r2, #1
 80061c2:	701a      	strb	r2, [r3, #0]
 80061c4:	e790      	b.n	80060e8 <_dtoa_r+0x608>
 80061c6:	4ba6      	ldr	r3, [pc, #664]	; (8006460 <_dtoa_r+0x980>)
 80061c8:	2200      	movs	r2, #0
 80061ca:	f7fa fa1d 	bl	8000608 <__aeabi_dmul>
 80061ce:	2200      	movs	r2, #0
 80061d0:	2300      	movs	r3, #0
 80061d2:	4606      	mov	r6, r0
 80061d4:	460f      	mov	r7, r1
 80061d6:	f7fa fc7f 	bl	8000ad8 <__aeabi_dcmpeq>
 80061da:	2800      	cmp	r0, #0
 80061dc:	d09d      	beq.n	800611a <_dtoa_r+0x63a>
 80061de:	e7cf      	b.n	8006180 <_dtoa_r+0x6a0>
 80061e0:	9a08      	ldr	r2, [sp, #32]
 80061e2:	2a00      	cmp	r2, #0
 80061e4:	f000 80d7 	beq.w	8006396 <_dtoa_r+0x8b6>
 80061e8:	9a06      	ldr	r2, [sp, #24]
 80061ea:	2a01      	cmp	r2, #1
 80061ec:	f300 80ba 	bgt.w	8006364 <_dtoa_r+0x884>
 80061f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80061f2:	2a00      	cmp	r2, #0
 80061f4:	f000 80b2 	beq.w	800635c <_dtoa_r+0x87c>
 80061f8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80061fc:	9e07      	ldr	r6, [sp, #28]
 80061fe:	9d04      	ldr	r5, [sp, #16]
 8006200:	9a04      	ldr	r2, [sp, #16]
 8006202:	441a      	add	r2, r3
 8006204:	9204      	str	r2, [sp, #16]
 8006206:	9a05      	ldr	r2, [sp, #20]
 8006208:	2101      	movs	r1, #1
 800620a:	441a      	add	r2, r3
 800620c:	4620      	mov	r0, r4
 800620e:	9205      	str	r2, [sp, #20]
 8006210:	f000 fb66 	bl	80068e0 <__i2b>
 8006214:	4607      	mov	r7, r0
 8006216:	2d00      	cmp	r5, #0
 8006218:	dd0c      	ble.n	8006234 <_dtoa_r+0x754>
 800621a:	9b05      	ldr	r3, [sp, #20]
 800621c:	2b00      	cmp	r3, #0
 800621e:	dd09      	ble.n	8006234 <_dtoa_r+0x754>
 8006220:	42ab      	cmp	r3, r5
 8006222:	9a04      	ldr	r2, [sp, #16]
 8006224:	bfa8      	it	ge
 8006226:	462b      	movge	r3, r5
 8006228:	1ad2      	subs	r2, r2, r3
 800622a:	9204      	str	r2, [sp, #16]
 800622c:	9a05      	ldr	r2, [sp, #20]
 800622e:	1aed      	subs	r5, r5, r3
 8006230:	1ad3      	subs	r3, r2, r3
 8006232:	9305      	str	r3, [sp, #20]
 8006234:	9b07      	ldr	r3, [sp, #28]
 8006236:	b31b      	cbz	r3, 8006280 <_dtoa_r+0x7a0>
 8006238:	9b08      	ldr	r3, [sp, #32]
 800623a:	2b00      	cmp	r3, #0
 800623c:	f000 80af 	beq.w	800639e <_dtoa_r+0x8be>
 8006240:	2e00      	cmp	r6, #0
 8006242:	dd13      	ble.n	800626c <_dtoa_r+0x78c>
 8006244:	4639      	mov	r1, r7
 8006246:	4632      	mov	r2, r6
 8006248:	4620      	mov	r0, r4
 800624a:	f000 fc09 	bl	8006a60 <__pow5mult>
 800624e:	ee18 2a10 	vmov	r2, s16
 8006252:	4601      	mov	r1, r0
 8006254:	4607      	mov	r7, r0
 8006256:	4620      	mov	r0, r4
 8006258:	f000 fb58 	bl	800690c <__multiply>
 800625c:	ee18 1a10 	vmov	r1, s16
 8006260:	4680      	mov	r8, r0
 8006262:	4620      	mov	r0, r4
 8006264:	f000 fa84 	bl	8006770 <_Bfree>
 8006268:	ee08 8a10 	vmov	s16, r8
 800626c:	9b07      	ldr	r3, [sp, #28]
 800626e:	1b9a      	subs	r2, r3, r6
 8006270:	d006      	beq.n	8006280 <_dtoa_r+0x7a0>
 8006272:	ee18 1a10 	vmov	r1, s16
 8006276:	4620      	mov	r0, r4
 8006278:	f000 fbf2 	bl	8006a60 <__pow5mult>
 800627c:	ee08 0a10 	vmov	s16, r0
 8006280:	2101      	movs	r1, #1
 8006282:	4620      	mov	r0, r4
 8006284:	f000 fb2c 	bl	80068e0 <__i2b>
 8006288:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800628a:	2b00      	cmp	r3, #0
 800628c:	4606      	mov	r6, r0
 800628e:	f340 8088 	ble.w	80063a2 <_dtoa_r+0x8c2>
 8006292:	461a      	mov	r2, r3
 8006294:	4601      	mov	r1, r0
 8006296:	4620      	mov	r0, r4
 8006298:	f000 fbe2 	bl	8006a60 <__pow5mult>
 800629c:	9b06      	ldr	r3, [sp, #24]
 800629e:	2b01      	cmp	r3, #1
 80062a0:	4606      	mov	r6, r0
 80062a2:	f340 8081 	ble.w	80063a8 <_dtoa_r+0x8c8>
 80062a6:	f04f 0800 	mov.w	r8, #0
 80062aa:	6933      	ldr	r3, [r6, #16]
 80062ac:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80062b0:	6918      	ldr	r0, [r3, #16]
 80062b2:	f000 fac5 	bl	8006840 <__hi0bits>
 80062b6:	f1c0 0020 	rsb	r0, r0, #32
 80062ba:	9b05      	ldr	r3, [sp, #20]
 80062bc:	4418      	add	r0, r3
 80062be:	f010 001f 	ands.w	r0, r0, #31
 80062c2:	f000 8092 	beq.w	80063ea <_dtoa_r+0x90a>
 80062c6:	f1c0 0320 	rsb	r3, r0, #32
 80062ca:	2b04      	cmp	r3, #4
 80062cc:	f340 808a 	ble.w	80063e4 <_dtoa_r+0x904>
 80062d0:	f1c0 001c 	rsb	r0, r0, #28
 80062d4:	9b04      	ldr	r3, [sp, #16]
 80062d6:	4403      	add	r3, r0
 80062d8:	9304      	str	r3, [sp, #16]
 80062da:	9b05      	ldr	r3, [sp, #20]
 80062dc:	4403      	add	r3, r0
 80062de:	4405      	add	r5, r0
 80062e0:	9305      	str	r3, [sp, #20]
 80062e2:	9b04      	ldr	r3, [sp, #16]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	dd07      	ble.n	80062f8 <_dtoa_r+0x818>
 80062e8:	ee18 1a10 	vmov	r1, s16
 80062ec:	461a      	mov	r2, r3
 80062ee:	4620      	mov	r0, r4
 80062f0:	f000 fc10 	bl	8006b14 <__lshift>
 80062f4:	ee08 0a10 	vmov	s16, r0
 80062f8:	9b05      	ldr	r3, [sp, #20]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	dd05      	ble.n	800630a <_dtoa_r+0x82a>
 80062fe:	4631      	mov	r1, r6
 8006300:	461a      	mov	r2, r3
 8006302:	4620      	mov	r0, r4
 8006304:	f000 fc06 	bl	8006b14 <__lshift>
 8006308:	4606      	mov	r6, r0
 800630a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800630c:	2b00      	cmp	r3, #0
 800630e:	d06e      	beq.n	80063ee <_dtoa_r+0x90e>
 8006310:	ee18 0a10 	vmov	r0, s16
 8006314:	4631      	mov	r1, r6
 8006316:	f000 fc6d 	bl	8006bf4 <__mcmp>
 800631a:	2800      	cmp	r0, #0
 800631c:	da67      	bge.n	80063ee <_dtoa_r+0x90e>
 800631e:	9b00      	ldr	r3, [sp, #0]
 8006320:	3b01      	subs	r3, #1
 8006322:	ee18 1a10 	vmov	r1, s16
 8006326:	9300      	str	r3, [sp, #0]
 8006328:	220a      	movs	r2, #10
 800632a:	2300      	movs	r3, #0
 800632c:	4620      	mov	r0, r4
 800632e:	f000 fa41 	bl	80067b4 <__multadd>
 8006332:	9b08      	ldr	r3, [sp, #32]
 8006334:	ee08 0a10 	vmov	s16, r0
 8006338:	2b00      	cmp	r3, #0
 800633a:	f000 81b1 	beq.w	80066a0 <_dtoa_r+0xbc0>
 800633e:	2300      	movs	r3, #0
 8006340:	4639      	mov	r1, r7
 8006342:	220a      	movs	r2, #10
 8006344:	4620      	mov	r0, r4
 8006346:	f000 fa35 	bl	80067b4 <__multadd>
 800634a:	9b02      	ldr	r3, [sp, #8]
 800634c:	2b00      	cmp	r3, #0
 800634e:	4607      	mov	r7, r0
 8006350:	f300 808e 	bgt.w	8006470 <_dtoa_r+0x990>
 8006354:	9b06      	ldr	r3, [sp, #24]
 8006356:	2b02      	cmp	r3, #2
 8006358:	dc51      	bgt.n	80063fe <_dtoa_r+0x91e>
 800635a:	e089      	b.n	8006470 <_dtoa_r+0x990>
 800635c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800635e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006362:	e74b      	b.n	80061fc <_dtoa_r+0x71c>
 8006364:	9b03      	ldr	r3, [sp, #12]
 8006366:	1e5e      	subs	r6, r3, #1
 8006368:	9b07      	ldr	r3, [sp, #28]
 800636a:	42b3      	cmp	r3, r6
 800636c:	bfbf      	itttt	lt
 800636e:	9b07      	ldrlt	r3, [sp, #28]
 8006370:	9607      	strlt	r6, [sp, #28]
 8006372:	1af2      	sublt	r2, r6, r3
 8006374:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006376:	bfb6      	itet	lt
 8006378:	189b      	addlt	r3, r3, r2
 800637a:	1b9e      	subge	r6, r3, r6
 800637c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800637e:	9b03      	ldr	r3, [sp, #12]
 8006380:	bfb8      	it	lt
 8006382:	2600      	movlt	r6, #0
 8006384:	2b00      	cmp	r3, #0
 8006386:	bfb7      	itett	lt
 8006388:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800638c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006390:	1a9d      	sublt	r5, r3, r2
 8006392:	2300      	movlt	r3, #0
 8006394:	e734      	b.n	8006200 <_dtoa_r+0x720>
 8006396:	9e07      	ldr	r6, [sp, #28]
 8006398:	9d04      	ldr	r5, [sp, #16]
 800639a:	9f08      	ldr	r7, [sp, #32]
 800639c:	e73b      	b.n	8006216 <_dtoa_r+0x736>
 800639e:	9a07      	ldr	r2, [sp, #28]
 80063a0:	e767      	b.n	8006272 <_dtoa_r+0x792>
 80063a2:	9b06      	ldr	r3, [sp, #24]
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	dc18      	bgt.n	80063da <_dtoa_r+0x8fa>
 80063a8:	f1ba 0f00 	cmp.w	sl, #0
 80063ac:	d115      	bne.n	80063da <_dtoa_r+0x8fa>
 80063ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80063b2:	b993      	cbnz	r3, 80063da <_dtoa_r+0x8fa>
 80063b4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80063b8:	0d1b      	lsrs	r3, r3, #20
 80063ba:	051b      	lsls	r3, r3, #20
 80063bc:	b183      	cbz	r3, 80063e0 <_dtoa_r+0x900>
 80063be:	9b04      	ldr	r3, [sp, #16]
 80063c0:	3301      	adds	r3, #1
 80063c2:	9304      	str	r3, [sp, #16]
 80063c4:	9b05      	ldr	r3, [sp, #20]
 80063c6:	3301      	adds	r3, #1
 80063c8:	9305      	str	r3, [sp, #20]
 80063ca:	f04f 0801 	mov.w	r8, #1
 80063ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	f47f af6a 	bne.w	80062aa <_dtoa_r+0x7ca>
 80063d6:	2001      	movs	r0, #1
 80063d8:	e76f      	b.n	80062ba <_dtoa_r+0x7da>
 80063da:	f04f 0800 	mov.w	r8, #0
 80063de:	e7f6      	b.n	80063ce <_dtoa_r+0x8ee>
 80063e0:	4698      	mov	r8, r3
 80063e2:	e7f4      	b.n	80063ce <_dtoa_r+0x8ee>
 80063e4:	f43f af7d 	beq.w	80062e2 <_dtoa_r+0x802>
 80063e8:	4618      	mov	r0, r3
 80063ea:	301c      	adds	r0, #28
 80063ec:	e772      	b.n	80062d4 <_dtoa_r+0x7f4>
 80063ee:	9b03      	ldr	r3, [sp, #12]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	dc37      	bgt.n	8006464 <_dtoa_r+0x984>
 80063f4:	9b06      	ldr	r3, [sp, #24]
 80063f6:	2b02      	cmp	r3, #2
 80063f8:	dd34      	ble.n	8006464 <_dtoa_r+0x984>
 80063fa:	9b03      	ldr	r3, [sp, #12]
 80063fc:	9302      	str	r3, [sp, #8]
 80063fe:	9b02      	ldr	r3, [sp, #8]
 8006400:	b96b      	cbnz	r3, 800641e <_dtoa_r+0x93e>
 8006402:	4631      	mov	r1, r6
 8006404:	2205      	movs	r2, #5
 8006406:	4620      	mov	r0, r4
 8006408:	f000 f9d4 	bl	80067b4 <__multadd>
 800640c:	4601      	mov	r1, r0
 800640e:	4606      	mov	r6, r0
 8006410:	ee18 0a10 	vmov	r0, s16
 8006414:	f000 fbee 	bl	8006bf4 <__mcmp>
 8006418:	2800      	cmp	r0, #0
 800641a:	f73f adbb 	bgt.w	8005f94 <_dtoa_r+0x4b4>
 800641e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006420:	9d01      	ldr	r5, [sp, #4]
 8006422:	43db      	mvns	r3, r3
 8006424:	9300      	str	r3, [sp, #0]
 8006426:	f04f 0800 	mov.w	r8, #0
 800642a:	4631      	mov	r1, r6
 800642c:	4620      	mov	r0, r4
 800642e:	f000 f99f 	bl	8006770 <_Bfree>
 8006432:	2f00      	cmp	r7, #0
 8006434:	f43f aea4 	beq.w	8006180 <_dtoa_r+0x6a0>
 8006438:	f1b8 0f00 	cmp.w	r8, #0
 800643c:	d005      	beq.n	800644a <_dtoa_r+0x96a>
 800643e:	45b8      	cmp	r8, r7
 8006440:	d003      	beq.n	800644a <_dtoa_r+0x96a>
 8006442:	4641      	mov	r1, r8
 8006444:	4620      	mov	r0, r4
 8006446:	f000 f993 	bl	8006770 <_Bfree>
 800644a:	4639      	mov	r1, r7
 800644c:	4620      	mov	r0, r4
 800644e:	f000 f98f 	bl	8006770 <_Bfree>
 8006452:	e695      	b.n	8006180 <_dtoa_r+0x6a0>
 8006454:	2600      	movs	r6, #0
 8006456:	4637      	mov	r7, r6
 8006458:	e7e1      	b.n	800641e <_dtoa_r+0x93e>
 800645a:	9700      	str	r7, [sp, #0]
 800645c:	4637      	mov	r7, r6
 800645e:	e599      	b.n	8005f94 <_dtoa_r+0x4b4>
 8006460:	40240000 	.word	0x40240000
 8006464:	9b08      	ldr	r3, [sp, #32]
 8006466:	2b00      	cmp	r3, #0
 8006468:	f000 80ca 	beq.w	8006600 <_dtoa_r+0xb20>
 800646c:	9b03      	ldr	r3, [sp, #12]
 800646e:	9302      	str	r3, [sp, #8]
 8006470:	2d00      	cmp	r5, #0
 8006472:	dd05      	ble.n	8006480 <_dtoa_r+0x9a0>
 8006474:	4639      	mov	r1, r7
 8006476:	462a      	mov	r2, r5
 8006478:	4620      	mov	r0, r4
 800647a:	f000 fb4b 	bl	8006b14 <__lshift>
 800647e:	4607      	mov	r7, r0
 8006480:	f1b8 0f00 	cmp.w	r8, #0
 8006484:	d05b      	beq.n	800653e <_dtoa_r+0xa5e>
 8006486:	6879      	ldr	r1, [r7, #4]
 8006488:	4620      	mov	r0, r4
 800648a:	f000 f931 	bl	80066f0 <_Balloc>
 800648e:	4605      	mov	r5, r0
 8006490:	b928      	cbnz	r0, 800649e <_dtoa_r+0x9be>
 8006492:	4b87      	ldr	r3, [pc, #540]	; (80066b0 <_dtoa_r+0xbd0>)
 8006494:	4602      	mov	r2, r0
 8006496:	f240 21ea 	movw	r1, #746	; 0x2ea
 800649a:	f7ff bb3b 	b.w	8005b14 <_dtoa_r+0x34>
 800649e:	693a      	ldr	r2, [r7, #16]
 80064a0:	3202      	adds	r2, #2
 80064a2:	0092      	lsls	r2, r2, #2
 80064a4:	f107 010c 	add.w	r1, r7, #12
 80064a8:	300c      	adds	r0, #12
 80064aa:	f000 f913 	bl	80066d4 <memcpy>
 80064ae:	2201      	movs	r2, #1
 80064b0:	4629      	mov	r1, r5
 80064b2:	4620      	mov	r0, r4
 80064b4:	f000 fb2e 	bl	8006b14 <__lshift>
 80064b8:	9b01      	ldr	r3, [sp, #4]
 80064ba:	f103 0901 	add.w	r9, r3, #1
 80064be:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80064c2:	4413      	add	r3, r2
 80064c4:	9305      	str	r3, [sp, #20]
 80064c6:	f00a 0301 	and.w	r3, sl, #1
 80064ca:	46b8      	mov	r8, r7
 80064cc:	9304      	str	r3, [sp, #16]
 80064ce:	4607      	mov	r7, r0
 80064d0:	4631      	mov	r1, r6
 80064d2:	ee18 0a10 	vmov	r0, s16
 80064d6:	f7ff fa77 	bl	80059c8 <quorem>
 80064da:	4641      	mov	r1, r8
 80064dc:	9002      	str	r0, [sp, #8]
 80064de:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80064e2:	ee18 0a10 	vmov	r0, s16
 80064e6:	f000 fb85 	bl	8006bf4 <__mcmp>
 80064ea:	463a      	mov	r2, r7
 80064ec:	9003      	str	r0, [sp, #12]
 80064ee:	4631      	mov	r1, r6
 80064f0:	4620      	mov	r0, r4
 80064f2:	f000 fb9b 	bl	8006c2c <__mdiff>
 80064f6:	68c2      	ldr	r2, [r0, #12]
 80064f8:	f109 3bff 	add.w	fp, r9, #4294967295
 80064fc:	4605      	mov	r5, r0
 80064fe:	bb02      	cbnz	r2, 8006542 <_dtoa_r+0xa62>
 8006500:	4601      	mov	r1, r0
 8006502:	ee18 0a10 	vmov	r0, s16
 8006506:	f000 fb75 	bl	8006bf4 <__mcmp>
 800650a:	4602      	mov	r2, r0
 800650c:	4629      	mov	r1, r5
 800650e:	4620      	mov	r0, r4
 8006510:	9207      	str	r2, [sp, #28]
 8006512:	f000 f92d 	bl	8006770 <_Bfree>
 8006516:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800651a:	ea43 0102 	orr.w	r1, r3, r2
 800651e:	9b04      	ldr	r3, [sp, #16]
 8006520:	430b      	orrs	r3, r1
 8006522:	464d      	mov	r5, r9
 8006524:	d10f      	bne.n	8006546 <_dtoa_r+0xa66>
 8006526:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800652a:	d02a      	beq.n	8006582 <_dtoa_r+0xaa2>
 800652c:	9b03      	ldr	r3, [sp, #12]
 800652e:	2b00      	cmp	r3, #0
 8006530:	dd02      	ble.n	8006538 <_dtoa_r+0xa58>
 8006532:	9b02      	ldr	r3, [sp, #8]
 8006534:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006538:	f88b a000 	strb.w	sl, [fp]
 800653c:	e775      	b.n	800642a <_dtoa_r+0x94a>
 800653e:	4638      	mov	r0, r7
 8006540:	e7ba      	b.n	80064b8 <_dtoa_r+0x9d8>
 8006542:	2201      	movs	r2, #1
 8006544:	e7e2      	b.n	800650c <_dtoa_r+0xa2c>
 8006546:	9b03      	ldr	r3, [sp, #12]
 8006548:	2b00      	cmp	r3, #0
 800654a:	db04      	blt.n	8006556 <_dtoa_r+0xa76>
 800654c:	9906      	ldr	r1, [sp, #24]
 800654e:	430b      	orrs	r3, r1
 8006550:	9904      	ldr	r1, [sp, #16]
 8006552:	430b      	orrs	r3, r1
 8006554:	d122      	bne.n	800659c <_dtoa_r+0xabc>
 8006556:	2a00      	cmp	r2, #0
 8006558:	ddee      	ble.n	8006538 <_dtoa_r+0xa58>
 800655a:	ee18 1a10 	vmov	r1, s16
 800655e:	2201      	movs	r2, #1
 8006560:	4620      	mov	r0, r4
 8006562:	f000 fad7 	bl	8006b14 <__lshift>
 8006566:	4631      	mov	r1, r6
 8006568:	ee08 0a10 	vmov	s16, r0
 800656c:	f000 fb42 	bl	8006bf4 <__mcmp>
 8006570:	2800      	cmp	r0, #0
 8006572:	dc03      	bgt.n	800657c <_dtoa_r+0xa9c>
 8006574:	d1e0      	bne.n	8006538 <_dtoa_r+0xa58>
 8006576:	f01a 0f01 	tst.w	sl, #1
 800657a:	d0dd      	beq.n	8006538 <_dtoa_r+0xa58>
 800657c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006580:	d1d7      	bne.n	8006532 <_dtoa_r+0xa52>
 8006582:	2339      	movs	r3, #57	; 0x39
 8006584:	f88b 3000 	strb.w	r3, [fp]
 8006588:	462b      	mov	r3, r5
 800658a:	461d      	mov	r5, r3
 800658c:	3b01      	subs	r3, #1
 800658e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006592:	2a39      	cmp	r2, #57	; 0x39
 8006594:	d071      	beq.n	800667a <_dtoa_r+0xb9a>
 8006596:	3201      	adds	r2, #1
 8006598:	701a      	strb	r2, [r3, #0]
 800659a:	e746      	b.n	800642a <_dtoa_r+0x94a>
 800659c:	2a00      	cmp	r2, #0
 800659e:	dd07      	ble.n	80065b0 <_dtoa_r+0xad0>
 80065a0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80065a4:	d0ed      	beq.n	8006582 <_dtoa_r+0xaa2>
 80065a6:	f10a 0301 	add.w	r3, sl, #1
 80065aa:	f88b 3000 	strb.w	r3, [fp]
 80065ae:	e73c      	b.n	800642a <_dtoa_r+0x94a>
 80065b0:	9b05      	ldr	r3, [sp, #20]
 80065b2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80065b6:	4599      	cmp	r9, r3
 80065b8:	d047      	beq.n	800664a <_dtoa_r+0xb6a>
 80065ba:	ee18 1a10 	vmov	r1, s16
 80065be:	2300      	movs	r3, #0
 80065c0:	220a      	movs	r2, #10
 80065c2:	4620      	mov	r0, r4
 80065c4:	f000 f8f6 	bl	80067b4 <__multadd>
 80065c8:	45b8      	cmp	r8, r7
 80065ca:	ee08 0a10 	vmov	s16, r0
 80065ce:	f04f 0300 	mov.w	r3, #0
 80065d2:	f04f 020a 	mov.w	r2, #10
 80065d6:	4641      	mov	r1, r8
 80065d8:	4620      	mov	r0, r4
 80065da:	d106      	bne.n	80065ea <_dtoa_r+0xb0a>
 80065dc:	f000 f8ea 	bl	80067b4 <__multadd>
 80065e0:	4680      	mov	r8, r0
 80065e2:	4607      	mov	r7, r0
 80065e4:	f109 0901 	add.w	r9, r9, #1
 80065e8:	e772      	b.n	80064d0 <_dtoa_r+0x9f0>
 80065ea:	f000 f8e3 	bl	80067b4 <__multadd>
 80065ee:	4639      	mov	r1, r7
 80065f0:	4680      	mov	r8, r0
 80065f2:	2300      	movs	r3, #0
 80065f4:	220a      	movs	r2, #10
 80065f6:	4620      	mov	r0, r4
 80065f8:	f000 f8dc 	bl	80067b4 <__multadd>
 80065fc:	4607      	mov	r7, r0
 80065fe:	e7f1      	b.n	80065e4 <_dtoa_r+0xb04>
 8006600:	9b03      	ldr	r3, [sp, #12]
 8006602:	9302      	str	r3, [sp, #8]
 8006604:	9d01      	ldr	r5, [sp, #4]
 8006606:	ee18 0a10 	vmov	r0, s16
 800660a:	4631      	mov	r1, r6
 800660c:	f7ff f9dc 	bl	80059c8 <quorem>
 8006610:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006614:	9b01      	ldr	r3, [sp, #4]
 8006616:	f805 ab01 	strb.w	sl, [r5], #1
 800661a:	1aea      	subs	r2, r5, r3
 800661c:	9b02      	ldr	r3, [sp, #8]
 800661e:	4293      	cmp	r3, r2
 8006620:	dd09      	ble.n	8006636 <_dtoa_r+0xb56>
 8006622:	ee18 1a10 	vmov	r1, s16
 8006626:	2300      	movs	r3, #0
 8006628:	220a      	movs	r2, #10
 800662a:	4620      	mov	r0, r4
 800662c:	f000 f8c2 	bl	80067b4 <__multadd>
 8006630:	ee08 0a10 	vmov	s16, r0
 8006634:	e7e7      	b.n	8006606 <_dtoa_r+0xb26>
 8006636:	9b02      	ldr	r3, [sp, #8]
 8006638:	2b00      	cmp	r3, #0
 800663a:	bfc8      	it	gt
 800663c:	461d      	movgt	r5, r3
 800663e:	9b01      	ldr	r3, [sp, #4]
 8006640:	bfd8      	it	le
 8006642:	2501      	movle	r5, #1
 8006644:	441d      	add	r5, r3
 8006646:	f04f 0800 	mov.w	r8, #0
 800664a:	ee18 1a10 	vmov	r1, s16
 800664e:	2201      	movs	r2, #1
 8006650:	4620      	mov	r0, r4
 8006652:	f000 fa5f 	bl	8006b14 <__lshift>
 8006656:	4631      	mov	r1, r6
 8006658:	ee08 0a10 	vmov	s16, r0
 800665c:	f000 faca 	bl	8006bf4 <__mcmp>
 8006660:	2800      	cmp	r0, #0
 8006662:	dc91      	bgt.n	8006588 <_dtoa_r+0xaa8>
 8006664:	d102      	bne.n	800666c <_dtoa_r+0xb8c>
 8006666:	f01a 0f01 	tst.w	sl, #1
 800666a:	d18d      	bne.n	8006588 <_dtoa_r+0xaa8>
 800666c:	462b      	mov	r3, r5
 800666e:	461d      	mov	r5, r3
 8006670:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006674:	2a30      	cmp	r2, #48	; 0x30
 8006676:	d0fa      	beq.n	800666e <_dtoa_r+0xb8e>
 8006678:	e6d7      	b.n	800642a <_dtoa_r+0x94a>
 800667a:	9a01      	ldr	r2, [sp, #4]
 800667c:	429a      	cmp	r2, r3
 800667e:	d184      	bne.n	800658a <_dtoa_r+0xaaa>
 8006680:	9b00      	ldr	r3, [sp, #0]
 8006682:	3301      	adds	r3, #1
 8006684:	9300      	str	r3, [sp, #0]
 8006686:	2331      	movs	r3, #49	; 0x31
 8006688:	7013      	strb	r3, [r2, #0]
 800668a:	e6ce      	b.n	800642a <_dtoa_r+0x94a>
 800668c:	4b09      	ldr	r3, [pc, #36]	; (80066b4 <_dtoa_r+0xbd4>)
 800668e:	f7ff ba95 	b.w	8005bbc <_dtoa_r+0xdc>
 8006692:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006694:	2b00      	cmp	r3, #0
 8006696:	f47f aa6e 	bne.w	8005b76 <_dtoa_r+0x96>
 800669a:	4b07      	ldr	r3, [pc, #28]	; (80066b8 <_dtoa_r+0xbd8>)
 800669c:	f7ff ba8e 	b.w	8005bbc <_dtoa_r+0xdc>
 80066a0:	9b02      	ldr	r3, [sp, #8]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	dcae      	bgt.n	8006604 <_dtoa_r+0xb24>
 80066a6:	9b06      	ldr	r3, [sp, #24]
 80066a8:	2b02      	cmp	r3, #2
 80066aa:	f73f aea8 	bgt.w	80063fe <_dtoa_r+0x91e>
 80066ae:	e7a9      	b.n	8006604 <_dtoa_r+0xb24>
 80066b0:	08007f93 	.word	0x08007f93
 80066b4:	08007ef0 	.word	0x08007ef0
 80066b8:	08007f14 	.word	0x08007f14

080066bc <_localeconv_r>:
 80066bc:	4800      	ldr	r0, [pc, #0]	; (80066c0 <_localeconv_r+0x4>)
 80066be:	4770      	bx	lr
 80066c0:	20000160 	.word	0x20000160

080066c4 <malloc>:
 80066c4:	4b02      	ldr	r3, [pc, #8]	; (80066d0 <malloc+0xc>)
 80066c6:	4601      	mov	r1, r0
 80066c8:	6818      	ldr	r0, [r3, #0]
 80066ca:	f000 bc17 	b.w	8006efc <_malloc_r>
 80066ce:	bf00      	nop
 80066d0:	2000000c 	.word	0x2000000c

080066d4 <memcpy>:
 80066d4:	440a      	add	r2, r1
 80066d6:	4291      	cmp	r1, r2
 80066d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80066dc:	d100      	bne.n	80066e0 <memcpy+0xc>
 80066de:	4770      	bx	lr
 80066e0:	b510      	push	{r4, lr}
 80066e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066ea:	4291      	cmp	r1, r2
 80066ec:	d1f9      	bne.n	80066e2 <memcpy+0xe>
 80066ee:	bd10      	pop	{r4, pc}

080066f0 <_Balloc>:
 80066f0:	b570      	push	{r4, r5, r6, lr}
 80066f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80066f4:	4604      	mov	r4, r0
 80066f6:	460d      	mov	r5, r1
 80066f8:	b976      	cbnz	r6, 8006718 <_Balloc+0x28>
 80066fa:	2010      	movs	r0, #16
 80066fc:	f7ff ffe2 	bl	80066c4 <malloc>
 8006700:	4602      	mov	r2, r0
 8006702:	6260      	str	r0, [r4, #36]	; 0x24
 8006704:	b920      	cbnz	r0, 8006710 <_Balloc+0x20>
 8006706:	4b18      	ldr	r3, [pc, #96]	; (8006768 <_Balloc+0x78>)
 8006708:	4818      	ldr	r0, [pc, #96]	; (800676c <_Balloc+0x7c>)
 800670a:	2166      	movs	r1, #102	; 0x66
 800670c:	f000 fdd6 	bl	80072bc <__assert_func>
 8006710:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006714:	6006      	str	r6, [r0, #0]
 8006716:	60c6      	str	r6, [r0, #12]
 8006718:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800671a:	68f3      	ldr	r3, [r6, #12]
 800671c:	b183      	cbz	r3, 8006740 <_Balloc+0x50>
 800671e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006726:	b9b8      	cbnz	r0, 8006758 <_Balloc+0x68>
 8006728:	2101      	movs	r1, #1
 800672a:	fa01 f605 	lsl.w	r6, r1, r5
 800672e:	1d72      	adds	r2, r6, #5
 8006730:	0092      	lsls	r2, r2, #2
 8006732:	4620      	mov	r0, r4
 8006734:	f000 fb60 	bl	8006df8 <_calloc_r>
 8006738:	b160      	cbz	r0, 8006754 <_Balloc+0x64>
 800673a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800673e:	e00e      	b.n	800675e <_Balloc+0x6e>
 8006740:	2221      	movs	r2, #33	; 0x21
 8006742:	2104      	movs	r1, #4
 8006744:	4620      	mov	r0, r4
 8006746:	f000 fb57 	bl	8006df8 <_calloc_r>
 800674a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800674c:	60f0      	str	r0, [r6, #12]
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d1e4      	bne.n	800671e <_Balloc+0x2e>
 8006754:	2000      	movs	r0, #0
 8006756:	bd70      	pop	{r4, r5, r6, pc}
 8006758:	6802      	ldr	r2, [r0, #0]
 800675a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800675e:	2300      	movs	r3, #0
 8006760:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006764:	e7f7      	b.n	8006756 <_Balloc+0x66>
 8006766:	bf00      	nop
 8006768:	08007f21 	.word	0x08007f21
 800676c:	08007fa4 	.word	0x08007fa4

08006770 <_Bfree>:
 8006770:	b570      	push	{r4, r5, r6, lr}
 8006772:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006774:	4605      	mov	r5, r0
 8006776:	460c      	mov	r4, r1
 8006778:	b976      	cbnz	r6, 8006798 <_Bfree+0x28>
 800677a:	2010      	movs	r0, #16
 800677c:	f7ff ffa2 	bl	80066c4 <malloc>
 8006780:	4602      	mov	r2, r0
 8006782:	6268      	str	r0, [r5, #36]	; 0x24
 8006784:	b920      	cbnz	r0, 8006790 <_Bfree+0x20>
 8006786:	4b09      	ldr	r3, [pc, #36]	; (80067ac <_Bfree+0x3c>)
 8006788:	4809      	ldr	r0, [pc, #36]	; (80067b0 <_Bfree+0x40>)
 800678a:	218a      	movs	r1, #138	; 0x8a
 800678c:	f000 fd96 	bl	80072bc <__assert_func>
 8006790:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006794:	6006      	str	r6, [r0, #0]
 8006796:	60c6      	str	r6, [r0, #12]
 8006798:	b13c      	cbz	r4, 80067aa <_Bfree+0x3a>
 800679a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800679c:	6862      	ldr	r2, [r4, #4]
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80067a4:	6021      	str	r1, [r4, #0]
 80067a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80067aa:	bd70      	pop	{r4, r5, r6, pc}
 80067ac:	08007f21 	.word	0x08007f21
 80067b0:	08007fa4 	.word	0x08007fa4

080067b4 <__multadd>:
 80067b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067b8:	690d      	ldr	r5, [r1, #16]
 80067ba:	4607      	mov	r7, r0
 80067bc:	460c      	mov	r4, r1
 80067be:	461e      	mov	r6, r3
 80067c0:	f101 0c14 	add.w	ip, r1, #20
 80067c4:	2000      	movs	r0, #0
 80067c6:	f8dc 3000 	ldr.w	r3, [ip]
 80067ca:	b299      	uxth	r1, r3
 80067cc:	fb02 6101 	mla	r1, r2, r1, r6
 80067d0:	0c1e      	lsrs	r6, r3, #16
 80067d2:	0c0b      	lsrs	r3, r1, #16
 80067d4:	fb02 3306 	mla	r3, r2, r6, r3
 80067d8:	b289      	uxth	r1, r1
 80067da:	3001      	adds	r0, #1
 80067dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80067e0:	4285      	cmp	r5, r0
 80067e2:	f84c 1b04 	str.w	r1, [ip], #4
 80067e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80067ea:	dcec      	bgt.n	80067c6 <__multadd+0x12>
 80067ec:	b30e      	cbz	r6, 8006832 <__multadd+0x7e>
 80067ee:	68a3      	ldr	r3, [r4, #8]
 80067f0:	42ab      	cmp	r3, r5
 80067f2:	dc19      	bgt.n	8006828 <__multadd+0x74>
 80067f4:	6861      	ldr	r1, [r4, #4]
 80067f6:	4638      	mov	r0, r7
 80067f8:	3101      	adds	r1, #1
 80067fa:	f7ff ff79 	bl	80066f0 <_Balloc>
 80067fe:	4680      	mov	r8, r0
 8006800:	b928      	cbnz	r0, 800680e <__multadd+0x5a>
 8006802:	4602      	mov	r2, r0
 8006804:	4b0c      	ldr	r3, [pc, #48]	; (8006838 <__multadd+0x84>)
 8006806:	480d      	ldr	r0, [pc, #52]	; (800683c <__multadd+0x88>)
 8006808:	21b5      	movs	r1, #181	; 0xb5
 800680a:	f000 fd57 	bl	80072bc <__assert_func>
 800680e:	6922      	ldr	r2, [r4, #16]
 8006810:	3202      	adds	r2, #2
 8006812:	f104 010c 	add.w	r1, r4, #12
 8006816:	0092      	lsls	r2, r2, #2
 8006818:	300c      	adds	r0, #12
 800681a:	f7ff ff5b 	bl	80066d4 <memcpy>
 800681e:	4621      	mov	r1, r4
 8006820:	4638      	mov	r0, r7
 8006822:	f7ff ffa5 	bl	8006770 <_Bfree>
 8006826:	4644      	mov	r4, r8
 8006828:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800682c:	3501      	adds	r5, #1
 800682e:	615e      	str	r6, [r3, #20]
 8006830:	6125      	str	r5, [r4, #16]
 8006832:	4620      	mov	r0, r4
 8006834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006838:	08007f93 	.word	0x08007f93
 800683c:	08007fa4 	.word	0x08007fa4

08006840 <__hi0bits>:
 8006840:	0c03      	lsrs	r3, r0, #16
 8006842:	041b      	lsls	r3, r3, #16
 8006844:	b9d3      	cbnz	r3, 800687c <__hi0bits+0x3c>
 8006846:	0400      	lsls	r0, r0, #16
 8006848:	2310      	movs	r3, #16
 800684a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800684e:	bf04      	itt	eq
 8006850:	0200      	lsleq	r0, r0, #8
 8006852:	3308      	addeq	r3, #8
 8006854:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006858:	bf04      	itt	eq
 800685a:	0100      	lsleq	r0, r0, #4
 800685c:	3304      	addeq	r3, #4
 800685e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006862:	bf04      	itt	eq
 8006864:	0080      	lsleq	r0, r0, #2
 8006866:	3302      	addeq	r3, #2
 8006868:	2800      	cmp	r0, #0
 800686a:	db05      	blt.n	8006878 <__hi0bits+0x38>
 800686c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006870:	f103 0301 	add.w	r3, r3, #1
 8006874:	bf08      	it	eq
 8006876:	2320      	moveq	r3, #32
 8006878:	4618      	mov	r0, r3
 800687a:	4770      	bx	lr
 800687c:	2300      	movs	r3, #0
 800687e:	e7e4      	b.n	800684a <__hi0bits+0xa>

08006880 <__lo0bits>:
 8006880:	6803      	ldr	r3, [r0, #0]
 8006882:	f013 0207 	ands.w	r2, r3, #7
 8006886:	4601      	mov	r1, r0
 8006888:	d00b      	beq.n	80068a2 <__lo0bits+0x22>
 800688a:	07da      	lsls	r2, r3, #31
 800688c:	d423      	bmi.n	80068d6 <__lo0bits+0x56>
 800688e:	0798      	lsls	r0, r3, #30
 8006890:	bf49      	itett	mi
 8006892:	085b      	lsrmi	r3, r3, #1
 8006894:	089b      	lsrpl	r3, r3, #2
 8006896:	2001      	movmi	r0, #1
 8006898:	600b      	strmi	r3, [r1, #0]
 800689a:	bf5c      	itt	pl
 800689c:	600b      	strpl	r3, [r1, #0]
 800689e:	2002      	movpl	r0, #2
 80068a0:	4770      	bx	lr
 80068a2:	b298      	uxth	r0, r3
 80068a4:	b9a8      	cbnz	r0, 80068d2 <__lo0bits+0x52>
 80068a6:	0c1b      	lsrs	r3, r3, #16
 80068a8:	2010      	movs	r0, #16
 80068aa:	b2da      	uxtb	r2, r3
 80068ac:	b90a      	cbnz	r2, 80068b2 <__lo0bits+0x32>
 80068ae:	3008      	adds	r0, #8
 80068b0:	0a1b      	lsrs	r3, r3, #8
 80068b2:	071a      	lsls	r2, r3, #28
 80068b4:	bf04      	itt	eq
 80068b6:	091b      	lsreq	r3, r3, #4
 80068b8:	3004      	addeq	r0, #4
 80068ba:	079a      	lsls	r2, r3, #30
 80068bc:	bf04      	itt	eq
 80068be:	089b      	lsreq	r3, r3, #2
 80068c0:	3002      	addeq	r0, #2
 80068c2:	07da      	lsls	r2, r3, #31
 80068c4:	d403      	bmi.n	80068ce <__lo0bits+0x4e>
 80068c6:	085b      	lsrs	r3, r3, #1
 80068c8:	f100 0001 	add.w	r0, r0, #1
 80068cc:	d005      	beq.n	80068da <__lo0bits+0x5a>
 80068ce:	600b      	str	r3, [r1, #0]
 80068d0:	4770      	bx	lr
 80068d2:	4610      	mov	r0, r2
 80068d4:	e7e9      	b.n	80068aa <__lo0bits+0x2a>
 80068d6:	2000      	movs	r0, #0
 80068d8:	4770      	bx	lr
 80068da:	2020      	movs	r0, #32
 80068dc:	4770      	bx	lr
	...

080068e0 <__i2b>:
 80068e0:	b510      	push	{r4, lr}
 80068e2:	460c      	mov	r4, r1
 80068e4:	2101      	movs	r1, #1
 80068e6:	f7ff ff03 	bl	80066f0 <_Balloc>
 80068ea:	4602      	mov	r2, r0
 80068ec:	b928      	cbnz	r0, 80068fa <__i2b+0x1a>
 80068ee:	4b05      	ldr	r3, [pc, #20]	; (8006904 <__i2b+0x24>)
 80068f0:	4805      	ldr	r0, [pc, #20]	; (8006908 <__i2b+0x28>)
 80068f2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80068f6:	f000 fce1 	bl	80072bc <__assert_func>
 80068fa:	2301      	movs	r3, #1
 80068fc:	6144      	str	r4, [r0, #20]
 80068fe:	6103      	str	r3, [r0, #16]
 8006900:	bd10      	pop	{r4, pc}
 8006902:	bf00      	nop
 8006904:	08007f93 	.word	0x08007f93
 8006908:	08007fa4 	.word	0x08007fa4

0800690c <__multiply>:
 800690c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006910:	4691      	mov	r9, r2
 8006912:	690a      	ldr	r2, [r1, #16]
 8006914:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006918:	429a      	cmp	r2, r3
 800691a:	bfb8      	it	lt
 800691c:	460b      	movlt	r3, r1
 800691e:	460c      	mov	r4, r1
 8006920:	bfbc      	itt	lt
 8006922:	464c      	movlt	r4, r9
 8006924:	4699      	movlt	r9, r3
 8006926:	6927      	ldr	r7, [r4, #16]
 8006928:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800692c:	68a3      	ldr	r3, [r4, #8]
 800692e:	6861      	ldr	r1, [r4, #4]
 8006930:	eb07 060a 	add.w	r6, r7, sl
 8006934:	42b3      	cmp	r3, r6
 8006936:	b085      	sub	sp, #20
 8006938:	bfb8      	it	lt
 800693a:	3101      	addlt	r1, #1
 800693c:	f7ff fed8 	bl	80066f0 <_Balloc>
 8006940:	b930      	cbnz	r0, 8006950 <__multiply+0x44>
 8006942:	4602      	mov	r2, r0
 8006944:	4b44      	ldr	r3, [pc, #272]	; (8006a58 <__multiply+0x14c>)
 8006946:	4845      	ldr	r0, [pc, #276]	; (8006a5c <__multiply+0x150>)
 8006948:	f240 115d 	movw	r1, #349	; 0x15d
 800694c:	f000 fcb6 	bl	80072bc <__assert_func>
 8006950:	f100 0514 	add.w	r5, r0, #20
 8006954:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006958:	462b      	mov	r3, r5
 800695a:	2200      	movs	r2, #0
 800695c:	4543      	cmp	r3, r8
 800695e:	d321      	bcc.n	80069a4 <__multiply+0x98>
 8006960:	f104 0314 	add.w	r3, r4, #20
 8006964:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006968:	f109 0314 	add.w	r3, r9, #20
 800696c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006970:	9202      	str	r2, [sp, #8]
 8006972:	1b3a      	subs	r2, r7, r4
 8006974:	3a15      	subs	r2, #21
 8006976:	f022 0203 	bic.w	r2, r2, #3
 800697a:	3204      	adds	r2, #4
 800697c:	f104 0115 	add.w	r1, r4, #21
 8006980:	428f      	cmp	r7, r1
 8006982:	bf38      	it	cc
 8006984:	2204      	movcc	r2, #4
 8006986:	9201      	str	r2, [sp, #4]
 8006988:	9a02      	ldr	r2, [sp, #8]
 800698a:	9303      	str	r3, [sp, #12]
 800698c:	429a      	cmp	r2, r3
 800698e:	d80c      	bhi.n	80069aa <__multiply+0x9e>
 8006990:	2e00      	cmp	r6, #0
 8006992:	dd03      	ble.n	800699c <__multiply+0x90>
 8006994:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006998:	2b00      	cmp	r3, #0
 800699a:	d05a      	beq.n	8006a52 <__multiply+0x146>
 800699c:	6106      	str	r6, [r0, #16]
 800699e:	b005      	add	sp, #20
 80069a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069a4:	f843 2b04 	str.w	r2, [r3], #4
 80069a8:	e7d8      	b.n	800695c <__multiply+0x50>
 80069aa:	f8b3 a000 	ldrh.w	sl, [r3]
 80069ae:	f1ba 0f00 	cmp.w	sl, #0
 80069b2:	d024      	beq.n	80069fe <__multiply+0xf2>
 80069b4:	f104 0e14 	add.w	lr, r4, #20
 80069b8:	46a9      	mov	r9, r5
 80069ba:	f04f 0c00 	mov.w	ip, #0
 80069be:	f85e 2b04 	ldr.w	r2, [lr], #4
 80069c2:	f8d9 1000 	ldr.w	r1, [r9]
 80069c6:	fa1f fb82 	uxth.w	fp, r2
 80069ca:	b289      	uxth	r1, r1
 80069cc:	fb0a 110b 	mla	r1, sl, fp, r1
 80069d0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80069d4:	f8d9 2000 	ldr.w	r2, [r9]
 80069d8:	4461      	add	r1, ip
 80069da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80069de:	fb0a c20b 	mla	r2, sl, fp, ip
 80069e2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80069e6:	b289      	uxth	r1, r1
 80069e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80069ec:	4577      	cmp	r7, lr
 80069ee:	f849 1b04 	str.w	r1, [r9], #4
 80069f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80069f6:	d8e2      	bhi.n	80069be <__multiply+0xb2>
 80069f8:	9a01      	ldr	r2, [sp, #4]
 80069fa:	f845 c002 	str.w	ip, [r5, r2]
 80069fe:	9a03      	ldr	r2, [sp, #12]
 8006a00:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006a04:	3304      	adds	r3, #4
 8006a06:	f1b9 0f00 	cmp.w	r9, #0
 8006a0a:	d020      	beq.n	8006a4e <__multiply+0x142>
 8006a0c:	6829      	ldr	r1, [r5, #0]
 8006a0e:	f104 0c14 	add.w	ip, r4, #20
 8006a12:	46ae      	mov	lr, r5
 8006a14:	f04f 0a00 	mov.w	sl, #0
 8006a18:	f8bc b000 	ldrh.w	fp, [ip]
 8006a1c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006a20:	fb09 220b 	mla	r2, r9, fp, r2
 8006a24:	4492      	add	sl, r2
 8006a26:	b289      	uxth	r1, r1
 8006a28:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006a2c:	f84e 1b04 	str.w	r1, [lr], #4
 8006a30:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006a34:	f8be 1000 	ldrh.w	r1, [lr]
 8006a38:	0c12      	lsrs	r2, r2, #16
 8006a3a:	fb09 1102 	mla	r1, r9, r2, r1
 8006a3e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006a42:	4567      	cmp	r7, ip
 8006a44:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006a48:	d8e6      	bhi.n	8006a18 <__multiply+0x10c>
 8006a4a:	9a01      	ldr	r2, [sp, #4]
 8006a4c:	50a9      	str	r1, [r5, r2]
 8006a4e:	3504      	adds	r5, #4
 8006a50:	e79a      	b.n	8006988 <__multiply+0x7c>
 8006a52:	3e01      	subs	r6, #1
 8006a54:	e79c      	b.n	8006990 <__multiply+0x84>
 8006a56:	bf00      	nop
 8006a58:	08007f93 	.word	0x08007f93
 8006a5c:	08007fa4 	.word	0x08007fa4

08006a60 <__pow5mult>:
 8006a60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a64:	4615      	mov	r5, r2
 8006a66:	f012 0203 	ands.w	r2, r2, #3
 8006a6a:	4606      	mov	r6, r0
 8006a6c:	460f      	mov	r7, r1
 8006a6e:	d007      	beq.n	8006a80 <__pow5mult+0x20>
 8006a70:	4c25      	ldr	r4, [pc, #148]	; (8006b08 <__pow5mult+0xa8>)
 8006a72:	3a01      	subs	r2, #1
 8006a74:	2300      	movs	r3, #0
 8006a76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006a7a:	f7ff fe9b 	bl	80067b4 <__multadd>
 8006a7e:	4607      	mov	r7, r0
 8006a80:	10ad      	asrs	r5, r5, #2
 8006a82:	d03d      	beq.n	8006b00 <__pow5mult+0xa0>
 8006a84:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006a86:	b97c      	cbnz	r4, 8006aa8 <__pow5mult+0x48>
 8006a88:	2010      	movs	r0, #16
 8006a8a:	f7ff fe1b 	bl	80066c4 <malloc>
 8006a8e:	4602      	mov	r2, r0
 8006a90:	6270      	str	r0, [r6, #36]	; 0x24
 8006a92:	b928      	cbnz	r0, 8006aa0 <__pow5mult+0x40>
 8006a94:	4b1d      	ldr	r3, [pc, #116]	; (8006b0c <__pow5mult+0xac>)
 8006a96:	481e      	ldr	r0, [pc, #120]	; (8006b10 <__pow5mult+0xb0>)
 8006a98:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006a9c:	f000 fc0e 	bl	80072bc <__assert_func>
 8006aa0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006aa4:	6004      	str	r4, [r0, #0]
 8006aa6:	60c4      	str	r4, [r0, #12]
 8006aa8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006aac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006ab0:	b94c      	cbnz	r4, 8006ac6 <__pow5mult+0x66>
 8006ab2:	f240 2171 	movw	r1, #625	; 0x271
 8006ab6:	4630      	mov	r0, r6
 8006ab8:	f7ff ff12 	bl	80068e0 <__i2b>
 8006abc:	2300      	movs	r3, #0
 8006abe:	f8c8 0008 	str.w	r0, [r8, #8]
 8006ac2:	4604      	mov	r4, r0
 8006ac4:	6003      	str	r3, [r0, #0]
 8006ac6:	f04f 0900 	mov.w	r9, #0
 8006aca:	07eb      	lsls	r3, r5, #31
 8006acc:	d50a      	bpl.n	8006ae4 <__pow5mult+0x84>
 8006ace:	4639      	mov	r1, r7
 8006ad0:	4622      	mov	r2, r4
 8006ad2:	4630      	mov	r0, r6
 8006ad4:	f7ff ff1a 	bl	800690c <__multiply>
 8006ad8:	4639      	mov	r1, r7
 8006ada:	4680      	mov	r8, r0
 8006adc:	4630      	mov	r0, r6
 8006ade:	f7ff fe47 	bl	8006770 <_Bfree>
 8006ae2:	4647      	mov	r7, r8
 8006ae4:	106d      	asrs	r5, r5, #1
 8006ae6:	d00b      	beq.n	8006b00 <__pow5mult+0xa0>
 8006ae8:	6820      	ldr	r0, [r4, #0]
 8006aea:	b938      	cbnz	r0, 8006afc <__pow5mult+0x9c>
 8006aec:	4622      	mov	r2, r4
 8006aee:	4621      	mov	r1, r4
 8006af0:	4630      	mov	r0, r6
 8006af2:	f7ff ff0b 	bl	800690c <__multiply>
 8006af6:	6020      	str	r0, [r4, #0]
 8006af8:	f8c0 9000 	str.w	r9, [r0]
 8006afc:	4604      	mov	r4, r0
 8006afe:	e7e4      	b.n	8006aca <__pow5mult+0x6a>
 8006b00:	4638      	mov	r0, r7
 8006b02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b06:	bf00      	nop
 8006b08:	080080f0 	.word	0x080080f0
 8006b0c:	08007f21 	.word	0x08007f21
 8006b10:	08007fa4 	.word	0x08007fa4

08006b14 <__lshift>:
 8006b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b18:	460c      	mov	r4, r1
 8006b1a:	6849      	ldr	r1, [r1, #4]
 8006b1c:	6923      	ldr	r3, [r4, #16]
 8006b1e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006b22:	68a3      	ldr	r3, [r4, #8]
 8006b24:	4607      	mov	r7, r0
 8006b26:	4691      	mov	r9, r2
 8006b28:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006b2c:	f108 0601 	add.w	r6, r8, #1
 8006b30:	42b3      	cmp	r3, r6
 8006b32:	db0b      	blt.n	8006b4c <__lshift+0x38>
 8006b34:	4638      	mov	r0, r7
 8006b36:	f7ff fddb 	bl	80066f0 <_Balloc>
 8006b3a:	4605      	mov	r5, r0
 8006b3c:	b948      	cbnz	r0, 8006b52 <__lshift+0x3e>
 8006b3e:	4602      	mov	r2, r0
 8006b40:	4b2a      	ldr	r3, [pc, #168]	; (8006bec <__lshift+0xd8>)
 8006b42:	482b      	ldr	r0, [pc, #172]	; (8006bf0 <__lshift+0xdc>)
 8006b44:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006b48:	f000 fbb8 	bl	80072bc <__assert_func>
 8006b4c:	3101      	adds	r1, #1
 8006b4e:	005b      	lsls	r3, r3, #1
 8006b50:	e7ee      	b.n	8006b30 <__lshift+0x1c>
 8006b52:	2300      	movs	r3, #0
 8006b54:	f100 0114 	add.w	r1, r0, #20
 8006b58:	f100 0210 	add.w	r2, r0, #16
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	4553      	cmp	r3, sl
 8006b60:	db37      	blt.n	8006bd2 <__lshift+0xbe>
 8006b62:	6920      	ldr	r0, [r4, #16]
 8006b64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006b68:	f104 0314 	add.w	r3, r4, #20
 8006b6c:	f019 091f 	ands.w	r9, r9, #31
 8006b70:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006b74:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006b78:	d02f      	beq.n	8006bda <__lshift+0xc6>
 8006b7a:	f1c9 0e20 	rsb	lr, r9, #32
 8006b7e:	468a      	mov	sl, r1
 8006b80:	f04f 0c00 	mov.w	ip, #0
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	fa02 f209 	lsl.w	r2, r2, r9
 8006b8a:	ea42 020c 	orr.w	r2, r2, ip
 8006b8e:	f84a 2b04 	str.w	r2, [sl], #4
 8006b92:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b96:	4298      	cmp	r0, r3
 8006b98:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006b9c:	d8f2      	bhi.n	8006b84 <__lshift+0x70>
 8006b9e:	1b03      	subs	r3, r0, r4
 8006ba0:	3b15      	subs	r3, #21
 8006ba2:	f023 0303 	bic.w	r3, r3, #3
 8006ba6:	3304      	adds	r3, #4
 8006ba8:	f104 0215 	add.w	r2, r4, #21
 8006bac:	4290      	cmp	r0, r2
 8006bae:	bf38      	it	cc
 8006bb0:	2304      	movcc	r3, #4
 8006bb2:	f841 c003 	str.w	ip, [r1, r3]
 8006bb6:	f1bc 0f00 	cmp.w	ip, #0
 8006bba:	d001      	beq.n	8006bc0 <__lshift+0xac>
 8006bbc:	f108 0602 	add.w	r6, r8, #2
 8006bc0:	3e01      	subs	r6, #1
 8006bc2:	4638      	mov	r0, r7
 8006bc4:	612e      	str	r6, [r5, #16]
 8006bc6:	4621      	mov	r1, r4
 8006bc8:	f7ff fdd2 	bl	8006770 <_Bfree>
 8006bcc:	4628      	mov	r0, r5
 8006bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bd2:	f842 0f04 	str.w	r0, [r2, #4]!
 8006bd6:	3301      	adds	r3, #1
 8006bd8:	e7c1      	b.n	8006b5e <__lshift+0x4a>
 8006bda:	3904      	subs	r1, #4
 8006bdc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006be0:	f841 2f04 	str.w	r2, [r1, #4]!
 8006be4:	4298      	cmp	r0, r3
 8006be6:	d8f9      	bhi.n	8006bdc <__lshift+0xc8>
 8006be8:	e7ea      	b.n	8006bc0 <__lshift+0xac>
 8006bea:	bf00      	nop
 8006bec:	08007f93 	.word	0x08007f93
 8006bf0:	08007fa4 	.word	0x08007fa4

08006bf4 <__mcmp>:
 8006bf4:	b530      	push	{r4, r5, lr}
 8006bf6:	6902      	ldr	r2, [r0, #16]
 8006bf8:	690c      	ldr	r4, [r1, #16]
 8006bfa:	1b12      	subs	r2, r2, r4
 8006bfc:	d10e      	bne.n	8006c1c <__mcmp+0x28>
 8006bfe:	f100 0314 	add.w	r3, r0, #20
 8006c02:	3114      	adds	r1, #20
 8006c04:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006c08:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006c0c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006c10:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006c14:	42a5      	cmp	r5, r4
 8006c16:	d003      	beq.n	8006c20 <__mcmp+0x2c>
 8006c18:	d305      	bcc.n	8006c26 <__mcmp+0x32>
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	4610      	mov	r0, r2
 8006c1e:	bd30      	pop	{r4, r5, pc}
 8006c20:	4283      	cmp	r3, r0
 8006c22:	d3f3      	bcc.n	8006c0c <__mcmp+0x18>
 8006c24:	e7fa      	b.n	8006c1c <__mcmp+0x28>
 8006c26:	f04f 32ff 	mov.w	r2, #4294967295
 8006c2a:	e7f7      	b.n	8006c1c <__mcmp+0x28>

08006c2c <__mdiff>:
 8006c2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c30:	460c      	mov	r4, r1
 8006c32:	4606      	mov	r6, r0
 8006c34:	4611      	mov	r1, r2
 8006c36:	4620      	mov	r0, r4
 8006c38:	4690      	mov	r8, r2
 8006c3a:	f7ff ffdb 	bl	8006bf4 <__mcmp>
 8006c3e:	1e05      	subs	r5, r0, #0
 8006c40:	d110      	bne.n	8006c64 <__mdiff+0x38>
 8006c42:	4629      	mov	r1, r5
 8006c44:	4630      	mov	r0, r6
 8006c46:	f7ff fd53 	bl	80066f0 <_Balloc>
 8006c4a:	b930      	cbnz	r0, 8006c5a <__mdiff+0x2e>
 8006c4c:	4b3a      	ldr	r3, [pc, #232]	; (8006d38 <__mdiff+0x10c>)
 8006c4e:	4602      	mov	r2, r0
 8006c50:	f240 2132 	movw	r1, #562	; 0x232
 8006c54:	4839      	ldr	r0, [pc, #228]	; (8006d3c <__mdiff+0x110>)
 8006c56:	f000 fb31 	bl	80072bc <__assert_func>
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006c60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c64:	bfa4      	itt	ge
 8006c66:	4643      	movge	r3, r8
 8006c68:	46a0      	movge	r8, r4
 8006c6a:	4630      	mov	r0, r6
 8006c6c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006c70:	bfa6      	itte	ge
 8006c72:	461c      	movge	r4, r3
 8006c74:	2500      	movge	r5, #0
 8006c76:	2501      	movlt	r5, #1
 8006c78:	f7ff fd3a 	bl	80066f0 <_Balloc>
 8006c7c:	b920      	cbnz	r0, 8006c88 <__mdiff+0x5c>
 8006c7e:	4b2e      	ldr	r3, [pc, #184]	; (8006d38 <__mdiff+0x10c>)
 8006c80:	4602      	mov	r2, r0
 8006c82:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006c86:	e7e5      	b.n	8006c54 <__mdiff+0x28>
 8006c88:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006c8c:	6926      	ldr	r6, [r4, #16]
 8006c8e:	60c5      	str	r5, [r0, #12]
 8006c90:	f104 0914 	add.w	r9, r4, #20
 8006c94:	f108 0514 	add.w	r5, r8, #20
 8006c98:	f100 0e14 	add.w	lr, r0, #20
 8006c9c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006ca0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006ca4:	f108 0210 	add.w	r2, r8, #16
 8006ca8:	46f2      	mov	sl, lr
 8006caa:	2100      	movs	r1, #0
 8006cac:	f859 3b04 	ldr.w	r3, [r9], #4
 8006cb0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006cb4:	fa1f f883 	uxth.w	r8, r3
 8006cb8:	fa11 f18b 	uxtah	r1, r1, fp
 8006cbc:	0c1b      	lsrs	r3, r3, #16
 8006cbe:	eba1 0808 	sub.w	r8, r1, r8
 8006cc2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006cc6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006cca:	fa1f f888 	uxth.w	r8, r8
 8006cce:	1419      	asrs	r1, r3, #16
 8006cd0:	454e      	cmp	r6, r9
 8006cd2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006cd6:	f84a 3b04 	str.w	r3, [sl], #4
 8006cda:	d8e7      	bhi.n	8006cac <__mdiff+0x80>
 8006cdc:	1b33      	subs	r3, r6, r4
 8006cde:	3b15      	subs	r3, #21
 8006ce0:	f023 0303 	bic.w	r3, r3, #3
 8006ce4:	3304      	adds	r3, #4
 8006ce6:	3415      	adds	r4, #21
 8006ce8:	42a6      	cmp	r6, r4
 8006cea:	bf38      	it	cc
 8006cec:	2304      	movcc	r3, #4
 8006cee:	441d      	add	r5, r3
 8006cf0:	4473      	add	r3, lr
 8006cf2:	469e      	mov	lr, r3
 8006cf4:	462e      	mov	r6, r5
 8006cf6:	4566      	cmp	r6, ip
 8006cf8:	d30e      	bcc.n	8006d18 <__mdiff+0xec>
 8006cfa:	f10c 0203 	add.w	r2, ip, #3
 8006cfe:	1b52      	subs	r2, r2, r5
 8006d00:	f022 0203 	bic.w	r2, r2, #3
 8006d04:	3d03      	subs	r5, #3
 8006d06:	45ac      	cmp	ip, r5
 8006d08:	bf38      	it	cc
 8006d0a:	2200      	movcc	r2, #0
 8006d0c:	441a      	add	r2, r3
 8006d0e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006d12:	b17b      	cbz	r3, 8006d34 <__mdiff+0x108>
 8006d14:	6107      	str	r7, [r0, #16]
 8006d16:	e7a3      	b.n	8006c60 <__mdiff+0x34>
 8006d18:	f856 8b04 	ldr.w	r8, [r6], #4
 8006d1c:	fa11 f288 	uxtah	r2, r1, r8
 8006d20:	1414      	asrs	r4, r2, #16
 8006d22:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006d26:	b292      	uxth	r2, r2
 8006d28:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006d2c:	f84e 2b04 	str.w	r2, [lr], #4
 8006d30:	1421      	asrs	r1, r4, #16
 8006d32:	e7e0      	b.n	8006cf6 <__mdiff+0xca>
 8006d34:	3f01      	subs	r7, #1
 8006d36:	e7ea      	b.n	8006d0e <__mdiff+0xe2>
 8006d38:	08007f93 	.word	0x08007f93
 8006d3c:	08007fa4 	.word	0x08007fa4

08006d40 <__d2b>:
 8006d40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006d44:	4689      	mov	r9, r1
 8006d46:	2101      	movs	r1, #1
 8006d48:	ec57 6b10 	vmov	r6, r7, d0
 8006d4c:	4690      	mov	r8, r2
 8006d4e:	f7ff fccf 	bl	80066f0 <_Balloc>
 8006d52:	4604      	mov	r4, r0
 8006d54:	b930      	cbnz	r0, 8006d64 <__d2b+0x24>
 8006d56:	4602      	mov	r2, r0
 8006d58:	4b25      	ldr	r3, [pc, #148]	; (8006df0 <__d2b+0xb0>)
 8006d5a:	4826      	ldr	r0, [pc, #152]	; (8006df4 <__d2b+0xb4>)
 8006d5c:	f240 310a 	movw	r1, #778	; 0x30a
 8006d60:	f000 faac 	bl	80072bc <__assert_func>
 8006d64:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006d68:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006d6c:	bb35      	cbnz	r5, 8006dbc <__d2b+0x7c>
 8006d6e:	2e00      	cmp	r6, #0
 8006d70:	9301      	str	r3, [sp, #4]
 8006d72:	d028      	beq.n	8006dc6 <__d2b+0x86>
 8006d74:	4668      	mov	r0, sp
 8006d76:	9600      	str	r6, [sp, #0]
 8006d78:	f7ff fd82 	bl	8006880 <__lo0bits>
 8006d7c:	9900      	ldr	r1, [sp, #0]
 8006d7e:	b300      	cbz	r0, 8006dc2 <__d2b+0x82>
 8006d80:	9a01      	ldr	r2, [sp, #4]
 8006d82:	f1c0 0320 	rsb	r3, r0, #32
 8006d86:	fa02 f303 	lsl.w	r3, r2, r3
 8006d8a:	430b      	orrs	r3, r1
 8006d8c:	40c2      	lsrs	r2, r0
 8006d8e:	6163      	str	r3, [r4, #20]
 8006d90:	9201      	str	r2, [sp, #4]
 8006d92:	9b01      	ldr	r3, [sp, #4]
 8006d94:	61a3      	str	r3, [r4, #24]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	bf14      	ite	ne
 8006d9a:	2202      	movne	r2, #2
 8006d9c:	2201      	moveq	r2, #1
 8006d9e:	6122      	str	r2, [r4, #16]
 8006da0:	b1d5      	cbz	r5, 8006dd8 <__d2b+0x98>
 8006da2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006da6:	4405      	add	r5, r0
 8006da8:	f8c9 5000 	str.w	r5, [r9]
 8006dac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006db0:	f8c8 0000 	str.w	r0, [r8]
 8006db4:	4620      	mov	r0, r4
 8006db6:	b003      	add	sp, #12
 8006db8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006dbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006dc0:	e7d5      	b.n	8006d6e <__d2b+0x2e>
 8006dc2:	6161      	str	r1, [r4, #20]
 8006dc4:	e7e5      	b.n	8006d92 <__d2b+0x52>
 8006dc6:	a801      	add	r0, sp, #4
 8006dc8:	f7ff fd5a 	bl	8006880 <__lo0bits>
 8006dcc:	9b01      	ldr	r3, [sp, #4]
 8006dce:	6163      	str	r3, [r4, #20]
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	6122      	str	r2, [r4, #16]
 8006dd4:	3020      	adds	r0, #32
 8006dd6:	e7e3      	b.n	8006da0 <__d2b+0x60>
 8006dd8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006ddc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006de0:	f8c9 0000 	str.w	r0, [r9]
 8006de4:	6918      	ldr	r0, [r3, #16]
 8006de6:	f7ff fd2b 	bl	8006840 <__hi0bits>
 8006dea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006dee:	e7df      	b.n	8006db0 <__d2b+0x70>
 8006df0:	08007f93 	.word	0x08007f93
 8006df4:	08007fa4 	.word	0x08007fa4

08006df8 <_calloc_r>:
 8006df8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006dfa:	fba1 2402 	umull	r2, r4, r1, r2
 8006dfe:	b94c      	cbnz	r4, 8006e14 <_calloc_r+0x1c>
 8006e00:	4611      	mov	r1, r2
 8006e02:	9201      	str	r2, [sp, #4]
 8006e04:	f000 f87a 	bl	8006efc <_malloc_r>
 8006e08:	9a01      	ldr	r2, [sp, #4]
 8006e0a:	4605      	mov	r5, r0
 8006e0c:	b930      	cbnz	r0, 8006e1c <_calloc_r+0x24>
 8006e0e:	4628      	mov	r0, r5
 8006e10:	b003      	add	sp, #12
 8006e12:	bd30      	pop	{r4, r5, pc}
 8006e14:	220c      	movs	r2, #12
 8006e16:	6002      	str	r2, [r0, #0]
 8006e18:	2500      	movs	r5, #0
 8006e1a:	e7f8      	b.n	8006e0e <_calloc_r+0x16>
 8006e1c:	4621      	mov	r1, r4
 8006e1e:	f7fe f941 	bl	80050a4 <memset>
 8006e22:	e7f4      	b.n	8006e0e <_calloc_r+0x16>

08006e24 <_free_r>:
 8006e24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e26:	2900      	cmp	r1, #0
 8006e28:	d044      	beq.n	8006eb4 <_free_r+0x90>
 8006e2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e2e:	9001      	str	r0, [sp, #4]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	f1a1 0404 	sub.w	r4, r1, #4
 8006e36:	bfb8      	it	lt
 8006e38:	18e4      	addlt	r4, r4, r3
 8006e3a:	f000 fa9b 	bl	8007374 <__malloc_lock>
 8006e3e:	4a1e      	ldr	r2, [pc, #120]	; (8006eb8 <_free_r+0x94>)
 8006e40:	9801      	ldr	r0, [sp, #4]
 8006e42:	6813      	ldr	r3, [r2, #0]
 8006e44:	b933      	cbnz	r3, 8006e54 <_free_r+0x30>
 8006e46:	6063      	str	r3, [r4, #4]
 8006e48:	6014      	str	r4, [r2, #0]
 8006e4a:	b003      	add	sp, #12
 8006e4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e50:	f000 ba96 	b.w	8007380 <__malloc_unlock>
 8006e54:	42a3      	cmp	r3, r4
 8006e56:	d908      	bls.n	8006e6a <_free_r+0x46>
 8006e58:	6825      	ldr	r5, [r4, #0]
 8006e5a:	1961      	adds	r1, r4, r5
 8006e5c:	428b      	cmp	r3, r1
 8006e5e:	bf01      	itttt	eq
 8006e60:	6819      	ldreq	r1, [r3, #0]
 8006e62:	685b      	ldreq	r3, [r3, #4]
 8006e64:	1949      	addeq	r1, r1, r5
 8006e66:	6021      	streq	r1, [r4, #0]
 8006e68:	e7ed      	b.n	8006e46 <_free_r+0x22>
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	b10b      	cbz	r3, 8006e74 <_free_r+0x50>
 8006e70:	42a3      	cmp	r3, r4
 8006e72:	d9fa      	bls.n	8006e6a <_free_r+0x46>
 8006e74:	6811      	ldr	r1, [r2, #0]
 8006e76:	1855      	adds	r5, r2, r1
 8006e78:	42a5      	cmp	r5, r4
 8006e7a:	d10b      	bne.n	8006e94 <_free_r+0x70>
 8006e7c:	6824      	ldr	r4, [r4, #0]
 8006e7e:	4421      	add	r1, r4
 8006e80:	1854      	adds	r4, r2, r1
 8006e82:	42a3      	cmp	r3, r4
 8006e84:	6011      	str	r1, [r2, #0]
 8006e86:	d1e0      	bne.n	8006e4a <_free_r+0x26>
 8006e88:	681c      	ldr	r4, [r3, #0]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	6053      	str	r3, [r2, #4]
 8006e8e:	4421      	add	r1, r4
 8006e90:	6011      	str	r1, [r2, #0]
 8006e92:	e7da      	b.n	8006e4a <_free_r+0x26>
 8006e94:	d902      	bls.n	8006e9c <_free_r+0x78>
 8006e96:	230c      	movs	r3, #12
 8006e98:	6003      	str	r3, [r0, #0]
 8006e9a:	e7d6      	b.n	8006e4a <_free_r+0x26>
 8006e9c:	6825      	ldr	r5, [r4, #0]
 8006e9e:	1961      	adds	r1, r4, r5
 8006ea0:	428b      	cmp	r3, r1
 8006ea2:	bf04      	itt	eq
 8006ea4:	6819      	ldreq	r1, [r3, #0]
 8006ea6:	685b      	ldreq	r3, [r3, #4]
 8006ea8:	6063      	str	r3, [r4, #4]
 8006eaa:	bf04      	itt	eq
 8006eac:	1949      	addeq	r1, r1, r5
 8006eae:	6021      	streq	r1, [r4, #0]
 8006eb0:	6054      	str	r4, [r2, #4]
 8006eb2:	e7ca      	b.n	8006e4a <_free_r+0x26>
 8006eb4:	b003      	add	sp, #12
 8006eb6:	bd30      	pop	{r4, r5, pc}
 8006eb8:	20000408 	.word	0x20000408

08006ebc <sbrk_aligned>:
 8006ebc:	b570      	push	{r4, r5, r6, lr}
 8006ebe:	4e0e      	ldr	r6, [pc, #56]	; (8006ef8 <sbrk_aligned+0x3c>)
 8006ec0:	460c      	mov	r4, r1
 8006ec2:	6831      	ldr	r1, [r6, #0]
 8006ec4:	4605      	mov	r5, r0
 8006ec6:	b911      	cbnz	r1, 8006ece <sbrk_aligned+0x12>
 8006ec8:	f000 f9e8 	bl	800729c <_sbrk_r>
 8006ecc:	6030      	str	r0, [r6, #0]
 8006ece:	4621      	mov	r1, r4
 8006ed0:	4628      	mov	r0, r5
 8006ed2:	f000 f9e3 	bl	800729c <_sbrk_r>
 8006ed6:	1c43      	adds	r3, r0, #1
 8006ed8:	d00a      	beq.n	8006ef0 <sbrk_aligned+0x34>
 8006eda:	1cc4      	adds	r4, r0, #3
 8006edc:	f024 0403 	bic.w	r4, r4, #3
 8006ee0:	42a0      	cmp	r0, r4
 8006ee2:	d007      	beq.n	8006ef4 <sbrk_aligned+0x38>
 8006ee4:	1a21      	subs	r1, r4, r0
 8006ee6:	4628      	mov	r0, r5
 8006ee8:	f000 f9d8 	bl	800729c <_sbrk_r>
 8006eec:	3001      	adds	r0, #1
 8006eee:	d101      	bne.n	8006ef4 <sbrk_aligned+0x38>
 8006ef0:	f04f 34ff 	mov.w	r4, #4294967295
 8006ef4:	4620      	mov	r0, r4
 8006ef6:	bd70      	pop	{r4, r5, r6, pc}
 8006ef8:	2000040c 	.word	0x2000040c

08006efc <_malloc_r>:
 8006efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f00:	1ccd      	adds	r5, r1, #3
 8006f02:	f025 0503 	bic.w	r5, r5, #3
 8006f06:	3508      	adds	r5, #8
 8006f08:	2d0c      	cmp	r5, #12
 8006f0a:	bf38      	it	cc
 8006f0c:	250c      	movcc	r5, #12
 8006f0e:	2d00      	cmp	r5, #0
 8006f10:	4607      	mov	r7, r0
 8006f12:	db01      	blt.n	8006f18 <_malloc_r+0x1c>
 8006f14:	42a9      	cmp	r1, r5
 8006f16:	d905      	bls.n	8006f24 <_malloc_r+0x28>
 8006f18:	230c      	movs	r3, #12
 8006f1a:	603b      	str	r3, [r7, #0]
 8006f1c:	2600      	movs	r6, #0
 8006f1e:	4630      	mov	r0, r6
 8006f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f24:	4e2e      	ldr	r6, [pc, #184]	; (8006fe0 <_malloc_r+0xe4>)
 8006f26:	f000 fa25 	bl	8007374 <__malloc_lock>
 8006f2a:	6833      	ldr	r3, [r6, #0]
 8006f2c:	461c      	mov	r4, r3
 8006f2e:	bb34      	cbnz	r4, 8006f7e <_malloc_r+0x82>
 8006f30:	4629      	mov	r1, r5
 8006f32:	4638      	mov	r0, r7
 8006f34:	f7ff ffc2 	bl	8006ebc <sbrk_aligned>
 8006f38:	1c43      	adds	r3, r0, #1
 8006f3a:	4604      	mov	r4, r0
 8006f3c:	d14d      	bne.n	8006fda <_malloc_r+0xde>
 8006f3e:	6834      	ldr	r4, [r6, #0]
 8006f40:	4626      	mov	r6, r4
 8006f42:	2e00      	cmp	r6, #0
 8006f44:	d140      	bne.n	8006fc8 <_malloc_r+0xcc>
 8006f46:	6823      	ldr	r3, [r4, #0]
 8006f48:	4631      	mov	r1, r6
 8006f4a:	4638      	mov	r0, r7
 8006f4c:	eb04 0803 	add.w	r8, r4, r3
 8006f50:	f000 f9a4 	bl	800729c <_sbrk_r>
 8006f54:	4580      	cmp	r8, r0
 8006f56:	d13a      	bne.n	8006fce <_malloc_r+0xd2>
 8006f58:	6821      	ldr	r1, [r4, #0]
 8006f5a:	3503      	adds	r5, #3
 8006f5c:	1a6d      	subs	r5, r5, r1
 8006f5e:	f025 0503 	bic.w	r5, r5, #3
 8006f62:	3508      	adds	r5, #8
 8006f64:	2d0c      	cmp	r5, #12
 8006f66:	bf38      	it	cc
 8006f68:	250c      	movcc	r5, #12
 8006f6a:	4629      	mov	r1, r5
 8006f6c:	4638      	mov	r0, r7
 8006f6e:	f7ff ffa5 	bl	8006ebc <sbrk_aligned>
 8006f72:	3001      	adds	r0, #1
 8006f74:	d02b      	beq.n	8006fce <_malloc_r+0xd2>
 8006f76:	6823      	ldr	r3, [r4, #0]
 8006f78:	442b      	add	r3, r5
 8006f7a:	6023      	str	r3, [r4, #0]
 8006f7c:	e00e      	b.n	8006f9c <_malloc_r+0xa0>
 8006f7e:	6822      	ldr	r2, [r4, #0]
 8006f80:	1b52      	subs	r2, r2, r5
 8006f82:	d41e      	bmi.n	8006fc2 <_malloc_r+0xc6>
 8006f84:	2a0b      	cmp	r2, #11
 8006f86:	d916      	bls.n	8006fb6 <_malloc_r+0xba>
 8006f88:	1961      	adds	r1, r4, r5
 8006f8a:	42a3      	cmp	r3, r4
 8006f8c:	6025      	str	r5, [r4, #0]
 8006f8e:	bf18      	it	ne
 8006f90:	6059      	strne	r1, [r3, #4]
 8006f92:	6863      	ldr	r3, [r4, #4]
 8006f94:	bf08      	it	eq
 8006f96:	6031      	streq	r1, [r6, #0]
 8006f98:	5162      	str	r2, [r4, r5]
 8006f9a:	604b      	str	r3, [r1, #4]
 8006f9c:	4638      	mov	r0, r7
 8006f9e:	f104 060b 	add.w	r6, r4, #11
 8006fa2:	f000 f9ed 	bl	8007380 <__malloc_unlock>
 8006fa6:	f026 0607 	bic.w	r6, r6, #7
 8006faa:	1d23      	adds	r3, r4, #4
 8006fac:	1af2      	subs	r2, r6, r3
 8006fae:	d0b6      	beq.n	8006f1e <_malloc_r+0x22>
 8006fb0:	1b9b      	subs	r3, r3, r6
 8006fb2:	50a3      	str	r3, [r4, r2]
 8006fb4:	e7b3      	b.n	8006f1e <_malloc_r+0x22>
 8006fb6:	6862      	ldr	r2, [r4, #4]
 8006fb8:	42a3      	cmp	r3, r4
 8006fba:	bf0c      	ite	eq
 8006fbc:	6032      	streq	r2, [r6, #0]
 8006fbe:	605a      	strne	r2, [r3, #4]
 8006fc0:	e7ec      	b.n	8006f9c <_malloc_r+0xa0>
 8006fc2:	4623      	mov	r3, r4
 8006fc4:	6864      	ldr	r4, [r4, #4]
 8006fc6:	e7b2      	b.n	8006f2e <_malloc_r+0x32>
 8006fc8:	4634      	mov	r4, r6
 8006fca:	6876      	ldr	r6, [r6, #4]
 8006fcc:	e7b9      	b.n	8006f42 <_malloc_r+0x46>
 8006fce:	230c      	movs	r3, #12
 8006fd0:	603b      	str	r3, [r7, #0]
 8006fd2:	4638      	mov	r0, r7
 8006fd4:	f000 f9d4 	bl	8007380 <__malloc_unlock>
 8006fd8:	e7a1      	b.n	8006f1e <_malloc_r+0x22>
 8006fda:	6025      	str	r5, [r4, #0]
 8006fdc:	e7de      	b.n	8006f9c <_malloc_r+0xa0>
 8006fde:	bf00      	nop
 8006fe0:	20000408 	.word	0x20000408

08006fe4 <__ssputs_r>:
 8006fe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fe8:	688e      	ldr	r6, [r1, #8]
 8006fea:	429e      	cmp	r6, r3
 8006fec:	4682      	mov	sl, r0
 8006fee:	460c      	mov	r4, r1
 8006ff0:	4690      	mov	r8, r2
 8006ff2:	461f      	mov	r7, r3
 8006ff4:	d838      	bhi.n	8007068 <__ssputs_r+0x84>
 8006ff6:	898a      	ldrh	r2, [r1, #12]
 8006ff8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006ffc:	d032      	beq.n	8007064 <__ssputs_r+0x80>
 8006ffe:	6825      	ldr	r5, [r4, #0]
 8007000:	6909      	ldr	r1, [r1, #16]
 8007002:	eba5 0901 	sub.w	r9, r5, r1
 8007006:	6965      	ldr	r5, [r4, #20]
 8007008:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800700c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007010:	3301      	adds	r3, #1
 8007012:	444b      	add	r3, r9
 8007014:	106d      	asrs	r5, r5, #1
 8007016:	429d      	cmp	r5, r3
 8007018:	bf38      	it	cc
 800701a:	461d      	movcc	r5, r3
 800701c:	0553      	lsls	r3, r2, #21
 800701e:	d531      	bpl.n	8007084 <__ssputs_r+0xa0>
 8007020:	4629      	mov	r1, r5
 8007022:	f7ff ff6b 	bl	8006efc <_malloc_r>
 8007026:	4606      	mov	r6, r0
 8007028:	b950      	cbnz	r0, 8007040 <__ssputs_r+0x5c>
 800702a:	230c      	movs	r3, #12
 800702c:	f8ca 3000 	str.w	r3, [sl]
 8007030:	89a3      	ldrh	r3, [r4, #12]
 8007032:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007036:	81a3      	strh	r3, [r4, #12]
 8007038:	f04f 30ff 	mov.w	r0, #4294967295
 800703c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007040:	6921      	ldr	r1, [r4, #16]
 8007042:	464a      	mov	r2, r9
 8007044:	f7ff fb46 	bl	80066d4 <memcpy>
 8007048:	89a3      	ldrh	r3, [r4, #12]
 800704a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800704e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007052:	81a3      	strh	r3, [r4, #12]
 8007054:	6126      	str	r6, [r4, #16]
 8007056:	6165      	str	r5, [r4, #20]
 8007058:	444e      	add	r6, r9
 800705a:	eba5 0509 	sub.w	r5, r5, r9
 800705e:	6026      	str	r6, [r4, #0]
 8007060:	60a5      	str	r5, [r4, #8]
 8007062:	463e      	mov	r6, r7
 8007064:	42be      	cmp	r6, r7
 8007066:	d900      	bls.n	800706a <__ssputs_r+0x86>
 8007068:	463e      	mov	r6, r7
 800706a:	6820      	ldr	r0, [r4, #0]
 800706c:	4632      	mov	r2, r6
 800706e:	4641      	mov	r1, r8
 8007070:	f000 f966 	bl	8007340 <memmove>
 8007074:	68a3      	ldr	r3, [r4, #8]
 8007076:	1b9b      	subs	r3, r3, r6
 8007078:	60a3      	str	r3, [r4, #8]
 800707a:	6823      	ldr	r3, [r4, #0]
 800707c:	4433      	add	r3, r6
 800707e:	6023      	str	r3, [r4, #0]
 8007080:	2000      	movs	r0, #0
 8007082:	e7db      	b.n	800703c <__ssputs_r+0x58>
 8007084:	462a      	mov	r2, r5
 8007086:	f000 f981 	bl	800738c <_realloc_r>
 800708a:	4606      	mov	r6, r0
 800708c:	2800      	cmp	r0, #0
 800708e:	d1e1      	bne.n	8007054 <__ssputs_r+0x70>
 8007090:	6921      	ldr	r1, [r4, #16]
 8007092:	4650      	mov	r0, sl
 8007094:	f7ff fec6 	bl	8006e24 <_free_r>
 8007098:	e7c7      	b.n	800702a <__ssputs_r+0x46>
	...

0800709c <_svfiprintf_r>:
 800709c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070a0:	4698      	mov	r8, r3
 80070a2:	898b      	ldrh	r3, [r1, #12]
 80070a4:	061b      	lsls	r3, r3, #24
 80070a6:	b09d      	sub	sp, #116	; 0x74
 80070a8:	4607      	mov	r7, r0
 80070aa:	460d      	mov	r5, r1
 80070ac:	4614      	mov	r4, r2
 80070ae:	d50e      	bpl.n	80070ce <_svfiprintf_r+0x32>
 80070b0:	690b      	ldr	r3, [r1, #16]
 80070b2:	b963      	cbnz	r3, 80070ce <_svfiprintf_r+0x32>
 80070b4:	2140      	movs	r1, #64	; 0x40
 80070b6:	f7ff ff21 	bl	8006efc <_malloc_r>
 80070ba:	6028      	str	r0, [r5, #0]
 80070bc:	6128      	str	r0, [r5, #16]
 80070be:	b920      	cbnz	r0, 80070ca <_svfiprintf_r+0x2e>
 80070c0:	230c      	movs	r3, #12
 80070c2:	603b      	str	r3, [r7, #0]
 80070c4:	f04f 30ff 	mov.w	r0, #4294967295
 80070c8:	e0d1      	b.n	800726e <_svfiprintf_r+0x1d2>
 80070ca:	2340      	movs	r3, #64	; 0x40
 80070cc:	616b      	str	r3, [r5, #20]
 80070ce:	2300      	movs	r3, #0
 80070d0:	9309      	str	r3, [sp, #36]	; 0x24
 80070d2:	2320      	movs	r3, #32
 80070d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80070d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80070dc:	2330      	movs	r3, #48	; 0x30
 80070de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007288 <_svfiprintf_r+0x1ec>
 80070e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80070e6:	f04f 0901 	mov.w	r9, #1
 80070ea:	4623      	mov	r3, r4
 80070ec:	469a      	mov	sl, r3
 80070ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80070f2:	b10a      	cbz	r2, 80070f8 <_svfiprintf_r+0x5c>
 80070f4:	2a25      	cmp	r2, #37	; 0x25
 80070f6:	d1f9      	bne.n	80070ec <_svfiprintf_r+0x50>
 80070f8:	ebba 0b04 	subs.w	fp, sl, r4
 80070fc:	d00b      	beq.n	8007116 <_svfiprintf_r+0x7a>
 80070fe:	465b      	mov	r3, fp
 8007100:	4622      	mov	r2, r4
 8007102:	4629      	mov	r1, r5
 8007104:	4638      	mov	r0, r7
 8007106:	f7ff ff6d 	bl	8006fe4 <__ssputs_r>
 800710a:	3001      	adds	r0, #1
 800710c:	f000 80aa 	beq.w	8007264 <_svfiprintf_r+0x1c8>
 8007110:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007112:	445a      	add	r2, fp
 8007114:	9209      	str	r2, [sp, #36]	; 0x24
 8007116:	f89a 3000 	ldrb.w	r3, [sl]
 800711a:	2b00      	cmp	r3, #0
 800711c:	f000 80a2 	beq.w	8007264 <_svfiprintf_r+0x1c8>
 8007120:	2300      	movs	r3, #0
 8007122:	f04f 32ff 	mov.w	r2, #4294967295
 8007126:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800712a:	f10a 0a01 	add.w	sl, sl, #1
 800712e:	9304      	str	r3, [sp, #16]
 8007130:	9307      	str	r3, [sp, #28]
 8007132:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007136:	931a      	str	r3, [sp, #104]	; 0x68
 8007138:	4654      	mov	r4, sl
 800713a:	2205      	movs	r2, #5
 800713c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007140:	4851      	ldr	r0, [pc, #324]	; (8007288 <_svfiprintf_r+0x1ec>)
 8007142:	f7f9 f855 	bl	80001f0 <memchr>
 8007146:	9a04      	ldr	r2, [sp, #16]
 8007148:	b9d8      	cbnz	r0, 8007182 <_svfiprintf_r+0xe6>
 800714a:	06d0      	lsls	r0, r2, #27
 800714c:	bf44      	itt	mi
 800714e:	2320      	movmi	r3, #32
 8007150:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007154:	0711      	lsls	r1, r2, #28
 8007156:	bf44      	itt	mi
 8007158:	232b      	movmi	r3, #43	; 0x2b
 800715a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800715e:	f89a 3000 	ldrb.w	r3, [sl]
 8007162:	2b2a      	cmp	r3, #42	; 0x2a
 8007164:	d015      	beq.n	8007192 <_svfiprintf_r+0xf6>
 8007166:	9a07      	ldr	r2, [sp, #28]
 8007168:	4654      	mov	r4, sl
 800716a:	2000      	movs	r0, #0
 800716c:	f04f 0c0a 	mov.w	ip, #10
 8007170:	4621      	mov	r1, r4
 8007172:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007176:	3b30      	subs	r3, #48	; 0x30
 8007178:	2b09      	cmp	r3, #9
 800717a:	d94e      	bls.n	800721a <_svfiprintf_r+0x17e>
 800717c:	b1b0      	cbz	r0, 80071ac <_svfiprintf_r+0x110>
 800717e:	9207      	str	r2, [sp, #28]
 8007180:	e014      	b.n	80071ac <_svfiprintf_r+0x110>
 8007182:	eba0 0308 	sub.w	r3, r0, r8
 8007186:	fa09 f303 	lsl.w	r3, r9, r3
 800718a:	4313      	orrs	r3, r2
 800718c:	9304      	str	r3, [sp, #16]
 800718e:	46a2      	mov	sl, r4
 8007190:	e7d2      	b.n	8007138 <_svfiprintf_r+0x9c>
 8007192:	9b03      	ldr	r3, [sp, #12]
 8007194:	1d19      	adds	r1, r3, #4
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	9103      	str	r1, [sp, #12]
 800719a:	2b00      	cmp	r3, #0
 800719c:	bfbb      	ittet	lt
 800719e:	425b      	neglt	r3, r3
 80071a0:	f042 0202 	orrlt.w	r2, r2, #2
 80071a4:	9307      	strge	r3, [sp, #28]
 80071a6:	9307      	strlt	r3, [sp, #28]
 80071a8:	bfb8      	it	lt
 80071aa:	9204      	strlt	r2, [sp, #16]
 80071ac:	7823      	ldrb	r3, [r4, #0]
 80071ae:	2b2e      	cmp	r3, #46	; 0x2e
 80071b0:	d10c      	bne.n	80071cc <_svfiprintf_r+0x130>
 80071b2:	7863      	ldrb	r3, [r4, #1]
 80071b4:	2b2a      	cmp	r3, #42	; 0x2a
 80071b6:	d135      	bne.n	8007224 <_svfiprintf_r+0x188>
 80071b8:	9b03      	ldr	r3, [sp, #12]
 80071ba:	1d1a      	adds	r2, r3, #4
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	9203      	str	r2, [sp, #12]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	bfb8      	it	lt
 80071c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80071c8:	3402      	adds	r4, #2
 80071ca:	9305      	str	r3, [sp, #20]
 80071cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007298 <_svfiprintf_r+0x1fc>
 80071d0:	7821      	ldrb	r1, [r4, #0]
 80071d2:	2203      	movs	r2, #3
 80071d4:	4650      	mov	r0, sl
 80071d6:	f7f9 f80b 	bl	80001f0 <memchr>
 80071da:	b140      	cbz	r0, 80071ee <_svfiprintf_r+0x152>
 80071dc:	2340      	movs	r3, #64	; 0x40
 80071de:	eba0 000a 	sub.w	r0, r0, sl
 80071e2:	fa03 f000 	lsl.w	r0, r3, r0
 80071e6:	9b04      	ldr	r3, [sp, #16]
 80071e8:	4303      	orrs	r3, r0
 80071ea:	3401      	adds	r4, #1
 80071ec:	9304      	str	r3, [sp, #16]
 80071ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071f2:	4826      	ldr	r0, [pc, #152]	; (800728c <_svfiprintf_r+0x1f0>)
 80071f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80071f8:	2206      	movs	r2, #6
 80071fa:	f7f8 fff9 	bl	80001f0 <memchr>
 80071fe:	2800      	cmp	r0, #0
 8007200:	d038      	beq.n	8007274 <_svfiprintf_r+0x1d8>
 8007202:	4b23      	ldr	r3, [pc, #140]	; (8007290 <_svfiprintf_r+0x1f4>)
 8007204:	bb1b      	cbnz	r3, 800724e <_svfiprintf_r+0x1b2>
 8007206:	9b03      	ldr	r3, [sp, #12]
 8007208:	3307      	adds	r3, #7
 800720a:	f023 0307 	bic.w	r3, r3, #7
 800720e:	3308      	adds	r3, #8
 8007210:	9303      	str	r3, [sp, #12]
 8007212:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007214:	4433      	add	r3, r6
 8007216:	9309      	str	r3, [sp, #36]	; 0x24
 8007218:	e767      	b.n	80070ea <_svfiprintf_r+0x4e>
 800721a:	fb0c 3202 	mla	r2, ip, r2, r3
 800721e:	460c      	mov	r4, r1
 8007220:	2001      	movs	r0, #1
 8007222:	e7a5      	b.n	8007170 <_svfiprintf_r+0xd4>
 8007224:	2300      	movs	r3, #0
 8007226:	3401      	adds	r4, #1
 8007228:	9305      	str	r3, [sp, #20]
 800722a:	4619      	mov	r1, r3
 800722c:	f04f 0c0a 	mov.w	ip, #10
 8007230:	4620      	mov	r0, r4
 8007232:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007236:	3a30      	subs	r2, #48	; 0x30
 8007238:	2a09      	cmp	r2, #9
 800723a:	d903      	bls.n	8007244 <_svfiprintf_r+0x1a8>
 800723c:	2b00      	cmp	r3, #0
 800723e:	d0c5      	beq.n	80071cc <_svfiprintf_r+0x130>
 8007240:	9105      	str	r1, [sp, #20]
 8007242:	e7c3      	b.n	80071cc <_svfiprintf_r+0x130>
 8007244:	fb0c 2101 	mla	r1, ip, r1, r2
 8007248:	4604      	mov	r4, r0
 800724a:	2301      	movs	r3, #1
 800724c:	e7f0      	b.n	8007230 <_svfiprintf_r+0x194>
 800724e:	ab03      	add	r3, sp, #12
 8007250:	9300      	str	r3, [sp, #0]
 8007252:	462a      	mov	r2, r5
 8007254:	4b0f      	ldr	r3, [pc, #60]	; (8007294 <_svfiprintf_r+0x1f8>)
 8007256:	a904      	add	r1, sp, #16
 8007258:	4638      	mov	r0, r7
 800725a:	f7fd ffcb 	bl	80051f4 <_printf_float>
 800725e:	1c42      	adds	r2, r0, #1
 8007260:	4606      	mov	r6, r0
 8007262:	d1d6      	bne.n	8007212 <_svfiprintf_r+0x176>
 8007264:	89ab      	ldrh	r3, [r5, #12]
 8007266:	065b      	lsls	r3, r3, #25
 8007268:	f53f af2c 	bmi.w	80070c4 <_svfiprintf_r+0x28>
 800726c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800726e:	b01d      	add	sp, #116	; 0x74
 8007270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007274:	ab03      	add	r3, sp, #12
 8007276:	9300      	str	r3, [sp, #0]
 8007278:	462a      	mov	r2, r5
 800727a:	4b06      	ldr	r3, [pc, #24]	; (8007294 <_svfiprintf_r+0x1f8>)
 800727c:	a904      	add	r1, sp, #16
 800727e:	4638      	mov	r0, r7
 8007280:	f7fe fa5c 	bl	800573c <_printf_i>
 8007284:	e7eb      	b.n	800725e <_svfiprintf_r+0x1c2>
 8007286:	bf00      	nop
 8007288:	080080fc 	.word	0x080080fc
 800728c:	08008106 	.word	0x08008106
 8007290:	080051f5 	.word	0x080051f5
 8007294:	08006fe5 	.word	0x08006fe5
 8007298:	08008102 	.word	0x08008102

0800729c <_sbrk_r>:
 800729c:	b538      	push	{r3, r4, r5, lr}
 800729e:	4d06      	ldr	r5, [pc, #24]	; (80072b8 <_sbrk_r+0x1c>)
 80072a0:	2300      	movs	r3, #0
 80072a2:	4604      	mov	r4, r0
 80072a4:	4608      	mov	r0, r1
 80072a6:	602b      	str	r3, [r5, #0]
 80072a8:	f7fa fcc0 	bl	8001c2c <_sbrk>
 80072ac:	1c43      	adds	r3, r0, #1
 80072ae:	d102      	bne.n	80072b6 <_sbrk_r+0x1a>
 80072b0:	682b      	ldr	r3, [r5, #0]
 80072b2:	b103      	cbz	r3, 80072b6 <_sbrk_r+0x1a>
 80072b4:	6023      	str	r3, [r4, #0]
 80072b6:	bd38      	pop	{r3, r4, r5, pc}
 80072b8:	20000410 	.word	0x20000410

080072bc <__assert_func>:
 80072bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80072be:	4614      	mov	r4, r2
 80072c0:	461a      	mov	r2, r3
 80072c2:	4b09      	ldr	r3, [pc, #36]	; (80072e8 <__assert_func+0x2c>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4605      	mov	r5, r0
 80072c8:	68d8      	ldr	r0, [r3, #12]
 80072ca:	b14c      	cbz	r4, 80072e0 <__assert_func+0x24>
 80072cc:	4b07      	ldr	r3, [pc, #28]	; (80072ec <__assert_func+0x30>)
 80072ce:	9100      	str	r1, [sp, #0]
 80072d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80072d4:	4906      	ldr	r1, [pc, #24]	; (80072f0 <__assert_func+0x34>)
 80072d6:	462b      	mov	r3, r5
 80072d8:	f000 f80e 	bl	80072f8 <fiprintf>
 80072dc:	f000 faac 	bl	8007838 <abort>
 80072e0:	4b04      	ldr	r3, [pc, #16]	; (80072f4 <__assert_func+0x38>)
 80072e2:	461c      	mov	r4, r3
 80072e4:	e7f3      	b.n	80072ce <__assert_func+0x12>
 80072e6:	bf00      	nop
 80072e8:	2000000c 	.word	0x2000000c
 80072ec:	0800810d 	.word	0x0800810d
 80072f0:	0800811a 	.word	0x0800811a
 80072f4:	08008148 	.word	0x08008148

080072f8 <fiprintf>:
 80072f8:	b40e      	push	{r1, r2, r3}
 80072fa:	b503      	push	{r0, r1, lr}
 80072fc:	4601      	mov	r1, r0
 80072fe:	ab03      	add	r3, sp, #12
 8007300:	4805      	ldr	r0, [pc, #20]	; (8007318 <fiprintf+0x20>)
 8007302:	f853 2b04 	ldr.w	r2, [r3], #4
 8007306:	6800      	ldr	r0, [r0, #0]
 8007308:	9301      	str	r3, [sp, #4]
 800730a:	f000 f897 	bl	800743c <_vfiprintf_r>
 800730e:	b002      	add	sp, #8
 8007310:	f85d eb04 	ldr.w	lr, [sp], #4
 8007314:	b003      	add	sp, #12
 8007316:	4770      	bx	lr
 8007318:	2000000c 	.word	0x2000000c

0800731c <__ascii_mbtowc>:
 800731c:	b082      	sub	sp, #8
 800731e:	b901      	cbnz	r1, 8007322 <__ascii_mbtowc+0x6>
 8007320:	a901      	add	r1, sp, #4
 8007322:	b142      	cbz	r2, 8007336 <__ascii_mbtowc+0x1a>
 8007324:	b14b      	cbz	r3, 800733a <__ascii_mbtowc+0x1e>
 8007326:	7813      	ldrb	r3, [r2, #0]
 8007328:	600b      	str	r3, [r1, #0]
 800732a:	7812      	ldrb	r2, [r2, #0]
 800732c:	1e10      	subs	r0, r2, #0
 800732e:	bf18      	it	ne
 8007330:	2001      	movne	r0, #1
 8007332:	b002      	add	sp, #8
 8007334:	4770      	bx	lr
 8007336:	4610      	mov	r0, r2
 8007338:	e7fb      	b.n	8007332 <__ascii_mbtowc+0x16>
 800733a:	f06f 0001 	mvn.w	r0, #1
 800733e:	e7f8      	b.n	8007332 <__ascii_mbtowc+0x16>

08007340 <memmove>:
 8007340:	4288      	cmp	r0, r1
 8007342:	b510      	push	{r4, lr}
 8007344:	eb01 0402 	add.w	r4, r1, r2
 8007348:	d902      	bls.n	8007350 <memmove+0x10>
 800734a:	4284      	cmp	r4, r0
 800734c:	4623      	mov	r3, r4
 800734e:	d807      	bhi.n	8007360 <memmove+0x20>
 8007350:	1e43      	subs	r3, r0, #1
 8007352:	42a1      	cmp	r1, r4
 8007354:	d008      	beq.n	8007368 <memmove+0x28>
 8007356:	f811 2b01 	ldrb.w	r2, [r1], #1
 800735a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800735e:	e7f8      	b.n	8007352 <memmove+0x12>
 8007360:	4402      	add	r2, r0
 8007362:	4601      	mov	r1, r0
 8007364:	428a      	cmp	r2, r1
 8007366:	d100      	bne.n	800736a <memmove+0x2a>
 8007368:	bd10      	pop	{r4, pc}
 800736a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800736e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007372:	e7f7      	b.n	8007364 <memmove+0x24>

08007374 <__malloc_lock>:
 8007374:	4801      	ldr	r0, [pc, #4]	; (800737c <__malloc_lock+0x8>)
 8007376:	f000 bc1f 	b.w	8007bb8 <__retarget_lock_acquire_recursive>
 800737a:	bf00      	nop
 800737c:	20000414 	.word	0x20000414

08007380 <__malloc_unlock>:
 8007380:	4801      	ldr	r0, [pc, #4]	; (8007388 <__malloc_unlock+0x8>)
 8007382:	f000 bc1a 	b.w	8007bba <__retarget_lock_release_recursive>
 8007386:	bf00      	nop
 8007388:	20000414 	.word	0x20000414

0800738c <_realloc_r>:
 800738c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007390:	4680      	mov	r8, r0
 8007392:	4614      	mov	r4, r2
 8007394:	460e      	mov	r6, r1
 8007396:	b921      	cbnz	r1, 80073a2 <_realloc_r+0x16>
 8007398:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800739c:	4611      	mov	r1, r2
 800739e:	f7ff bdad 	b.w	8006efc <_malloc_r>
 80073a2:	b92a      	cbnz	r2, 80073b0 <_realloc_r+0x24>
 80073a4:	f7ff fd3e 	bl	8006e24 <_free_r>
 80073a8:	4625      	mov	r5, r4
 80073aa:	4628      	mov	r0, r5
 80073ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073b0:	f000 fc6a 	bl	8007c88 <_malloc_usable_size_r>
 80073b4:	4284      	cmp	r4, r0
 80073b6:	4607      	mov	r7, r0
 80073b8:	d802      	bhi.n	80073c0 <_realloc_r+0x34>
 80073ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80073be:	d812      	bhi.n	80073e6 <_realloc_r+0x5a>
 80073c0:	4621      	mov	r1, r4
 80073c2:	4640      	mov	r0, r8
 80073c4:	f7ff fd9a 	bl	8006efc <_malloc_r>
 80073c8:	4605      	mov	r5, r0
 80073ca:	2800      	cmp	r0, #0
 80073cc:	d0ed      	beq.n	80073aa <_realloc_r+0x1e>
 80073ce:	42bc      	cmp	r4, r7
 80073d0:	4622      	mov	r2, r4
 80073d2:	4631      	mov	r1, r6
 80073d4:	bf28      	it	cs
 80073d6:	463a      	movcs	r2, r7
 80073d8:	f7ff f97c 	bl	80066d4 <memcpy>
 80073dc:	4631      	mov	r1, r6
 80073de:	4640      	mov	r0, r8
 80073e0:	f7ff fd20 	bl	8006e24 <_free_r>
 80073e4:	e7e1      	b.n	80073aa <_realloc_r+0x1e>
 80073e6:	4635      	mov	r5, r6
 80073e8:	e7df      	b.n	80073aa <_realloc_r+0x1e>

080073ea <__sfputc_r>:
 80073ea:	6893      	ldr	r3, [r2, #8]
 80073ec:	3b01      	subs	r3, #1
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	b410      	push	{r4}
 80073f2:	6093      	str	r3, [r2, #8]
 80073f4:	da08      	bge.n	8007408 <__sfputc_r+0x1e>
 80073f6:	6994      	ldr	r4, [r2, #24]
 80073f8:	42a3      	cmp	r3, r4
 80073fa:	db01      	blt.n	8007400 <__sfputc_r+0x16>
 80073fc:	290a      	cmp	r1, #10
 80073fe:	d103      	bne.n	8007408 <__sfputc_r+0x1e>
 8007400:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007404:	f000 b94a 	b.w	800769c <__swbuf_r>
 8007408:	6813      	ldr	r3, [r2, #0]
 800740a:	1c58      	adds	r0, r3, #1
 800740c:	6010      	str	r0, [r2, #0]
 800740e:	7019      	strb	r1, [r3, #0]
 8007410:	4608      	mov	r0, r1
 8007412:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007416:	4770      	bx	lr

08007418 <__sfputs_r>:
 8007418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800741a:	4606      	mov	r6, r0
 800741c:	460f      	mov	r7, r1
 800741e:	4614      	mov	r4, r2
 8007420:	18d5      	adds	r5, r2, r3
 8007422:	42ac      	cmp	r4, r5
 8007424:	d101      	bne.n	800742a <__sfputs_r+0x12>
 8007426:	2000      	movs	r0, #0
 8007428:	e007      	b.n	800743a <__sfputs_r+0x22>
 800742a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800742e:	463a      	mov	r2, r7
 8007430:	4630      	mov	r0, r6
 8007432:	f7ff ffda 	bl	80073ea <__sfputc_r>
 8007436:	1c43      	adds	r3, r0, #1
 8007438:	d1f3      	bne.n	8007422 <__sfputs_r+0xa>
 800743a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800743c <_vfiprintf_r>:
 800743c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007440:	460d      	mov	r5, r1
 8007442:	b09d      	sub	sp, #116	; 0x74
 8007444:	4614      	mov	r4, r2
 8007446:	4698      	mov	r8, r3
 8007448:	4606      	mov	r6, r0
 800744a:	b118      	cbz	r0, 8007454 <_vfiprintf_r+0x18>
 800744c:	6983      	ldr	r3, [r0, #24]
 800744e:	b90b      	cbnz	r3, 8007454 <_vfiprintf_r+0x18>
 8007450:	f000 fb14 	bl	8007a7c <__sinit>
 8007454:	4b89      	ldr	r3, [pc, #548]	; (800767c <_vfiprintf_r+0x240>)
 8007456:	429d      	cmp	r5, r3
 8007458:	d11b      	bne.n	8007492 <_vfiprintf_r+0x56>
 800745a:	6875      	ldr	r5, [r6, #4]
 800745c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800745e:	07d9      	lsls	r1, r3, #31
 8007460:	d405      	bmi.n	800746e <_vfiprintf_r+0x32>
 8007462:	89ab      	ldrh	r3, [r5, #12]
 8007464:	059a      	lsls	r2, r3, #22
 8007466:	d402      	bmi.n	800746e <_vfiprintf_r+0x32>
 8007468:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800746a:	f000 fba5 	bl	8007bb8 <__retarget_lock_acquire_recursive>
 800746e:	89ab      	ldrh	r3, [r5, #12]
 8007470:	071b      	lsls	r3, r3, #28
 8007472:	d501      	bpl.n	8007478 <_vfiprintf_r+0x3c>
 8007474:	692b      	ldr	r3, [r5, #16]
 8007476:	b9eb      	cbnz	r3, 80074b4 <_vfiprintf_r+0x78>
 8007478:	4629      	mov	r1, r5
 800747a:	4630      	mov	r0, r6
 800747c:	f000 f96e 	bl	800775c <__swsetup_r>
 8007480:	b1c0      	cbz	r0, 80074b4 <_vfiprintf_r+0x78>
 8007482:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007484:	07dc      	lsls	r4, r3, #31
 8007486:	d50e      	bpl.n	80074a6 <_vfiprintf_r+0x6a>
 8007488:	f04f 30ff 	mov.w	r0, #4294967295
 800748c:	b01d      	add	sp, #116	; 0x74
 800748e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007492:	4b7b      	ldr	r3, [pc, #492]	; (8007680 <_vfiprintf_r+0x244>)
 8007494:	429d      	cmp	r5, r3
 8007496:	d101      	bne.n	800749c <_vfiprintf_r+0x60>
 8007498:	68b5      	ldr	r5, [r6, #8]
 800749a:	e7df      	b.n	800745c <_vfiprintf_r+0x20>
 800749c:	4b79      	ldr	r3, [pc, #484]	; (8007684 <_vfiprintf_r+0x248>)
 800749e:	429d      	cmp	r5, r3
 80074a0:	bf08      	it	eq
 80074a2:	68f5      	ldreq	r5, [r6, #12]
 80074a4:	e7da      	b.n	800745c <_vfiprintf_r+0x20>
 80074a6:	89ab      	ldrh	r3, [r5, #12]
 80074a8:	0598      	lsls	r0, r3, #22
 80074aa:	d4ed      	bmi.n	8007488 <_vfiprintf_r+0x4c>
 80074ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80074ae:	f000 fb84 	bl	8007bba <__retarget_lock_release_recursive>
 80074b2:	e7e9      	b.n	8007488 <_vfiprintf_r+0x4c>
 80074b4:	2300      	movs	r3, #0
 80074b6:	9309      	str	r3, [sp, #36]	; 0x24
 80074b8:	2320      	movs	r3, #32
 80074ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80074be:	f8cd 800c 	str.w	r8, [sp, #12]
 80074c2:	2330      	movs	r3, #48	; 0x30
 80074c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007688 <_vfiprintf_r+0x24c>
 80074c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80074cc:	f04f 0901 	mov.w	r9, #1
 80074d0:	4623      	mov	r3, r4
 80074d2:	469a      	mov	sl, r3
 80074d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074d8:	b10a      	cbz	r2, 80074de <_vfiprintf_r+0xa2>
 80074da:	2a25      	cmp	r2, #37	; 0x25
 80074dc:	d1f9      	bne.n	80074d2 <_vfiprintf_r+0x96>
 80074de:	ebba 0b04 	subs.w	fp, sl, r4
 80074e2:	d00b      	beq.n	80074fc <_vfiprintf_r+0xc0>
 80074e4:	465b      	mov	r3, fp
 80074e6:	4622      	mov	r2, r4
 80074e8:	4629      	mov	r1, r5
 80074ea:	4630      	mov	r0, r6
 80074ec:	f7ff ff94 	bl	8007418 <__sfputs_r>
 80074f0:	3001      	adds	r0, #1
 80074f2:	f000 80aa 	beq.w	800764a <_vfiprintf_r+0x20e>
 80074f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80074f8:	445a      	add	r2, fp
 80074fa:	9209      	str	r2, [sp, #36]	; 0x24
 80074fc:	f89a 3000 	ldrb.w	r3, [sl]
 8007500:	2b00      	cmp	r3, #0
 8007502:	f000 80a2 	beq.w	800764a <_vfiprintf_r+0x20e>
 8007506:	2300      	movs	r3, #0
 8007508:	f04f 32ff 	mov.w	r2, #4294967295
 800750c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007510:	f10a 0a01 	add.w	sl, sl, #1
 8007514:	9304      	str	r3, [sp, #16]
 8007516:	9307      	str	r3, [sp, #28]
 8007518:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800751c:	931a      	str	r3, [sp, #104]	; 0x68
 800751e:	4654      	mov	r4, sl
 8007520:	2205      	movs	r2, #5
 8007522:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007526:	4858      	ldr	r0, [pc, #352]	; (8007688 <_vfiprintf_r+0x24c>)
 8007528:	f7f8 fe62 	bl	80001f0 <memchr>
 800752c:	9a04      	ldr	r2, [sp, #16]
 800752e:	b9d8      	cbnz	r0, 8007568 <_vfiprintf_r+0x12c>
 8007530:	06d1      	lsls	r1, r2, #27
 8007532:	bf44      	itt	mi
 8007534:	2320      	movmi	r3, #32
 8007536:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800753a:	0713      	lsls	r3, r2, #28
 800753c:	bf44      	itt	mi
 800753e:	232b      	movmi	r3, #43	; 0x2b
 8007540:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007544:	f89a 3000 	ldrb.w	r3, [sl]
 8007548:	2b2a      	cmp	r3, #42	; 0x2a
 800754a:	d015      	beq.n	8007578 <_vfiprintf_r+0x13c>
 800754c:	9a07      	ldr	r2, [sp, #28]
 800754e:	4654      	mov	r4, sl
 8007550:	2000      	movs	r0, #0
 8007552:	f04f 0c0a 	mov.w	ip, #10
 8007556:	4621      	mov	r1, r4
 8007558:	f811 3b01 	ldrb.w	r3, [r1], #1
 800755c:	3b30      	subs	r3, #48	; 0x30
 800755e:	2b09      	cmp	r3, #9
 8007560:	d94e      	bls.n	8007600 <_vfiprintf_r+0x1c4>
 8007562:	b1b0      	cbz	r0, 8007592 <_vfiprintf_r+0x156>
 8007564:	9207      	str	r2, [sp, #28]
 8007566:	e014      	b.n	8007592 <_vfiprintf_r+0x156>
 8007568:	eba0 0308 	sub.w	r3, r0, r8
 800756c:	fa09 f303 	lsl.w	r3, r9, r3
 8007570:	4313      	orrs	r3, r2
 8007572:	9304      	str	r3, [sp, #16]
 8007574:	46a2      	mov	sl, r4
 8007576:	e7d2      	b.n	800751e <_vfiprintf_r+0xe2>
 8007578:	9b03      	ldr	r3, [sp, #12]
 800757a:	1d19      	adds	r1, r3, #4
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	9103      	str	r1, [sp, #12]
 8007580:	2b00      	cmp	r3, #0
 8007582:	bfbb      	ittet	lt
 8007584:	425b      	neglt	r3, r3
 8007586:	f042 0202 	orrlt.w	r2, r2, #2
 800758a:	9307      	strge	r3, [sp, #28]
 800758c:	9307      	strlt	r3, [sp, #28]
 800758e:	bfb8      	it	lt
 8007590:	9204      	strlt	r2, [sp, #16]
 8007592:	7823      	ldrb	r3, [r4, #0]
 8007594:	2b2e      	cmp	r3, #46	; 0x2e
 8007596:	d10c      	bne.n	80075b2 <_vfiprintf_r+0x176>
 8007598:	7863      	ldrb	r3, [r4, #1]
 800759a:	2b2a      	cmp	r3, #42	; 0x2a
 800759c:	d135      	bne.n	800760a <_vfiprintf_r+0x1ce>
 800759e:	9b03      	ldr	r3, [sp, #12]
 80075a0:	1d1a      	adds	r2, r3, #4
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	9203      	str	r2, [sp, #12]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	bfb8      	it	lt
 80075aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80075ae:	3402      	adds	r4, #2
 80075b0:	9305      	str	r3, [sp, #20]
 80075b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007698 <_vfiprintf_r+0x25c>
 80075b6:	7821      	ldrb	r1, [r4, #0]
 80075b8:	2203      	movs	r2, #3
 80075ba:	4650      	mov	r0, sl
 80075bc:	f7f8 fe18 	bl	80001f0 <memchr>
 80075c0:	b140      	cbz	r0, 80075d4 <_vfiprintf_r+0x198>
 80075c2:	2340      	movs	r3, #64	; 0x40
 80075c4:	eba0 000a 	sub.w	r0, r0, sl
 80075c8:	fa03 f000 	lsl.w	r0, r3, r0
 80075cc:	9b04      	ldr	r3, [sp, #16]
 80075ce:	4303      	orrs	r3, r0
 80075d0:	3401      	adds	r4, #1
 80075d2:	9304      	str	r3, [sp, #16]
 80075d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075d8:	482c      	ldr	r0, [pc, #176]	; (800768c <_vfiprintf_r+0x250>)
 80075da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80075de:	2206      	movs	r2, #6
 80075e0:	f7f8 fe06 	bl	80001f0 <memchr>
 80075e4:	2800      	cmp	r0, #0
 80075e6:	d03f      	beq.n	8007668 <_vfiprintf_r+0x22c>
 80075e8:	4b29      	ldr	r3, [pc, #164]	; (8007690 <_vfiprintf_r+0x254>)
 80075ea:	bb1b      	cbnz	r3, 8007634 <_vfiprintf_r+0x1f8>
 80075ec:	9b03      	ldr	r3, [sp, #12]
 80075ee:	3307      	adds	r3, #7
 80075f0:	f023 0307 	bic.w	r3, r3, #7
 80075f4:	3308      	adds	r3, #8
 80075f6:	9303      	str	r3, [sp, #12]
 80075f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075fa:	443b      	add	r3, r7
 80075fc:	9309      	str	r3, [sp, #36]	; 0x24
 80075fe:	e767      	b.n	80074d0 <_vfiprintf_r+0x94>
 8007600:	fb0c 3202 	mla	r2, ip, r2, r3
 8007604:	460c      	mov	r4, r1
 8007606:	2001      	movs	r0, #1
 8007608:	e7a5      	b.n	8007556 <_vfiprintf_r+0x11a>
 800760a:	2300      	movs	r3, #0
 800760c:	3401      	adds	r4, #1
 800760e:	9305      	str	r3, [sp, #20]
 8007610:	4619      	mov	r1, r3
 8007612:	f04f 0c0a 	mov.w	ip, #10
 8007616:	4620      	mov	r0, r4
 8007618:	f810 2b01 	ldrb.w	r2, [r0], #1
 800761c:	3a30      	subs	r2, #48	; 0x30
 800761e:	2a09      	cmp	r2, #9
 8007620:	d903      	bls.n	800762a <_vfiprintf_r+0x1ee>
 8007622:	2b00      	cmp	r3, #0
 8007624:	d0c5      	beq.n	80075b2 <_vfiprintf_r+0x176>
 8007626:	9105      	str	r1, [sp, #20]
 8007628:	e7c3      	b.n	80075b2 <_vfiprintf_r+0x176>
 800762a:	fb0c 2101 	mla	r1, ip, r1, r2
 800762e:	4604      	mov	r4, r0
 8007630:	2301      	movs	r3, #1
 8007632:	e7f0      	b.n	8007616 <_vfiprintf_r+0x1da>
 8007634:	ab03      	add	r3, sp, #12
 8007636:	9300      	str	r3, [sp, #0]
 8007638:	462a      	mov	r2, r5
 800763a:	4b16      	ldr	r3, [pc, #88]	; (8007694 <_vfiprintf_r+0x258>)
 800763c:	a904      	add	r1, sp, #16
 800763e:	4630      	mov	r0, r6
 8007640:	f7fd fdd8 	bl	80051f4 <_printf_float>
 8007644:	4607      	mov	r7, r0
 8007646:	1c78      	adds	r0, r7, #1
 8007648:	d1d6      	bne.n	80075f8 <_vfiprintf_r+0x1bc>
 800764a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800764c:	07d9      	lsls	r1, r3, #31
 800764e:	d405      	bmi.n	800765c <_vfiprintf_r+0x220>
 8007650:	89ab      	ldrh	r3, [r5, #12]
 8007652:	059a      	lsls	r2, r3, #22
 8007654:	d402      	bmi.n	800765c <_vfiprintf_r+0x220>
 8007656:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007658:	f000 faaf 	bl	8007bba <__retarget_lock_release_recursive>
 800765c:	89ab      	ldrh	r3, [r5, #12]
 800765e:	065b      	lsls	r3, r3, #25
 8007660:	f53f af12 	bmi.w	8007488 <_vfiprintf_r+0x4c>
 8007664:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007666:	e711      	b.n	800748c <_vfiprintf_r+0x50>
 8007668:	ab03      	add	r3, sp, #12
 800766a:	9300      	str	r3, [sp, #0]
 800766c:	462a      	mov	r2, r5
 800766e:	4b09      	ldr	r3, [pc, #36]	; (8007694 <_vfiprintf_r+0x258>)
 8007670:	a904      	add	r1, sp, #16
 8007672:	4630      	mov	r0, r6
 8007674:	f7fe f862 	bl	800573c <_printf_i>
 8007678:	e7e4      	b.n	8007644 <_vfiprintf_r+0x208>
 800767a:	bf00      	nop
 800767c:	08008274 	.word	0x08008274
 8007680:	08008294 	.word	0x08008294
 8007684:	08008254 	.word	0x08008254
 8007688:	080080fc 	.word	0x080080fc
 800768c:	08008106 	.word	0x08008106
 8007690:	080051f5 	.word	0x080051f5
 8007694:	08007419 	.word	0x08007419
 8007698:	08008102 	.word	0x08008102

0800769c <__swbuf_r>:
 800769c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800769e:	460e      	mov	r6, r1
 80076a0:	4614      	mov	r4, r2
 80076a2:	4605      	mov	r5, r0
 80076a4:	b118      	cbz	r0, 80076ae <__swbuf_r+0x12>
 80076a6:	6983      	ldr	r3, [r0, #24]
 80076a8:	b90b      	cbnz	r3, 80076ae <__swbuf_r+0x12>
 80076aa:	f000 f9e7 	bl	8007a7c <__sinit>
 80076ae:	4b21      	ldr	r3, [pc, #132]	; (8007734 <__swbuf_r+0x98>)
 80076b0:	429c      	cmp	r4, r3
 80076b2:	d12b      	bne.n	800770c <__swbuf_r+0x70>
 80076b4:	686c      	ldr	r4, [r5, #4]
 80076b6:	69a3      	ldr	r3, [r4, #24]
 80076b8:	60a3      	str	r3, [r4, #8]
 80076ba:	89a3      	ldrh	r3, [r4, #12]
 80076bc:	071a      	lsls	r2, r3, #28
 80076be:	d52f      	bpl.n	8007720 <__swbuf_r+0x84>
 80076c0:	6923      	ldr	r3, [r4, #16]
 80076c2:	b36b      	cbz	r3, 8007720 <__swbuf_r+0x84>
 80076c4:	6923      	ldr	r3, [r4, #16]
 80076c6:	6820      	ldr	r0, [r4, #0]
 80076c8:	1ac0      	subs	r0, r0, r3
 80076ca:	6963      	ldr	r3, [r4, #20]
 80076cc:	b2f6      	uxtb	r6, r6
 80076ce:	4283      	cmp	r3, r0
 80076d0:	4637      	mov	r7, r6
 80076d2:	dc04      	bgt.n	80076de <__swbuf_r+0x42>
 80076d4:	4621      	mov	r1, r4
 80076d6:	4628      	mov	r0, r5
 80076d8:	f000 f93c 	bl	8007954 <_fflush_r>
 80076dc:	bb30      	cbnz	r0, 800772c <__swbuf_r+0x90>
 80076de:	68a3      	ldr	r3, [r4, #8]
 80076e0:	3b01      	subs	r3, #1
 80076e2:	60a3      	str	r3, [r4, #8]
 80076e4:	6823      	ldr	r3, [r4, #0]
 80076e6:	1c5a      	adds	r2, r3, #1
 80076e8:	6022      	str	r2, [r4, #0]
 80076ea:	701e      	strb	r6, [r3, #0]
 80076ec:	6963      	ldr	r3, [r4, #20]
 80076ee:	3001      	adds	r0, #1
 80076f0:	4283      	cmp	r3, r0
 80076f2:	d004      	beq.n	80076fe <__swbuf_r+0x62>
 80076f4:	89a3      	ldrh	r3, [r4, #12]
 80076f6:	07db      	lsls	r3, r3, #31
 80076f8:	d506      	bpl.n	8007708 <__swbuf_r+0x6c>
 80076fa:	2e0a      	cmp	r6, #10
 80076fc:	d104      	bne.n	8007708 <__swbuf_r+0x6c>
 80076fe:	4621      	mov	r1, r4
 8007700:	4628      	mov	r0, r5
 8007702:	f000 f927 	bl	8007954 <_fflush_r>
 8007706:	b988      	cbnz	r0, 800772c <__swbuf_r+0x90>
 8007708:	4638      	mov	r0, r7
 800770a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800770c:	4b0a      	ldr	r3, [pc, #40]	; (8007738 <__swbuf_r+0x9c>)
 800770e:	429c      	cmp	r4, r3
 8007710:	d101      	bne.n	8007716 <__swbuf_r+0x7a>
 8007712:	68ac      	ldr	r4, [r5, #8]
 8007714:	e7cf      	b.n	80076b6 <__swbuf_r+0x1a>
 8007716:	4b09      	ldr	r3, [pc, #36]	; (800773c <__swbuf_r+0xa0>)
 8007718:	429c      	cmp	r4, r3
 800771a:	bf08      	it	eq
 800771c:	68ec      	ldreq	r4, [r5, #12]
 800771e:	e7ca      	b.n	80076b6 <__swbuf_r+0x1a>
 8007720:	4621      	mov	r1, r4
 8007722:	4628      	mov	r0, r5
 8007724:	f000 f81a 	bl	800775c <__swsetup_r>
 8007728:	2800      	cmp	r0, #0
 800772a:	d0cb      	beq.n	80076c4 <__swbuf_r+0x28>
 800772c:	f04f 37ff 	mov.w	r7, #4294967295
 8007730:	e7ea      	b.n	8007708 <__swbuf_r+0x6c>
 8007732:	bf00      	nop
 8007734:	08008274 	.word	0x08008274
 8007738:	08008294 	.word	0x08008294
 800773c:	08008254 	.word	0x08008254

08007740 <__ascii_wctomb>:
 8007740:	b149      	cbz	r1, 8007756 <__ascii_wctomb+0x16>
 8007742:	2aff      	cmp	r2, #255	; 0xff
 8007744:	bf85      	ittet	hi
 8007746:	238a      	movhi	r3, #138	; 0x8a
 8007748:	6003      	strhi	r3, [r0, #0]
 800774a:	700a      	strbls	r2, [r1, #0]
 800774c:	f04f 30ff 	movhi.w	r0, #4294967295
 8007750:	bf98      	it	ls
 8007752:	2001      	movls	r0, #1
 8007754:	4770      	bx	lr
 8007756:	4608      	mov	r0, r1
 8007758:	4770      	bx	lr
	...

0800775c <__swsetup_r>:
 800775c:	4b32      	ldr	r3, [pc, #200]	; (8007828 <__swsetup_r+0xcc>)
 800775e:	b570      	push	{r4, r5, r6, lr}
 8007760:	681d      	ldr	r5, [r3, #0]
 8007762:	4606      	mov	r6, r0
 8007764:	460c      	mov	r4, r1
 8007766:	b125      	cbz	r5, 8007772 <__swsetup_r+0x16>
 8007768:	69ab      	ldr	r3, [r5, #24]
 800776a:	b913      	cbnz	r3, 8007772 <__swsetup_r+0x16>
 800776c:	4628      	mov	r0, r5
 800776e:	f000 f985 	bl	8007a7c <__sinit>
 8007772:	4b2e      	ldr	r3, [pc, #184]	; (800782c <__swsetup_r+0xd0>)
 8007774:	429c      	cmp	r4, r3
 8007776:	d10f      	bne.n	8007798 <__swsetup_r+0x3c>
 8007778:	686c      	ldr	r4, [r5, #4]
 800777a:	89a3      	ldrh	r3, [r4, #12]
 800777c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007780:	0719      	lsls	r1, r3, #28
 8007782:	d42c      	bmi.n	80077de <__swsetup_r+0x82>
 8007784:	06dd      	lsls	r5, r3, #27
 8007786:	d411      	bmi.n	80077ac <__swsetup_r+0x50>
 8007788:	2309      	movs	r3, #9
 800778a:	6033      	str	r3, [r6, #0]
 800778c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007790:	81a3      	strh	r3, [r4, #12]
 8007792:	f04f 30ff 	mov.w	r0, #4294967295
 8007796:	e03e      	b.n	8007816 <__swsetup_r+0xba>
 8007798:	4b25      	ldr	r3, [pc, #148]	; (8007830 <__swsetup_r+0xd4>)
 800779a:	429c      	cmp	r4, r3
 800779c:	d101      	bne.n	80077a2 <__swsetup_r+0x46>
 800779e:	68ac      	ldr	r4, [r5, #8]
 80077a0:	e7eb      	b.n	800777a <__swsetup_r+0x1e>
 80077a2:	4b24      	ldr	r3, [pc, #144]	; (8007834 <__swsetup_r+0xd8>)
 80077a4:	429c      	cmp	r4, r3
 80077a6:	bf08      	it	eq
 80077a8:	68ec      	ldreq	r4, [r5, #12]
 80077aa:	e7e6      	b.n	800777a <__swsetup_r+0x1e>
 80077ac:	0758      	lsls	r0, r3, #29
 80077ae:	d512      	bpl.n	80077d6 <__swsetup_r+0x7a>
 80077b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80077b2:	b141      	cbz	r1, 80077c6 <__swsetup_r+0x6a>
 80077b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80077b8:	4299      	cmp	r1, r3
 80077ba:	d002      	beq.n	80077c2 <__swsetup_r+0x66>
 80077bc:	4630      	mov	r0, r6
 80077be:	f7ff fb31 	bl	8006e24 <_free_r>
 80077c2:	2300      	movs	r3, #0
 80077c4:	6363      	str	r3, [r4, #52]	; 0x34
 80077c6:	89a3      	ldrh	r3, [r4, #12]
 80077c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80077cc:	81a3      	strh	r3, [r4, #12]
 80077ce:	2300      	movs	r3, #0
 80077d0:	6063      	str	r3, [r4, #4]
 80077d2:	6923      	ldr	r3, [r4, #16]
 80077d4:	6023      	str	r3, [r4, #0]
 80077d6:	89a3      	ldrh	r3, [r4, #12]
 80077d8:	f043 0308 	orr.w	r3, r3, #8
 80077dc:	81a3      	strh	r3, [r4, #12]
 80077de:	6923      	ldr	r3, [r4, #16]
 80077e0:	b94b      	cbnz	r3, 80077f6 <__swsetup_r+0x9a>
 80077e2:	89a3      	ldrh	r3, [r4, #12]
 80077e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80077e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077ec:	d003      	beq.n	80077f6 <__swsetup_r+0x9a>
 80077ee:	4621      	mov	r1, r4
 80077f0:	4630      	mov	r0, r6
 80077f2:	f000 fa09 	bl	8007c08 <__smakebuf_r>
 80077f6:	89a0      	ldrh	r0, [r4, #12]
 80077f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80077fc:	f010 0301 	ands.w	r3, r0, #1
 8007800:	d00a      	beq.n	8007818 <__swsetup_r+0xbc>
 8007802:	2300      	movs	r3, #0
 8007804:	60a3      	str	r3, [r4, #8]
 8007806:	6963      	ldr	r3, [r4, #20]
 8007808:	425b      	negs	r3, r3
 800780a:	61a3      	str	r3, [r4, #24]
 800780c:	6923      	ldr	r3, [r4, #16]
 800780e:	b943      	cbnz	r3, 8007822 <__swsetup_r+0xc6>
 8007810:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007814:	d1ba      	bne.n	800778c <__swsetup_r+0x30>
 8007816:	bd70      	pop	{r4, r5, r6, pc}
 8007818:	0781      	lsls	r1, r0, #30
 800781a:	bf58      	it	pl
 800781c:	6963      	ldrpl	r3, [r4, #20]
 800781e:	60a3      	str	r3, [r4, #8]
 8007820:	e7f4      	b.n	800780c <__swsetup_r+0xb0>
 8007822:	2000      	movs	r0, #0
 8007824:	e7f7      	b.n	8007816 <__swsetup_r+0xba>
 8007826:	bf00      	nop
 8007828:	2000000c 	.word	0x2000000c
 800782c:	08008274 	.word	0x08008274
 8007830:	08008294 	.word	0x08008294
 8007834:	08008254 	.word	0x08008254

08007838 <abort>:
 8007838:	b508      	push	{r3, lr}
 800783a:	2006      	movs	r0, #6
 800783c:	f000 fa54 	bl	8007ce8 <raise>
 8007840:	2001      	movs	r0, #1
 8007842:	f7fa f97b 	bl	8001b3c <_exit>
	...

08007848 <__sflush_r>:
 8007848:	898a      	ldrh	r2, [r1, #12]
 800784a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800784e:	4605      	mov	r5, r0
 8007850:	0710      	lsls	r0, r2, #28
 8007852:	460c      	mov	r4, r1
 8007854:	d458      	bmi.n	8007908 <__sflush_r+0xc0>
 8007856:	684b      	ldr	r3, [r1, #4]
 8007858:	2b00      	cmp	r3, #0
 800785a:	dc05      	bgt.n	8007868 <__sflush_r+0x20>
 800785c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800785e:	2b00      	cmp	r3, #0
 8007860:	dc02      	bgt.n	8007868 <__sflush_r+0x20>
 8007862:	2000      	movs	r0, #0
 8007864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007868:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800786a:	2e00      	cmp	r6, #0
 800786c:	d0f9      	beq.n	8007862 <__sflush_r+0x1a>
 800786e:	2300      	movs	r3, #0
 8007870:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007874:	682f      	ldr	r7, [r5, #0]
 8007876:	602b      	str	r3, [r5, #0]
 8007878:	d032      	beq.n	80078e0 <__sflush_r+0x98>
 800787a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800787c:	89a3      	ldrh	r3, [r4, #12]
 800787e:	075a      	lsls	r2, r3, #29
 8007880:	d505      	bpl.n	800788e <__sflush_r+0x46>
 8007882:	6863      	ldr	r3, [r4, #4]
 8007884:	1ac0      	subs	r0, r0, r3
 8007886:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007888:	b10b      	cbz	r3, 800788e <__sflush_r+0x46>
 800788a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800788c:	1ac0      	subs	r0, r0, r3
 800788e:	2300      	movs	r3, #0
 8007890:	4602      	mov	r2, r0
 8007892:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007894:	6a21      	ldr	r1, [r4, #32]
 8007896:	4628      	mov	r0, r5
 8007898:	47b0      	blx	r6
 800789a:	1c43      	adds	r3, r0, #1
 800789c:	89a3      	ldrh	r3, [r4, #12]
 800789e:	d106      	bne.n	80078ae <__sflush_r+0x66>
 80078a0:	6829      	ldr	r1, [r5, #0]
 80078a2:	291d      	cmp	r1, #29
 80078a4:	d82c      	bhi.n	8007900 <__sflush_r+0xb8>
 80078a6:	4a2a      	ldr	r2, [pc, #168]	; (8007950 <__sflush_r+0x108>)
 80078a8:	40ca      	lsrs	r2, r1
 80078aa:	07d6      	lsls	r6, r2, #31
 80078ac:	d528      	bpl.n	8007900 <__sflush_r+0xb8>
 80078ae:	2200      	movs	r2, #0
 80078b0:	6062      	str	r2, [r4, #4]
 80078b2:	04d9      	lsls	r1, r3, #19
 80078b4:	6922      	ldr	r2, [r4, #16]
 80078b6:	6022      	str	r2, [r4, #0]
 80078b8:	d504      	bpl.n	80078c4 <__sflush_r+0x7c>
 80078ba:	1c42      	adds	r2, r0, #1
 80078bc:	d101      	bne.n	80078c2 <__sflush_r+0x7a>
 80078be:	682b      	ldr	r3, [r5, #0]
 80078c0:	b903      	cbnz	r3, 80078c4 <__sflush_r+0x7c>
 80078c2:	6560      	str	r0, [r4, #84]	; 0x54
 80078c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80078c6:	602f      	str	r7, [r5, #0]
 80078c8:	2900      	cmp	r1, #0
 80078ca:	d0ca      	beq.n	8007862 <__sflush_r+0x1a>
 80078cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80078d0:	4299      	cmp	r1, r3
 80078d2:	d002      	beq.n	80078da <__sflush_r+0x92>
 80078d4:	4628      	mov	r0, r5
 80078d6:	f7ff faa5 	bl	8006e24 <_free_r>
 80078da:	2000      	movs	r0, #0
 80078dc:	6360      	str	r0, [r4, #52]	; 0x34
 80078de:	e7c1      	b.n	8007864 <__sflush_r+0x1c>
 80078e0:	6a21      	ldr	r1, [r4, #32]
 80078e2:	2301      	movs	r3, #1
 80078e4:	4628      	mov	r0, r5
 80078e6:	47b0      	blx	r6
 80078e8:	1c41      	adds	r1, r0, #1
 80078ea:	d1c7      	bne.n	800787c <__sflush_r+0x34>
 80078ec:	682b      	ldr	r3, [r5, #0]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d0c4      	beq.n	800787c <__sflush_r+0x34>
 80078f2:	2b1d      	cmp	r3, #29
 80078f4:	d001      	beq.n	80078fa <__sflush_r+0xb2>
 80078f6:	2b16      	cmp	r3, #22
 80078f8:	d101      	bne.n	80078fe <__sflush_r+0xb6>
 80078fa:	602f      	str	r7, [r5, #0]
 80078fc:	e7b1      	b.n	8007862 <__sflush_r+0x1a>
 80078fe:	89a3      	ldrh	r3, [r4, #12]
 8007900:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007904:	81a3      	strh	r3, [r4, #12]
 8007906:	e7ad      	b.n	8007864 <__sflush_r+0x1c>
 8007908:	690f      	ldr	r7, [r1, #16]
 800790a:	2f00      	cmp	r7, #0
 800790c:	d0a9      	beq.n	8007862 <__sflush_r+0x1a>
 800790e:	0793      	lsls	r3, r2, #30
 8007910:	680e      	ldr	r6, [r1, #0]
 8007912:	bf08      	it	eq
 8007914:	694b      	ldreq	r3, [r1, #20]
 8007916:	600f      	str	r7, [r1, #0]
 8007918:	bf18      	it	ne
 800791a:	2300      	movne	r3, #0
 800791c:	eba6 0807 	sub.w	r8, r6, r7
 8007920:	608b      	str	r3, [r1, #8]
 8007922:	f1b8 0f00 	cmp.w	r8, #0
 8007926:	dd9c      	ble.n	8007862 <__sflush_r+0x1a>
 8007928:	6a21      	ldr	r1, [r4, #32]
 800792a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800792c:	4643      	mov	r3, r8
 800792e:	463a      	mov	r2, r7
 8007930:	4628      	mov	r0, r5
 8007932:	47b0      	blx	r6
 8007934:	2800      	cmp	r0, #0
 8007936:	dc06      	bgt.n	8007946 <__sflush_r+0xfe>
 8007938:	89a3      	ldrh	r3, [r4, #12]
 800793a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800793e:	81a3      	strh	r3, [r4, #12]
 8007940:	f04f 30ff 	mov.w	r0, #4294967295
 8007944:	e78e      	b.n	8007864 <__sflush_r+0x1c>
 8007946:	4407      	add	r7, r0
 8007948:	eba8 0800 	sub.w	r8, r8, r0
 800794c:	e7e9      	b.n	8007922 <__sflush_r+0xda>
 800794e:	bf00      	nop
 8007950:	20400001 	.word	0x20400001

08007954 <_fflush_r>:
 8007954:	b538      	push	{r3, r4, r5, lr}
 8007956:	690b      	ldr	r3, [r1, #16]
 8007958:	4605      	mov	r5, r0
 800795a:	460c      	mov	r4, r1
 800795c:	b913      	cbnz	r3, 8007964 <_fflush_r+0x10>
 800795e:	2500      	movs	r5, #0
 8007960:	4628      	mov	r0, r5
 8007962:	bd38      	pop	{r3, r4, r5, pc}
 8007964:	b118      	cbz	r0, 800796e <_fflush_r+0x1a>
 8007966:	6983      	ldr	r3, [r0, #24]
 8007968:	b90b      	cbnz	r3, 800796e <_fflush_r+0x1a>
 800796a:	f000 f887 	bl	8007a7c <__sinit>
 800796e:	4b14      	ldr	r3, [pc, #80]	; (80079c0 <_fflush_r+0x6c>)
 8007970:	429c      	cmp	r4, r3
 8007972:	d11b      	bne.n	80079ac <_fflush_r+0x58>
 8007974:	686c      	ldr	r4, [r5, #4]
 8007976:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d0ef      	beq.n	800795e <_fflush_r+0xa>
 800797e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007980:	07d0      	lsls	r0, r2, #31
 8007982:	d404      	bmi.n	800798e <_fflush_r+0x3a>
 8007984:	0599      	lsls	r1, r3, #22
 8007986:	d402      	bmi.n	800798e <_fflush_r+0x3a>
 8007988:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800798a:	f000 f915 	bl	8007bb8 <__retarget_lock_acquire_recursive>
 800798e:	4628      	mov	r0, r5
 8007990:	4621      	mov	r1, r4
 8007992:	f7ff ff59 	bl	8007848 <__sflush_r>
 8007996:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007998:	07da      	lsls	r2, r3, #31
 800799a:	4605      	mov	r5, r0
 800799c:	d4e0      	bmi.n	8007960 <_fflush_r+0xc>
 800799e:	89a3      	ldrh	r3, [r4, #12]
 80079a0:	059b      	lsls	r3, r3, #22
 80079a2:	d4dd      	bmi.n	8007960 <_fflush_r+0xc>
 80079a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80079a6:	f000 f908 	bl	8007bba <__retarget_lock_release_recursive>
 80079aa:	e7d9      	b.n	8007960 <_fflush_r+0xc>
 80079ac:	4b05      	ldr	r3, [pc, #20]	; (80079c4 <_fflush_r+0x70>)
 80079ae:	429c      	cmp	r4, r3
 80079b0:	d101      	bne.n	80079b6 <_fflush_r+0x62>
 80079b2:	68ac      	ldr	r4, [r5, #8]
 80079b4:	e7df      	b.n	8007976 <_fflush_r+0x22>
 80079b6:	4b04      	ldr	r3, [pc, #16]	; (80079c8 <_fflush_r+0x74>)
 80079b8:	429c      	cmp	r4, r3
 80079ba:	bf08      	it	eq
 80079bc:	68ec      	ldreq	r4, [r5, #12]
 80079be:	e7da      	b.n	8007976 <_fflush_r+0x22>
 80079c0:	08008274 	.word	0x08008274
 80079c4:	08008294 	.word	0x08008294
 80079c8:	08008254 	.word	0x08008254

080079cc <std>:
 80079cc:	2300      	movs	r3, #0
 80079ce:	b510      	push	{r4, lr}
 80079d0:	4604      	mov	r4, r0
 80079d2:	e9c0 3300 	strd	r3, r3, [r0]
 80079d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80079da:	6083      	str	r3, [r0, #8]
 80079dc:	8181      	strh	r1, [r0, #12]
 80079de:	6643      	str	r3, [r0, #100]	; 0x64
 80079e0:	81c2      	strh	r2, [r0, #14]
 80079e2:	6183      	str	r3, [r0, #24]
 80079e4:	4619      	mov	r1, r3
 80079e6:	2208      	movs	r2, #8
 80079e8:	305c      	adds	r0, #92	; 0x5c
 80079ea:	f7fd fb5b 	bl	80050a4 <memset>
 80079ee:	4b05      	ldr	r3, [pc, #20]	; (8007a04 <std+0x38>)
 80079f0:	6263      	str	r3, [r4, #36]	; 0x24
 80079f2:	4b05      	ldr	r3, [pc, #20]	; (8007a08 <std+0x3c>)
 80079f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80079f6:	4b05      	ldr	r3, [pc, #20]	; (8007a0c <std+0x40>)
 80079f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80079fa:	4b05      	ldr	r3, [pc, #20]	; (8007a10 <std+0x44>)
 80079fc:	6224      	str	r4, [r4, #32]
 80079fe:	6323      	str	r3, [r4, #48]	; 0x30
 8007a00:	bd10      	pop	{r4, pc}
 8007a02:	bf00      	nop
 8007a04:	08007d21 	.word	0x08007d21
 8007a08:	08007d43 	.word	0x08007d43
 8007a0c:	08007d7b 	.word	0x08007d7b
 8007a10:	08007d9f 	.word	0x08007d9f

08007a14 <_cleanup_r>:
 8007a14:	4901      	ldr	r1, [pc, #4]	; (8007a1c <_cleanup_r+0x8>)
 8007a16:	f000 b8af 	b.w	8007b78 <_fwalk_reent>
 8007a1a:	bf00      	nop
 8007a1c:	08007955 	.word	0x08007955

08007a20 <__sfmoreglue>:
 8007a20:	b570      	push	{r4, r5, r6, lr}
 8007a22:	2268      	movs	r2, #104	; 0x68
 8007a24:	1e4d      	subs	r5, r1, #1
 8007a26:	4355      	muls	r5, r2
 8007a28:	460e      	mov	r6, r1
 8007a2a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007a2e:	f7ff fa65 	bl	8006efc <_malloc_r>
 8007a32:	4604      	mov	r4, r0
 8007a34:	b140      	cbz	r0, 8007a48 <__sfmoreglue+0x28>
 8007a36:	2100      	movs	r1, #0
 8007a38:	e9c0 1600 	strd	r1, r6, [r0]
 8007a3c:	300c      	adds	r0, #12
 8007a3e:	60a0      	str	r0, [r4, #8]
 8007a40:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007a44:	f7fd fb2e 	bl	80050a4 <memset>
 8007a48:	4620      	mov	r0, r4
 8007a4a:	bd70      	pop	{r4, r5, r6, pc}

08007a4c <__sfp_lock_acquire>:
 8007a4c:	4801      	ldr	r0, [pc, #4]	; (8007a54 <__sfp_lock_acquire+0x8>)
 8007a4e:	f000 b8b3 	b.w	8007bb8 <__retarget_lock_acquire_recursive>
 8007a52:	bf00      	nop
 8007a54:	20000415 	.word	0x20000415

08007a58 <__sfp_lock_release>:
 8007a58:	4801      	ldr	r0, [pc, #4]	; (8007a60 <__sfp_lock_release+0x8>)
 8007a5a:	f000 b8ae 	b.w	8007bba <__retarget_lock_release_recursive>
 8007a5e:	bf00      	nop
 8007a60:	20000415 	.word	0x20000415

08007a64 <__sinit_lock_acquire>:
 8007a64:	4801      	ldr	r0, [pc, #4]	; (8007a6c <__sinit_lock_acquire+0x8>)
 8007a66:	f000 b8a7 	b.w	8007bb8 <__retarget_lock_acquire_recursive>
 8007a6a:	bf00      	nop
 8007a6c:	20000416 	.word	0x20000416

08007a70 <__sinit_lock_release>:
 8007a70:	4801      	ldr	r0, [pc, #4]	; (8007a78 <__sinit_lock_release+0x8>)
 8007a72:	f000 b8a2 	b.w	8007bba <__retarget_lock_release_recursive>
 8007a76:	bf00      	nop
 8007a78:	20000416 	.word	0x20000416

08007a7c <__sinit>:
 8007a7c:	b510      	push	{r4, lr}
 8007a7e:	4604      	mov	r4, r0
 8007a80:	f7ff fff0 	bl	8007a64 <__sinit_lock_acquire>
 8007a84:	69a3      	ldr	r3, [r4, #24]
 8007a86:	b11b      	cbz	r3, 8007a90 <__sinit+0x14>
 8007a88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a8c:	f7ff bff0 	b.w	8007a70 <__sinit_lock_release>
 8007a90:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007a94:	6523      	str	r3, [r4, #80]	; 0x50
 8007a96:	4b13      	ldr	r3, [pc, #76]	; (8007ae4 <__sinit+0x68>)
 8007a98:	4a13      	ldr	r2, [pc, #76]	; (8007ae8 <__sinit+0x6c>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	62a2      	str	r2, [r4, #40]	; 0x28
 8007a9e:	42a3      	cmp	r3, r4
 8007aa0:	bf04      	itt	eq
 8007aa2:	2301      	moveq	r3, #1
 8007aa4:	61a3      	streq	r3, [r4, #24]
 8007aa6:	4620      	mov	r0, r4
 8007aa8:	f000 f820 	bl	8007aec <__sfp>
 8007aac:	6060      	str	r0, [r4, #4]
 8007aae:	4620      	mov	r0, r4
 8007ab0:	f000 f81c 	bl	8007aec <__sfp>
 8007ab4:	60a0      	str	r0, [r4, #8]
 8007ab6:	4620      	mov	r0, r4
 8007ab8:	f000 f818 	bl	8007aec <__sfp>
 8007abc:	2200      	movs	r2, #0
 8007abe:	60e0      	str	r0, [r4, #12]
 8007ac0:	2104      	movs	r1, #4
 8007ac2:	6860      	ldr	r0, [r4, #4]
 8007ac4:	f7ff ff82 	bl	80079cc <std>
 8007ac8:	68a0      	ldr	r0, [r4, #8]
 8007aca:	2201      	movs	r2, #1
 8007acc:	2109      	movs	r1, #9
 8007ace:	f7ff ff7d 	bl	80079cc <std>
 8007ad2:	68e0      	ldr	r0, [r4, #12]
 8007ad4:	2202      	movs	r2, #2
 8007ad6:	2112      	movs	r1, #18
 8007ad8:	f7ff ff78 	bl	80079cc <std>
 8007adc:	2301      	movs	r3, #1
 8007ade:	61a3      	str	r3, [r4, #24]
 8007ae0:	e7d2      	b.n	8007a88 <__sinit+0xc>
 8007ae2:	bf00      	nop
 8007ae4:	08007edc 	.word	0x08007edc
 8007ae8:	08007a15 	.word	0x08007a15

08007aec <__sfp>:
 8007aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aee:	4607      	mov	r7, r0
 8007af0:	f7ff ffac 	bl	8007a4c <__sfp_lock_acquire>
 8007af4:	4b1e      	ldr	r3, [pc, #120]	; (8007b70 <__sfp+0x84>)
 8007af6:	681e      	ldr	r6, [r3, #0]
 8007af8:	69b3      	ldr	r3, [r6, #24]
 8007afa:	b913      	cbnz	r3, 8007b02 <__sfp+0x16>
 8007afc:	4630      	mov	r0, r6
 8007afe:	f7ff ffbd 	bl	8007a7c <__sinit>
 8007b02:	3648      	adds	r6, #72	; 0x48
 8007b04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007b08:	3b01      	subs	r3, #1
 8007b0a:	d503      	bpl.n	8007b14 <__sfp+0x28>
 8007b0c:	6833      	ldr	r3, [r6, #0]
 8007b0e:	b30b      	cbz	r3, 8007b54 <__sfp+0x68>
 8007b10:	6836      	ldr	r6, [r6, #0]
 8007b12:	e7f7      	b.n	8007b04 <__sfp+0x18>
 8007b14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007b18:	b9d5      	cbnz	r5, 8007b50 <__sfp+0x64>
 8007b1a:	4b16      	ldr	r3, [pc, #88]	; (8007b74 <__sfp+0x88>)
 8007b1c:	60e3      	str	r3, [r4, #12]
 8007b1e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007b22:	6665      	str	r5, [r4, #100]	; 0x64
 8007b24:	f000 f847 	bl	8007bb6 <__retarget_lock_init_recursive>
 8007b28:	f7ff ff96 	bl	8007a58 <__sfp_lock_release>
 8007b2c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007b30:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007b34:	6025      	str	r5, [r4, #0]
 8007b36:	61a5      	str	r5, [r4, #24]
 8007b38:	2208      	movs	r2, #8
 8007b3a:	4629      	mov	r1, r5
 8007b3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007b40:	f7fd fab0 	bl	80050a4 <memset>
 8007b44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007b48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007b4c:	4620      	mov	r0, r4
 8007b4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b50:	3468      	adds	r4, #104	; 0x68
 8007b52:	e7d9      	b.n	8007b08 <__sfp+0x1c>
 8007b54:	2104      	movs	r1, #4
 8007b56:	4638      	mov	r0, r7
 8007b58:	f7ff ff62 	bl	8007a20 <__sfmoreglue>
 8007b5c:	4604      	mov	r4, r0
 8007b5e:	6030      	str	r0, [r6, #0]
 8007b60:	2800      	cmp	r0, #0
 8007b62:	d1d5      	bne.n	8007b10 <__sfp+0x24>
 8007b64:	f7ff ff78 	bl	8007a58 <__sfp_lock_release>
 8007b68:	230c      	movs	r3, #12
 8007b6a:	603b      	str	r3, [r7, #0]
 8007b6c:	e7ee      	b.n	8007b4c <__sfp+0x60>
 8007b6e:	bf00      	nop
 8007b70:	08007edc 	.word	0x08007edc
 8007b74:	ffff0001 	.word	0xffff0001

08007b78 <_fwalk_reent>:
 8007b78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b7c:	4606      	mov	r6, r0
 8007b7e:	4688      	mov	r8, r1
 8007b80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007b84:	2700      	movs	r7, #0
 8007b86:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007b8a:	f1b9 0901 	subs.w	r9, r9, #1
 8007b8e:	d505      	bpl.n	8007b9c <_fwalk_reent+0x24>
 8007b90:	6824      	ldr	r4, [r4, #0]
 8007b92:	2c00      	cmp	r4, #0
 8007b94:	d1f7      	bne.n	8007b86 <_fwalk_reent+0xe>
 8007b96:	4638      	mov	r0, r7
 8007b98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b9c:	89ab      	ldrh	r3, [r5, #12]
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	d907      	bls.n	8007bb2 <_fwalk_reent+0x3a>
 8007ba2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ba6:	3301      	adds	r3, #1
 8007ba8:	d003      	beq.n	8007bb2 <_fwalk_reent+0x3a>
 8007baa:	4629      	mov	r1, r5
 8007bac:	4630      	mov	r0, r6
 8007bae:	47c0      	blx	r8
 8007bb0:	4307      	orrs	r7, r0
 8007bb2:	3568      	adds	r5, #104	; 0x68
 8007bb4:	e7e9      	b.n	8007b8a <_fwalk_reent+0x12>

08007bb6 <__retarget_lock_init_recursive>:
 8007bb6:	4770      	bx	lr

08007bb8 <__retarget_lock_acquire_recursive>:
 8007bb8:	4770      	bx	lr

08007bba <__retarget_lock_release_recursive>:
 8007bba:	4770      	bx	lr

08007bbc <__swhatbuf_r>:
 8007bbc:	b570      	push	{r4, r5, r6, lr}
 8007bbe:	460e      	mov	r6, r1
 8007bc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bc4:	2900      	cmp	r1, #0
 8007bc6:	b096      	sub	sp, #88	; 0x58
 8007bc8:	4614      	mov	r4, r2
 8007bca:	461d      	mov	r5, r3
 8007bcc:	da08      	bge.n	8007be0 <__swhatbuf_r+0x24>
 8007bce:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	602a      	str	r2, [r5, #0]
 8007bd6:	061a      	lsls	r2, r3, #24
 8007bd8:	d410      	bmi.n	8007bfc <__swhatbuf_r+0x40>
 8007bda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007bde:	e00e      	b.n	8007bfe <__swhatbuf_r+0x42>
 8007be0:	466a      	mov	r2, sp
 8007be2:	f000 f903 	bl	8007dec <_fstat_r>
 8007be6:	2800      	cmp	r0, #0
 8007be8:	dbf1      	blt.n	8007bce <__swhatbuf_r+0x12>
 8007bea:	9a01      	ldr	r2, [sp, #4]
 8007bec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007bf0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007bf4:	425a      	negs	r2, r3
 8007bf6:	415a      	adcs	r2, r3
 8007bf8:	602a      	str	r2, [r5, #0]
 8007bfa:	e7ee      	b.n	8007bda <__swhatbuf_r+0x1e>
 8007bfc:	2340      	movs	r3, #64	; 0x40
 8007bfe:	2000      	movs	r0, #0
 8007c00:	6023      	str	r3, [r4, #0]
 8007c02:	b016      	add	sp, #88	; 0x58
 8007c04:	bd70      	pop	{r4, r5, r6, pc}
	...

08007c08 <__smakebuf_r>:
 8007c08:	898b      	ldrh	r3, [r1, #12]
 8007c0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007c0c:	079d      	lsls	r5, r3, #30
 8007c0e:	4606      	mov	r6, r0
 8007c10:	460c      	mov	r4, r1
 8007c12:	d507      	bpl.n	8007c24 <__smakebuf_r+0x1c>
 8007c14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007c18:	6023      	str	r3, [r4, #0]
 8007c1a:	6123      	str	r3, [r4, #16]
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	6163      	str	r3, [r4, #20]
 8007c20:	b002      	add	sp, #8
 8007c22:	bd70      	pop	{r4, r5, r6, pc}
 8007c24:	ab01      	add	r3, sp, #4
 8007c26:	466a      	mov	r2, sp
 8007c28:	f7ff ffc8 	bl	8007bbc <__swhatbuf_r>
 8007c2c:	9900      	ldr	r1, [sp, #0]
 8007c2e:	4605      	mov	r5, r0
 8007c30:	4630      	mov	r0, r6
 8007c32:	f7ff f963 	bl	8006efc <_malloc_r>
 8007c36:	b948      	cbnz	r0, 8007c4c <__smakebuf_r+0x44>
 8007c38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c3c:	059a      	lsls	r2, r3, #22
 8007c3e:	d4ef      	bmi.n	8007c20 <__smakebuf_r+0x18>
 8007c40:	f023 0303 	bic.w	r3, r3, #3
 8007c44:	f043 0302 	orr.w	r3, r3, #2
 8007c48:	81a3      	strh	r3, [r4, #12]
 8007c4a:	e7e3      	b.n	8007c14 <__smakebuf_r+0xc>
 8007c4c:	4b0d      	ldr	r3, [pc, #52]	; (8007c84 <__smakebuf_r+0x7c>)
 8007c4e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007c50:	89a3      	ldrh	r3, [r4, #12]
 8007c52:	6020      	str	r0, [r4, #0]
 8007c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c58:	81a3      	strh	r3, [r4, #12]
 8007c5a:	9b00      	ldr	r3, [sp, #0]
 8007c5c:	6163      	str	r3, [r4, #20]
 8007c5e:	9b01      	ldr	r3, [sp, #4]
 8007c60:	6120      	str	r0, [r4, #16]
 8007c62:	b15b      	cbz	r3, 8007c7c <__smakebuf_r+0x74>
 8007c64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c68:	4630      	mov	r0, r6
 8007c6a:	f000 f8d1 	bl	8007e10 <_isatty_r>
 8007c6e:	b128      	cbz	r0, 8007c7c <__smakebuf_r+0x74>
 8007c70:	89a3      	ldrh	r3, [r4, #12]
 8007c72:	f023 0303 	bic.w	r3, r3, #3
 8007c76:	f043 0301 	orr.w	r3, r3, #1
 8007c7a:	81a3      	strh	r3, [r4, #12]
 8007c7c:	89a0      	ldrh	r0, [r4, #12]
 8007c7e:	4305      	orrs	r5, r0
 8007c80:	81a5      	strh	r5, [r4, #12]
 8007c82:	e7cd      	b.n	8007c20 <__smakebuf_r+0x18>
 8007c84:	08007a15 	.word	0x08007a15

08007c88 <_malloc_usable_size_r>:
 8007c88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c8c:	1f18      	subs	r0, r3, #4
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	bfbc      	itt	lt
 8007c92:	580b      	ldrlt	r3, [r1, r0]
 8007c94:	18c0      	addlt	r0, r0, r3
 8007c96:	4770      	bx	lr

08007c98 <_raise_r>:
 8007c98:	291f      	cmp	r1, #31
 8007c9a:	b538      	push	{r3, r4, r5, lr}
 8007c9c:	4604      	mov	r4, r0
 8007c9e:	460d      	mov	r5, r1
 8007ca0:	d904      	bls.n	8007cac <_raise_r+0x14>
 8007ca2:	2316      	movs	r3, #22
 8007ca4:	6003      	str	r3, [r0, #0]
 8007ca6:	f04f 30ff 	mov.w	r0, #4294967295
 8007caa:	bd38      	pop	{r3, r4, r5, pc}
 8007cac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007cae:	b112      	cbz	r2, 8007cb6 <_raise_r+0x1e>
 8007cb0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007cb4:	b94b      	cbnz	r3, 8007cca <_raise_r+0x32>
 8007cb6:	4620      	mov	r0, r4
 8007cb8:	f000 f830 	bl	8007d1c <_getpid_r>
 8007cbc:	462a      	mov	r2, r5
 8007cbe:	4601      	mov	r1, r0
 8007cc0:	4620      	mov	r0, r4
 8007cc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007cc6:	f000 b817 	b.w	8007cf8 <_kill_r>
 8007cca:	2b01      	cmp	r3, #1
 8007ccc:	d00a      	beq.n	8007ce4 <_raise_r+0x4c>
 8007cce:	1c59      	adds	r1, r3, #1
 8007cd0:	d103      	bne.n	8007cda <_raise_r+0x42>
 8007cd2:	2316      	movs	r3, #22
 8007cd4:	6003      	str	r3, [r0, #0]
 8007cd6:	2001      	movs	r0, #1
 8007cd8:	e7e7      	b.n	8007caa <_raise_r+0x12>
 8007cda:	2400      	movs	r4, #0
 8007cdc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007ce0:	4628      	mov	r0, r5
 8007ce2:	4798      	blx	r3
 8007ce4:	2000      	movs	r0, #0
 8007ce6:	e7e0      	b.n	8007caa <_raise_r+0x12>

08007ce8 <raise>:
 8007ce8:	4b02      	ldr	r3, [pc, #8]	; (8007cf4 <raise+0xc>)
 8007cea:	4601      	mov	r1, r0
 8007cec:	6818      	ldr	r0, [r3, #0]
 8007cee:	f7ff bfd3 	b.w	8007c98 <_raise_r>
 8007cf2:	bf00      	nop
 8007cf4:	2000000c 	.word	0x2000000c

08007cf8 <_kill_r>:
 8007cf8:	b538      	push	{r3, r4, r5, lr}
 8007cfa:	4d07      	ldr	r5, [pc, #28]	; (8007d18 <_kill_r+0x20>)
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	4604      	mov	r4, r0
 8007d00:	4608      	mov	r0, r1
 8007d02:	4611      	mov	r1, r2
 8007d04:	602b      	str	r3, [r5, #0]
 8007d06:	f7f9 ff09 	bl	8001b1c <_kill>
 8007d0a:	1c43      	adds	r3, r0, #1
 8007d0c:	d102      	bne.n	8007d14 <_kill_r+0x1c>
 8007d0e:	682b      	ldr	r3, [r5, #0]
 8007d10:	b103      	cbz	r3, 8007d14 <_kill_r+0x1c>
 8007d12:	6023      	str	r3, [r4, #0]
 8007d14:	bd38      	pop	{r3, r4, r5, pc}
 8007d16:	bf00      	nop
 8007d18:	20000410 	.word	0x20000410

08007d1c <_getpid_r>:
 8007d1c:	f7f9 bef6 	b.w	8001b0c <_getpid>

08007d20 <__sread>:
 8007d20:	b510      	push	{r4, lr}
 8007d22:	460c      	mov	r4, r1
 8007d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d28:	f000 f894 	bl	8007e54 <_read_r>
 8007d2c:	2800      	cmp	r0, #0
 8007d2e:	bfab      	itete	ge
 8007d30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007d32:	89a3      	ldrhlt	r3, [r4, #12]
 8007d34:	181b      	addge	r3, r3, r0
 8007d36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007d3a:	bfac      	ite	ge
 8007d3c:	6563      	strge	r3, [r4, #84]	; 0x54
 8007d3e:	81a3      	strhlt	r3, [r4, #12]
 8007d40:	bd10      	pop	{r4, pc}

08007d42 <__swrite>:
 8007d42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d46:	461f      	mov	r7, r3
 8007d48:	898b      	ldrh	r3, [r1, #12]
 8007d4a:	05db      	lsls	r3, r3, #23
 8007d4c:	4605      	mov	r5, r0
 8007d4e:	460c      	mov	r4, r1
 8007d50:	4616      	mov	r6, r2
 8007d52:	d505      	bpl.n	8007d60 <__swrite+0x1e>
 8007d54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d58:	2302      	movs	r3, #2
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	f000 f868 	bl	8007e30 <_lseek_r>
 8007d60:	89a3      	ldrh	r3, [r4, #12]
 8007d62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d6a:	81a3      	strh	r3, [r4, #12]
 8007d6c:	4632      	mov	r2, r6
 8007d6e:	463b      	mov	r3, r7
 8007d70:	4628      	mov	r0, r5
 8007d72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d76:	f000 b817 	b.w	8007da8 <_write_r>

08007d7a <__sseek>:
 8007d7a:	b510      	push	{r4, lr}
 8007d7c:	460c      	mov	r4, r1
 8007d7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d82:	f000 f855 	bl	8007e30 <_lseek_r>
 8007d86:	1c43      	adds	r3, r0, #1
 8007d88:	89a3      	ldrh	r3, [r4, #12]
 8007d8a:	bf15      	itete	ne
 8007d8c:	6560      	strne	r0, [r4, #84]	; 0x54
 8007d8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007d92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007d96:	81a3      	strheq	r3, [r4, #12]
 8007d98:	bf18      	it	ne
 8007d9a:	81a3      	strhne	r3, [r4, #12]
 8007d9c:	bd10      	pop	{r4, pc}

08007d9e <__sclose>:
 8007d9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007da2:	f000 b813 	b.w	8007dcc <_close_r>
	...

08007da8 <_write_r>:
 8007da8:	b538      	push	{r3, r4, r5, lr}
 8007daa:	4d07      	ldr	r5, [pc, #28]	; (8007dc8 <_write_r+0x20>)
 8007dac:	4604      	mov	r4, r0
 8007dae:	4608      	mov	r0, r1
 8007db0:	4611      	mov	r1, r2
 8007db2:	2200      	movs	r2, #0
 8007db4:	602a      	str	r2, [r5, #0]
 8007db6:	461a      	mov	r2, r3
 8007db8:	f7f9 fee7 	bl	8001b8a <_write>
 8007dbc:	1c43      	adds	r3, r0, #1
 8007dbe:	d102      	bne.n	8007dc6 <_write_r+0x1e>
 8007dc0:	682b      	ldr	r3, [r5, #0]
 8007dc2:	b103      	cbz	r3, 8007dc6 <_write_r+0x1e>
 8007dc4:	6023      	str	r3, [r4, #0]
 8007dc6:	bd38      	pop	{r3, r4, r5, pc}
 8007dc8:	20000410 	.word	0x20000410

08007dcc <_close_r>:
 8007dcc:	b538      	push	{r3, r4, r5, lr}
 8007dce:	4d06      	ldr	r5, [pc, #24]	; (8007de8 <_close_r+0x1c>)
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	4604      	mov	r4, r0
 8007dd4:	4608      	mov	r0, r1
 8007dd6:	602b      	str	r3, [r5, #0]
 8007dd8:	f7f9 fef3 	bl	8001bc2 <_close>
 8007ddc:	1c43      	adds	r3, r0, #1
 8007dde:	d102      	bne.n	8007de6 <_close_r+0x1a>
 8007de0:	682b      	ldr	r3, [r5, #0]
 8007de2:	b103      	cbz	r3, 8007de6 <_close_r+0x1a>
 8007de4:	6023      	str	r3, [r4, #0]
 8007de6:	bd38      	pop	{r3, r4, r5, pc}
 8007de8:	20000410 	.word	0x20000410

08007dec <_fstat_r>:
 8007dec:	b538      	push	{r3, r4, r5, lr}
 8007dee:	4d07      	ldr	r5, [pc, #28]	; (8007e0c <_fstat_r+0x20>)
 8007df0:	2300      	movs	r3, #0
 8007df2:	4604      	mov	r4, r0
 8007df4:	4608      	mov	r0, r1
 8007df6:	4611      	mov	r1, r2
 8007df8:	602b      	str	r3, [r5, #0]
 8007dfa:	f7f9 feee 	bl	8001bda <_fstat>
 8007dfe:	1c43      	adds	r3, r0, #1
 8007e00:	d102      	bne.n	8007e08 <_fstat_r+0x1c>
 8007e02:	682b      	ldr	r3, [r5, #0]
 8007e04:	b103      	cbz	r3, 8007e08 <_fstat_r+0x1c>
 8007e06:	6023      	str	r3, [r4, #0]
 8007e08:	bd38      	pop	{r3, r4, r5, pc}
 8007e0a:	bf00      	nop
 8007e0c:	20000410 	.word	0x20000410

08007e10 <_isatty_r>:
 8007e10:	b538      	push	{r3, r4, r5, lr}
 8007e12:	4d06      	ldr	r5, [pc, #24]	; (8007e2c <_isatty_r+0x1c>)
 8007e14:	2300      	movs	r3, #0
 8007e16:	4604      	mov	r4, r0
 8007e18:	4608      	mov	r0, r1
 8007e1a:	602b      	str	r3, [r5, #0]
 8007e1c:	f7f9 feed 	bl	8001bfa <_isatty>
 8007e20:	1c43      	adds	r3, r0, #1
 8007e22:	d102      	bne.n	8007e2a <_isatty_r+0x1a>
 8007e24:	682b      	ldr	r3, [r5, #0]
 8007e26:	b103      	cbz	r3, 8007e2a <_isatty_r+0x1a>
 8007e28:	6023      	str	r3, [r4, #0]
 8007e2a:	bd38      	pop	{r3, r4, r5, pc}
 8007e2c:	20000410 	.word	0x20000410

08007e30 <_lseek_r>:
 8007e30:	b538      	push	{r3, r4, r5, lr}
 8007e32:	4d07      	ldr	r5, [pc, #28]	; (8007e50 <_lseek_r+0x20>)
 8007e34:	4604      	mov	r4, r0
 8007e36:	4608      	mov	r0, r1
 8007e38:	4611      	mov	r1, r2
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	602a      	str	r2, [r5, #0]
 8007e3e:	461a      	mov	r2, r3
 8007e40:	f7f9 fee6 	bl	8001c10 <_lseek>
 8007e44:	1c43      	adds	r3, r0, #1
 8007e46:	d102      	bne.n	8007e4e <_lseek_r+0x1e>
 8007e48:	682b      	ldr	r3, [r5, #0]
 8007e4a:	b103      	cbz	r3, 8007e4e <_lseek_r+0x1e>
 8007e4c:	6023      	str	r3, [r4, #0]
 8007e4e:	bd38      	pop	{r3, r4, r5, pc}
 8007e50:	20000410 	.word	0x20000410

08007e54 <_read_r>:
 8007e54:	b538      	push	{r3, r4, r5, lr}
 8007e56:	4d07      	ldr	r5, [pc, #28]	; (8007e74 <_read_r+0x20>)
 8007e58:	4604      	mov	r4, r0
 8007e5a:	4608      	mov	r0, r1
 8007e5c:	4611      	mov	r1, r2
 8007e5e:	2200      	movs	r2, #0
 8007e60:	602a      	str	r2, [r5, #0]
 8007e62:	461a      	mov	r2, r3
 8007e64:	f7f9 fe74 	bl	8001b50 <_read>
 8007e68:	1c43      	adds	r3, r0, #1
 8007e6a:	d102      	bne.n	8007e72 <_read_r+0x1e>
 8007e6c:	682b      	ldr	r3, [r5, #0]
 8007e6e:	b103      	cbz	r3, 8007e72 <_read_r+0x1e>
 8007e70:	6023      	str	r3, [r4, #0]
 8007e72:	bd38      	pop	{r3, r4, r5, pc}
 8007e74:	20000410 	.word	0x20000410

08007e78 <_init>:
 8007e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e7a:	bf00      	nop
 8007e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e7e:	bc08      	pop	{r3}
 8007e80:	469e      	mov	lr, r3
 8007e82:	4770      	bx	lr

08007e84 <_fini>:
 8007e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e86:	bf00      	nop
 8007e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e8a:	bc08      	pop	{r3}
 8007e8c:	469e      	mov	lr, r3
 8007e8e:	4770      	bx	lr
