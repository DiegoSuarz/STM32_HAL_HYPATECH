
11_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e18  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08004fb8  08004fb8  00014fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800509c  0800509c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800509c  0800509c  0001509c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080050a4  080050a4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050a4  080050a4  000150a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080050a8  080050a8  000150a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080050ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  20000070  0800511c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f8  0800511c  000201f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a463  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001aff  00000000  00000000  0002a503  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000890  00000000  00000000  0002c008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007e8  00000000  00000000  0002c898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017518  00000000  00000000  0002d080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a803  00000000  00000000  00044598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092019  00000000  00000000  0004ed9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e0db4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029e0  00000000  00000000  000e0e04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004fa0 	.word	0x08004fa0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08004fa0 	.word	0x08004fa0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int caracter);
#endif

int __io_putchar(int caracter)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2,(uint8_t *)&caracter,1,HAL_MAX_DELAY);
 800058c:	1d39      	adds	r1, r7, #4
 800058e:	f04f 33ff 	mov.w	r3, #4294967295
 8000592:	2201      	movs	r2, #1
 8000594:	4803      	ldr	r0, [pc, #12]	; (80005a4 <__io_putchar+0x20>)
 8000596:	f002 fb8e 	bl	8002cb6 <HAL_UART_Transmit>
	//HAL_UART_Transmit(&huart1,(uint8_t *)&caracter,1,HAL_MAX_DELAY);
	return caracter;
 800059a:	687b      	ldr	r3, [r7, #4]
}
 800059c:	4618      	mov	r0, r3
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	20000134 	.word	0x20000134

080005a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ac:	f000 fbbe 	bl	8000d2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b0:	f000 f826 	bl	8000600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b4:	f000 f936 	bl	8000824 <MX_GPIO_Init>
  MX_DMA_Init();
 80005b8:	f000 f8fe 	bl	80007b8 <MX_DMA_Init>
  MX_ADC1_Init();
 80005bc:	f000 f880 	bl	80006c0 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80005c0:	f000 f8d0 	bl	8000764 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_DMA(&huart2, &rx_data, 1);
 80005c4:	2201      	movs	r2, #1
 80005c6:	4909      	ldr	r1, [pc, #36]	; (80005ec <main+0x44>)
 80005c8:	4809      	ldr	r0, [pc, #36]	; (80005f0 <main+0x48>)
 80005ca:	f002 fc06 	bl	8002dda <HAL_UART_Receive_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	HAL_ADC_Start_DMA(&hadc1, &adc_read, 1);
 80005ce:	2201      	movs	r2, #1
 80005d0:	4908      	ldr	r1, [pc, #32]	; (80005f4 <main+0x4c>)
 80005d2:	4809      	ldr	r0, [pc, #36]	; (80005f8 <main+0x50>)
 80005d4:	f000 fc84 	bl	8000ee0 <HAL_ADC_Start_DMA>
	printf("ADC READ DMA->%lu\n\r",adc_read);
 80005d8:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <main+0x4c>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4619      	mov	r1, r3
 80005de:	4807      	ldr	r0, [pc, #28]	; (80005fc <main+0x54>)
 80005e0:	f003 fd50 	bl	8004084 <iprintf>
	HAL_Delay(200);
 80005e4:	20c8      	movs	r0, #200	; 0xc8
 80005e6:	f000 fc13 	bl	8000e10 <HAL_Delay>
	HAL_ADC_Start_DMA(&hadc1, &adc_read, 1);
 80005ea:	e7f0      	b.n	80005ce <main+0x26>
 80005ec:	200001d8 	.word	0x200001d8
 80005f0:	20000134 	.word	0x20000134
 80005f4:	200001dc 	.word	0x200001dc
 80005f8:	2000008c 	.word	0x2000008c
 80005fc:	08004fb8 	.word	0x08004fb8

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b094      	sub	sp, #80	; 0x50
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 0320 	add.w	r3, r7, #32
 800060a:	2230      	movs	r2, #48	; 0x30
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f003 fd30 	bl	8004074 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	f107 030c 	add.w	r3, r7, #12
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000624:	2300      	movs	r3, #0
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	4b23      	ldr	r3, [pc, #140]	; (80006b8 <SystemClock_Config+0xb8>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062c:	4a22      	ldr	r2, [pc, #136]	; (80006b8 <SystemClock_Config+0xb8>)
 800062e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000632:	6413      	str	r3, [r2, #64]	; 0x40
 8000634:	4b20      	ldr	r3, [pc, #128]	; (80006b8 <SystemClock_Config+0xb8>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800063c:	60bb      	str	r3, [r7, #8]
 800063e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000640:	2300      	movs	r3, #0
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	4b1d      	ldr	r3, [pc, #116]	; (80006bc <SystemClock_Config+0xbc>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800064c:	4a1b      	ldr	r2, [pc, #108]	; (80006bc <SystemClock_Config+0xbc>)
 800064e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000652:	6013      	str	r3, [r2, #0]
 8000654:	4b19      	ldr	r3, [pc, #100]	; (80006bc <SystemClock_Config+0xbc>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000660:	2302      	movs	r3, #2
 8000662:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000664:	2301      	movs	r3, #1
 8000666:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000668:	2310      	movs	r3, #16
 800066a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800066c:	2300      	movs	r3, #0
 800066e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000670:	f107 0320 	add.w	r3, r7, #32
 8000674:	4618      	mov	r0, r3
 8000676:	f001 fe79 	bl	800236c <HAL_RCC_OscConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000680:	f000 f904 	bl	800088c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000684:	230f      	movs	r3, #15
 8000686:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000688:	2300      	movs	r3, #0
 800068a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000698:	f107 030c 	add.w	r3, r7, #12
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f002 f8dc 	bl	800285c <HAL_RCC_ClockConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006aa:	f000 f8ef 	bl	800088c <Error_Handler>
  }
}
 80006ae:	bf00      	nop
 80006b0:	3750      	adds	r7, #80	; 0x50
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40007000 	.word	0x40007000

080006c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006c6:	463b      	mov	r3, r7
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006d2:	4b21      	ldr	r3, [pc, #132]	; (8000758 <MX_ADC1_Init+0x98>)
 80006d4:	4a21      	ldr	r2, [pc, #132]	; (800075c <MX_ADC1_Init+0x9c>)
 80006d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80006d8:	4b1f      	ldr	r3, [pc, #124]	; (8000758 <MX_ADC1_Init+0x98>)
 80006da:	2200      	movs	r2, #0
 80006dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006de:	4b1e      	ldr	r3, [pc, #120]	; (8000758 <MX_ADC1_Init+0x98>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80006e4:	4b1c      	ldr	r3, [pc, #112]	; (8000758 <MX_ADC1_Init+0x98>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006ea:	4b1b      	ldr	r3, [pc, #108]	; (8000758 <MX_ADC1_Init+0x98>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006f0:	4b19      	ldr	r3, [pc, #100]	; (8000758 <MX_ADC1_Init+0x98>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006f8:	4b17      	ldr	r3, [pc, #92]	; (8000758 <MX_ADC1_Init+0x98>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006fe:	4b16      	ldr	r3, [pc, #88]	; (8000758 <MX_ADC1_Init+0x98>)
 8000700:	4a17      	ldr	r2, [pc, #92]	; (8000760 <MX_ADC1_Init+0xa0>)
 8000702:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000704:	4b14      	ldr	r3, [pc, #80]	; (8000758 <MX_ADC1_Init+0x98>)
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800070a:	4b13      	ldr	r3, [pc, #76]	; (8000758 <MX_ADC1_Init+0x98>)
 800070c:	2201      	movs	r2, #1
 800070e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000710:	4b11      	ldr	r3, [pc, #68]	; (8000758 <MX_ADC1_Init+0x98>)
 8000712:	2200      	movs	r2, #0
 8000714:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000718:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <MX_ADC1_Init+0x98>)
 800071a:	2201      	movs	r2, #1
 800071c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800071e:	480e      	ldr	r0, [pc, #56]	; (8000758 <MX_ADC1_Init+0x98>)
 8000720:	f000 fb9a 	bl	8000e58 <HAL_ADC_Init>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800072a:	f000 f8af 	bl	800088c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800072e:	2300      	movs	r3, #0
 8000730:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000732:	2301      	movs	r3, #1
 8000734:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000736:	2300      	movs	r3, #0
 8000738:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800073a:	463b      	mov	r3, r7
 800073c:	4619      	mov	r1, r3
 800073e:	4806      	ldr	r0, [pc, #24]	; (8000758 <MX_ADC1_Init+0x98>)
 8000740:	f000 fcdc 	bl	80010fc <HAL_ADC_ConfigChannel>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800074a:	f000 f89f 	bl	800088c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800074e:	bf00      	nop
 8000750:	3710      	adds	r7, #16
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	2000008c 	.word	0x2000008c
 800075c:	40012000 	.word	0x40012000
 8000760:	0f000001 	.word	0x0f000001

08000764 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000768:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <MX_USART2_UART_Init+0x4c>)
 800076a:	4a12      	ldr	r2, [pc, #72]	; (80007b4 <MX_USART2_UART_Init+0x50>)
 800076c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800076e:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <MX_USART2_UART_Init+0x4c>)
 8000770:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000774:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000776:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <MX_USART2_UART_Init+0x4c>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800077c:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <MX_USART2_UART_Init+0x4c>)
 800077e:	2200      	movs	r2, #0
 8000780:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000782:	4b0b      	ldr	r3, [pc, #44]	; (80007b0 <MX_USART2_UART_Init+0x4c>)
 8000784:	2200      	movs	r2, #0
 8000786:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000788:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <MX_USART2_UART_Init+0x4c>)
 800078a:	220c      	movs	r2, #12
 800078c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800078e:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <MX_USART2_UART_Init+0x4c>)
 8000790:	2200      	movs	r2, #0
 8000792:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000794:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <MX_USART2_UART_Init+0x4c>)
 8000796:	2200      	movs	r2, #0
 8000798:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800079a:	4805      	ldr	r0, [pc, #20]	; (80007b0 <MX_USART2_UART_Init+0x4c>)
 800079c:	f002 fa3e 	bl	8002c1c <HAL_UART_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007a6:	f000 f871 	bl	800088c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	20000134 	.word	0x20000134
 80007b4:	40004400 	.word	0x40004400

080007b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	4b17      	ldr	r3, [pc, #92]	; (8000820 <MX_DMA_Init+0x68>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a16      	ldr	r2, [pc, #88]	; (8000820 <MX_DMA_Init+0x68>)
 80007c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b14      	ldr	r3, [pc, #80]	; (8000820 <MX_DMA_Init+0x68>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	603b      	str	r3, [r7, #0]
 80007de:	4b10      	ldr	r3, [pc, #64]	; (8000820 <MX_DMA_Init+0x68>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a0f      	ldr	r2, [pc, #60]	; (8000820 <MX_DMA_Init+0x68>)
 80007e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b0d      	ldr	r3, [pc, #52]	; (8000820 <MX_DMA_Init+0x68>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007f2:	603b      	str	r3, [r7, #0]
 80007f4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2100      	movs	r1, #0
 80007fa:	2010      	movs	r0, #16
 80007fc:	f000 fff9 	bl	80017f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000800:	2010      	movs	r0, #16
 8000802:	f001 f812 	bl	800182a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000806:	2200      	movs	r2, #0
 8000808:	2100      	movs	r1, #0
 800080a:	2038      	movs	r0, #56	; 0x38
 800080c:	f000 fff1 	bl	80017f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000810:	2038      	movs	r0, #56	; 0x38
 8000812:	f001 f80a 	bl	800182a <HAL_NVIC_EnableIRQ>

}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40023800 	.word	0x40023800

08000824 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	607b      	str	r3, [r7, #4]
 800082e:	4b09      	ldr	r3, [pc, #36]	; (8000854 <MX_GPIO_Init+0x30>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a08      	ldr	r2, [pc, #32]	; (8000854 <MX_GPIO_Init+0x30>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b06      	ldr	r3, [pc, #24]	; (8000854 <MX_GPIO_Init+0x30>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]

}
 8000846:	bf00      	nop
 8000848:	370c      	adds	r7, #12
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	40023800 	.word	0x40023800

08000858 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]

	printf("Recibido por DMA->%c\n\r",rx_data);
 8000860:	4b07      	ldr	r3, [pc, #28]	; (8000880 <HAL_UART_RxCpltCallback+0x28>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	4619      	mov	r1, r3
 8000866:	4807      	ldr	r0, [pc, #28]	; (8000884 <HAL_UART_RxCpltCallback+0x2c>)
 8000868:	f003 fc0c 	bl	8004084 <iprintf>
	 HAL_UART_Receive_DMA(&huart2, &rx_data, 1);
 800086c:	2201      	movs	r2, #1
 800086e:	4904      	ldr	r1, [pc, #16]	; (8000880 <HAL_UART_RxCpltCallback+0x28>)
 8000870:	4805      	ldr	r0, [pc, #20]	; (8000888 <HAL_UART_RxCpltCallback+0x30>)
 8000872:	f002 fab2 	bl	8002dda <HAL_UART_Receive_DMA>
}
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	200001d8 	.word	0x200001d8
 8000884:	08004fcc 	.word	0x08004fcc
 8000888:	20000134 	.word	0x20000134

0800088c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000890:	b672      	cpsid	i
}
 8000892:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000894:	e7fe      	b.n	8000894 <Error_Handler+0x8>
	...

08000898 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	607b      	str	r3, [r7, #4]
 80008a2:	4b10      	ldr	r3, [pc, #64]	; (80008e4 <HAL_MspInit+0x4c>)
 80008a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a6:	4a0f      	ldr	r2, [pc, #60]	; (80008e4 <HAL_MspInit+0x4c>)
 80008a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008ac:	6453      	str	r3, [r2, #68]	; 0x44
 80008ae:	4b0d      	ldr	r3, [pc, #52]	; (80008e4 <HAL_MspInit+0x4c>)
 80008b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	603b      	str	r3, [r7, #0]
 80008be:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <HAL_MspInit+0x4c>)
 80008c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c2:	4a08      	ldr	r2, [pc, #32]	; (80008e4 <HAL_MspInit+0x4c>)
 80008c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c8:	6413      	str	r3, [r2, #64]	; 0x40
 80008ca:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <HAL_MspInit+0x4c>)
 80008cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d2:	603b      	str	r3, [r7, #0]
 80008d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008d6:	bf00      	nop
 80008d8:	370c      	adds	r7, #12
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	40023800 	.word	0x40023800

080008e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08a      	sub	sp, #40	; 0x28
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f0:	f107 0314 	add.w	r3, r7, #20
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
 80008fe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a2f      	ldr	r2, [pc, #188]	; (80009c4 <HAL_ADC_MspInit+0xdc>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d157      	bne.n	80009ba <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	613b      	str	r3, [r7, #16]
 800090e:	4b2e      	ldr	r3, [pc, #184]	; (80009c8 <HAL_ADC_MspInit+0xe0>)
 8000910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000912:	4a2d      	ldr	r2, [pc, #180]	; (80009c8 <HAL_ADC_MspInit+0xe0>)
 8000914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000918:	6453      	str	r3, [r2, #68]	; 0x44
 800091a:	4b2b      	ldr	r3, [pc, #172]	; (80009c8 <HAL_ADC_MspInit+0xe0>)
 800091c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800091e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000922:	613b      	str	r3, [r7, #16]
 8000924:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	60fb      	str	r3, [r7, #12]
 800092a:	4b27      	ldr	r3, [pc, #156]	; (80009c8 <HAL_ADC_MspInit+0xe0>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a26      	ldr	r2, [pc, #152]	; (80009c8 <HAL_ADC_MspInit+0xe0>)
 8000930:	f043 0301 	orr.w	r3, r3, #1
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b24      	ldr	r3, [pc, #144]	; (80009c8 <HAL_ADC_MspInit+0xe0>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000942:	2301      	movs	r3, #1
 8000944:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000946:	2303      	movs	r3, #3
 8000948:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094e:	f107 0314 	add.w	r3, r7, #20
 8000952:	4619      	mov	r1, r3
 8000954:	481d      	ldr	r0, [pc, #116]	; (80009cc <HAL_ADC_MspInit+0xe4>)
 8000956:	f001 fb85 	bl	8002064 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800095a:	4b1d      	ldr	r3, [pc, #116]	; (80009d0 <HAL_ADC_MspInit+0xe8>)
 800095c:	4a1d      	ldr	r2, [pc, #116]	; (80009d4 <HAL_ADC_MspInit+0xec>)
 800095e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000960:	4b1b      	ldr	r3, [pc, #108]	; (80009d0 <HAL_ADC_MspInit+0xe8>)
 8000962:	2200      	movs	r2, #0
 8000964:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000966:	4b1a      	ldr	r3, [pc, #104]	; (80009d0 <HAL_ADC_MspInit+0xe8>)
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800096c:	4b18      	ldr	r3, [pc, #96]	; (80009d0 <HAL_ADC_MspInit+0xe8>)
 800096e:	2200      	movs	r2, #0
 8000970:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000972:	4b17      	ldr	r3, [pc, #92]	; (80009d0 <HAL_ADC_MspInit+0xe8>)
 8000974:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000978:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800097a:	4b15      	ldr	r3, [pc, #84]	; (80009d0 <HAL_ADC_MspInit+0xe8>)
 800097c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000980:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000982:	4b13      	ldr	r3, [pc, #76]	; (80009d0 <HAL_ADC_MspInit+0xe8>)
 8000984:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000988:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800098a:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <HAL_ADC_MspInit+0xe8>)
 800098c:	2200      	movs	r2, #0
 800098e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000990:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <HAL_ADC_MspInit+0xe8>)
 8000992:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000996:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000998:	4b0d      	ldr	r3, [pc, #52]	; (80009d0 <HAL_ADC_MspInit+0xe8>)
 800099a:	2200      	movs	r2, #0
 800099c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800099e:	480c      	ldr	r0, [pc, #48]	; (80009d0 <HAL_ADC_MspInit+0xe8>)
 80009a0:	f000 ff5e 	bl	8001860 <HAL_DMA_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80009aa:	f7ff ff6f 	bl	800088c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	4a07      	ldr	r2, [pc, #28]	; (80009d0 <HAL_ADC_MspInit+0xe8>)
 80009b2:	639a      	str	r2, [r3, #56]	; 0x38
 80009b4:	4a06      	ldr	r2, [pc, #24]	; (80009d0 <HAL_ADC_MspInit+0xe8>)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80009ba:	bf00      	nop
 80009bc:	3728      	adds	r7, #40	; 0x28
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40012000 	.word	0x40012000
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40020000 	.word	0x40020000
 80009d0:	200000d4 	.word	0x200000d4
 80009d4:	40026410 	.word	0x40026410

080009d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08a      	sub	sp, #40	; 0x28
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a34      	ldr	r2, [pc, #208]	; (8000ac8 <HAL_UART_MspInit+0xf0>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d162      	bne.n	8000ac0 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	613b      	str	r3, [r7, #16]
 80009fe:	4b33      	ldr	r3, [pc, #204]	; (8000acc <HAL_UART_MspInit+0xf4>)
 8000a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a02:	4a32      	ldr	r2, [pc, #200]	; (8000acc <HAL_UART_MspInit+0xf4>)
 8000a04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a08:	6413      	str	r3, [r2, #64]	; 0x40
 8000a0a:	4b30      	ldr	r3, [pc, #192]	; (8000acc <HAL_UART_MspInit+0xf4>)
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a12:	613b      	str	r3, [r7, #16]
 8000a14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	4b2c      	ldr	r3, [pc, #176]	; (8000acc <HAL_UART_MspInit+0xf4>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a2b      	ldr	r2, [pc, #172]	; (8000acc <HAL_UART_MspInit+0xf4>)
 8000a20:	f043 0301 	orr.w	r3, r3, #1
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b29      	ldr	r3, [pc, #164]	; (8000acc <HAL_UART_MspInit+0xf4>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a32:	230c      	movs	r3, #12
 8000a34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a36:	2302      	movs	r3, #2
 8000a38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3e:	2303      	movs	r3, #3
 8000a40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a42:	2307      	movs	r3, #7
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a46:	f107 0314 	add.w	r3, r7, #20
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4820      	ldr	r0, [pc, #128]	; (8000ad0 <HAL_UART_MspInit+0xf8>)
 8000a4e:	f001 fb09 	bl	8002064 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000a52:	4b20      	ldr	r3, [pc, #128]	; (8000ad4 <HAL_UART_MspInit+0xfc>)
 8000a54:	4a20      	ldr	r2, [pc, #128]	; (8000ad8 <HAL_UART_MspInit+0x100>)
 8000a56:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000a58:	4b1e      	ldr	r3, [pc, #120]	; (8000ad4 <HAL_UART_MspInit+0xfc>)
 8000a5a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a5e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a60:	4b1c      	ldr	r3, [pc, #112]	; (8000ad4 <HAL_UART_MspInit+0xfc>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a66:	4b1b      	ldr	r3, [pc, #108]	; (8000ad4 <HAL_UART_MspInit+0xfc>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a6c:	4b19      	ldr	r3, [pc, #100]	; (8000ad4 <HAL_UART_MspInit+0xfc>)
 8000a6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a72:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a74:	4b17      	ldr	r3, [pc, #92]	; (8000ad4 <HAL_UART_MspInit+0xfc>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a7a:	4b16      	ldr	r3, [pc, #88]	; (8000ad4 <HAL_UART_MspInit+0xfc>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000a80:	4b14      	ldr	r3, [pc, #80]	; (8000ad4 <HAL_UART_MspInit+0xfc>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000a86:	4b13      	ldr	r3, [pc, #76]	; (8000ad4 <HAL_UART_MspInit+0xfc>)
 8000a88:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000a8c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a8e:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <HAL_UART_MspInit+0xfc>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000a94:	480f      	ldr	r0, [pc, #60]	; (8000ad4 <HAL_UART_MspInit+0xfc>)
 8000a96:	f000 fee3 	bl	8001860 <HAL_DMA_Init>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000aa0:	f7ff fef4 	bl	800088c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	4a0b      	ldr	r2, [pc, #44]	; (8000ad4 <HAL_UART_MspInit+0xfc>)
 8000aa8:	639a      	str	r2, [r3, #56]	; 0x38
 8000aaa:	4a0a      	ldr	r2, [pc, #40]	; (8000ad4 <HAL_UART_MspInit+0xfc>)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	2026      	movs	r0, #38	; 0x26
 8000ab6:	f000 fe9c 	bl	80017f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000aba:	2026      	movs	r0, #38	; 0x26
 8000abc:	f000 feb5 	bl	800182a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ac0:	bf00      	nop
 8000ac2:	3728      	adds	r7, #40	; 0x28
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40004400 	.word	0x40004400
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	40020000 	.word	0x40020000
 8000ad4:	20000178 	.word	0x20000178
 8000ad8:	40026088 	.word	0x40026088

08000adc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ae0:	e7fe      	b.n	8000ae0 <NMI_Handler+0x4>

08000ae2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ae6:	e7fe      	b.n	8000ae6 <HardFault_Handler+0x4>

08000ae8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aec:	e7fe      	b.n	8000aec <MemManage_Handler+0x4>

08000aee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aee:	b480      	push	{r7}
 8000af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000af2:	e7fe      	b.n	8000af2 <BusFault_Handler+0x4>

08000af4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <UsageFault_Handler+0x4>

08000afa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000afe:	bf00      	nop
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr

08000b08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr

08000b16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b28:	f000 f952 	bl	8000dd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b2c:	bf00      	nop
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000b34:	4802      	ldr	r0, [pc, #8]	; (8000b40 <DMA1_Stream5_IRQHandler+0x10>)
 8000b36:	f001 f82b 	bl	8001b90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	20000178 	.word	0x20000178

08000b44 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b48:	4802      	ldr	r0, [pc, #8]	; (8000b54 <USART2_IRQHandler+0x10>)
 8000b4a:	f002 f977 	bl	8002e3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20000134 	.word	0x20000134

08000b58 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000b5c:	4802      	ldr	r0, [pc, #8]	; (8000b68 <DMA2_Stream0_IRQHandler+0x10>)
 8000b5e:	f001 f817 	bl	8001b90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	200000d4 	.word	0x200000d4

08000b6c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b086      	sub	sp, #24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	60b9      	str	r1, [r7, #8]
 8000b76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b78:	2300      	movs	r3, #0
 8000b7a:	617b      	str	r3, [r7, #20]
 8000b7c:	e00a      	b.n	8000b94 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b7e:	f3af 8000 	nop.w
 8000b82:	4601      	mov	r1, r0
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	1c5a      	adds	r2, r3, #1
 8000b88:	60ba      	str	r2, [r7, #8]
 8000b8a:	b2ca      	uxtb	r2, r1
 8000b8c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	3301      	adds	r3, #1
 8000b92:	617b      	str	r3, [r7, #20]
 8000b94:	697a      	ldr	r2, [r7, #20]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	dbf0      	blt.n	8000b7e <_read+0x12>
  }

  return len;
 8000b9c:	687b      	ldr	r3, [r7, #4]
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3718      	adds	r7, #24
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b086      	sub	sp, #24
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	60f8      	str	r0, [r7, #12]
 8000bae:	60b9      	str	r1, [r7, #8]
 8000bb0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	617b      	str	r3, [r7, #20]
 8000bb6:	e009      	b.n	8000bcc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	1c5a      	adds	r2, r3, #1
 8000bbc:	60ba      	str	r2, [r7, #8]
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff fcdf 	bl	8000584 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	617b      	str	r3, [r7, #20]
 8000bcc:	697a      	ldr	r2, [r7, #20]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	dbf1      	blt.n	8000bb8 <_write+0x12>
  }
  return len;
 8000bd4:	687b      	ldr	r3, [r7, #4]
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3718      	adds	r7, #24
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <_close>:

int _close(int file)
{
 8000bde:	b480      	push	{r7}
 8000be0:	b083      	sub	sp, #12
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000be6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	b083      	sub	sp, #12
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
 8000bfe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c06:	605a      	str	r2, [r3, #4]
  return 0;
 8000c08:	2300      	movs	r3, #0
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr

08000c16 <_isatty>:

int _isatty(int file)
{
 8000c16:	b480      	push	{r7}
 8000c18:	b083      	sub	sp, #12
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c1e:	2301      	movs	r3, #1
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr

08000c2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b085      	sub	sp, #20
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	60f8      	str	r0, [r7, #12]
 8000c34:	60b9      	str	r1, [r7, #8]
 8000c36:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c38:	2300      	movs	r3, #0
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3714      	adds	r7, #20
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
	...

08000c48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c50:	4a14      	ldr	r2, [pc, #80]	; (8000ca4 <_sbrk+0x5c>)
 8000c52:	4b15      	ldr	r3, [pc, #84]	; (8000ca8 <_sbrk+0x60>)
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c5c:	4b13      	ldr	r3, [pc, #76]	; (8000cac <_sbrk+0x64>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d102      	bne.n	8000c6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c64:	4b11      	ldr	r3, [pc, #68]	; (8000cac <_sbrk+0x64>)
 8000c66:	4a12      	ldr	r2, [pc, #72]	; (8000cb0 <_sbrk+0x68>)
 8000c68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c6a:	4b10      	ldr	r3, [pc, #64]	; (8000cac <_sbrk+0x64>)
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4413      	add	r3, r2
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	d207      	bcs.n	8000c88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c78:	f003 f9d2 	bl	8004020 <__errno>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	220c      	movs	r2, #12
 8000c80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c82:	f04f 33ff 	mov.w	r3, #4294967295
 8000c86:	e009      	b.n	8000c9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c88:	4b08      	ldr	r3, [pc, #32]	; (8000cac <_sbrk+0x64>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c8e:	4b07      	ldr	r3, [pc, #28]	; (8000cac <_sbrk+0x64>)
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4413      	add	r3, r2
 8000c96:	4a05      	ldr	r2, [pc, #20]	; (8000cac <_sbrk+0x64>)
 8000c98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c9a:	68fb      	ldr	r3, [r7, #12]
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3718      	adds	r7, #24
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	20018000 	.word	0x20018000
 8000ca8:	00000400 	.word	0x00000400
 8000cac:	200001e0 	.word	0x200001e0
 8000cb0:	200001f8 	.word	0x200001f8

08000cb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cb8:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <SystemInit+0x20>)
 8000cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cbe:	4a05      	ldr	r2, [pc, #20]	; (8000cd4 <SystemInit+0x20>)
 8000cc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d10 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cdc:	480d      	ldr	r0, [pc, #52]	; (8000d14 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cde:	490e      	ldr	r1, [pc, #56]	; (8000d18 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ce0:	4a0e      	ldr	r2, [pc, #56]	; (8000d1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ce2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ce4:	e002      	b.n	8000cec <LoopCopyDataInit>

08000ce6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ce6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ce8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cea:	3304      	adds	r3, #4

08000cec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cf0:	d3f9      	bcc.n	8000ce6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cf2:	4a0b      	ldr	r2, [pc, #44]	; (8000d20 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cf4:	4c0b      	ldr	r4, [pc, #44]	; (8000d24 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cf8:	e001      	b.n	8000cfe <LoopFillZerobss>

08000cfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cfc:	3204      	adds	r2, #4

08000cfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d00:	d3fb      	bcc.n	8000cfa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d02:	f7ff ffd7 	bl	8000cb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d06:	f003 f991 	bl	800402c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d0a:	f7ff fc4d 	bl	80005a8 <main>
  bx  lr    
 8000d0e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d10:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d18:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d1c:	080050ac 	.word	0x080050ac
  ldr r2, =_sbss
 8000d20:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d24:	200001f8 	.word	0x200001f8

08000d28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d28:	e7fe      	b.n	8000d28 <ADC_IRQHandler>
	...

08000d2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d30:	4b0e      	ldr	r3, [pc, #56]	; (8000d6c <HAL_Init+0x40>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a0d      	ldr	r2, [pc, #52]	; (8000d6c <HAL_Init+0x40>)
 8000d36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d3c:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <HAL_Init+0x40>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a0a      	ldr	r2, [pc, #40]	; (8000d6c <HAL_Init+0x40>)
 8000d42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d48:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <HAL_Init+0x40>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a07      	ldr	r2, [pc, #28]	; (8000d6c <HAL_Init+0x40>)
 8000d4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d54:	2003      	movs	r0, #3
 8000d56:	f000 fd41 	bl	80017dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d5a:	200f      	movs	r0, #15
 8000d5c:	f000 f808 	bl	8000d70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d60:	f7ff fd9a 	bl	8000898 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d64:	2300      	movs	r3, #0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40023c00 	.word	0x40023c00

08000d70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d78:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <HAL_InitTick+0x54>)
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <HAL_InitTick+0x58>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	4619      	mov	r1, r3
 8000d82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f000 fd59 	bl	8001846 <HAL_SYSTICK_Config>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e00e      	b.n	8000dbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2b0f      	cmp	r3, #15
 8000da2:	d80a      	bhi.n	8000dba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000da4:	2200      	movs	r2, #0
 8000da6:	6879      	ldr	r1, [r7, #4]
 8000da8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dac:	f000 fd21 	bl	80017f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000db0:	4a06      	ldr	r2, [pc, #24]	; (8000dcc <HAL_InitTick+0x5c>)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000db6:	2300      	movs	r3, #0
 8000db8:	e000      	b.n	8000dbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20000000 	.word	0x20000000
 8000dc8:	20000008 	.word	0x20000008
 8000dcc:	20000004 	.word	0x20000004

08000dd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dd4:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <HAL_IncTick+0x20>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	461a      	mov	r2, r3
 8000dda:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <HAL_IncTick+0x24>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4413      	add	r3, r2
 8000de0:	4a04      	ldr	r2, [pc, #16]	; (8000df4 <HAL_IncTick+0x24>)
 8000de2:	6013      	str	r3, [r2, #0]
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	20000008 	.word	0x20000008
 8000df4:	200001e4 	.word	0x200001e4

08000df8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000dfc:	4b03      	ldr	r3, [pc, #12]	; (8000e0c <HAL_GetTick+0x14>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	200001e4 	.word	0x200001e4

08000e10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e18:	f7ff ffee 	bl	8000df8 <HAL_GetTick>
 8000e1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e28:	d005      	beq.n	8000e36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e2a:	4b0a      	ldr	r3, [pc, #40]	; (8000e54 <HAL_Delay+0x44>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	461a      	mov	r2, r3
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	4413      	add	r3, r2
 8000e34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e36:	bf00      	nop
 8000e38:	f7ff ffde 	bl	8000df8 <HAL_GetTick>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	68fa      	ldr	r2, [r7, #12]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d8f7      	bhi.n	8000e38 <HAL_Delay+0x28>
  {
  }
}
 8000e48:	bf00      	nop
 8000e4a:	bf00      	nop
 8000e4c:	3710      	adds	r7, #16
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20000008 	.word	0x20000008

08000e58 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e60:	2300      	movs	r3, #0
 8000e62:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d101      	bne.n	8000e6e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e033      	b.n	8000ed6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d109      	bne.n	8000e8a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f7ff fd36 	bl	80008e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2200      	movs	r2, #0
 8000e80:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2200      	movs	r2, #0
 8000e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8e:	f003 0310 	and.w	r3, r3, #16
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d118      	bne.n	8000ec8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e9e:	f023 0302 	bic.w	r3, r3, #2
 8000ea2:	f043 0202 	orr.w	r2, r3, #2
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f000 fa48 	bl	8001340 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eba:	f023 0303 	bic.w	r3, r3, #3
 8000ebe:	f043 0201 	orr.w	r2, r3, #1
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	641a      	str	r2, [r3, #64]	; 0x40
 8000ec6:	e001      	b.n	8000ecc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3710      	adds	r7, #16
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
	...

08000ee0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8000eec:	2300      	movs	r3, #0
 8000eee:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d101      	bne.n	8000efe <HAL_ADC_Start_DMA+0x1e>
 8000efa:	2302      	movs	r3, #2
 8000efc:	e0ce      	b.n	800109c <HAL_ADC_Start_DMA+0x1bc>
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	2201      	movs	r2, #1
 8000f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	f003 0301 	and.w	r3, r3, #1
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d018      	beq.n	8000f46 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	689a      	ldr	r2, [r3, #8]
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f042 0201 	orr.w	r2, r2, #1
 8000f22:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f24:	4b5f      	ldr	r3, [pc, #380]	; (80010a4 <HAL_ADC_Start_DMA+0x1c4>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a5f      	ldr	r2, [pc, #380]	; (80010a8 <HAL_ADC_Start_DMA+0x1c8>)
 8000f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f2e:	0c9a      	lsrs	r2, r3, #18
 8000f30:	4613      	mov	r3, r2
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	4413      	add	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8000f38:	e002      	b.n	8000f40 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	3b01      	subs	r3, #1
 8000f3e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d1f9      	bne.n	8000f3a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f54:	d107      	bne.n	8000f66 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	689a      	ldr	r2, [r3, #8]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f64:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	f003 0301 	and.w	r3, r3, #1
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	f040 8086 	bne.w	8001082 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f7e:	f023 0301 	bic.w	r3, r3, #1
 8000f82:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d007      	beq.n	8000fa8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000fa0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000fb4:	d106      	bne.n	8000fc4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fba:	f023 0206 	bic.w	r2, r3, #6
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	645a      	str	r2, [r3, #68]	; 0x44
 8000fc2:	e002      	b.n	8000fca <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000fd2:	4b36      	ldr	r3, [pc, #216]	; (80010ac <HAL_ADC_Start_DMA+0x1cc>)
 8000fd4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fda:	4a35      	ldr	r2, [pc, #212]	; (80010b0 <HAL_ADC_Start_DMA+0x1d0>)
 8000fdc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fe2:	4a34      	ldr	r2, [pc, #208]	; (80010b4 <HAL_ADC_Start_DMA+0x1d4>)
 8000fe4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fea:	4a33      	ldr	r2, [pc, #204]	; (80010b8 <HAL_ADC_Start_DMA+0x1d8>)
 8000fec:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000ff6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	685a      	ldr	r2, [r3, #4]
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001006:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	689a      	ldr	r2, [r3, #8]
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001016:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	334c      	adds	r3, #76	; 0x4c
 8001022:	4619      	mov	r1, r3
 8001024:	68ba      	ldr	r2, [r7, #8]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	f000 fcc8 	bl	80019bc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f003 031f 	and.w	r3, r3, #31
 8001034:	2b00      	cmp	r3, #0
 8001036:	d10f      	bne.n	8001058 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d129      	bne.n	800109a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	689a      	ldr	r2, [r3, #8]
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	e020      	b.n	800109a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a17      	ldr	r2, [pc, #92]	; (80010bc <HAL_ADC_Start_DMA+0x1dc>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d11b      	bne.n	800109a <HAL_ADC_Start_DMA+0x1ba>
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800106c:	2b00      	cmp	r3, #0
 800106e:	d114      	bne.n	800109a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	689a      	ldr	r2, [r3, #8]
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	e00b      	b.n	800109a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001086:	f043 0210 	orr.w	r2, r3, #16
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001092:	f043 0201 	orr.w	r2, r3, #1
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800109a:	2300      	movs	r3, #0
}
 800109c:	4618      	mov	r0, r3
 800109e:	3718      	adds	r7, #24
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000000 	.word	0x20000000
 80010a8:	431bde83 	.word	0x431bde83
 80010ac:	40012300 	.word	0x40012300
 80010b0:	08001539 	.word	0x08001539
 80010b4:	080015f3 	.word	0x080015f3
 80010b8:	0800160f 	.word	0x0800160f
 80010bc:	40012000 	.word	0x40012000

080010c0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80010c8:	bf00      	nop
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80010f0:	bf00      	nop
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b085      	sub	sp, #20
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001106:	2300      	movs	r3, #0
 8001108:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001110:	2b01      	cmp	r3, #1
 8001112:	d101      	bne.n	8001118 <HAL_ADC_ConfigChannel+0x1c>
 8001114:	2302      	movs	r3, #2
 8001116:	e105      	b.n	8001324 <HAL_ADC_ConfigChannel+0x228>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2201      	movs	r2, #1
 800111c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2b09      	cmp	r3, #9
 8001126:	d925      	bls.n	8001174 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	68d9      	ldr	r1, [r3, #12]
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	b29b      	uxth	r3, r3
 8001134:	461a      	mov	r2, r3
 8001136:	4613      	mov	r3, r2
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	4413      	add	r3, r2
 800113c:	3b1e      	subs	r3, #30
 800113e:	2207      	movs	r2, #7
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	43da      	mvns	r2, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	400a      	ands	r2, r1
 800114c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	68d9      	ldr	r1, [r3, #12]
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	689a      	ldr	r2, [r3, #8]
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	b29b      	uxth	r3, r3
 800115e:	4618      	mov	r0, r3
 8001160:	4603      	mov	r3, r0
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	4403      	add	r3, r0
 8001166:	3b1e      	subs	r3, #30
 8001168:	409a      	lsls	r2, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	430a      	orrs	r2, r1
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	e022      	b.n	80011ba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	6919      	ldr	r1, [r3, #16]
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	b29b      	uxth	r3, r3
 8001180:	461a      	mov	r2, r3
 8001182:	4613      	mov	r3, r2
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	4413      	add	r3, r2
 8001188:	2207      	movs	r2, #7
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	43da      	mvns	r2, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	400a      	ands	r2, r1
 8001196:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	6919      	ldr	r1, [r3, #16]
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	689a      	ldr	r2, [r3, #8]
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	4618      	mov	r0, r3
 80011aa:	4603      	mov	r3, r0
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	4403      	add	r3, r0
 80011b0:	409a      	lsls	r2, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	430a      	orrs	r2, r1
 80011b8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	2b06      	cmp	r3, #6
 80011c0:	d824      	bhi.n	800120c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685a      	ldr	r2, [r3, #4]
 80011cc:	4613      	mov	r3, r2
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	4413      	add	r3, r2
 80011d2:	3b05      	subs	r3, #5
 80011d4:	221f      	movs	r2, #31
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	43da      	mvns	r2, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	400a      	ands	r2, r1
 80011e2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	4618      	mov	r0, r3
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685a      	ldr	r2, [r3, #4]
 80011f6:	4613      	mov	r3, r2
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	4413      	add	r3, r2
 80011fc:	3b05      	subs	r3, #5
 80011fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	430a      	orrs	r2, r1
 8001208:	635a      	str	r2, [r3, #52]	; 0x34
 800120a:	e04c      	b.n	80012a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	2b0c      	cmp	r3, #12
 8001212:	d824      	bhi.n	800125e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685a      	ldr	r2, [r3, #4]
 800121e:	4613      	mov	r3, r2
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	4413      	add	r3, r2
 8001224:	3b23      	subs	r3, #35	; 0x23
 8001226:	221f      	movs	r2, #31
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	43da      	mvns	r2, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	400a      	ands	r2, r1
 8001234:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	b29b      	uxth	r3, r3
 8001242:	4618      	mov	r0, r3
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685a      	ldr	r2, [r3, #4]
 8001248:	4613      	mov	r3, r2
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	4413      	add	r3, r2
 800124e:	3b23      	subs	r3, #35	; 0x23
 8001250:	fa00 f203 	lsl.w	r2, r0, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	430a      	orrs	r2, r1
 800125a:	631a      	str	r2, [r3, #48]	; 0x30
 800125c:	e023      	b.n	80012a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685a      	ldr	r2, [r3, #4]
 8001268:	4613      	mov	r3, r2
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	4413      	add	r3, r2
 800126e:	3b41      	subs	r3, #65	; 0x41
 8001270:	221f      	movs	r2, #31
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	43da      	mvns	r2, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	400a      	ands	r2, r1
 800127e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	b29b      	uxth	r3, r3
 800128c:	4618      	mov	r0, r3
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685a      	ldr	r2, [r3, #4]
 8001292:	4613      	mov	r3, r2
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	4413      	add	r3, r2
 8001298:	3b41      	subs	r3, #65	; 0x41
 800129a:	fa00 f203 	lsl.w	r2, r0, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	430a      	orrs	r2, r1
 80012a4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012a6:	4b22      	ldr	r3, [pc, #136]	; (8001330 <HAL_ADC_ConfigChannel+0x234>)
 80012a8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a21      	ldr	r2, [pc, #132]	; (8001334 <HAL_ADC_ConfigChannel+0x238>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d109      	bne.n	80012c8 <HAL_ADC_ConfigChannel+0x1cc>
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2b12      	cmp	r3, #18
 80012ba:	d105      	bne.n	80012c8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a19      	ldr	r2, [pc, #100]	; (8001334 <HAL_ADC_ConfigChannel+0x238>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d123      	bne.n	800131a <HAL_ADC_ConfigChannel+0x21e>
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	2b10      	cmp	r3, #16
 80012d8:	d003      	beq.n	80012e2 <HAL_ADC_ConfigChannel+0x1e6>
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2b11      	cmp	r3, #17
 80012e0:	d11b      	bne.n	800131a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2b10      	cmp	r3, #16
 80012f4:	d111      	bne.n	800131a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012f6:	4b10      	ldr	r3, [pc, #64]	; (8001338 <HAL_ADC_ConfigChannel+0x23c>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a10      	ldr	r2, [pc, #64]	; (800133c <HAL_ADC_ConfigChannel+0x240>)
 80012fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001300:	0c9a      	lsrs	r2, r3, #18
 8001302:	4613      	mov	r3, r2
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	4413      	add	r3, r2
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800130c:	e002      	b.n	8001314 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	3b01      	subs	r3, #1
 8001312:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d1f9      	bne.n	800130e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2200      	movs	r2, #0
 800131e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001322:	2300      	movs	r3, #0
}
 8001324:	4618      	mov	r0, r3
 8001326:	3714      	adds	r7, #20
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	40012300 	.word	0x40012300
 8001334:	40012000 	.word	0x40012000
 8001338:	20000000 	.word	0x20000000
 800133c:	431bde83 	.word	0x431bde83

08001340 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001348:	4b79      	ldr	r3, [pc, #484]	; (8001530 <ADC_Init+0x1f0>)
 800134a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	685a      	ldr	r2, [r3, #4]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	431a      	orrs	r2, r3
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	685a      	ldr	r2, [r3, #4]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001374:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	6859      	ldr	r1, [r3, #4]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	691b      	ldr	r3, [r3, #16]
 8001380:	021a      	lsls	r2, r3, #8
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	430a      	orrs	r2, r1
 8001388:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	685a      	ldr	r2, [r3, #4]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001398:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	6859      	ldr	r1, [r3, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	689a      	ldr	r2, [r3, #8]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	430a      	orrs	r2, r1
 80013aa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	689a      	ldr	r2, [r3, #8]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	6899      	ldr	r1, [r3, #8]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	68da      	ldr	r2, [r3, #12]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	430a      	orrs	r2, r1
 80013cc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d2:	4a58      	ldr	r2, [pc, #352]	; (8001534 <ADC_Init+0x1f4>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d022      	beq.n	800141e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	689a      	ldr	r2, [r3, #8]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80013e6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	6899      	ldr	r1, [r3, #8]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	430a      	orrs	r2, r1
 80013f8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	689a      	ldr	r2, [r3, #8]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001408:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	6899      	ldr	r1, [r3, #8]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	430a      	orrs	r2, r1
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	e00f      	b.n	800143e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	689a      	ldr	r2, [r3, #8]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800142c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	689a      	ldr	r2, [r3, #8]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800143c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	689a      	ldr	r2, [r3, #8]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f022 0202 	bic.w	r2, r2, #2
 800144c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	6899      	ldr	r1, [r3, #8]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	7e1b      	ldrb	r3, [r3, #24]
 8001458:	005a      	lsls	r2, r3, #1
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	430a      	orrs	r2, r1
 8001460:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d01b      	beq.n	80014a4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	685a      	ldr	r2, [r3, #4]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800147a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	685a      	ldr	r2, [r3, #4]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800148a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	6859      	ldr	r1, [r3, #4]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001496:	3b01      	subs	r3, #1
 8001498:	035a      	lsls	r2, r3, #13
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	430a      	orrs	r2, r1
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	e007      	b.n	80014b4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	685a      	ldr	r2, [r3, #4]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014b2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80014c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	69db      	ldr	r3, [r3, #28]
 80014ce:	3b01      	subs	r3, #1
 80014d0:	051a      	lsls	r2, r3, #20
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	430a      	orrs	r2, r1
 80014d8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	689a      	ldr	r2, [r3, #8]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80014e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	6899      	ldr	r1, [r3, #8]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014f6:	025a      	lsls	r2, r3, #9
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	430a      	orrs	r2, r1
 80014fe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	689a      	ldr	r2, [r3, #8]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800150e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	6899      	ldr	r1, [r3, #8]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	695b      	ldr	r3, [r3, #20]
 800151a:	029a      	lsls	r2, r3, #10
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	430a      	orrs	r2, r1
 8001522:	609a      	str	r2, [r3, #8]
}
 8001524:	bf00      	nop
 8001526:	3714      	adds	r7, #20
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	40012300 	.word	0x40012300
 8001534:	0f000001 	.word	0x0f000001

08001538 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001544:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800154e:	2b00      	cmp	r3, #0
 8001550:	d13c      	bne.n	80015cc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001556:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d12b      	bne.n	80015c4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001570:	2b00      	cmp	r3, #0
 8001572:	d127      	bne.n	80015c4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800157a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800157e:	2b00      	cmp	r3, #0
 8001580:	d006      	beq.n	8001590 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800158c:	2b00      	cmp	r3, #0
 800158e:	d119      	bne.n	80015c4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	685a      	ldr	r2, [r3, #4]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f022 0220 	bic.w	r2, r2, #32
 800159e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d105      	bne.n	80015c4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015bc:	f043 0201 	orr.w	r2, r3, #1
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80015c4:	68f8      	ldr	r0, [r7, #12]
 80015c6:	f7ff fd7b 	bl	80010c0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80015ca:	e00e      	b.n	80015ea <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d0:	f003 0310 	and.w	r3, r3, #16
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d003      	beq.n	80015e0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80015d8:	68f8      	ldr	r0, [r7, #12]
 80015da:	f7ff fd85 	bl	80010e8 <HAL_ADC_ErrorCallback>
}
 80015de:	e004      	b.n	80015ea <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	4798      	blx	r3
}
 80015ea:	bf00      	nop
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b084      	sub	sp, #16
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015fe:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001600:	68f8      	ldr	r0, [r7, #12]
 8001602:	f7ff fd67 	bl	80010d4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001606:	bf00      	nop
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b084      	sub	sp, #16
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800161a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2240      	movs	r2, #64	; 0x40
 8001620:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001626:	f043 0204 	orr.w	r2, r3, #4
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800162e:	68f8      	ldr	r0, [r7, #12]
 8001630:	f7ff fd5a 	bl	80010e8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001634:	bf00      	nop
 8001636:	3710      	adds	r7, #16
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800164c:	4b0c      	ldr	r3, [pc, #48]	; (8001680 <__NVIC_SetPriorityGrouping+0x44>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001652:	68ba      	ldr	r2, [r7, #8]
 8001654:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001658:	4013      	ands	r3, r2
 800165a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001664:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800166c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800166e:	4a04      	ldr	r2, [pc, #16]	; (8001680 <__NVIC_SetPriorityGrouping+0x44>)
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	60d3      	str	r3, [r2, #12]
}
 8001674:	bf00      	nop
 8001676:	3714      	adds	r7, #20
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001688:	4b04      	ldr	r3, [pc, #16]	; (800169c <__NVIC_GetPriorityGrouping+0x18>)
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	0a1b      	lsrs	r3, r3, #8
 800168e:	f003 0307 	and.w	r3, r3, #7
}
 8001692:	4618      	mov	r0, r3
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	e000ed00 	.word	0xe000ed00

080016a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	db0b      	blt.n	80016ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016b2:	79fb      	ldrb	r3, [r7, #7]
 80016b4:	f003 021f 	and.w	r2, r3, #31
 80016b8:	4907      	ldr	r1, [pc, #28]	; (80016d8 <__NVIC_EnableIRQ+0x38>)
 80016ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016be:	095b      	lsrs	r3, r3, #5
 80016c0:	2001      	movs	r0, #1
 80016c2:	fa00 f202 	lsl.w	r2, r0, r2
 80016c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	e000e100 	.word	0xe000e100

080016dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	6039      	str	r1, [r7, #0]
 80016e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	db0a      	blt.n	8001706 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	b2da      	uxtb	r2, r3
 80016f4:	490c      	ldr	r1, [pc, #48]	; (8001728 <__NVIC_SetPriority+0x4c>)
 80016f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fa:	0112      	lsls	r2, r2, #4
 80016fc:	b2d2      	uxtb	r2, r2
 80016fe:	440b      	add	r3, r1
 8001700:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001704:	e00a      	b.n	800171c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	b2da      	uxtb	r2, r3
 800170a:	4908      	ldr	r1, [pc, #32]	; (800172c <__NVIC_SetPriority+0x50>)
 800170c:	79fb      	ldrb	r3, [r7, #7]
 800170e:	f003 030f 	and.w	r3, r3, #15
 8001712:	3b04      	subs	r3, #4
 8001714:	0112      	lsls	r2, r2, #4
 8001716:	b2d2      	uxtb	r2, r2
 8001718:	440b      	add	r3, r1
 800171a:	761a      	strb	r2, [r3, #24]
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	e000e100 	.word	0xe000e100
 800172c:	e000ed00 	.word	0xe000ed00

08001730 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001730:	b480      	push	{r7}
 8001732:	b089      	sub	sp, #36	; 0x24
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f003 0307 	and.w	r3, r3, #7
 8001742:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	f1c3 0307 	rsb	r3, r3, #7
 800174a:	2b04      	cmp	r3, #4
 800174c:	bf28      	it	cs
 800174e:	2304      	movcs	r3, #4
 8001750:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	3304      	adds	r3, #4
 8001756:	2b06      	cmp	r3, #6
 8001758:	d902      	bls.n	8001760 <NVIC_EncodePriority+0x30>
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	3b03      	subs	r3, #3
 800175e:	e000      	b.n	8001762 <NVIC_EncodePriority+0x32>
 8001760:	2300      	movs	r3, #0
 8001762:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001764:	f04f 32ff 	mov.w	r2, #4294967295
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	43da      	mvns	r2, r3
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	401a      	ands	r2, r3
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001778:	f04f 31ff 	mov.w	r1, #4294967295
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	fa01 f303 	lsl.w	r3, r1, r3
 8001782:	43d9      	mvns	r1, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001788:	4313      	orrs	r3, r2
         );
}
 800178a:	4618      	mov	r0, r3
 800178c:	3724      	adds	r7, #36	; 0x24
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
	...

08001798 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	3b01      	subs	r3, #1
 80017a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017a8:	d301      	bcc.n	80017ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017aa:	2301      	movs	r3, #1
 80017ac:	e00f      	b.n	80017ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ae:	4a0a      	ldr	r2, [pc, #40]	; (80017d8 <SysTick_Config+0x40>)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	3b01      	subs	r3, #1
 80017b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017b6:	210f      	movs	r1, #15
 80017b8:	f04f 30ff 	mov.w	r0, #4294967295
 80017bc:	f7ff ff8e 	bl	80016dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017c0:	4b05      	ldr	r3, [pc, #20]	; (80017d8 <SysTick_Config+0x40>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017c6:	4b04      	ldr	r3, [pc, #16]	; (80017d8 <SysTick_Config+0x40>)
 80017c8:	2207      	movs	r2, #7
 80017ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	e000e010 	.word	0xe000e010

080017dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f7ff ff29 	bl	800163c <__NVIC_SetPriorityGrouping>
}
 80017ea:	bf00      	nop
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b086      	sub	sp, #24
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	4603      	mov	r3, r0
 80017fa:	60b9      	str	r1, [r7, #8]
 80017fc:	607a      	str	r2, [r7, #4]
 80017fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001804:	f7ff ff3e 	bl	8001684 <__NVIC_GetPriorityGrouping>
 8001808:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	68b9      	ldr	r1, [r7, #8]
 800180e:	6978      	ldr	r0, [r7, #20]
 8001810:	f7ff ff8e 	bl	8001730 <NVIC_EncodePriority>
 8001814:	4602      	mov	r2, r0
 8001816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800181a:	4611      	mov	r1, r2
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff ff5d 	bl	80016dc <__NVIC_SetPriority>
}
 8001822:	bf00      	nop
 8001824:	3718      	adds	r7, #24
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b082      	sub	sp, #8
 800182e:	af00      	add	r7, sp, #0
 8001830:	4603      	mov	r3, r0
 8001832:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff ff31 	bl	80016a0 <__NVIC_EnableIRQ>
}
 800183e:	bf00      	nop
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	b082      	sub	sp, #8
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f7ff ffa2 	bl	8001798 <SysTick_Config>
 8001854:	4603      	mov	r3, r0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
	...

08001860 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001868:	2300      	movs	r3, #0
 800186a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800186c:	f7ff fac4 	bl	8000df8 <HAL_GetTick>
 8001870:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d101      	bne.n	800187c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e099      	b.n	80019b0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2202      	movs	r2, #2
 8001880:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f022 0201 	bic.w	r2, r2, #1
 800189a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800189c:	e00f      	b.n	80018be <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800189e:	f7ff faab 	bl	8000df8 <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	2b05      	cmp	r3, #5
 80018aa:	d908      	bls.n	80018be <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2220      	movs	r2, #32
 80018b0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2203      	movs	r2, #3
 80018b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e078      	b.n	80019b0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0301 	and.w	r3, r3, #1
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d1e8      	bne.n	800189e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80018d4:	697a      	ldr	r2, [r7, #20]
 80018d6:	4b38      	ldr	r3, [pc, #224]	; (80019b8 <HAL_DMA_Init+0x158>)
 80018d8:	4013      	ands	r3, r2
 80018da:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685a      	ldr	r2, [r3, #4]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	691b      	ldr	r3, [r3, #16]
 80018f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001902:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6a1b      	ldr	r3, [r3, #32]
 8001908:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800190a:	697a      	ldr	r2, [r7, #20]
 800190c:	4313      	orrs	r3, r2
 800190e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001914:	2b04      	cmp	r3, #4
 8001916:	d107      	bne.n	8001928 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001920:	4313      	orrs	r3, r2
 8001922:	697a      	ldr	r2, [r7, #20]
 8001924:	4313      	orrs	r3, r2
 8001926:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	697a      	ldr	r2, [r7, #20]
 800192e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	695b      	ldr	r3, [r3, #20]
 8001936:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	f023 0307 	bic.w	r3, r3, #7
 800193e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001944:	697a      	ldr	r2, [r7, #20]
 8001946:	4313      	orrs	r3, r2
 8001948:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194e:	2b04      	cmp	r3, #4
 8001950:	d117      	bne.n	8001982 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001956:	697a      	ldr	r2, [r7, #20]
 8001958:	4313      	orrs	r3, r2
 800195a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001960:	2b00      	cmp	r3, #0
 8001962:	d00e      	beq.n	8001982 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f000 fb01 	bl	8001f6c <DMA_CheckFifoParam>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d008      	beq.n	8001982 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2240      	movs	r2, #64	; 0x40
 8001974:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2201      	movs	r2, #1
 800197a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800197e:	2301      	movs	r3, #1
 8001980:	e016      	b.n	80019b0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	697a      	ldr	r2, [r7, #20]
 8001988:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f000 fab8 	bl	8001f00 <DMA_CalcBaseAndBitshift>
 8001990:	4603      	mov	r3, r0
 8001992:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001998:	223f      	movs	r2, #63	; 0x3f
 800199a:	409a      	lsls	r2, r3
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2201      	movs	r2, #1
 80019aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80019ae:	2300      	movs	r3, #0
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3718      	adds	r7, #24
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	f010803f 	.word	0xf010803f

080019bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
 80019c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80019ca:	2300      	movs	r3, #0
 80019cc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d101      	bne.n	80019e2 <HAL_DMA_Start_IT+0x26>
 80019de:	2302      	movs	r3, #2
 80019e0:	e040      	b.n	8001a64 <HAL_DMA_Start_IT+0xa8>
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	2201      	movs	r2, #1
 80019e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d12f      	bne.n	8001a56 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2202      	movs	r2, #2
 80019fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	2200      	movs	r2, #0
 8001a02:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	68b9      	ldr	r1, [r7, #8]
 8001a0a:	68f8      	ldr	r0, [r7, #12]
 8001a0c:	f000 fa4a 	bl	8001ea4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a14:	223f      	movs	r2, #63	; 0x3f
 8001a16:	409a      	lsls	r2, r3
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f042 0216 	orr.w	r2, r2, #22
 8001a2a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d007      	beq.n	8001a44 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f042 0208 	orr.w	r2, r2, #8
 8001a42:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f042 0201 	orr.w	r2, r2, #1
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	e005      	b.n	8001a62 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001a5e:	2302      	movs	r3, #2
 8001a60:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001a62:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3718      	adds	r7, #24
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a78:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001a7a:	f7ff f9bd 	bl	8000df8 <HAL_GetTick>
 8001a7e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d008      	beq.n	8001a9e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2280      	movs	r2, #128	; 0x80
 8001a90:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e052      	b.n	8001b44 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f022 0216 	bic.w	r2, r2, #22
 8001aac:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	695a      	ldr	r2, [r3, #20]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001abc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d103      	bne.n	8001ace <HAL_DMA_Abort+0x62>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d007      	beq.n	8001ade <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f022 0208 	bic.w	r2, r2, #8
 8001adc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f022 0201 	bic.w	r2, r2, #1
 8001aec:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001aee:	e013      	b.n	8001b18 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001af0:	f7ff f982 	bl	8000df8 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b05      	cmp	r3, #5
 8001afc:	d90c      	bls.n	8001b18 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2220      	movs	r2, #32
 8001b02:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2203      	movs	r2, #3
 8001b08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e015      	b.n	8001b44 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d1e4      	bne.n	8001af0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b2a:	223f      	movs	r2, #63	; 0x3f
 8001b2c:	409a      	lsls	r2, r3
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2201      	movs	r2, #1
 8001b36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001b42:	2300      	movs	r3, #0
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3710      	adds	r7, #16
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d004      	beq.n	8001b6a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2280      	movs	r2, #128	; 0x80
 8001b64:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e00c      	b.n	8001b84 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2205      	movs	r2, #5
 8001b6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f022 0201 	bic.w	r2, r2, #1
 8001b80:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b82:	2300      	movs	r3, #0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001b9c:	4b8e      	ldr	r3, [pc, #568]	; (8001dd8 <HAL_DMA_IRQHandler+0x248>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a8e      	ldr	r2, [pc, #568]	; (8001ddc <HAL_DMA_IRQHandler+0x24c>)
 8001ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba6:	0a9b      	lsrs	r3, r3, #10
 8001ba8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bba:	2208      	movs	r2, #8
 8001bbc:	409a      	lsls	r2, r3
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d01a      	beq.n	8001bfc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0304 	and.w	r3, r3, #4
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d013      	beq.n	8001bfc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f022 0204 	bic.w	r2, r2, #4
 8001be2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001be8:	2208      	movs	r2, #8
 8001bea:	409a      	lsls	r2, r3
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bf4:	f043 0201 	orr.w	r2, r3, #1
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c00:	2201      	movs	r2, #1
 8001c02:	409a      	lsls	r2, r3
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	4013      	ands	r3, r2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d012      	beq.n	8001c32 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	695b      	ldr	r3, [r3, #20]
 8001c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d00b      	beq.n	8001c32 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c1e:	2201      	movs	r2, #1
 8001c20:	409a      	lsls	r2, r3
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c2a:	f043 0202 	orr.w	r2, r3, #2
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c36:	2204      	movs	r2, #4
 8001c38:	409a      	lsls	r2, r3
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d012      	beq.n	8001c68 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d00b      	beq.n	8001c68 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c54:	2204      	movs	r2, #4
 8001c56:	409a      	lsls	r2, r3
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c60:	f043 0204 	orr.w	r2, r3, #4
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c6c:	2210      	movs	r2, #16
 8001c6e:	409a      	lsls	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	4013      	ands	r3, r2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d043      	beq.n	8001d00 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0308 	and.w	r3, r3, #8
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d03c      	beq.n	8001d00 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c8a:	2210      	movs	r2, #16
 8001c8c:	409a      	lsls	r2, r3
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d018      	beq.n	8001cd2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d108      	bne.n	8001cc0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d024      	beq.n	8001d00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	4798      	blx	r3
 8001cbe:	e01f      	b.n	8001d00 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d01b      	beq.n	8001d00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	4798      	blx	r3
 8001cd0:	e016      	b.n	8001d00 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d107      	bne.n	8001cf0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f022 0208 	bic.w	r2, r2, #8
 8001cee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d003      	beq.n	8001d00 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d04:	2220      	movs	r2, #32
 8001d06:	409a      	lsls	r2, r3
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f000 808f 	beq.w	8001e30 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0310 	and.w	r3, r3, #16
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	f000 8087 	beq.w	8001e30 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d26:	2220      	movs	r2, #32
 8001d28:	409a      	lsls	r2, r3
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	2b05      	cmp	r3, #5
 8001d38:	d136      	bne.n	8001da8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f022 0216 	bic.w	r2, r2, #22
 8001d48:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	695a      	ldr	r2, [r3, #20]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d58:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d103      	bne.n	8001d6a <HAL_DMA_IRQHandler+0x1da>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d007      	beq.n	8001d7a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f022 0208 	bic.w	r2, r2, #8
 8001d78:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d7e:	223f      	movs	r2, #63	; 0x3f
 8001d80:	409a      	lsls	r2, r3
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d07e      	beq.n	8001e9c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	4798      	blx	r3
        }
        return;
 8001da6:	e079      	b.n	8001e9c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d01d      	beq.n	8001df2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d10d      	bne.n	8001de0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d031      	beq.n	8001e30 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	4798      	blx	r3
 8001dd4:	e02c      	b.n	8001e30 <HAL_DMA_IRQHandler+0x2a0>
 8001dd6:	bf00      	nop
 8001dd8:	20000000 	.word	0x20000000
 8001ddc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d023      	beq.n	8001e30 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	4798      	blx	r3
 8001df0:	e01e      	b.n	8001e30 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d10f      	bne.n	8001e20 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f022 0210 	bic.w	r2, r2, #16
 8001e0e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d003      	beq.n	8001e30 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d032      	beq.n	8001e9e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e3c:	f003 0301 	and.w	r3, r3, #1
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d022      	beq.n	8001e8a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2205      	movs	r2, #5
 8001e48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f022 0201 	bic.w	r2, r2, #1
 8001e5a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	3301      	adds	r3, #1
 8001e60:	60bb      	str	r3, [r7, #8]
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d307      	bcc.n	8001e78 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d1f2      	bne.n	8001e5c <HAL_DMA_IRQHandler+0x2cc>
 8001e76:	e000      	b.n	8001e7a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001e78:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d005      	beq.n	8001e9e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	4798      	blx	r3
 8001e9a:	e000      	b.n	8001e9e <HAL_DMA_IRQHandler+0x30e>
        return;
 8001e9c:	bf00      	nop
    }
  }
}
 8001e9e:	3718      	adds	r7, #24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b085      	sub	sp, #20
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]
 8001eb0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ec0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	2b40      	cmp	r3, #64	; 0x40
 8001ed0:	d108      	bne.n	8001ee4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	68ba      	ldr	r2, [r7, #8]
 8001ee0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001ee2:	e007      	b.n	8001ef4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	68ba      	ldr	r2, [r7, #8]
 8001eea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	60da      	str	r2, [r3, #12]
}
 8001ef4:	bf00      	nop
 8001ef6:	3714      	adds	r7, #20
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	3b10      	subs	r3, #16
 8001f10:	4a14      	ldr	r2, [pc, #80]	; (8001f64 <DMA_CalcBaseAndBitshift+0x64>)
 8001f12:	fba2 2303 	umull	r2, r3, r2, r3
 8001f16:	091b      	lsrs	r3, r3, #4
 8001f18:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f1a:	4a13      	ldr	r2, [pc, #76]	; (8001f68 <DMA_CalcBaseAndBitshift+0x68>)
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	4413      	add	r3, r2
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	461a      	mov	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2b03      	cmp	r3, #3
 8001f2c:	d909      	bls.n	8001f42 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f36:	f023 0303 	bic.w	r3, r3, #3
 8001f3a:	1d1a      	adds	r2, r3, #4
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	659a      	str	r2, [r3, #88]	; 0x58
 8001f40:	e007      	b.n	8001f52 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f4a:	f023 0303 	bic.w	r3, r3, #3
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3714      	adds	r7, #20
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	aaaaaaab 	.word	0xaaaaaaab
 8001f68:	08004ffc 	.word	0x08004ffc

08001f6c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f74:	2300      	movs	r3, #0
 8001f76:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f7c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	699b      	ldr	r3, [r3, #24]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d11f      	bne.n	8001fc6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	2b03      	cmp	r3, #3
 8001f8a:	d856      	bhi.n	800203a <DMA_CheckFifoParam+0xce>
 8001f8c:	a201      	add	r2, pc, #4	; (adr r2, 8001f94 <DMA_CheckFifoParam+0x28>)
 8001f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f92:	bf00      	nop
 8001f94:	08001fa5 	.word	0x08001fa5
 8001f98:	08001fb7 	.word	0x08001fb7
 8001f9c:	08001fa5 	.word	0x08001fa5
 8001fa0:	0800203b 	.word	0x0800203b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d046      	beq.n	800203e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fb4:	e043      	b.n	800203e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001fbe:	d140      	bne.n	8002042 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fc4:	e03d      	b.n	8002042 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fce:	d121      	bne.n	8002014 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	2b03      	cmp	r3, #3
 8001fd4:	d837      	bhi.n	8002046 <DMA_CheckFifoParam+0xda>
 8001fd6:	a201      	add	r2, pc, #4	; (adr r2, 8001fdc <DMA_CheckFifoParam+0x70>)
 8001fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fdc:	08001fed 	.word	0x08001fed
 8001fe0:	08001ff3 	.word	0x08001ff3
 8001fe4:	08001fed 	.word	0x08001fed
 8001fe8:	08002005 	.word	0x08002005
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	73fb      	strb	r3, [r7, #15]
      break;
 8001ff0:	e030      	b.n	8002054 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d025      	beq.n	800204a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002002:	e022      	b.n	800204a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002008:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800200c:	d11f      	bne.n	800204e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002012:	e01c      	b.n	800204e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	2b02      	cmp	r3, #2
 8002018:	d903      	bls.n	8002022 <DMA_CheckFifoParam+0xb6>
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	2b03      	cmp	r3, #3
 800201e:	d003      	beq.n	8002028 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002020:	e018      	b.n	8002054 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	73fb      	strb	r3, [r7, #15]
      break;
 8002026:	e015      	b.n	8002054 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d00e      	beq.n	8002052 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	73fb      	strb	r3, [r7, #15]
      break;
 8002038:	e00b      	b.n	8002052 <DMA_CheckFifoParam+0xe6>
      break;
 800203a:	bf00      	nop
 800203c:	e00a      	b.n	8002054 <DMA_CheckFifoParam+0xe8>
      break;
 800203e:	bf00      	nop
 8002040:	e008      	b.n	8002054 <DMA_CheckFifoParam+0xe8>
      break;
 8002042:	bf00      	nop
 8002044:	e006      	b.n	8002054 <DMA_CheckFifoParam+0xe8>
      break;
 8002046:	bf00      	nop
 8002048:	e004      	b.n	8002054 <DMA_CheckFifoParam+0xe8>
      break;
 800204a:	bf00      	nop
 800204c:	e002      	b.n	8002054 <DMA_CheckFifoParam+0xe8>
      break;   
 800204e:	bf00      	nop
 8002050:	e000      	b.n	8002054 <DMA_CheckFifoParam+0xe8>
      break;
 8002052:	bf00      	nop
    }
  } 
  
  return status; 
 8002054:	7bfb      	ldrb	r3, [r7, #15]
}
 8002056:	4618      	mov	r0, r3
 8002058:	3714      	adds	r7, #20
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop

08002064 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002064:	b480      	push	{r7}
 8002066:	b089      	sub	sp, #36	; 0x24
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800206e:	2300      	movs	r3, #0
 8002070:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002072:	2300      	movs	r3, #0
 8002074:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002076:	2300      	movs	r3, #0
 8002078:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800207a:	2300      	movs	r3, #0
 800207c:	61fb      	str	r3, [r7, #28]
 800207e:	e159      	b.n	8002334 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002080:	2201      	movs	r2, #1
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	697a      	ldr	r2, [r7, #20]
 8002090:	4013      	ands	r3, r2
 8002092:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002094:	693a      	ldr	r2, [r7, #16]
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	429a      	cmp	r2, r3
 800209a:	f040 8148 	bne.w	800232e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f003 0303 	and.w	r3, r3, #3
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d005      	beq.n	80020b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d130      	bne.n	8002118 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	2203      	movs	r2, #3
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	43db      	mvns	r3, r3
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	4013      	ands	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	68da      	ldr	r2, [r3, #12]
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	fa02 f303 	lsl.w	r3, r2, r3
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	4313      	orrs	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020ec:	2201      	movs	r2, #1
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	43db      	mvns	r3, r3
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	4013      	ands	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	091b      	lsrs	r3, r3, #4
 8002102:	f003 0201 	and.w	r2, r3, #1
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	4313      	orrs	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f003 0303 	and.w	r3, r3, #3
 8002120:	2b03      	cmp	r3, #3
 8002122:	d017      	beq.n	8002154 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	2203      	movs	r2, #3
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	43db      	mvns	r3, r3
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	4013      	ands	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	689a      	ldr	r2, [r3, #8]
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	4313      	orrs	r3, r2
 800214c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f003 0303 	and.w	r3, r3, #3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d123      	bne.n	80021a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	08da      	lsrs	r2, r3, #3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	3208      	adds	r2, #8
 8002168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800216c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	f003 0307 	and.w	r3, r3, #7
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	220f      	movs	r2, #15
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	43db      	mvns	r3, r3
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	4013      	ands	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	691a      	ldr	r2, [r3, #16]
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	f003 0307 	and.w	r3, r3, #7
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	4313      	orrs	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	08da      	lsrs	r2, r3, #3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	3208      	adds	r2, #8
 80021a2:	69b9      	ldr	r1, [r7, #24]
 80021a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	2203      	movs	r2, #3
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	43db      	mvns	r3, r3
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	4013      	ands	r3, r2
 80021be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f003 0203 	and.w	r2, r3, #3
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	f000 80a2 	beq.w	800232e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ea:	2300      	movs	r3, #0
 80021ec:	60fb      	str	r3, [r7, #12]
 80021ee:	4b57      	ldr	r3, [pc, #348]	; (800234c <HAL_GPIO_Init+0x2e8>)
 80021f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f2:	4a56      	ldr	r2, [pc, #344]	; (800234c <HAL_GPIO_Init+0x2e8>)
 80021f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021f8:	6453      	str	r3, [r2, #68]	; 0x44
 80021fa:	4b54      	ldr	r3, [pc, #336]	; (800234c <HAL_GPIO_Init+0x2e8>)
 80021fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002206:	4a52      	ldr	r2, [pc, #328]	; (8002350 <HAL_GPIO_Init+0x2ec>)
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	089b      	lsrs	r3, r3, #2
 800220c:	3302      	adds	r3, #2
 800220e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002212:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	f003 0303 	and.w	r3, r3, #3
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	220f      	movs	r2, #15
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	43db      	mvns	r3, r3
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	4013      	ands	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a49      	ldr	r2, [pc, #292]	; (8002354 <HAL_GPIO_Init+0x2f0>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d019      	beq.n	8002266 <HAL_GPIO_Init+0x202>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a48      	ldr	r2, [pc, #288]	; (8002358 <HAL_GPIO_Init+0x2f4>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d013      	beq.n	8002262 <HAL_GPIO_Init+0x1fe>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a47      	ldr	r2, [pc, #284]	; (800235c <HAL_GPIO_Init+0x2f8>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d00d      	beq.n	800225e <HAL_GPIO_Init+0x1fa>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a46      	ldr	r2, [pc, #280]	; (8002360 <HAL_GPIO_Init+0x2fc>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d007      	beq.n	800225a <HAL_GPIO_Init+0x1f6>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a45      	ldr	r2, [pc, #276]	; (8002364 <HAL_GPIO_Init+0x300>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d101      	bne.n	8002256 <HAL_GPIO_Init+0x1f2>
 8002252:	2304      	movs	r3, #4
 8002254:	e008      	b.n	8002268 <HAL_GPIO_Init+0x204>
 8002256:	2307      	movs	r3, #7
 8002258:	e006      	b.n	8002268 <HAL_GPIO_Init+0x204>
 800225a:	2303      	movs	r3, #3
 800225c:	e004      	b.n	8002268 <HAL_GPIO_Init+0x204>
 800225e:	2302      	movs	r3, #2
 8002260:	e002      	b.n	8002268 <HAL_GPIO_Init+0x204>
 8002262:	2301      	movs	r3, #1
 8002264:	e000      	b.n	8002268 <HAL_GPIO_Init+0x204>
 8002266:	2300      	movs	r3, #0
 8002268:	69fa      	ldr	r2, [r7, #28]
 800226a:	f002 0203 	and.w	r2, r2, #3
 800226e:	0092      	lsls	r2, r2, #2
 8002270:	4093      	lsls	r3, r2
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	4313      	orrs	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002278:	4935      	ldr	r1, [pc, #212]	; (8002350 <HAL_GPIO_Init+0x2ec>)
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	089b      	lsrs	r3, r3, #2
 800227e:	3302      	adds	r3, #2
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002286:	4b38      	ldr	r3, [pc, #224]	; (8002368 <HAL_GPIO_Init+0x304>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	43db      	mvns	r3, r3
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	4013      	ands	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d003      	beq.n	80022aa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022aa:	4a2f      	ldr	r2, [pc, #188]	; (8002368 <HAL_GPIO_Init+0x304>)
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022b0:	4b2d      	ldr	r3, [pc, #180]	; (8002368 <HAL_GPIO_Init+0x304>)
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	43db      	mvns	r3, r3
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	4013      	ands	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d003      	beq.n	80022d4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022d4:	4a24      	ldr	r2, [pc, #144]	; (8002368 <HAL_GPIO_Init+0x304>)
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022da:	4b23      	ldr	r3, [pc, #140]	; (8002368 <HAL_GPIO_Init+0x304>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	43db      	mvns	r3, r3
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	4013      	ands	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d003      	beq.n	80022fe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022fe:	4a1a      	ldr	r2, [pc, #104]	; (8002368 <HAL_GPIO_Init+0x304>)
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002304:	4b18      	ldr	r3, [pc, #96]	; (8002368 <HAL_GPIO_Init+0x304>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	43db      	mvns	r3, r3
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	4013      	ands	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d003      	beq.n	8002328 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	4313      	orrs	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002328:	4a0f      	ldr	r2, [pc, #60]	; (8002368 <HAL_GPIO_Init+0x304>)
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	3301      	adds	r3, #1
 8002332:	61fb      	str	r3, [r7, #28]
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	2b0f      	cmp	r3, #15
 8002338:	f67f aea2 	bls.w	8002080 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800233c:	bf00      	nop
 800233e:	bf00      	nop
 8002340:	3724      	adds	r7, #36	; 0x24
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	40023800 	.word	0x40023800
 8002350:	40013800 	.word	0x40013800
 8002354:	40020000 	.word	0x40020000
 8002358:	40020400 	.word	0x40020400
 800235c:	40020800 	.word	0x40020800
 8002360:	40020c00 	.word	0x40020c00
 8002364:	40021000 	.word	0x40021000
 8002368:	40013c00 	.word	0x40013c00

0800236c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d101      	bne.n	800237e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e267      	b.n	800284e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	2b00      	cmp	r3, #0
 8002388:	d075      	beq.n	8002476 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800238a:	4b88      	ldr	r3, [pc, #544]	; (80025ac <HAL_RCC_OscConfig+0x240>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f003 030c 	and.w	r3, r3, #12
 8002392:	2b04      	cmp	r3, #4
 8002394:	d00c      	beq.n	80023b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002396:	4b85      	ldr	r3, [pc, #532]	; (80025ac <HAL_RCC_OscConfig+0x240>)
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800239e:	2b08      	cmp	r3, #8
 80023a0:	d112      	bne.n	80023c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023a2:	4b82      	ldr	r3, [pc, #520]	; (80025ac <HAL_RCC_OscConfig+0x240>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023ae:	d10b      	bne.n	80023c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023b0:	4b7e      	ldr	r3, [pc, #504]	; (80025ac <HAL_RCC_OscConfig+0x240>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d05b      	beq.n	8002474 <HAL_RCC_OscConfig+0x108>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d157      	bne.n	8002474 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e242      	b.n	800284e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023d0:	d106      	bne.n	80023e0 <HAL_RCC_OscConfig+0x74>
 80023d2:	4b76      	ldr	r3, [pc, #472]	; (80025ac <HAL_RCC_OscConfig+0x240>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a75      	ldr	r2, [pc, #468]	; (80025ac <HAL_RCC_OscConfig+0x240>)
 80023d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023dc:	6013      	str	r3, [r2, #0]
 80023de:	e01d      	b.n	800241c <HAL_RCC_OscConfig+0xb0>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023e8:	d10c      	bne.n	8002404 <HAL_RCC_OscConfig+0x98>
 80023ea:	4b70      	ldr	r3, [pc, #448]	; (80025ac <HAL_RCC_OscConfig+0x240>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a6f      	ldr	r2, [pc, #444]	; (80025ac <HAL_RCC_OscConfig+0x240>)
 80023f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023f4:	6013      	str	r3, [r2, #0]
 80023f6:	4b6d      	ldr	r3, [pc, #436]	; (80025ac <HAL_RCC_OscConfig+0x240>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a6c      	ldr	r2, [pc, #432]	; (80025ac <HAL_RCC_OscConfig+0x240>)
 80023fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002400:	6013      	str	r3, [r2, #0]
 8002402:	e00b      	b.n	800241c <HAL_RCC_OscConfig+0xb0>
 8002404:	4b69      	ldr	r3, [pc, #420]	; (80025ac <HAL_RCC_OscConfig+0x240>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a68      	ldr	r2, [pc, #416]	; (80025ac <HAL_RCC_OscConfig+0x240>)
 800240a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800240e:	6013      	str	r3, [r2, #0]
 8002410:	4b66      	ldr	r3, [pc, #408]	; (80025ac <HAL_RCC_OscConfig+0x240>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a65      	ldr	r2, [pc, #404]	; (80025ac <HAL_RCC_OscConfig+0x240>)
 8002416:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800241a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d013      	beq.n	800244c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002424:	f7fe fce8 	bl	8000df8 <HAL_GetTick>
 8002428:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800242c:	f7fe fce4 	bl	8000df8 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b64      	cmp	r3, #100	; 0x64
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e207      	b.n	800284e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800243e:	4b5b      	ldr	r3, [pc, #364]	; (80025ac <HAL_RCC_OscConfig+0x240>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d0f0      	beq.n	800242c <HAL_RCC_OscConfig+0xc0>
 800244a:	e014      	b.n	8002476 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800244c:	f7fe fcd4 	bl	8000df8 <HAL_GetTick>
 8002450:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002452:	e008      	b.n	8002466 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002454:	f7fe fcd0 	bl	8000df8 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b64      	cmp	r3, #100	; 0x64
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e1f3      	b.n	800284e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002466:	4b51      	ldr	r3, [pc, #324]	; (80025ac <HAL_RCC_OscConfig+0x240>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1f0      	bne.n	8002454 <HAL_RCC_OscConfig+0xe8>
 8002472:	e000      	b.n	8002476 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002474:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d063      	beq.n	800254a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002482:	4b4a      	ldr	r3, [pc, #296]	; (80025ac <HAL_RCC_OscConfig+0x240>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f003 030c 	and.w	r3, r3, #12
 800248a:	2b00      	cmp	r3, #0
 800248c:	d00b      	beq.n	80024a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800248e:	4b47      	ldr	r3, [pc, #284]	; (80025ac <HAL_RCC_OscConfig+0x240>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002496:	2b08      	cmp	r3, #8
 8002498:	d11c      	bne.n	80024d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800249a:	4b44      	ldr	r3, [pc, #272]	; (80025ac <HAL_RCC_OscConfig+0x240>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d116      	bne.n	80024d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024a6:	4b41      	ldr	r3, [pc, #260]	; (80025ac <HAL_RCC_OscConfig+0x240>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d005      	beq.n	80024be <HAL_RCC_OscConfig+0x152>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d001      	beq.n	80024be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e1c7      	b.n	800284e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024be:	4b3b      	ldr	r3, [pc, #236]	; (80025ac <HAL_RCC_OscConfig+0x240>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	00db      	lsls	r3, r3, #3
 80024cc:	4937      	ldr	r1, [pc, #220]	; (80025ac <HAL_RCC_OscConfig+0x240>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024d2:	e03a      	b.n	800254a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d020      	beq.n	800251e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024dc:	4b34      	ldr	r3, [pc, #208]	; (80025b0 <HAL_RCC_OscConfig+0x244>)
 80024de:	2201      	movs	r2, #1
 80024e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e2:	f7fe fc89 	bl	8000df8 <HAL_GetTick>
 80024e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024e8:	e008      	b.n	80024fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024ea:	f7fe fc85 	bl	8000df8 <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d901      	bls.n	80024fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e1a8      	b.n	800284e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024fc:	4b2b      	ldr	r3, [pc, #172]	; (80025ac <HAL_RCC_OscConfig+0x240>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0302 	and.w	r3, r3, #2
 8002504:	2b00      	cmp	r3, #0
 8002506:	d0f0      	beq.n	80024ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002508:	4b28      	ldr	r3, [pc, #160]	; (80025ac <HAL_RCC_OscConfig+0x240>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	691b      	ldr	r3, [r3, #16]
 8002514:	00db      	lsls	r3, r3, #3
 8002516:	4925      	ldr	r1, [pc, #148]	; (80025ac <HAL_RCC_OscConfig+0x240>)
 8002518:	4313      	orrs	r3, r2
 800251a:	600b      	str	r3, [r1, #0]
 800251c:	e015      	b.n	800254a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800251e:	4b24      	ldr	r3, [pc, #144]	; (80025b0 <HAL_RCC_OscConfig+0x244>)
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002524:	f7fe fc68 	bl	8000df8 <HAL_GetTick>
 8002528:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800252a:	e008      	b.n	800253e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800252c:	f7fe fc64 	bl	8000df8 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b02      	cmp	r3, #2
 8002538:	d901      	bls.n	800253e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e187      	b.n	800284e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800253e:	4b1b      	ldr	r3, [pc, #108]	; (80025ac <HAL_RCC_OscConfig+0x240>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1f0      	bne.n	800252c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0308 	and.w	r3, r3, #8
 8002552:	2b00      	cmp	r3, #0
 8002554:	d036      	beq.n	80025c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d016      	beq.n	800258c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800255e:	4b15      	ldr	r3, [pc, #84]	; (80025b4 <HAL_RCC_OscConfig+0x248>)
 8002560:	2201      	movs	r2, #1
 8002562:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002564:	f7fe fc48 	bl	8000df8 <HAL_GetTick>
 8002568:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800256a:	e008      	b.n	800257e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800256c:	f7fe fc44 	bl	8000df8 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b02      	cmp	r3, #2
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e167      	b.n	800284e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800257e:	4b0b      	ldr	r3, [pc, #44]	; (80025ac <HAL_RCC_OscConfig+0x240>)
 8002580:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d0f0      	beq.n	800256c <HAL_RCC_OscConfig+0x200>
 800258a:	e01b      	b.n	80025c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800258c:	4b09      	ldr	r3, [pc, #36]	; (80025b4 <HAL_RCC_OscConfig+0x248>)
 800258e:	2200      	movs	r2, #0
 8002590:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002592:	f7fe fc31 	bl	8000df8 <HAL_GetTick>
 8002596:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002598:	e00e      	b.n	80025b8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800259a:	f7fe fc2d 	bl	8000df8 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d907      	bls.n	80025b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e150      	b.n	800284e <HAL_RCC_OscConfig+0x4e2>
 80025ac:	40023800 	.word	0x40023800
 80025b0:	42470000 	.word	0x42470000
 80025b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025b8:	4b88      	ldr	r3, [pc, #544]	; (80027dc <HAL_RCC_OscConfig+0x470>)
 80025ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d1ea      	bne.n	800259a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0304 	and.w	r3, r3, #4
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	f000 8097 	beq.w	8002700 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025d2:	2300      	movs	r3, #0
 80025d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025d6:	4b81      	ldr	r3, [pc, #516]	; (80027dc <HAL_RCC_OscConfig+0x470>)
 80025d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d10f      	bne.n	8002602 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025e2:	2300      	movs	r3, #0
 80025e4:	60bb      	str	r3, [r7, #8]
 80025e6:	4b7d      	ldr	r3, [pc, #500]	; (80027dc <HAL_RCC_OscConfig+0x470>)
 80025e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ea:	4a7c      	ldr	r2, [pc, #496]	; (80027dc <HAL_RCC_OscConfig+0x470>)
 80025ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025f0:	6413      	str	r3, [r2, #64]	; 0x40
 80025f2:	4b7a      	ldr	r3, [pc, #488]	; (80027dc <HAL_RCC_OscConfig+0x470>)
 80025f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025fa:	60bb      	str	r3, [r7, #8]
 80025fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025fe:	2301      	movs	r3, #1
 8002600:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002602:	4b77      	ldr	r3, [pc, #476]	; (80027e0 <HAL_RCC_OscConfig+0x474>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260a:	2b00      	cmp	r3, #0
 800260c:	d118      	bne.n	8002640 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800260e:	4b74      	ldr	r3, [pc, #464]	; (80027e0 <HAL_RCC_OscConfig+0x474>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a73      	ldr	r2, [pc, #460]	; (80027e0 <HAL_RCC_OscConfig+0x474>)
 8002614:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002618:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800261a:	f7fe fbed 	bl	8000df8 <HAL_GetTick>
 800261e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002620:	e008      	b.n	8002634 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002622:	f7fe fbe9 	bl	8000df8 <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	2b02      	cmp	r3, #2
 800262e:	d901      	bls.n	8002634 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e10c      	b.n	800284e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002634:	4b6a      	ldr	r3, [pc, #424]	; (80027e0 <HAL_RCC_OscConfig+0x474>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800263c:	2b00      	cmp	r3, #0
 800263e:	d0f0      	beq.n	8002622 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	2b01      	cmp	r3, #1
 8002646:	d106      	bne.n	8002656 <HAL_RCC_OscConfig+0x2ea>
 8002648:	4b64      	ldr	r3, [pc, #400]	; (80027dc <HAL_RCC_OscConfig+0x470>)
 800264a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264c:	4a63      	ldr	r2, [pc, #396]	; (80027dc <HAL_RCC_OscConfig+0x470>)
 800264e:	f043 0301 	orr.w	r3, r3, #1
 8002652:	6713      	str	r3, [r2, #112]	; 0x70
 8002654:	e01c      	b.n	8002690 <HAL_RCC_OscConfig+0x324>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	2b05      	cmp	r3, #5
 800265c:	d10c      	bne.n	8002678 <HAL_RCC_OscConfig+0x30c>
 800265e:	4b5f      	ldr	r3, [pc, #380]	; (80027dc <HAL_RCC_OscConfig+0x470>)
 8002660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002662:	4a5e      	ldr	r2, [pc, #376]	; (80027dc <HAL_RCC_OscConfig+0x470>)
 8002664:	f043 0304 	orr.w	r3, r3, #4
 8002668:	6713      	str	r3, [r2, #112]	; 0x70
 800266a:	4b5c      	ldr	r3, [pc, #368]	; (80027dc <HAL_RCC_OscConfig+0x470>)
 800266c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800266e:	4a5b      	ldr	r2, [pc, #364]	; (80027dc <HAL_RCC_OscConfig+0x470>)
 8002670:	f043 0301 	orr.w	r3, r3, #1
 8002674:	6713      	str	r3, [r2, #112]	; 0x70
 8002676:	e00b      	b.n	8002690 <HAL_RCC_OscConfig+0x324>
 8002678:	4b58      	ldr	r3, [pc, #352]	; (80027dc <HAL_RCC_OscConfig+0x470>)
 800267a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800267c:	4a57      	ldr	r2, [pc, #348]	; (80027dc <HAL_RCC_OscConfig+0x470>)
 800267e:	f023 0301 	bic.w	r3, r3, #1
 8002682:	6713      	str	r3, [r2, #112]	; 0x70
 8002684:	4b55      	ldr	r3, [pc, #340]	; (80027dc <HAL_RCC_OscConfig+0x470>)
 8002686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002688:	4a54      	ldr	r2, [pc, #336]	; (80027dc <HAL_RCC_OscConfig+0x470>)
 800268a:	f023 0304 	bic.w	r3, r3, #4
 800268e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d015      	beq.n	80026c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002698:	f7fe fbae 	bl	8000df8 <HAL_GetTick>
 800269c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800269e:	e00a      	b.n	80026b6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026a0:	f7fe fbaa 	bl	8000df8 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e0cb      	b.n	800284e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026b6:	4b49      	ldr	r3, [pc, #292]	; (80027dc <HAL_RCC_OscConfig+0x470>)
 80026b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d0ee      	beq.n	80026a0 <HAL_RCC_OscConfig+0x334>
 80026c2:	e014      	b.n	80026ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026c4:	f7fe fb98 	bl	8000df8 <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026ca:	e00a      	b.n	80026e2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026cc:	f7fe fb94 	bl	8000df8 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026da:	4293      	cmp	r3, r2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e0b5      	b.n	800284e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026e2:	4b3e      	ldr	r3, [pc, #248]	; (80027dc <HAL_RCC_OscConfig+0x470>)
 80026e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1ee      	bne.n	80026cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026ee:	7dfb      	ldrb	r3, [r7, #23]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d105      	bne.n	8002700 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026f4:	4b39      	ldr	r3, [pc, #228]	; (80027dc <HAL_RCC_OscConfig+0x470>)
 80026f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f8:	4a38      	ldr	r2, [pc, #224]	; (80027dc <HAL_RCC_OscConfig+0x470>)
 80026fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	2b00      	cmp	r3, #0
 8002706:	f000 80a1 	beq.w	800284c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800270a:	4b34      	ldr	r3, [pc, #208]	; (80027dc <HAL_RCC_OscConfig+0x470>)
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f003 030c 	and.w	r3, r3, #12
 8002712:	2b08      	cmp	r3, #8
 8002714:	d05c      	beq.n	80027d0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	2b02      	cmp	r3, #2
 800271c:	d141      	bne.n	80027a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800271e:	4b31      	ldr	r3, [pc, #196]	; (80027e4 <HAL_RCC_OscConfig+0x478>)
 8002720:	2200      	movs	r2, #0
 8002722:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002724:	f7fe fb68 	bl	8000df8 <HAL_GetTick>
 8002728:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800272a:	e008      	b.n	800273e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800272c:	f7fe fb64 	bl	8000df8 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b02      	cmp	r3, #2
 8002738:	d901      	bls.n	800273e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e087      	b.n	800284e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800273e:	4b27      	ldr	r3, [pc, #156]	; (80027dc <HAL_RCC_OscConfig+0x470>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d1f0      	bne.n	800272c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	69da      	ldr	r2, [r3, #28]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a1b      	ldr	r3, [r3, #32]
 8002752:	431a      	orrs	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002758:	019b      	lsls	r3, r3, #6
 800275a:	431a      	orrs	r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002760:	085b      	lsrs	r3, r3, #1
 8002762:	3b01      	subs	r3, #1
 8002764:	041b      	lsls	r3, r3, #16
 8002766:	431a      	orrs	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800276c:	061b      	lsls	r3, r3, #24
 800276e:	491b      	ldr	r1, [pc, #108]	; (80027dc <HAL_RCC_OscConfig+0x470>)
 8002770:	4313      	orrs	r3, r2
 8002772:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002774:	4b1b      	ldr	r3, [pc, #108]	; (80027e4 <HAL_RCC_OscConfig+0x478>)
 8002776:	2201      	movs	r2, #1
 8002778:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800277a:	f7fe fb3d 	bl	8000df8 <HAL_GetTick>
 800277e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002780:	e008      	b.n	8002794 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002782:	f7fe fb39 	bl	8000df8 <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	2b02      	cmp	r3, #2
 800278e:	d901      	bls.n	8002794 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e05c      	b.n	800284e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002794:	4b11      	ldr	r3, [pc, #68]	; (80027dc <HAL_RCC_OscConfig+0x470>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d0f0      	beq.n	8002782 <HAL_RCC_OscConfig+0x416>
 80027a0:	e054      	b.n	800284c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027a2:	4b10      	ldr	r3, [pc, #64]	; (80027e4 <HAL_RCC_OscConfig+0x478>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a8:	f7fe fb26 	bl	8000df8 <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027b0:	f7fe fb22 	bl	8000df8 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e045      	b.n	800284e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027c2:	4b06      	ldr	r3, [pc, #24]	; (80027dc <HAL_RCC_OscConfig+0x470>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1f0      	bne.n	80027b0 <HAL_RCC_OscConfig+0x444>
 80027ce:	e03d      	b.n	800284c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	699b      	ldr	r3, [r3, #24]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d107      	bne.n	80027e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e038      	b.n	800284e <HAL_RCC_OscConfig+0x4e2>
 80027dc:	40023800 	.word	0x40023800
 80027e0:	40007000 	.word	0x40007000
 80027e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027e8:	4b1b      	ldr	r3, [pc, #108]	; (8002858 <HAL_RCC_OscConfig+0x4ec>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d028      	beq.n	8002848 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002800:	429a      	cmp	r2, r3
 8002802:	d121      	bne.n	8002848 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800280e:	429a      	cmp	r2, r3
 8002810:	d11a      	bne.n	8002848 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002818:	4013      	ands	r3, r2
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800281e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002820:	4293      	cmp	r3, r2
 8002822:	d111      	bne.n	8002848 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800282e:	085b      	lsrs	r3, r3, #1
 8002830:	3b01      	subs	r3, #1
 8002832:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002834:	429a      	cmp	r2, r3
 8002836:	d107      	bne.n	8002848 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002842:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002844:	429a      	cmp	r2, r3
 8002846:	d001      	beq.n	800284c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e000      	b.n	800284e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3718      	adds	r7, #24
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	40023800 	.word	0x40023800

0800285c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d101      	bne.n	8002870 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e0cc      	b.n	8002a0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002870:	4b68      	ldr	r3, [pc, #416]	; (8002a14 <HAL_RCC_ClockConfig+0x1b8>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0307 	and.w	r3, r3, #7
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	429a      	cmp	r2, r3
 800287c:	d90c      	bls.n	8002898 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800287e:	4b65      	ldr	r3, [pc, #404]	; (8002a14 <HAL_RCC_ClockConfig+0x1b8>)
 8002880:	683a      	ldr	r2, [r7, #0]
 8002882:	b2d2      	uxtb	r2, r2
 8002884:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002886:	4b63      	ldr	r3, [pc, #396]	; (8002a14 <HAL_RCC_ClockConfig+0x1b8>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0307 	and.w	r3, r3, #7
 800288e:	683a      	ldr	r2, [r7, #0]
 8002890:	429a      	cmp	r2, r3
 8002892:	d001      	beq.n	8002898 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e0b8      	b.n	8002a0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0302 	and.w	r3, r3, #2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d020      	beq.n	80028e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0304 	and.w	r3, r3, #4
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d005      	beq.n	80028bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028b0:	4b59      	ldr	r3, [pc, #356]	; (8002a18 <HAL_RCC_ClockConfig+0x1bc>)
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	4a58      	ldr	r2, [pc, #352]	; (8002a18 <HAL_RCC_ClockConfig+0x1bc>)
 80028b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0308 	and.w	r3, r3, #8
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d005      	beq.n	80028d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028c8:	4b53      	ldr	r3, [pc, #332]	; (8002a18 <HAL_RCC_ClockConfig+0x1bc>)
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	4a52      	ldr	r2, [pc, #328]	; (8002a18 <HAL_RCC_ClockConfig+0x1bc>)
 80028ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80028d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028d4:	4b50      	ldr	r3, [pc, #320]	; (8002a18 <HAL_RCC_ClockConfig+0x1bc>)
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	494d      	ldr	r1, [pc, #308]	; (8002a18 <HAL_RCC_ClockConfig+0x1bc>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d044      	beq.n	800297c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d107      	bne.n	800290a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028fa:	4b47      	ldr	r3, [pc, #284]	; (8002a18 <HAL_RCC_ClockConfig+0x1bc>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d119      	bne.n	800293a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e07f      	b.n	8002a0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	2b02      	cmp	r3, #2
 8002910:	d003      	beq.n	800291a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002916:	2b03      	cmp	r3, #3
 8002918:	d107      	bne.n	800292a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800291a:	4b3f      	ldr	r3, [pc, #252]	; (8002a18 <HAL_RCC_ClockConfig+0x1bc>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d109      	bne.n	800293a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e06f      	b.n	8002a0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800292a:	4b3b      	ldr	r3, [pc, #236]	; (8002a18 <HAL_RCC_ClockConfig+0x1bc>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e067      	b.n	8002a0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800293a:	4b37      	ldr	r3, [pc, #220]	; (8002a18 <HAL_RCC_ClockConfig+0x1bc>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f023 0203 	bic.w	r2, r3, #3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	4934      	ldr	r1, [pc, #208]	; (8002a18 <HAL_RCC_ClockConfig+0x1bc>)
 8002948:	4313      	orrs	r3, r2
 800294a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800294c:	f7fe fa54 	bl	8000df8 <HAL_GetTick>
 8002950:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002952:	e00a      	b.n	800296a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002954:	f7fe fa50 	bl	8000df8 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002962:	4293      	cmp	r3, r2
 8002964:	d901      	bls.n	800296a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e04f      	b.n	8002a0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800296a:	4b2b      	ldr	r3, [pc, #172]	; (8002a18 <HAL_RCC_ClockConfig+0x1bc>)
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 020c 	and.w	r2, r3, #12
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	429a      	cmp	r2, r3
 800297a:	d1eb      	bne.n	8002954 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800297c:	4b25      	ldr	r3, [pc, #148]	; (8002a14 <HAL_RCC_ClockConfig+0x1b8>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0307 	and.w	r3, r3, #7
 8002984:	683a      	ldr	r2, [r7, #0]
 8002986:	429a      	cmp	r2, r3
 8002988:	d20c      	bcs.n	80029a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800298a:	4b22      	ldr	r3, [pc, #136]	; (8002a14 <HAL_RCC_ClockConfig+0x1b8>)
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	b2d2      	uxtb	r2, r2
 8002990:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002992:	4b20      	ldr	r3, [pc, #128]	; (8002a14 <HAL_RCC_ClockConfig+0x1b8>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0307 	and.w	r3, r3, #7
 800299a:	683a      	ldr	r2, [r7, #0]
 800299c:	429a      	cmp	r2, r3
 800299e:	d001      	beq.n	80029a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e032      	b.n	8002a0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0304 	and.w	r3, r3, #4
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d008      	beq.n	80029c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029b0:	4b19      	ldr	r3, [pc, #100]	; (8002a18 <HAL_RCC_ClockConfig+0x1bc>)
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	4916      	ldr	r1, [pc, #88]	; (8002a18 <HAL_RCC_ClockConfig+0x1bc>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0308 	and.w	r3, r3, #8
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d009      	beq.n	80029e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029ce:	4b12      	ldr	r3, [pc, #72]	; (8002a18 <HAL_RCC_ClockConfig+0x1bc>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	490e      	ldr	r1, [pc, #56]	; (8002a18 <HAL_RCC_ClockConfig+0x1bc>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029e2:	f000 f821 	bl	8002a28 <HAL_RCC_GetSysClockFreq>
 80029e6:	4602      	mov	r2, r0
 80029e8:	4b0b      	ldr	r3, [pc, #44]	; (8002a18 <HAL_RCC_ClockConfig+0x1bc>)
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	091b      	lsrs	r3, r3, #4
 80029ee:	f003 030f 	and.w	r3, r3, #15
 80029f2:	490a      	ldr	r1, [pc, #40]	; (8002a1c <HAL_RCC_ClockConfig+0x1c0>)
 80029f4:	5ccb      	ldrb	r3, [r1, r3]
 80029f6:	fa22 f303 	lsr.w	r3, r2, r3
 80029fa:	4a09      	ldr	r2, [pc, #36]	; (8002a20 <HAL_RCC_ClockConfig+0x1c4>)
 80029fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80029fe:	4b09      	ldr	r3, [pc, #36]	; (8002a24 <HAL_RCC_ClockConfig+0x1c8>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7fe f9b4 	bl	8000d70 <HAL_InitTick>

  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3710      	adds	r7, #16
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	40023c00 	.word	0x40023c00
 8002a18:	40023800 	.word	0x40023800
 8002a1c:	08004fe4 	.word	0x08004fe4
 8002a20:	20000000 	.word	0x20000000
 8002a24:	20000004 	.word	0x20000004

08002a28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a2c:	b090      	sub	sp, #64	; 0x40
 8002a2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a30:	2300      	movs	r3, #0
 8002a32:	637b      	str	r3, [r7, #52]	; 0x34
 8002a34:	2300      	movs	r3, #0
 8002a36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a38:	2300      	movs	r3, #0
 8002a3a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a40:	4b59      	ldr	r3, [pc, #356]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f003 030c 	and.w	r3, r3, #12
 8002a48:	2b08      	cmp	r3, #8
 8002a4a:	d00d      	beq.n	8002a68 <HAL_RCC_GetSysClockFreq+0x40>
 8002a4c:	2b08      	cmp	r3, #8
 8002a4e:	f200 80a1 	bhi.w	8002b94 <HAL_RCC_GetSysClockFreq+0x16c>
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d002      	beq.n	8002a5c <HAL_RCC_GetSysClockFreq+0x34>
 8002a56:	2b04      	cmp	r3, #4
 8002a58:	d003      	beq.n	8002a62 <HAL_RCC_GetSysClockFreq+0x3a>
 8002a5a:	e09b      	b.n	8002b94 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a5c:	4b53      	ldr	r3, [pc, #332]	; (8002bac <HAL_RCC_GetSysClockFreq+0x184>)
 8002a5e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002a60:	e09b      	b.n	8002b9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a62:	4b53      	ldr	r3, [pc, #332]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a64:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a66:	e098      	b.n	8002b9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a68:	4b4f      	ldr	r3, [pc, #316]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a70:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a72:	4b4d      	ldr	r3, [pc, #308]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d028      	beq.n	8002ad0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a7e:	4b4a      	ldr	r3, [pc, #296]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	099b      	lsrs	r3, r3, #6
 8002a84:	2200      	movs	r2, #0
 8002a86:	623b      	str	r3, [r7, #32]
 8002a88:	627a      	str	r2, [r7, #36]	; 0x24
 8002a8a:	6a3b      	ldr	r3, [r7, #32]
 8002a8c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002a90:	2100      	movs	r1, #0
 8002a92:	4b47      	ldr	r3, [pc, #284]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a94:	fb03 f201 	mul.w	r2, r3, r1
 8002a98:	2300      	movs	r3, #0
 8002a9a:	fb00 f303 	mul.w	r3, r0, r3
 8002a9e:	4413      	add	r3, r2
 8002aa0:	4a43      	ldr	r2, [pc, #268]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002aa2:	fba0 1202 	umull	r1, r2, r0, r2
 8002aa6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002aa8:	460a      	mov	r2, r1
 8002aaa:	62ba      	str	r2, [r7, #40]	; 0x28
 8002aac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002aae:	4413      	add	r3, r2
 8002ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	61bb      	str	r3, [r7, #24]
 8002ab8:	61fa      	str	r2, [r7, #28]
 8002aba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002abe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002ac2:	f7fd fbdd 	bl	8000280 <__aeabi_uldivmod>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	460b      	mov	r3, r1
 8002aca:	4613      	mov	r3, r2
 8002acc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ace:	e053      	b.n	8002b78 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ad0:	4b35      	ldr	r3, [pc, #212]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	099b      	lsrs	r3, r3, #6
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	613b      	str	r3, [r7, #16]
 8002ada:	617a      	str	r2, [r7, #20]
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002ae2:	f04f 0b00 	mov.w	fp, #0
 8002ae6:	4652      	mov	r2, sl
 8002ae8:	465b      	mov	r3, fp
 8002aea:	f04f 0000 	mov.w	r0, #0
 8002aee:	f04f 0100 	mov.w	r1, #0
 8002af2:	0159      	lsls	r1, r3, #5
 8002af4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002af8:	0150      	lsls	r0, r2, #5
 8002afa:	4602      	mov	r2, r0
 8002afc:	460b      	mov	r3, r1
 8002afe:	ebb2 080a 	subs.w	r8, r2, sl
 8002b02:	eb63 090b 	sbc.w	r9, r3, fp
 8002b06:	f04f 0200 	mov.w	r2, #0
 8002b0a:	f04f 0300 	mov.w	r3, #0
 8002b0e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002b12:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002b16:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002b1a:	ebb2 0408 	subs.w	r4, r2, r8
 8002b1e:	eb63 0509 	sbc.w	r5, r3, r9
 8002b22:	f04f 0200 	mov.w	r2, #0
 8002b26:	f04f 0300 	mov.w	r3, #0
 8002b2a:	00eb      	lsls	r3, r5, #3
 8002b2c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b30:	00e2      	lsls	r2, r4, #3
 8002b32:	4614      	mov	r4, r2
 8002b34:	461d      	mov	r5, r3
 8002b36:	eb14 030a 	adds.w	r3, r4, sl
 8002b3a:	603b      	str	r3, [r7, #0]
 8002b3c:	eb45 030b 	adc.w	r3, r5, fp
 8002b40:	607b      	str	r3, [r7, #4]
 8002b42:	f04f 0200 	mov.w	r2, #0
 8002b46:	f04f 0300 	mov.w	r3, #0
 8002b4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b4e:	4629      	mov	r1, r5
 8002b50:	028b      	lsls	r3, r1, #10
 8002b52:	4621      	mov	r1, r4
 8002b54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b58:	4621      	mov	r1, r4
 8002b5a:	028a      	lsls	r2, r1, #10
 8002b5c:	4610      	mov	r0, r2
 8002b5e:	4619      	mov	r1, r3
 8002b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b62:	2200      	movs	r2, #0
 8002b64:	60bb      	str	r3, [r7, #8]
 8002b66:	60fa      	str	r2, [r7, #12]
 8002b68:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b6c:	f7fd fb88 	bl	8000280 <__aeabi_uldivmod>
 8002b70:	4602      	mov	r2, r0
 8002b72:	460b      	mov	r3, r1
 8002b74:	4613      	mov	r3, r2
 8002b76:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b78:	4b0b      	ldr	r3, [pc, #44]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	0c1b      	lsrs	r3, r3, #16
 8002b7e:	f003 0303 	and.w	r3, r3, #3
 8002b82:	3301      	adds	r3, #1
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002b88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b90:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b92:	e002      	b.n	8002b9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b94:	4b05      	ldr	r3, [pc, #20]	; (8002bac <HAL_RCC_GetSysClockFreq+0x184>)
 8002b96:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3740      	adds	r7, #64	; 0x40
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ba6:	bf00      	nop
 8002ba8:	40023800 	.word	0x40023800
 8002bac:	00f42400 	.word	0x00f42400
 8002bb0:	017d7840 	.word	0x017d7840

08002bb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bb8:	4b03      	ldr	r3, [pc, #12]	; (8002bc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bba:	681b      	ldr	r3, [r3, #0]
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	20000000 	.word	0x20000000

08002bcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002bd0:	f7ff fff0 	bl	8002bb4 <HAL_RCC_GetHCLKFreq>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	4b05      	ldr	r3, [pc, #20]	; (8002bec <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	0a9b      	lsrs	r3, r3, #10
 8002bdc:	f003 0307 	and.w	r3, r3, #7
 8002be0:	4903      	ldr	r1, [pc, #12]	; (8002bf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002be2:	5ccb      	ldrb	r3, [r1, r3]
 8002be4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	40023800 	.word	0x40023800
 8002bf0:	08004ff4 	.word	0x08004ff4

08002bf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002bf8:	f7ff ffdc 	bl	8002bb4 <HAL_RCC_GetHCLKFreq>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	4b05      	ldr	r3, [pc, #20]	; (8002c14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	0b5b      	lsrs	r3, r3, #13
 8002c04:	f003 0307 	and.w	r3, r3, #7
 8002c08:	4903      	ldr	r1, [pc, #12]	; (8002c18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c0a:	5ccb      	ldrb	r3, [r1, r3]
 8002c0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	40023800 	.word	0x40023800
 8002c18:	08004ff4 	.word	0x08004ff4

08002c1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e03f      	b.n	8002cae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d106      	bne.n	8002c48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f7fd fec8 	bl	80009d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2224      	movs	r2, #36	; 0x24
 8002c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68da      	ldr	r2, [r3, #12]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f000 ff69 	bl	8003b38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	691a      	ldr	r2, [r3, #16]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	695a      	ldr	r2, [r3, #20]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68da      	ldr	r2, [r3, #12]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2220      	movs	r2, #32
 8002ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2220      	movs	r2, #32
 8002ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b08a      	sub	sp, #40	; 0x28
 8002cba:	af02      	add	r7, sp, #8
 8002cbc:	60f8      	str	r0, [r7, #12]
 8002cbe:	60b9      	str	r1, [r7, #8]
 8002cc0:	603b      	str	r3, [r7, #0]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b20      	cmp	r3, #32
 8002cd4:	d17c      	bne.n	8002dd0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d002      	beq.n	8002ce2 <HAL_UART_Transmit+0x2c>
 8002cdc:	88fb      	ldrh	r3, [r7, #6]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e075      	b.n	8002dd2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d101      	bne.n	8002cf4 <HAL_UART_Transmit+0x3e>
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	e06e      	b.n	8002dd2 <HAL_UART_Transmit+0x11c>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2221      	movs	r2, #33	; 0x21
 8002d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d0a:	f7fe f875 	bl	8000df8 <HAL_GetTick>
 8002d0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	88fa      	ldrh	r2, [r7, #6]
 8002d14:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	88fa      	ldrh	r2, [r7, #6]
 8002d1a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d24:	d108      	bne.n	8002d38 <HAL_UART_Transmit+0x82>
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d104      	bne.n	8002d38 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	61bb      	str	r3, [r7, #24]
 8002d36:	e003      	b.n	8002d40 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002d48:	e02a      	b.n	8002da0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	9300      	str	r3, [sp, #0]
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	2200      	movs	r2, #0
 8002d52:	2180      	movs	r1, #128	; 0x80
 8002d54:	68f8      	ldr	r0, [r7, #12]
 8002d56:	f000 fc21 	bl	800359c <UART_WaitOnFlagUntilTimeout>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d001      	beq.n	8002d64 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e036      	b.n	8002dd2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d10b      	bne.n	8002d82 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	881b      	ldrh	r3, [r3, #0]
 8002d6e:	461a      	mov	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d78:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	3302      	adds	r3, #2
 8002d7e:	61bb      	str	r3, [r7, #24]
 8002d80:	e007      	b.n	8002d92 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	781a      	ldrb	r2, [r3, #0]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	3301      	adds	r3, #1
 8002d90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	b29a      	uxth	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1cf      	bne.n	8002d4a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	9300      	str	r3, [sp, #0]
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	2200      	movs	r2, #0
 8002db2:	2140      	movs	r1, #64	; 0x40
 8002db4:	68f8      	ldr	r0, [r7, #12]
 8002db6:	f000 fbf1 	bl	800359c <UART_WaitOnFlagUntilTimeout>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d001      	beq.n	8002dc4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e006      	b.n	8002dd2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2220      	movs	r2, #32
 8002dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	e000      	b.n	8002dd2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002dd0:	2302      	movs	r3, #2
  }
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3720      	adds	r7, #32
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b084      	sub	sp, #16
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	60f8      	str	r0, [r7, #12]
 8002de2:	60b9      	str	r1, [r7, #8]
 8002de4:	4613      	mov	r3, r2
 8002de6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	2b20      	cmp	r3, #32
 8002df2:	d11d      	bne.n	8002e30 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d002      	beq.n	8002e00 <HAL_UART_Receive_DMA+0x26>
 8002dfa:	88fb      	ldrh	r3, [r7, #6]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d101      	bne.n	8002e04 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e016      	b.n	8002e32 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d101      	bne.n	8002e12 <HAL_UART_Receive_DMA+0x38>
 8002e0e:	2302      	movs	r3, #2
 8002e10:	e00f      	b.n	8002e32 <HAL_UART_Receive_DMA+0x58>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2201      	movs	r2, #1
 8002e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002e20:	88fb      	ldrh	r3, [r7, #6]
 8002e22:	461a      	mov	r2, r3
 8002e24:	68b9      	ldr	r1, [r7, #8]
 8002e26:	68f8      	ldr	r0, [r7, #12]
 8002e28:	f000 fc26 	bl	8003678 <UART_Start_Receive_DMA>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	e000      	b.n	8002e32 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002e30:	2302      	movs	r3, #2
  }
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3710      	adds	r7, #16
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
	...

08002e3c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b0ba      	sub	sp, #232	; 0xe8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002e62:	2300      	movs	r3, #0
 8002e64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002e6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e72:	f003 030f 	and.w	r3, r3, #15
 8002e76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002e7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d10f      	bne.n	8002ea2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e86:	f003 0320 	and.w	r3, r3, #32
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d009      	beq.n	8002ea2 <HAL_UART_IRQHandler+0x66>
 8002e8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e92:	f003 0320 	and.w	r3, r3, #32
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d003      	beq.n	8002ea2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 fd91 	bl	80039c2 <UART_Receive_IT>
      return;
 8002ea0:	e256      	b.n	8003350 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002ea2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	f000 80de 	beq.w	8003068 <HAL_UART_IRQHandler+0x22c>
 8002eac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002eb0:	f003 0301 	and.w	r3, r3, #1
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d106      	bne.n	8002ec6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002eb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ebc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	f000 80d1 	beq.w	8003068 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00b      	beq.n	8002eea <HAL_UART_IRQHandler+0xae>
 8002ed2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d005      	beq.n	8002eea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee2:	f043 0201 	orr.w	r2, r3, #1
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002eea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eee:	f003 0304 	and.w	r3, r3, #4
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d00b      	beq.n	8002f0e <HAL_UART_IRQHandler+0xd2>
 8002ef6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d005      	beq.n	8002f0e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	f043 0202 	orr.w	r2, r3, #2
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00b      	beq.n	8002f32 <HAL_UART_IRQHandler+0xf6>
 8002f1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d005      	beq.n	8002f32 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2a:	f043 0204 	orr.w	r2, r3, #4
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002f32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f36:	f003 0308 	and.w	r3, r3, #8
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d011      	beq.n	8002f62 <HAL_UART_IRQHandler+0x126>
 8002f3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f42:	f003 0320 	and.w	r3, r3, #32
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d105      	bne.n	8002f56 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002f4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d005      	beq.n	8002f62 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5a:	f043 0208 	orr.w	r2, r3, #8
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	f000 81ed 	beq.w	8003346 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f70:	f003 0320 	and.w	r3, r3, #32
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d008      	beq.n	8002f8a <HAL_UART_IRQHandler+0x14e>
 8002f78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f7c:	f003 0320 	and.w	r3, r3, #32
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d002      	beq.n	8002f8a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f000 fd1c 	bl	80039c2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	695b      	ldr	r3, [r3, #20]
 8002f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f94:	2b40      	cmp	r3, #64	; 0x40
 8002f96:	bf0c      	ite	eq
 8002f98:	2301      	moveq	r3, #1
 8002f9a:	2300      	movne	r3, #0
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa6:	f003 0308 	and.w	r3, r3, #8
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d103      	bne.n	8002fb6 <HAL_UART_IRQHandler+0x17a>
 8002fae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d04f      	beq.n	8003056 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 fc24 	bl	8003804 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fc6:	2b40      	cmp	r3, #64	; 0x40
 8002fc8:	d141      	bne.n	800304e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	3314      	adds	r3, #20
 8002fd0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fd4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002fd8:	e853 3f00 	ldrex	r3, [r3]
 8002fdc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002fe0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002fe4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fe8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	3314      	adds	r3, #20
 8002ff2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002ff6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002ffa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ffe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003002:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003006:	e841 2300 	strex	r3, r2, [r1]
 800300a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800300e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d1d9      	bne.n	8002fca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800301a:	2b00      	cmp	r3, #0
 800301c:	d013      	beq.n	8003046 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003022:	4a7d      	ldr	r2, [pc, #500]	; (8003218 <HAL_UART_IRQHandler+0x3dc>)
 8003024:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800302a:	4618      	mov	r0, r3
 800302c:	f7fe fd8e 	bl	8001b4c <HAL_DMA_Abort_IT>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d016      	beq.n	8003064 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800303a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003040:	4610      	mov	r0, r2
 8003042:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003044:	e00e      	b.n	8003064 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 f99a 	bl	8003380 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800304c:	e00a      	b.n	8003064 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 f996 	bl	8003380 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003054:	e006      	b.n	8003064 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 f992 	bl	8003380 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003062:	e170      	b.n	8003346 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003064:	bf00      	nop
    return;
 8003066:	e16e      	b.n	8003346 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306c:	2b01      	cmp	r3, #1
 800306e:	f040 814a 	bne.w	8003306 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003076:	f003 0310 	and.w	r3, r3, #16
 800307a:	2b00      	cmp	r3, #0
 800307c:	f000 8143 	beq.w	8003306 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003080:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003084:	f003 0310 	and.w	r3, r3, #16
 8003088:	2b00      	cmp	r3, #0
 800308a:	f000 813c 	beq.w	8003306 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800308e:	2300      	movs	r3, #0
 8003090:	60bb      	str	r3, [r7, #8]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	60bb      	str	r3, [r7, #8]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	60bb      	str	r3, [r7, #8]
 80030a2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ae:	2b40      	cmp	r3, #64	; 0x40
 80030b0:	f040 80b4 	bne.w	800321c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80030c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f000 8140 	beq.w	800334a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80030ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80030d2:	429a      	cmp	r2, r3
 80030d4:	f080 8139 	bcs.w	800334a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80030de:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e4:	69db      	ldr	r3, [r3, #28]
 80030e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030ea:	f000 8088 	beq.w	80031fe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	330c      	adds	r3, #12
 80030f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80030fc:	e853 3f00 	ldrex	r3, [r3]
 8003100:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003104:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003108:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800310c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	330c      	adds	r3, #12
 8003116:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800311a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800311e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003122:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003126:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800312a:	e841 2300 	strex	r3, r2, [r1]
 800312e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003132:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1d9      	bne.n	80030ee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	3314      	adds	r3, #20
 8003140:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003142:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003144:	e853 3f00 	ldrex	r3, [r3]
 8003148:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800314a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800314c:	f023 0301 	bic.w	r3, r3, #1
 8003150:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	3314      	adds	r3, #20
 800315a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800315e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003162:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003164:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003166:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800316a:	e841 2300 	strex	r3, r2, [r1]
 800316e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003170:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1e1      	bne.n	800313a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	3314      	adds	r3, #20
 800317c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800317e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003180:	e853 3f00 	ldrex	r3, [r3]
 8003184:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003186:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003188:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800318c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	3314      	adds	r3, #20
 8003196:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800319a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800319c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800319e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80031a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80031a2:	e841 2300 	strex	r3, r2, [r1]
 80031a6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80031a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1e3      	bne.n	8003176 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2220      	movs	r2, #32
 80031b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	330c      	adds	r3, #12
 80031c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031c6:	e853 3f00 	ldrex	r3, [r3]
 80031ca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80031cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031ce:	f023 0310 	bic.w	r3, r3, #16
 80031d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	330c      	adds	r3, #12
 80031dc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80031e0:	65ba      	str	r2, [r7, #88]	; 0x58
 80031e2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80031e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80031e8:	e841 2300 	strex	r3, r2, [r1]
 80031ec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80031ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d1e3      	bne.n	80031bc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7fe fc37 	bl	8001a6c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003206:	b29b      	uxth	r3, r3
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	b29b      	uxth	r3, r3
 800320c:	4619      	mov	r1, r3
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 f8c0 	bl	8003394 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003214:	e099      	b.n	800334a <HAL_UART_IRQHandler+0x50e>
 8003216:	bf00      	nop
 8003218:	080038cb 	.word	0x080038cb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003224:	b29b      	uxth	r3, r3
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003230:	b29b      	uxth	r3, r3
 8003232:	2b00      	cmp	r3, #0
 8003234:	f000 808b 	beq.w	800334e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003238:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800323c:	2b00      	cmp	r3, #0
 800323e:	f000 8086 	beq.w	800334e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	330c      	adds	r3, #12
 8003248:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800324a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800324c:	e853 3f00 	ldrex	r3, [r3]
 8003250:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003254:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003258:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	330c      	adds	r3, #12
 8003262:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003266:	647a      	str	r2, [r7, #68]	; 0x44
 8003268:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800326a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800326c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800326e:	e841 2300 	strex	r3, r2, [r1]
 8003272:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003274:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1e3      	bne.n	8003242 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	3314      	adds	r3, #20
 8003280:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003284:	e853 3f00 	ldrex	r3, [r3]
 8003288:	623b      	str	r3, [r7, #32]
   return(result);
 800328a:	6a3b      	ldr	r3, [r7, #32]
 800328c:	f023 0301 	bic.w	r3, r3, #1
 8003290:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	3314      	adds	r3, #20
 800329a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800329e:	633a      	str	r2, [r7, #48]	; 0x30
 80032a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80032a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032a6:	e841 2300 	strex	r3, r2, [r1]
 80032aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80032ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1e3      	bne.n	800327a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2220      	movs	r2, #32
 80032b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	330c      	adds	r3, #12
 80032c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	e853 3f00 	ldrex	r3, [r3]
 80032ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f023 0310 	bic.w	r3, r3, #16
 80032d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	330c      	adds	r3, #12
 80032e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80032e4:	61fa      	str	r2, [r7, #28]
 80032e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032e8:	69b9      	ldr	r1, [r7, #24]
 80032ea:	69fa      	ldr	r2, [r7, #28]
 80032ec:	e841 2300 	strex	r3, r2, [r1]
 80032f0:	617b      	str	r3, [r7, #20]
   return(result);
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d1e3      	bne.n	80032c0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80032f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80032fc:	4619      	mov	r1, r3
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 f848 	bl	8003394 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003304:	e023      	b.n	800334e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800330a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800330e:	2b00      	cmp	r3, #0
 8003310:	d009      	beq.n	8003326 <HAL_UART_IRQHandler+0x4ea>
 8003312:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800331a:	2b00      	cmp	r3, #0
 800331c:	d003      	beq.n	8003326 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 fae7 	bl	80038f2 <UART_Transmit_IT>
    return;
 8003324:	e014      	b.n	8003350 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003326:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800332a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800332e:	2b00      	cmp	r3, #0
 8003330:	d00e      	beq.n	8003350 <HAL_UART_IRQHandler+0x514>
 8003332:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800333a:	2b00      	cmp	r3, #0
 800333c:	d008      	beq.n	8003350 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 fb27 	bl	8003992 <UART_EndTransmit_IT>
    return;
 8003344:	e004      	b.n	8003350 <HAL_UART_IRQHandler+0x514>
    return;
 8003346:	bf00      	nop
 8003348:	e002      	b.n	8003350 <HAL_UART_IRQHandler+0x514>
      return;
 800334a:	bf00      	nop
 800334c:	e000      	b.n	8003350 <HAL_UART_IRQHandler+0x514>
      return;
 800334e:	bf00      	nop
  }
}
 8003350:	37e8      	adds	r7, #232	; 0xe8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop

08003358 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003360:	bf00      	nop
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003388:	bf00      	nop
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	460b      	mov	r3, r1
 800339e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80033a0:	bf00      	nop
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b09c      	sub	sp, #112	; 0x70
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b8:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d172      	bne.n	80034ae <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80033c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033ca:	2200      	movs	r2, #0
 80033cc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	330c      	adds	r3, #12
 80033d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033d8:	e853 3f00 	ldrex	r3, [r3]
 80033dc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80033de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80033e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	330c      	adds	r3, #12
 80033ec:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80033ee:	65ba      	str	r2, [r7, #88]	; 0x58
 80033f0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033f2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80033f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80033f6:	e841 2300 	strex	r3, r2, [r1]
 80033fa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80033fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1e5      	bne.n	80033ce <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003402:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	3314      	adds	r3, #20
 8003408:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800340a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800340c:	e853 3f00 	ldrex	r3, [r3]
 8003410:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003414:	f023 0301 	bic.w	r3, r3, #1
 8003418:	667b      	str	r3, [r7, #100]	; 0x64
 800341a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	3314      	adds	r3, #20
 8003420:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003422:	647a      	str	r2, [r7, #68]	; 0x44
 8003424:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003426:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003428:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800342a:	e841 2300 	strex	r3, r2, [r1]
 800342e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1e5      	bne.n	8003402 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003436:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	3314      	adds	r3, #20
 800343c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800343e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003440:	e853 3f00 	ldrex	r3, [r3]
 8003444:	623b      	str	r3, [r7, #32]
   return(result);
 8003446:	6a3b      	ldr	r3, [r7, #32]
 8003448:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800344c:	663b      	str	r3, [r7, #96]	; 0x60
 800344e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	3314      	adds	r3, #20
 8003454:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003456:	633a      	str	r2, [r7, #48]	; 0x30
 8003458:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800345a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800345c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800345e:	e841 2300 	strex	r3, r2, [r1]
 8003462:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1e5      	bne.n	8003436 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800346a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800346c:	2220      	movs	r2, #32
 800346e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003472:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003476:	2b01      	cmp	r3, #1
 8003478:	d119      	bne.n	80034ae <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800347a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	330c      	adds	r3, #12
 8003480:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	e853 3f00 	ldrex	r3, [r3]
 8003488:	60fb      	str	r3, [r7, #12]
   return(result);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f023 0310 	bic.w	r3, r3, #16
 8003490:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003492:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	330c      	adds	r3, #12
 8003498:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800349a:	61fa      	str	r2, [r7, #28]
 800349c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800349e:	69b9      	ldr	r1, [r7, #24]
 80034a0:	69fa      	ldr	r2, [r7, #28]
 80034a2:	e841 2300 	strex	r3, r2, [r1]
 80034a6:	617b      	str	r3, [r7, #20]
   return(result);
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1e5      	bne.n	800347a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d106      	bne.n	80034c4 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80034b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80034ba:	4619      	mov	r1, r3
 80034bc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80034be:	f7ff ff69 	bl	8003394 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80034c2:	e002      	b.n	80034ca <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80034c4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80034c6:	f7fd f9c7 	bl	8000858 <HAL_UART_RxCpltCallback>
}
 80034ca:	bf00      	nop
 80034cc:	3770      	adds	r7, #112	; 0x70
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80034d2:	b580      	push	{r7, lr}
 80034d4:	b084      	sub	sp, #16
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034de:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d108      	bne.n	80034fa <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80034ec:	085b      	lsrs	r3, r3, #1
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	4619      	mov	r1, r3
 80034f2:	68f8      	ldr	r0, [r7, #12]
 80034f4:	f7ff ff4e 	bl	8003394 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80034f8:	e002      	b.n	8003500 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80034fa:	68f8      	ldr	r0, [r7, #12]
 80034fc:	f7ff ff36 	bl	800336c <HAL_UART_RxHalfCpltCallback>
}
 8003500:	bf00      	nop
 8003502:	3710      	adds	r7, #16
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003510:	2300      	movs	r3, #0
 8003512:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003518:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	695b      	ldr	r3, [r3, #20]
 8003520:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003524:	2b80      	cmp	r3, #128	; 0x80
 8003526:	bf0c      	ite	eq
 8003528:	2301      	moveq	r3, #1
 800352a:	2300      	movne	r3, #0
 800352c:	b2db      	uxtb	r3, r3
 800352e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003536:	b2db      	uxtb	r3, r3
 8003538:	2b21      	cmp	r3, #33	; 0x21
 800353a:	d108      	bne.n	800354e <UART_DMAError+0x46>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d005      	beq.n	800354e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	2200      	movs	r2, #0
 8003546:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003548:	68b8      	ldr	r0, [r7, #8]
 800354a:	f000 f933 	bl	80037b4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	695b      	ldr	r3, [r3, #20]
 8003554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003558:	2b40      	cmp	r3, #64	; 0x40
 800355a:	bf0c      	ite	eq
 800355c:	2301      	moveq	r3, #1
 800355e:	2300      	movne	r3, #0
 8003560:	b2db      	uxtb	r3, r3
 8003562:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800356a:	b2db      	uxtb	r3, r3
 800356c:	2b22      	cmp	r3, #34	; 0x22
 800356e:	d108      	bne.n	8003582 <UART_DMAError+0x7a>
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d005      	beq.n	8003582 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	2200      	movs	r2, #0
 800357a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800357c:	68b8      	ldr	r0, [r7, #8]
 800357e:	f000 f941 	bl	8003804 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	f043 0210 	orr.w	r2, r3, #16
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800358e:	68b8      	ldr	r0, [r7, #8]
 8003590:	f7ff fef6 	bl	8003380 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003594:	bf00      	nop
 8003596:	3710      	adds	r7, #16
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b090      	sub	sp, #64	; 0x40
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	603b      	str	r3, [r7, #0]
 80035a8:	4613      	mov	r3, r2
 80035aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035ac:	e050      	b.n	8003650 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b4:	d04c      	beq.n	8003650 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80035b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d007      	beq.n	80035cc <UART_WaitOnFlagUntilTimeout+0x30>
 80035bc:	f7fd fc1c 	bl	8000df8 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d241      	bcs.n	8003650 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	330c      	adds	r3, #12
 80035d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d6:	e853 3f00 	ldrex	r3, [r3]
 80035da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80035dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035de:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80035e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	330c      	adds	r3, #12
 80035ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035ec:	637a      	str	r2, [r7, #52]	; 0x34
 80035ee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80035f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035f4:	e841 2300 	strex	r3, r2, [r1]
 80035f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80035fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d1e5      	bne.n	80035cc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	3314      	adds	r3, #20
 8003606:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	e853 3f00 	ldrex	r3, [r3]
 800360e:	613b      	str	r3, [r7, #16]
   return(result);
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	f023 0301 	bic.w	r3, r3, #1
 8003616:	63bb      	str	r3, [r7, #56]	; 0x38
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	3314      	adds	r3, #20
 800361e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003620:	623a      	str	r2, [r7, #32]
 8003622:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003624:	69f9      	ldr	r1, [r7, #28]
 8003626:	6a3a      	ldr	r2, [r7, #32]
 8003628:	e841 2300 	strex	r3, r2, [r1]
 800362c:	61bb      	str	r3, [r7, #24]
   return(result);
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d1e5      	bne.n	8003600 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2220      	movs	r2, #32
 8003638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2220      	movs	r2, #32
 8003640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e00f      	b.n	8003670 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	4013      	ands	r3, r2
 800365a:	68ba      	ldr	r2, [r7, #8]
 800365c:	429a      	cmp	r2, r3
 800365e:	bf0c      	ite	eq
 8003660:	2301      	moveq	r3, #1
 8003662:	2300      	movne	r3, #0
 8003664:	b2db      	uxtb	r3, r3
 8003666:	461a      	mov	r2, r3
 8003668:	79fb      	ldrb	r3, [r7, #7]
 800366a:	429a      	cmp	r2, r3
 800366c:	d09f      	beq.n	80035ae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800366e:	2300      	movs	r3, #0
}
 8003670:	4618      	mov	r0, r3
 8003672:	3740      	adds	r7, #64	; 0x40
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b098      	sub	sp, #96	; 0x60
 800367c:	af00      	add	r7, sp, #0
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	4613      	mov	r3, r2
 8003684:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003686:	68ba      	ldr	r2, [r7, #8]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	88fa      	ldrh	r2, [r7, #6]
 8003690:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2222      	movs	r2, #34	; 0x22
 800369c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a4:	4a40      	ldr	r2, [pc, #256]	; (80037a8 <UART_Start_Receive_DMA+0x130>)
 80036a6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ac:	4a3f      	ldr	r2, [pc, #252]	; (80037ac <UART_Start_Receive_DMA+0x134>)
 80036ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b4:	4a3e      	ldr	r2, [pc, #248]	; (80037b0 <UART_Start_Receive_DMA+0x138>)
 80036b6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036bc:	2200      	movs	r2, #0
 80036be:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80036c0:	f107 0308 	add.w	r3, r7, #8
 80036c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	3304      	adds	r3, #4
 80036d0:	4619      	mov	r1, r3
 80036d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	88fb      	ldrh	r3, [r7, #6]
 80036d8:	f7fe f970 	bl	80019bc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80036dc:	2300      	movs	r3, #0
 80036de:	613b      	str	r3, [r7, #16]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	613b      	str	r3, [r7, #16]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	613b      	str	r3, [r7, #16]
 80036f0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d019      	beq.n	8003736 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	330c      	adds	r3, #12
 8003708:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800370a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800370c:	e853 3f00 	ldrex	r3, [r3]
 8003710:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003714:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003718:	65bb      	str	r3, [r7, #88]	; 0x58
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	330c      	adds	r3, #12
 8003720:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003722:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003724:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003726:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003728:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800372a:	e841 2300 	strex	r3, r2, [r1]
 800372e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003730:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003732:	2b00      	cmp	r3, #0
 8003734:	d1e5      	bne.n	8003702 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	3314      	adds	r3, #20
 800373c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800373e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003740:	e853 3f00 	ldrex	r3, [r3]
 8003744:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003748:	f043 0301 	orr.w	r3, r3, #1
 800374c:	657b      	str	r3, [r7, #84]	; 0x54
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	3314      	adds	r3, #20
 8003754:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003756:	63ba      	str	r2, [r7, #56]	; 0x38
 8003758:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800375a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800375c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800375e:	e841 2300 	strex	r3, r2, [r1]
 8003762:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1e5      	bne.n	8003736 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	3314      	adds	r3, #20
 8003770:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	e853 3f00 	ldrex	r3, [r3]
 8003778:	617b      	str	r3, [r7, #20]
   return(result);
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003780:	653b      	str	r3, [r7, #80]	; 0x50
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	3314      	adds	r3, #20
 8003788:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800378a:	627a      	str	r2, [r7, #36]	; 0x24
 800378c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800378e:	6a39      	ldr	r1, [r7, #32]
 8003790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003792:	e841 2300 	strex	r3, r2, [r1]
 8003796:	61fb      	str	r3, [r7, #28]
   return(result);
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d1e5      	bne.n	800376a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800379e:	2300      	movs	r3, #0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3760      	adds	r7, #96	; 0x60
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	080033ad 	.word	0x080033ad
 80037ac:	080034d3 	.word	0x080034d3
 80037b0:	08003509 	.word	0x08003509

080037b4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b089      	sub	sp, #36	; 0x24
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	330c      	adds	r3, #12
 80037c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	e853 3f00 	ldrex	r3, [r3]
 80037ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80037d2:	61fb      	str	r3, [r7, #28]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	330c      	adds	r3, #12
 80037da:	69fa      	ldr	r2, [r7, #28]
 80037dc:	61ba      	str	r2, [r7, #24]
 80037de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e0:	6979      	ldr	r1, [r7, #20]
 80037e2:	69ba      	ldr	r2, [r7, #24]
 80037e4:	e841 2300 	strex	r3, r2, [r1]
 80037e8:	613b      	str	r3, [r7, #16]
   return(result);
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d1e5      	bne.n	80037bc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2220      	movs	r2, #32
 80037f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80037f8:	bf00      	nop
 80037fa:	3724      	adds	r7, #36	; 0x24
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003804:	b480      	push	{r7}
 8003806:	b095      	sub	sp, #84	; 0x54
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	330c      	adds	r3, #12
 8003812:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003816:	e853 3f00 	ldrex	r3, [r3]
 800381a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800381c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800381e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003822:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	330c      	adds	r3, #12
 800382a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800382c:	643a      	str	r2, [r7, #64]	; 0x40
 800382e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003830:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003832:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003834:	e841 2300 	strex	r3, r2, [r1]
 8003838:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800383a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800383c:	2b00      	cmp	r3, #0
 800383e:	d1e5      	bne.n	800380c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	3314      	adds	r3, #20
 8003846:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003848:	6a3b      	ldr	r3, [r7, #32]
 800384a:	e853 3f00 	ldrex	r3, [r3]
 800384e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	f023 0301 	bic.w	r3, r3, #1
 8003856:	64bb      	str	r3, [r7, #72]	; 0x48
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	3314      	adds	r3, #20
 800385e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003860:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003862:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003864:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003866:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003868:	e841 2300 	strex	r3, r2, [r1]
 800386c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800386e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003870:	2b00      	cmp	r3, #0
 8003872:	d1e5      	bne.n	8003840 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003878:	2b01      	cmp	r3, #1
 800387a:	d119      	bne.n	80038b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	330c      	adds	r3, #12
 8003882:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	e853 3f00 	ldrex	r3, [r3]
 800388a:	60bb      	str	r3, [r7, #8]
   return(result);
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	f023 0310 	bic.w	r3, r3, #16
 8003892:	647b      	str	r3, [r7, #68]	; 0x44
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	330c      	adds	r3, #12
 800389a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800389c:	61ba      	str	r2, [r7, #24]
 800389e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a0:	6979      	ldr	r1, [r7, #20]
 80038a2:	69ba      	ldr	r2, [r7, #24]
 80038a4:	e841 2300 	strex	r3, r2, [r1]
 80038a8:	613b      	str	r3, [r7, #16]
   return(result);
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d1e5      	bne.n	800387c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2220      	movs	r2, #32
 80038b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80038be:	bf00      	nop
 80038c0:	3754      	adds	r7, #84	; 0x54
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr

080038ca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b084      	sub	sp, #16
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2200      	movs	r2, #0
 80038dc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	f7ff fd4b 	bl	8003380 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038ea:	bf00      	nop
 80038ec:	3710      	adds	r7, #16
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80038f2:	b480      	push	{r7}
 80038f4:	b085      	sub	sp, #20
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b21      	cmp	r3, #33	; 0x21
 8003904:	d13e      	bne.n	8003984 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800390e:	d114      	bne.n	800393a <UART_Transmit_IT+0x48>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d110      	bne.n	800393a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a1b      	ldr	r3, [r3, #32]
 800391c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	881b      	ldrh	r3, [r3, #0]
 8003922:	461a      	mov	r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800392c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a1b      	ldr	r3, [r3, #32]
 8003932:	1c9a      	adds	r2, r3, #2
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	621a      	str	r2, [r3, #32]
 8003938:	e008      	b.n	800394c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a1b      	ldr	r3, [r3, #32]
 800393e:	1c59      	adds	r1, r3, #1
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	6211      	str	r1, [r2, #32]
 8003944:	781a      	ldrb	r2, [r3, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003950:	b29b      	uxth	r3, r3
 8003952:	3b01      	subs	r3, #1
 8003954:	b29b      	uxth	r3, r3
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	4619      	mov	r1, r3
 800395a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800395c:	2b00      	cmp	r3, #0
 800395e:	d10f      	bne.n	8003980 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68da      	ldr	r2, [r3, #12]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800396e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68da      	ldr	r2, [r3, #12]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800397e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003980:	2300      	movs	r3, #0
 8003982:	e000      	b.n	8003986 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003984:	2302      	movs	r3, #2
  }
}
 8003986:	4618      	mov	r0, r3
 8003988:	3714      	adds	r7, #20
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr

08003992 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003992:	b580      	push	{r7, lr}
 8003994:	b082      	sub	sp, #8
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68da      	ldr	r2, [r3, #12]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039a8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2220      	movs	r2, #32
 80039ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f7ff fcd0 	bl	8003358 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3708      	adds	r7, #8
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}

080039c2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80039c2:	b580      	push	{r7, lr}
 80039c4:	b08c      	sub	sp, #48	; 0x30
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b22      	cmp	r3, #34	; 0x22
 80039d4:	f040 80ab 	bne.w	8003b2e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039e0:	d117      	bne.n	8003a12 <UART_Receive_IT+0x50>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d113      	bne.n	8003a12 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80039ea:	2300      	movs	r3, #0
 80039ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a04:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a0a:	1c9a      	adds	r2, r3, #2
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	629a      	str	r2, [r3, #40]	; 0x28
 8003a10:	e026      	b.n	8003a60 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a16:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a24:	d007      	beq.n	8003a36 <UART_Receive_IT+0x74>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d10a      	bne.n	8003a44 <UART_Receive_IT+0x82>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d106      	bne.n	8003a44 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	b2da      	uxtb	r2, r3
 8003a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a40:	701a      	strb	r2, [r3, #0]
 8003a42:	e008      	b.n	8003a56 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a50:	b2da      	uxtb	r2, r3
 8003a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a54:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a5a:	1c5a      	adds	r2, r3, #1
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	3b01      	subs	r3, #1
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d15a      	bne.n	8003b2a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68da      	ldr	r2, [r3, #12]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f022 0220 	bic.w	r2, r2, #32
 8003a82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68da      	ldr	r2, [r3, #12]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	695a      	ldr	r2, [r3, #20]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f022 0201 	bic.w	r2, r2, #1
 8003aa2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2220      	movs	r2, #32
 8003aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d135      	bne.n	8003b20 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	330c      	adds	r3, #12
 8003ac0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	e853 3f00 	ldrex	r3, [r3]
 8003ac8:	613b      	str	r3, [r7, #16]
   return(result);
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	f023 0310 	bic.w	r3, r3, #16
 8003ad0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	330c      	adds	r3, #12
 8003ad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ada:	623a      	str	r2, [r7, #32]
 8003adc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ade:	69f9      	ldr	r1, [r7, #28]
 8003ae0:	6a3a      	ldr	r2, [r7, #32]
 8003ae2:	e841 2300 	strex	r3, r2, [r1]
 8003ae6:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1e5      	bne.n	8003aba <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0310 	and.w	r3, r3, #16
 8003af8:	2b10      	cmp	r3, #16
 8003afa:	d10a      	bne.n	8003b12 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003afc:	2300      	movs	r3, #0
 8003afe:	60fb      	str	r3, [r7, #12]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	60fb      	str	r3, [r7, #12]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	60fb      	str	r3, [r7, #12]
 8003b10:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b16:	4619      	mov	r1, r3
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f7ff fc3b 	bl	8003394 <HAL_UARTEx_RxEventCallback>
 8003b1e:	e002      	b.n	8003b26 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f7fc fe99 	bl	8000858 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003b26:	2300      	movs	r3, #0
 8003b28:	e002      	b.n	8003b30 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	e000      	b.n	8003b30 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003b2e:	2302      	movs	r3, #2
  }
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3730      	adds	r7, #48	; 0x30
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b3c:	b0c0      	sub	sp, #256	; 0x100
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b54:	68d9      	ldr	r1, [r3, #12]
 8003b56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	ea40 0301 	orr.w	r3, r0, r1
 8003b60:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b66:	689a      	ldr	r2, [r3, #8]
 8003b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	431a      	orrs	r2, r3
 8003b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b74:	695b      	ldr	r3, [r3, #20]
 8003b76:	431a      	orrs	r2, r3
 8003b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b7c:	69db      	ldr	r3, [r3, #28]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003b90:	f021 010c 	bic.w	r1, r1, #12
 8003b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003b9e:	430b      	orrs	r3, r1
 8003ba0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bb2:	6999      	ldr	r1, [r3, #24]
 8003bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	ea40 0301 	orr.w	r3, r0, r1
 8003bbe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	4b8f      	ldr	r3, [pc, #572]	; (8003e04 <UART_SetConfig+0x2cc>)
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d005      	beq.n	8003bd8 <UART_SetConfig+0xa0>
 8003bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	4b8d      	ldr	r3, [pc, #564]	; (8003e08 <UART_SetConfig+0x2d0>)
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d104      	bne.n	8003be2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003bd8:	f7ff f80c 	bl	8002bf4 <HAL_RCC_GetPCLK2Freq>
 8003bdc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003be0:	e003      	b.n	8003bea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003be2:	f7fe fff3 	bl	8002bcc <HAL_RCC_GetPCLK1Freq>
 8003be6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bee:	69db      	ldr	r3, [r3, #28]
 8003bf0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bf4:	f040 810c 	bne.w	8003e10 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003bf8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003c02:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003c06:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003c0a:	4622      	mov	r2, r4
 8003c0c:	462b      	mov	r3, r5
 8003c0e:	1891      	adds	r1, r2, r2
 8003c10:	65b9      	str	r1, [r7, #88]	; 0x58
 8003c12:	415b      	adcs	r3, r3
 8003c14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c16:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003c1a:	4621      	mov	r1, r4
 8003c1c:	eb12 0801 	adds.w	r8, r2, r1
 8003c20:	4629      	mov	r1, r5
 8003c22:	eb43 0901 	adc.w	r9, r3, r1
 8003c26:	f04f 0200 	mov.w	r2, #0
 8003c2a:	f04f 0300 	mov.w	r3, #0
 8003c2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c3a:	4690      	mov	r8, r2
 8003c3c:	4699      	mov	r9, r3
 8003c3e:	4623      	mov	r3, r4
 8003c40:	eb18 0303 	adds.w	r3, r8, r3
 8003c44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003c48:	462b      	mov	r3, r5
 8003c4a:	eb49 0303 	adc.w	r3, r9, r3
 8003c4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003c5e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003c62:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003c66:	460b      	mov	r3, r1
 8003c68:	18db      	adds	r3, r3, r3
 8003c6a:	653b      	str	r3, [r7, #80]	; 0x50
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	eb42 0303 	adc.w	r3, r2, r3
 8003c72:	657b      	str	r3, [r7, #84]	; 0x54
 8003c74:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003c78:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003c7c:	f7fc fb00 	bl	8000280 <__aeabi_uldivmod>
 8003c80:	4602      	mov	r2, r0
 8003c82:	460b      	mov	r3, r1
 8003c84:	4b61      	ldr	r3, [pc, #388]	; (8003e0c <UART_SetConfig+0x2d4>)
 8003c86:	fba3 2302 	umull	r2, r3, r3, r2
 8003c8a:	095b      	lsrs	r3, r3, #5
 8003c8c:	011c      	lsls	r4, r3, #4
 8003c8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c92:	2200      	movs	r2, #0
 8003c94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c98:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003c9c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003ca0:	4642      	mov	r2, r8
 8003ca2:	464b      	mov	r3, r9
 8003ca4:	1891      	adds	r1, r2, r2
 8003ca6:	64b9      	str	r1, [r7, #72]	; 0x48
 8003ca8:	415b      	adcs	r3, r3
 8003caa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003cb0:	4641      	mov	r1, r8
 8003cb2:	eb12 0a01 	adds.w	sl, r2, r1
 8003cb6:	4649      	mov	r1, r9
 8003cb8:	eb43 0b01 	adc.w	fp, r3, r1
 8003cbc:	f04f 0200 	mov.w	r2, #0
 8003cc0:	f04f 0300 	mov.w	r3, #0
 8003cc4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003cc8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ccc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cd0:	4692      	mov	sl, r2
 8003cd2:	469b      	mov	fp, r3
 8003cd4:	4643      	mov	r3, r8
 8003cd6:	eb1a 0303 	adds.w	r3, sl, r3
 8003cda:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003cde:	464b      	mov	r3, r9
 8003ce0:	eb4b 0303 	adc.w	r3, fp, r3
 8003ce4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003cf4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003cf8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	18db      	adds	r3, r3, r3
 8003d00:	643b      	str	r3, [r7, #64]	; 0x40
 8003d02:	4613      	mov	r3, r2
 8003d04:	eb42 0303 	adc.w	r3, r2, r3
 8003d08:	647b      	str	r3, [r7, #68]	; 0x44
 8003d0a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003d0e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003d12:	f7fc fab5 	bl	8000280 <__aeabi_uldivmod>
 8003d16:	4602      	mov	r2, r0
 8003d18:	460b      	mov	r3, r1
 8003d1a:	4611      	mov	r1, r2
 8003d1c:	4b3b      	ldr	r3, [pc, #236]	; (8003e0c <UART_SetConfig+0x2d4>)
 8003d1e:	fba3 2301 	umull	r2, r3, r3, r1
 8003d22:	095b      	lsrs	r3, r3, #5
 8003d24:	2264      	movs	r2, #100	; 0x64
 8003d26:	fb02 f303 	mul.w	r3, r2, r3
 8003d2a:	1acb      	subs	r3, r1, r3
 8003d2c:	00db      	lsls	r3, r3, #3
 8003d2e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003d32:	4b36      	ldr	r3, [pc, #216]	; (8003e0c <UART_SetConfig+0x2d4>)
 8003d34:	fba3 2302 	umull	r2, r3, r3, r2
 8003d38:	095b      	lsrs	r3, r3, #5
 8003d3a:	005b      	lsls	r3, r3, #1
 8003d3c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d40:	441c      	add	r4, r3
 8003d42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d46:	2200      	movs	r2, #0
 8003d48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d4c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003d50:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003d54:	4642      	mov	r2, r8
 8003d56:	464b      	mov	r3, r9
 8003d58:	1891      	adds	r1, r2, r2
 8003d5a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003d5c:	415b      	adcs	r3, r3
 8003d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d60:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003d64:	4641      	mov	r1, r8
 8003d66:	1851      	adds	r1, r2, r1
 8003d68:	6339      	str	r1, [r7, #48]	; 0x30
 8003d6a:	4649      	mov	r1, r9
 8003d6c:	414b      	adcs	r3, r1
 8003d6e:	637b      	str	r3, [r7, #52]	; 0x34
 8003d70:	f04f 0200 	mov.w	r2, #0
 8003d74:	f04f 0300 	mov.w	r3, #0
 8003d78:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003d7c:	4659      	mov	r1, fp
 8003d7e:	00cb      	lsls	r3, r1, #3
 8003d80:	4651      	mov	r1, sl
 8003d82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d86:	4651      	mov	r1, sl
 8003d88:	00ca      	lsls	r2, r1, #3
 8003d8a:	4610      	mov	r0, r2
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	4603      	mov	r3, r0
 8003d90:	4642      	mov	r2, r8
 8003d92:	189b      	adds	r3, r3, r2
 8003d94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d98:	464b      	mov	r3, r9
 8003d9a:	460a      	mov	r2, r1
 8003d9c:	eb42 0303 	adc.w	r3, r2, r3
 8003da0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003db0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003db4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003db8:	460b      	mov	r3, r1
 8003dba:	18db      	adds	r3, r3, r3
 8003dbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	eb42 0303 	adc.w	r3, r2, r3
 8003dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dc6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003dca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003dce:	f7fc fa57 	bl	8000280 <__aeabi_uldivmod>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	4b0d      	ldr	r3, [pc, #52]	; (8003e0c <UART_SetConfig+0x2d4>)
 8003dd8:	fba3 1302 	umull	r1, r3, r3, r2
 8003ddc:	095b      	lsrs	r3, r3, #5
 8003dde:	2164      	movs	r1, #100	; 0x64
 8003de0:	fb01 f303 	mul.w	r3, r1, r3
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	00db      	lsls	r3, r3, #3
 8003de8:	3332      	adds	r3, #50	; 0x32
 8003dea:	4a08      	ldr	r2, [pc, #32]	; (8003e0c <UART_SetConfig+0x2d4>)
 8003dec:	fba2 2303 	umull	r2, r3, r2, r3
 8003df0:	095b      	lsrs	r3, r3, #5
 8003df2:	f003 0207 	and.w	r2, r3, #7
 8003df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4422      	add	r2, r4
 8003dfe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003e00:	e105      	b.n	800400e <UART_SetConfig+0x4d6>
 8003e02:	bf00      	nop
 8003e04:	40011000 	.word	0x40011000
 8003e08:	40011400 	.word	0x40011400
 8003e0c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e14:	2200      	movs	r2, #0
 8003e16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003e1a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003e1e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003e22:	4642      	mov	r2, r8
 8003e24:	464b      	mov	r3, r9
 8003e26:	1891      	adds	r1, r2, r2
 8003e28:	6239      	str	r1, [r7, #32]
 8003e2a:	415b      	adcs	r3, r3
 8003e2c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e32:	4641      	mov	r1, r8
 8003e34:	1854      	adds	r4, r2, r1
 8003e36:	4649      	mov	r1, r9
 8003e38:	eb43 0501 	adc.w	r5, r3, r1
 8003e3c:	f04f 0200 	mov.w	r2, #0
 8003e40:	f04f 0300 	mov.w	r3, #0
 8003e44:	00eb      	lsls	r3, r5, #3
 8003e46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e4a:	00e2      	lsls	r2, r4, #3
 8003e4c:	4614      	mov	r4, r2
 8003e4e:	461d      	mov	r5, r3
 8003e50:	4643      	mov	r3, r8
 8003e52:	18e3      	adds	r3, r4, r3
 8003e54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003e58:	464b      	mov	r3, r9
 8003e5a:	eb45 0303 	adc.w	r3, r5, r3
 8003e5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003e62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003e6e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003e72:	f04f 0200 	mov.w	r2, #0
 8003e76:	f04f 0300 	mov.w	r3, #0
 8003e7a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003e7e:	4629      	mov	r1, r5
 8003e80:	008b      	lsls	r3, r1, #2
 8003e82:	4621      	mov	r1, r4
 8003e84:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e88:	4621      	mov	r1, r4
 8003e8a:	008a      	lsls	r2, r1, #2
 8003e8c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003e90:	f7fc f9f6 	bl	8000280 <__aeabi_uldivmod>
 8003e94:	4602      	mov	r2, r0
 8003e96:	460b      	mov	r3, r1
 8003e98:	4b60      	ldr	r3, [pc, #384]	; (800401c <UART_SetConfig+0x4e4>)
 8003e9a:	fba3 2302 	umull	r2, r3, r3, r2
 8003e9e:	095b      	lsrs	r3, r3, #5
 8003ea0:	011c      	lsls	r4, r3, #4
 8003ea2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003eac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003eb0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003eb4:	4642      	mov	r2, r8
 8003eb6:	464b      	mov	r3, r9
 8003eb8:	1891      	adds	r1, r2, r2
 8003eba:	61b9      	str	r1, [r7, #24]
 8003ebc:	415b      	adcs	r3, r3
 8003ebe:	61fb      	str	r3, [r7, #28]
 8003ec0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ec4:	4641      	mov	r1, r8
 8003ec6:	1851      	adds	r1, r2, r1
 8003ec8:	6139      	str	r1, [r7, #16]
 8003eca:	4649      	mov	r1, r9
 8003ecc:	414b      	adcs	r3, r1
 8003ece:	617b      	str	r3, [r7, #20]
 8003ed0:	f04f 0200 	mov.w	r2, #0
 8003ed4:	f04f 0300 	mov.w	r3, #0
 8003ed8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003edc:	4659      	mov	r1, fp
 8003ede:	00cb      	lsls	r3, r1, #3
 8003ee0:	4651      	mov	r1, sl
 8003ee2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ee6:	4651      	mov	r1, sl
 8003ee8:	00ca      	lsls	r2, r1, #3
 8003eea:	4610      	mov	r0, r2
 8003eec:	4619      	mov	r1, r3
 8003eee:	4603      	mov	r3, r0
 8003ef0:	4642      	mov	r2, r8
 8003ef2:	189b      	adds	r3, r3, r2
 8003ef4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ef8:	464b      	mov	r3, r9
 8003efa:	460a      	mov	r2, r1
 8003efc:	eb42 0303 	adc.w	r3, r2, r3
 8003f00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f0e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003f10:	f04f 0200 	mov.w	r2, #0
 8003f14:	f04f 0300 	mov.w	r3, #0
 8003f18:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003f1c:	4649      	mov	r1, r9
 8003f1e:	008b      	lsls	r3, r1, #2
 8003f20:	4641      	mov	r1, r8
 8003f22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f26:	4641      	mov	r1, r8
 8003f28:	008a      	lsls	r2, r1, #2
 8003f2a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003f2e:	f7fc f9a7 	bl	8000280 <__aeabi_uldivmod>
 8003f32:	4602      	mov	r2, r0
 8003f34:	460b      	mov	r3, r1
 8003f36:	4b39      	ldr	r3, [pc, #228]	; (800401c <UART_SetConfig+0x4e4>)
 8003f38:	fba3 1302 	umull	r1, r3, r3, r2
 8003f3c:	095b      	lsrs	r3, r3, #5
 8003f3e:	2164      	movs	r1, #100	; 0x64
 8003f40:	fb01 f303 	mul.w	r3, r1, r3
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	011b      	lsls	r3, r3, #4
 8003f48:	3332      	adds	r3, #50	; 0x32
 8003f4a:	4a34      	ldr	r2, [pc, #208]	; (800401c <UART_SetConfig+0x4e4>)
 8003f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f50:	095b      	lsrs	r3, r3, #5
 8003f52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f56:	441c      	add	r4, r3
 8003f58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	673b      	str	r3, [r7, #112]	; 0x70
 8003f60:	677a      	str	r2, [r7, #116]	; 0x74
 8003f62:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003f66:	4642      	mov	r2, r8
 8003f68:	464b      	mov	r3, r9
 8003f6a:	1891      	adds	r1, r2, r2
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	415b      	adcs	r3, r3
 8003f70:	60fb      	str	r3, [r7, #12]
 8003f72:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f76:	4641      	mov	r1, r8
 8003f78:	1851      	adds	r1, r2, r1
 8003f7a:	6039      	str	r1, [r7, #0]
 8003f7c:	4649      	mov	r1, r9
 8003f7e:	414b      	adcs	r3, r1
 8003f80:	607b      	str	r3, [r7, #4]
 8003f82:	f04f 0200 	mov.w	r2, #0
 8003f86:	f04f 0300 	mov.w	r3, #0
 8003f8a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f8e:	4659      	mov	r1, fp
 8003f90:	00cb      	lsls	r3, r1, #3
 8003f92:	4651      	mov	r1, sl
 8003f94:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f98:	4651      	mov	r1, sl
 8003f9a:	00ca      	lsls	r2, r1, #3
 8003f9c:	4610      	mov	r0, r2
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	4642      	mov	r2, r8
 8003fa4:	189b      	adds	r3, r3, r2
 8003fa6:	66bb      	str	r3, [r7, #104]	; 0x68
 8003fa8:	464b      	mov	r3, r9
 8003faa:	460a      	mov	r2, r1
 8003fac:	eb42 0303 	adc.w	r3, r2, r3
 8003fb0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	663b      	str	r3, [r7, #96]	; 0x60
 8003fbc:	667a      	str	r2, [r7, #100]	; 0x64
 8003fbe:	f04f 0200 	mov.w	r2, #0
 8003fc2:	f04f 0300 	mov.w	r3, #0
 8003fc6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003fca:	4649      	mov	r1, r9
 8003fcc:	008b      	lsls	r3, r1, #2
 8003fce:	4641      	mov	r1, r8
 8003fd0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fd4:	4641      	mov	r1, r8
 8003fd6:	008a      	lsls	r2, r1, #2
 8003fd8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003fdc:	f7fc f950 	bl	8000280 <__aeabi_uldivmod>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	460b      	mov	r3, r1
 8003fe4:	4b0d      	ldr	r3, [pc, #52]	; (800401c <UART_SetConfig+0x4e4>)
 8003fe6:	fba3 1302 	umull	r1, r3, r3, r2
 8003fea:	095b      	lsrs	r3, r3, #5
 8003fec:	2164      	movs	r1, #100	; 0x64
 8003fee:	fb01 f303 	mul.w	r3, r1, r3
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	011b      	lsls	r3, r3, #4
 8003ff6:	3332      	adds	r3, #50	; 0x32
 8003ff8:	4a08      	ldr	r2, [pc, #32]	; (800401c <UART_SetConfig+0x4e4>)
 8003ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8003ffe:	095b      	lsrs	r3, r3, #5
 8004000:	f003 020f 	and.w	r2, r3, #15
 8004004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4422      	add	r2, r4
 800400c:	609a      	str	r2, [r3, #8]
}
 800400e:	bf00      	nop
 8004010:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004014:	46bd      	mov	sp, r7
 8004016:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800401a:	bf00      	nop
 800401c:	51eb851f 	.word	0x51eb851f

08004020 <__errno>:
 8004020:	4b01      	ldr	r3, [pc, #4]	; (8004028 <__errno+0x8>)
 8004022:	6818      	ldr	r0, [r3, #0]
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	2000000c 	.word	0x2000000c

0800402c <__libc_init_array>:
 800402c:	b570      	push	{r4, r5, r6, lr}
 800402e:	4d0d      	ldr	r5, [pc, #52]	; (8004064 <__libc_init_array+0x38>)
 8004030:	4c0d      	ldr	r4, [pc, #52]	; (8004068 <__libc_init_array+0x3c>)
 8004032:	1b64      	subs	r4, r4, r5
 8004034:	10a4      	asrs	r4, r4, #2
 8004036:	2600      	movs	r6, #0
 8004038:	42a6      	cmp	r6, r4
 800403a:	d109      	bne.n	8004050 <__libc_init_array+0x24>
 800403c:	4d0b      	ldr	r5, [pc, #44]	; (800406c <__libc_init_array+0x40>)
 800403e:	4c0c      	ldr	r4, [pc, #48]	; (8004070 <__libc_init_array+0x44>)
 8004040:	f000 ffae 	bl	8004fa0 <_init>
 8004044:	1b64      	subs	r4, r4, r5
 8004046:	10a4      	asrs	r4, r4, #2
 8004048:	2600      	movs	r6, #0
 800404a:	42a6      	cmp	r6, r4
 800404c:	d105      	bne.n	800405a <__libc_init_array+0x2e>
 800404e:	bd70      	pop	{r4, r5, r6, pc}
 8004050:	f855 3b04 	ldr.w	r3, [r5], #4
 8004054:	4798      	blx	r3
 8004056:	3601      	adds	r6, #1
 8004058:	e7ee      	b.n	8004038 <__libc_init_array+0xc>
 800405a:	f855 3b04 	ldr.w	r3, [r5], #4
 800405e:	4798      	blx	r3
 8004060:	3601      	adds	r6, #1
 8004062:	e7f2      	b.n	800404a <__libc_init_array+0x1e>
 8004064:	080050a4 	.word	0x080050a4
 8004068:	080050a4 	.word	0x080050a4
 800406c:	080050a4 	.word	0x080050a4
 8004070:	080050a8 	.word	0x080050a8

08004074 <memset>:
 8004074:	4402      	add	r2, r0
 8004076:	4603      	mov	r3, r0
 8004078:	4293      	cmp	r3, r2
 800407a:	d100      	bne.n	800407e <memset+0xa>
 800407c:	4770      	bx	lr
 800407e:	f803 1b01 	strb.w	r1, [r3], #1
 8004082:	e7f9      	b.n	8004078 <memset+0x4>

08004084 <iprintf>:
 8004084:	b40f      	push	{r0, r1, r2, r3}
 8004086:	4b0a      	ldr	r3, [pc, #40]	; (80040b0 <iprintf+0x2c>)
 8004088:	b513      	push	{r0, r1, r4, lr}
 800408a:	681c      	ldr	r4, [r3, #0]
 800408c:	b124      	cbz	r4, 8004098 <iprintf+0x14>
 800408e:	69a3      	ldr	r3, [r4, #24]
 8004090:	b913      	cbnz	r3, 8004098 <iprintf+0x14>
 8004092:	4620      	mov	r0, r4
 8004094:	f000 f866 	bl	8004164 <__sinit>
 8004098:	ab05      	add	r3, sp, #20
 800409a:	9a04      	ldr	r2, [sp, #16]
 800409c:	68a1      	ldr	r1, [r4, #8]
 800409e:	9301      	str	r3, [sp, #4]
 80040a0:	4620      	mov	r0, r4
 80040a2:	f000 f9bd 	bl	8004420 <_vfiprintf_r>
 80040a6:	b002      	add	sp, #8
 80040a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80040ac:	b004      	add	sp, #16
 80040ae:	4770      	bx	lr
 80040b0:	2000000c 	.word	0x2000000c

080040b4 <std>:
 80040b4:	2300      	movs	r3, #0
 80040b6:	b510      	push	{r4, lr}
 80040b8:	4604      	mov	r4, r0
 80040ba:	e9c0 3300 	strd	r3, r3, [r0]
 80040be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80040c2:	6083      	str	r3, [r0, #8]
 80040c4:	8181      	strh	r1, [r0, #12]
 80040c6:	6643      	str	r3, [r0, #100]	; 0x64
 80040c8:	81c2      	strh	r2, [r0, #14]
 80040ca:	6183      	str	r3, [r0, #24]
 80040cc:	4619      	mov	r1, r3
 80040ce:	2208      	movs	r2, #8
 80040d0:	305c      	adds	r0, #92	; 0x5c
 80040d2:	f7ff ffcf 	bl	8004074 <memset>
 80040d6:	4b05      	ldr	r3, [pc, #20]	; (80040ec <std+0x38>)
 80040d8:	6263      	str	r3, [r4, #36]	; 0x24
 80040da:	4b05      	ldr	r3, [pc, #20]	; (80040f0 <std+0x3c>)
 80040dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80040de:	4b05      	ldr	r3, [pc, #20]	; (80040f4 <std+0x40>)
 80040e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80040e2:	4b05      	ldr	r3, [pc, #20]	; (80040f8 <std+0x44>)
 80040e4:	6224      	str	r4, [r4, #32]
 80040e6:	6323      	str	r3, [r4, #48]	; 0x30
 80040e8:	bd10      	pop	{r4, pc}
 80040ea:	bf00      	nop
 80040ec:	080049c9 	.word	0x080049c9
 80040f0:	080049eb 	.word	0x080049eb
 80040f4:	08004a23 	.word	0x08004a23
 80040f8:	08004a47 	.word	0x08004a47

080040fc <_cleanup_r>:
 80040fc:	4901      	ldr	r1, [pc, #4]	; (8004104 <_cleanup_r+0x8>)
 80040fe:	f000 b8af 	b.w	8004260 <_fwalk_reent>
 8004102:	bf00      	nop
 8004104:	08004d21 	.word	0x08004d21

08004108 <__sfmoreglue>:
 8004108:	b570      	push	{r4, r5, r6, lr}
 800410a:	2268      	movs	r2, #104	; 0x68
 800410c:	1e4d      	subs	r5, r1, #1
 800410e:	4355      	muls	r5, r2
 8004110:	460e      	mov	r6, r1
 8004112:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004116:	f000 f8e5 	bl	80042e4 <_malloc_r>
 800411a:	4604      	mov	r4, r0
 800411c:	b140      	cbz	r0, 8004130 <__sfmoreglue+0x28>
 800411e:	2100      	movs	r1, #0
 8004120:	e9c0 1600 	strd	r1, r6, [r0]
 8004124:	300c      	adds	r0, #12
 8004126:	60a0      	str	r0, [r4, #8]
 8004128:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800412c:	f7ff ffa2 	bl	8004074 <memset>
 8004130:	4620      	mov	r0, r4
 8004132:	bd70      	pop	{r4, r5, r6, pc}

08004134 <__sfp_lock_acquire>:
 8004134:	4801      	ldr	r0, [pc, #4]	; (800413c <__sfp_lock_acquire+0x8>)
 8004136:	f000 b8b3 	b.w	80042a0 <__retarget_lock_acquire_recursive>
 800413a:	bf00      	nop
 800413c:	200001e9 	.word	0x200001e9

08004140 <__sfp_lock_release>:
 8004140:	4801      	ldr	r0, [pc, #4]	; (8004148 <__sfp_lock_release+0x8>)
 8004142:	f000 b8ae 	b.w	80042a2 <__retarget_lock_release_recursive>
 8004146:	bf00      	nop
 8004148:	200001e9 	.word	0x200001e9

0800414c <__sinit_lock_acquire>:
 800414c:	4801      	ldr	r0, [pc, #4]	; (8004154 <__sinit_lock_acquire+0x8>)
 800414e:	f000 b8a7 	b.w	80042a0 <__retarget_lock_acquire_recursive>
 8004152:	bf00      	nop
 8004154:	200001ea 	.word	0x200001ea

08004158 <__sinit_lock_release>:
 8004158:	4801      	ldr	r0, [pc, #4]	; (8004160 <__sinit_lock_release+0x8>)
 800415a:	f000 b8a2 	b.w	80042a2 <__retarget_lock_release_recursive>
 800415e:	bf00      	nop
 8004160:	200001ea 	.word	0x200001ea

08004164 <__sinit>:
 8004164:	b510      	push	{r4, lr}
 8004166:	4604      	mov	r4, r0
 8004168:	f7ff fff0 	bl	800414c <__sinit_lock_acquire>
 800416c:	69a3      	ldr	r3, [r4, #24]
 800416e:	b11b      	cbz	r3, 8004178 <__sinit+0x14>
 8004170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004174:	f7ff bff0 	b.w	8004158 <__sinit_lock_release>
 8004178:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800417c:	6523      	str	r3, [r4, #80]	; 0x50
 800417e:	4b13      	ldr	r3, [pc, #76]	; (80041cc <__sinit+0x68>)
 8004180:	4a13      	ldr	r2, [pc, #76]	; (80041d0 <__sinit+0x6c>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	62a2      	str	r2, [r4, #40]	; 0x28
 8004186:	42a3      	cmp	r3, r4
 8004188:	bf04      	itt	eq
 800418a:	2301      	moveq	r3, #1
 800418c:	61a3      	streq	r3, [r4, #24]
 800418e:	4620      	mov	r0, r4
 8004190:	f000 f820 	bl	80041d4 <__sfp>
 8004194:	6060      	str	r0, [r4, #4]
 8004196:	4620      	mov	r0, r4
 8004198:	f000 f81c 	bl	80041d4 <__sfp>
 800419c:	60a0      	str	r0, [r4, #8]
 800419e:	4620      	mov	r0, r4
 80041a0:	f000 f818 	bl	80041d4 <__sfp>
 80041a4:	2200      	movs	r2, #0
 80041a6:	60e0      	str	r0, [r4, #12]
 80041a8:	2104      	movs	r1, #4
 80041aa:	6860      	ldr	r0, [r4, #4]
 80041ac:	f7ff ff82 	bl	80040b4 <std>
 80041b0:	68a0      	ldr	r0, [r4, #8]
 80041b2:	2201      	movs	r2, #1
 80041b4:	2109      	movs	r1, #9
 80041b6:	f7ff ff7d 	bl	80040b4 <std>
 80041ba:	68e0      	ldr	r0, [r4, #12]
 80041bc:	2202      	movs	r2, #2
 80041be:	2112      	movs	r1, #18
 80041c0:	f7ff ff78 	bl	80040b4 <std>
 80041c4:	2301      	movs	r3, #1
 80041c6:	61a3      	str	r3, [r4, #24]
 80041c8:	e7d2      	b.n	8004170 <__sinit+0xc>
 80041ca:	bf00      	nop
 80041cc:	08005004 	.word	0x08005004
 80041d0:	080040fd 	.word	0x080040fd

080041d4 <__sfp>:
 80041d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041d6:	4607      	mov	r7, r0
 80041d8:	f7ff ffac 	bl	8004134 <__sfp_lock_acquire>
 80041dc:	4b1e      	ldr	r3, [pc, #120]	; (8004258 <__sfp+0x84>)
 80041de:	681e      	ldr	r6, [r3, #0]
 80041e0:	69b3      	ldr	r3, [r6, #24]
 80041e2:	b913      	cbnz	r3, 80041ea <__sfp+0x16>
 80041e4:	4630      	mov	r0, r6
 80041e6:	f7ff ffbd 	bl	8004164 <__sinit>
 80041ea:	3648      	adds	r6, #72	; 0x48
 80041ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80041f0:	3b01      	subs	r3, #1
 80041f2:	d503      	bpl.n	80041fc <__sfp+0x28>
 80041f4:	6833      	ldr	r3, [r6, #0]
 80041f6:	b30b      	cbz	r3, 800423c <__sfp+0x68>
 80041f8:	6836      	ldr	r6, [r6, #0]
 80041fa:	e7f7      	b.n	80041ec <__sfp+0x18>
 80041fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004200:	b9d5      	cbnz	r5, 8004238 <__sfp+0x64>
 8004202:	4b16      	ldr	r3, [pc, #88]	; (800425c <__sfp+0x88>)
 8004204:	60e3      	str	r3, [r4, #12]
 8004206:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800420a:	6665      	str	r5, [r4, #100]	; 0x64
 800420c:	f000 f847 	bl	800429e <__retarget_lock_init_recursive>
 8004210:	f7ff ff96 	bl	8004140 <__sfp_lock_release>
 8004214:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004218:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800421c:	6025      	str	r5, [r4, #0]
 800421e:	61a5      	str	r5, [r4, #24]
 8004220:	2208      	movs	r2, #8
 8004222:	4629      	mov	r1, r5
 8004224:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004228:	f7ff ff24 	bl	8004074 <memset>
 800422c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004230:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004234:	4620      	mov	r0, r4
 8004236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004238:	3468      	adds	r4, #104	; 0x68
 800423a:	e7d9      	b.n	80041f0 <__sfp+0x1c>
 800423c:	2104      	movs	r1, #4
 800423e:	4638      	mov	r0, r7
 8004240:	f7ff ff62 	bl	8004108 <__sfmoreglue>
 8004244:	4604      	mov	r4, r0
 8004246:	6030      	str	r0, [r6, #0]
 8004248:	2800      	cmp	r0, #0
 800424a:	d1d5      	bne.n	80041f8 <__sfp+0x24>
 800424c:	f7ff ff78 	bl	8004140 <__sfp_lock_release>
 8004250:	230c      	movs	r3, #12
 8004252:	603b      	str	r3, [r7, #0]
 8004254:	e7ee      	b.n	8004234 <__sfp+0x60>
 8004256:	bf00      	nop
 8004258:	08005004 	.word	0x08005004
 800425c:	ffff0001 	.word	0xffff0001

08004260 <_fwalk_reent>:
 8004260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004264:	4606      	mov	r6, r0
 8004266:	4688      	mov	r8, r1
 8004268:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800426c:	2700      	movs	r7, #0
 800426e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004272:	f1b9 0901 	subs.w	r9, r9, #1
 8004276:	d505      	bpl.n	8004284 <_fwalk_reent+0x24>
 8004278:	6824      	ldr	r4, [r4, #0]
 800427a:	2c00      	cmp	r4, #0
 800427c:	d1f7      	bne.n	800426e <_fwalk_reent+0xe>
 800427e:	4638      	mov	r0, r7
 8004280:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004284:	89ab      	ldrh	r3, [r5, #12]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d907      	bls.n	800429a <_fwalk_reent+0x3a>
 800428a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800428e:	3301      	adds	r3, #1
 8004290:	d003      	beq.n	800429a <_fwalk_reent+0x3a>
 8004292:	4629      	mov	r1, r5
 8004294:	4630      	mov	r0, r6
 8004296:	47c0      	blx	r8
 8004298:	4307      	orrs	r7, r0
 800429a:	3568      	adds	r5, #104	; 0x68
 800429c:	e7e9      	b.n	8004272 <_fwalk_reent+0x12>

0800429e <__retarget_lock_init_recursive>:
 800429e:	4770      	bx	lr

080042a0 <__retarget_lock_acquire_recursive>:
 80042a0:	4770      	bx	lr

080042a2 <__retarget_lock_release_recursive>:
 80042a2:	4770      	bx	lr

080042a4 <sbrk_aligned>:
 80042a4:	b570      	push	{r4, r5, r6, lr}
 80042a6:	4e0e      	ldr	r6, [pc, #56]	; (80042e0 <sbrk_aligned+0x3c>)
 80042a8:	460c      	mov	r4, r1
 80042aa:	6831      	ldr	r1, [r6, #0]
 80042ac:	4605      	mov	r5, r0
 80042ae:	b911      	cbnz	r1, 80042b6 <sbrk_aligned+0x12>
 80042b0:	f000 fb7a 	bl	80049a8 <_sbrk_r>
 80042b4:	6030      	str	r0, [r6, #0]
 80042b6:	4621      	mov	r1, r4
 80042b8:	4628      	mov	r0, r5
 80042ba:	f000 fb75 	bl	80049a8 <_sbrk_r>
 80042be:	1c43      	adds	r3, r0, #1
 80042c0:	d00a      	beq.n	80042d8 <sbrk_aligned+0x34>
 80042c2:	1cc4      	adds	r4, r0, #3
 80042c4:	f024 0403 	bic.w	r4, r4, #3
 80042c8:	42a0      	cmp	r0, r4
 80042ca:	d007      	beq.n	80042dc <sbrk_aligned+0x38>
 80042cc:	1a21      	subs	r1, r4, r0
 80042ce:	4628      	mov	r0, r5
 80042d0:	f000 fb6a 	bl	80049a8 <_sbrk_r>
 80042d4:	3001      	adds	r0, #1
 80042d6:	d101      	bne.n	80042dc <sbrk_aligned+0x38>
 80042d8:	f04f 34ff 	mov.w	r4, #4294967295
 80042dc:	4620      	mov	r0, r4
 80042de:	bd70      	pop	{r4, r5, r6, pc}
 80042e0:	200001f0 	.word	0x200001f0

080042e4 <_malloc_r>:
 80042e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042e8:	1ccd      	adds	r5, r1, #3
 80042ea:	f025 0503 	bic.w	r5, r5, #3
 80042ee:	3508      	adds	r5, #8
 80042f0:	2d0c      	cmp	r5, #12
 80042f2:	bf38      	it	cc
 80042f4:	250c      	movcc	r5, #12
 80042f6:	2d00      	cmp	r5, #0
 80042f8:	4607      	mov	r7, r0
 80042fa:	db01      	blt.n	8004300 <_malloc_r+0x1c>
 80042fc:	42a9      	cmp	r1, r5
 80042fe:	d905      	bls.n	800430c <_malloc_r+0x28>
 8004300:	230c      	movs	r3, #12
 8004302:	603b      	str	r3, [r7, #0]
 8004304:	2600      	movs	r6, #0
 8004306:	4630      	mov	r0, r6
 8004308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800430c:	4e2e      	ldr	r6, [pc, #184]	; (80043c8 <_malloc_r+0xe4>)
 800430e:	f000 fdbb 	bl	8004e88 <__malloc_lock>
 8004312:	6833      	ldr	r3, [r6, #0]
 8004314:	461c      	mov	r4, r3
 8004316:	bb34      	cbnz	r4, 8004366 <_malloc_r+0x82>
 8004318:	4629      	mov	r1, r5
 800431a:	4638      	mov	r0, r7
 800431c:	f7ff ffc2 	bl	80042a4 <sbrk_aligned>
 8004320:	1c43      	adds	r3, r0, #1
 8004322:	4604      	mov	r4, r0
 8004324:	d14d      	bne.n	80043c2 <_malloc_r+0xde>
 8004326:	6834      	ldr	r4, [r6, #0]
 8004328:	4626      	mov	r6, r4
 800432a:	2e00      	cmp	r6, #0
 800432c:	d140      	bne.n	80043b0 <_malloc_r+0xcc>
 800432e:	6823      	ldr	r3, [r4, #0]
 8004330:	4631      	mov	r1, r6
 8004332:	4638      	mov	r0, r7
 8004334:	eb04 0803 	add.w	r8, r4, r3
 8004338:	f000 fb36 	bl	80049a8 <_sbrk_r>
 800433c:	4580      	cmp	r8, r0
 800433e:	d13a      	bne.n	80043b6 <_malloc_r+0xd2>
 8004340:	6821      	ldr	r1, [r4, #0]
 8004342:	3503      	adds	r5, #3
 8004344:	1a6d      	subs	r5, r5, r1
 8004346:	f025 0503 	bic.w	r5, r5, #3
 800434a:	3508      	adds	r5, #8
 800434c:	2d0c      	cmp	r5, #12
 800434e:	bf38      	it	cc
 8004350:	250c      	movcc	r5, #12
 8004352:	4629      	mov	r1, r5
 8004354:	4638      	mov	r0, r7
 8004356:	f7ff ffa5 	bl	80042a4 <sbrk_aligned>
 800435a:	3001      	adds	r0, #1
 800435c:	d02b      	beq.n	80043b6 <_malloc_r+0xd2>
 800435e:	6823      	ldr	r3, [r4, #0]
 8004360:	442b      	add	r3, r5
 8004362:	6023      	str	r3, [r4, #0]
 8004364:	e00e      	b.n	8004384 <_malloc_r+0xa0>
 8004366:	6822      	ldr	r2, [r4, #0]
 8004368:	1b52      	subs	r2, r2, r5
 800436a:	d41e      	bmi.n	80043aa <_malloc_r+0xc6>
 800436c:	2a0b      	cmp	r2, #11
 800436e:	d916      	bls.n	800439e <_malloc_r+0xba>
 8004370:	1961      	adds	r1, r4, r5
 8004372:	42a3      	cmp	r3, r4
 8004374:	6025      	str	r5, [r4, #0]
 8004376:	bf18      	it	ne
 8004378:	6059      	strne	r1, [r3, #4]
 800437a:	6863      	ldr	r3, [r4, #4]
 800437c:	bf08      	it	eq
 800437e:	6031      	streq	r1, [r6, #0]
 8004380:	5162      	str	r2, [r4, r5]
 8004382:	604b      	str	r3, [r1, #4]
 8004384:	4638      	mov	r0, r7
 8004386:	f104 060b 	add.w	r6, r4, #11
 800438a:	f000 fd83 	bl	8004e94 <__malloc_unlock>
 800438e:	f026 0607 	bic.w	r6, r6, #7
 8004392:	1d23      	adds	r3, r4, #4
 8004394:	1af2      	subs	r2, r6, r3
 8004396:	d0b6      	beq.n	8004306 <_malloc_r+0x22>
 8004398:	1b9b      	subs	r3, r3, r6
 800439a:	50a3      	str	r3, [r4, r2]
 800439c:	e7b3      	b.n	8004306 <_malloc_r+0x22>
 800439e:	6862      	ldr	r2, [r4, #4]
 80043a0:	42a3      	cmp	r3, r4
 80043a2:	bf0c      	ite	eq
 80043a4:	6032      	streq	r2, [r6, #0]
 80043a6:	605a      	strne	r2, [r3, #4]
 80043a8:	e7ec      	b.n	8004384 <_malloc_r+0xa0>
 80043aa:	4623      	mov	r3, r4
 80043ac:	6864      	ldr	r4, [r4, #4]
 80043ae:	e7b2      	b.n	8004316 <_malloc_r+0x32>
 80043b0:	4634      	mov	r4, r6
 80043b2:	6876      	ldr	r6, [r6, #4]
 80043b4:	e7b9      	b.n	800432a <_malloc_r+0x46>
 80043b6:	230c      	movs	r3, #12
 80043b8:	603b      	str	r3, [r7, #0]
 80043ba:	4638      	mov	r0, r7
 80043bc:	f000 fd6a 	bl	8004e94 <__malloc_unlock>
 80043c0:	e7a1      	b.n	8004306 <_malloc_r+0x22>
 80043c2:	6025      	str	r5, [r4, #0]
 80043c4:	e7de      	b.n	8004384 <_malloc_r+0xa0>
 80043c6:	bf00      	nop
 80043c8:	200001ec 	.word	0x200001ec

080043cc <__sfputc_r>:
 80043cc:	6893      	ldr	r3, [r2, #8]
 80043ce:	3b01      	subs	r3, #1
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	b410      	push	{r4}
 80043d4:	6093      	str	r3, [r2, #8]
 80043d6:	da08      	bge.n	80043ea <__sfputc_r+0x1e>
 80043d8:	6994      	ldr	r4, [r2, #24]
 80043da:	42a3      	cmp	r3, r4
 80043dc:	db01      	blt.n	80043e2 <__sfputc_r+0x16>
 80043de:	290a      	cmp	r1, #10
 80043e0:	d103      	bne.n	80043ea <__sfputc_r+0x1e>
 80043e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043e6:	f000 bb33 	b.w	8004a50 <__swbuf_r>
 80043ea:	6813      	ldr	r3, [r2, #0]
 80043ec:	1c58      	adds	r0, r3, #1
 80043ee:	6010      	str	r0, [r2, #0]
 80043f0:	7019      	strb	r1, [r3, #0]
 80043f2:	4608      	mov	r0, r1
 80043f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043f8:	4770      	bx	lr

080043fa <__sfputs_r>:
 80043fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043fc:	4606      	mov	r6, r0
 80043fe:	460f      	mov	r7, r1
 8004400:	4614      	mov	r4, r2
 8004402:	18d5      	adds	r5, r2, r3
 8004404:	42ac      	cmp	r4, r5
 8004406:	d101      	bne.n	800440c <__sfputs_r+0x12>
 8004408:	2000      	movs	r0, #0
 800440a:	e007      	b.n	800441c <__sfputs_r+0x22>
 800440c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004410:	463a      	mov	r2, r7
 8004412:	4630      	mov	r0, r6
 8004414:	f7ff ffda 	bl	80043cc <__sfputc_r>
 8004418:	1c43      	adds	r3, r0, #1
 800441a:	d1f3      	bne.n	8004404 <__sfputs_r+0xa>
 800441c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004420 <_vfiprintf_r>:
 8004420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004424:	460d      	mov	r5, r1
 8004426:	b09d      	sub	sp, #116	; 0x74
 8004428:	4614      	mov	r4, r2
 800442a:	4698      	mov	r8, r3
 800442c:	4606      	mov	r6, r0
 800442e:	b118      	cbz	r0, 8004438 <_vfiprintf_r+0x18>
 8004430:	6983      	ldr	r3, [r0, #24]
 8004432:	b90b      	cbnz	r3, 8004438 <_vfiprintf_r+0x18>
 8004434:	f7ff fe96 	bl	8004164 <__sinit>
 8004438:	4b89      	ldr	r3, [pc, #548]	; (8004660 <_vfiprintf_r+0x240>)
 800443a:	429d      	cmp	r5, r3
 800443c:	d11b      	bne.n	8004476 <_vfiprintf_r+0x56>
 800443e:	6875      	ldr	r5, [r6, #4]
 8004440:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004442:	07d9      	lsls	r1, r3, #31
 8004444:	d405      	bmi.n	8004452 <_vfiprintf_r+0x32>
 8004446:	89ab      	ldrh	r3, [r5, #12]
 8004448:	059a      	lsls	r2, r3, #22
 800444a:	d402      	bmi.n	8004452 <_vfiprintf_r+0x32>
 800444c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800444e:	f7ff ff27 	bl	80042a0 <__retarget_lock_acquire_recursive>
 8004452:	89ab      	ldrh	r3, [r5, #12]
 8004454:	071b      	lsls	r3, r3, #28
 8004456:	d501      	bpl.n	800445c <_vfiprintf_r+0x3c>
 8004458:	692b      	ldr	r3, [r5, #16]
 800445a:	b9eb      	cbnz	r3, 8004498 <_vfiprintf_r+0x78>
 800445c:	4629      	mov	r1, r5
 800445e:	4630      	mov	r0, r6
 8004460:	f000 fb5a 	bl	8004b18 <__swsetup_r>
 8004464:	b1c0      	cbz	r0, 8004498 <_vfiprintf_r+0x78>
 8004466:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004468:	07dc      	lsls	r4, r3, #31
 800446a:	d50e      	bpl.n	800448a <_vfiprintf_r+0x6a>
 800446c:	f04f 30ff 	mov.w	r0, #4294967295
 8004470:	b01d      	add	sp, #116	; 0x74
 8004472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004476:	4b7b      	ldr	r3, [pc, #492]	; (8004664 <_vfiprintf_r+0x244>)
 8004478:	429d      	cmp	r5, r3
 800447a:	d101      	bne.n	8004480 <_vfiprintf_r+0x60>
 800447c:	68b5      	ldr	r5, [r6, #8]
 800447e:	e7df      	b.n	8004440 <_vfiprintf_r+0x20>
 8004480:	4b79      	ldr	r3, [pc, #484]	; (8004668 <_vfiprintf_r+0x248>)
 8004482:	429d      	cmp	r5, r3
 8004484:	bf08      	it	eq
 8004486:	68f5      	ldreq	r5, [r6, #12]
 8004488:	e7da      	b.n	8004440 <_vfiprintf_r+0x20>
 800448a:	89ab      	ldrh	r3, [r5, #12]
 800448c:	0598      	lsls	r0, r3, #22
 800448e:	d4ed      	bmi.n	800446c <_vfiprintf_r+0x4c>
 8004490:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004492:	f7ff ff06 	bl	80042a2 <__retarget_lock_release_recursive>
 8004496:	e7e9      	b.n	800446c <_vfiprintf_r+0x4c>
 8004498:	2300      	movs	r3, #0
 800449a:	9309      	str	r3, [sp, #36]	; 0x24
 800449c:	2320      	movs	r3, #32
 800449e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80044a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80044a6:	2330      	movs	r3, #48	; 0x30
 80044a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800466c <_vfiprintf_r+0x24c>
 80044ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80044b0:	f04f 0901 	mov.w	r9, #1
 80044b4:	4623      	mov	r3, r4
 80044b6:	469a      	mov	sl, r3
 80044b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80044bc:	b10a      	cbz	r2, 80044c2 <_vfiprintf_r+0xa2>
 80044be:	2a25      	cmp	r2, #37	; 0x25
 80044c0:	d1f9      	bne.n	80044b6 <_vfiprintf_r+0x96>
 80044c2:	ebba 0b04 	subs.w	fp, sl, r4
 80044c6:	d00b      	beq.n	80044e0 <_vfiprintf_r+0xc0>
 80044c8:	465b      	mov	r3, fp
 80044ca:	4622      	mov	r2, r4
 80044cc:	4629      	mov	r1, r5
 80044ce:	4630      	mov	r0, r6
 80044d0:	f7ff ff93 	bl	80043fa <__sfputs_r>
 80044d4:	3001      	adds	r0, #1
 80044d6:	f000 80aa 	beq.w	800462e <_vfiprintf_r+0x20e>
 80044da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80044dc:	445a      	add	r2, fp
 80044de:	9209      	str	r2, [sp, #36]	; 0x24
 80044e0:	f89a 3000 	ldrb.w	r3, [sl]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f000 80a2 	beq.w	800462e <_vfiprintf_r+0x20e>
 80044ea:	2300      	movs	r3, #0
 80044ec:	f04f 32ff 	mov.w	r2, #4294967295
 80044f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80044f4:	f10a 0a01 	add.w	sl, sl, #1
 80044f8:	9304      	str	r3, [sp, #16]
 80044fa:	9307      	str	r3, [sp, #28]
 80044fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004500:	931a      	str	r3, [sp, #104]	; 0x68
 8004502:	4654      	mov	r4, sl
 8004504:	2205      	movs	r2, #5
 8004506:	f814 1b01 	ldrb.w	r1, [r4], #1
 800450a:	4858      	ldr	r0, [pc, #352]	; (800466c <_vfiprintf_r+0x24c>)
 800450c:	f7fb fe68 	bl	80001e0 <memchr>
 8004510:	9a04      	ldr	r2, [sp, #16]
 8004512:	b9d8      	cbnz	r0, 800454c <_vfiprintf_r+0x12c>
 8004514:	06d1      	lsls	r1, r2, #27
 8004516:	bf44      	itt	mi
 8004518:	2320      	movmi	r3, #32
 800451a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800451e:	0713      	lsls	r3, r2, #28
 8004520:	bf44      	itt	mi
 8004522:	232b      	movmi	r3, #43	; 0x2b
 8004524:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004528:	f89a 3000 	ldrb.w	r3, [sl]
 800452c:	2b2a      	cmp	r3, #42	; 0x2a
 800452e:	d015      	beq.n	800455c <_vfiprintf_r+0x13c>
 8004530:	9a07      	ldr	r2, [sp, #28]
 8004532:	4654      	mov	r4, sl
 8004534:	2000      	movs	r0, #0
 8004536:	f04f 0c0a 	mov.w	ip, #10
 800453a:	4621      	mov	r1, r4
 800453c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004540:	3b30      	subs	r3, #48	; 0x30
 8004542:	2b09      	cmp	r3, #9
 8004544:	d94e      	bls.n	80045e4 <_vfiprintf_r+0x1c4>
 8004546:	b1b0      	cbz	r0, 8004576 <_vfiprintf_r+0x156>
 8004548:	9207      	str	r2, [sp, #28]
 800454a:	e014      	b.n	8004576 <_vfiprintf_r+0x156>
 800454c:	eba0 0308 	sub.w	r3, r0, r8
 8004550:	fa09 f303 	lsl.w	r3, r9, r3
 8004554:	4313      	orrs	r3, r2
 8004556:	9304      	str	r3, [sp, #16]
 8004558:	46a2      	mov	sl, r4
 800455a:	e7d2      	b.n	8004502 <_vfiprintf_r+0xe2>
 800455c:	9b03      	ldr	r3, [sp, #12]
 800455e:	1d19      	adds	r1, r3, #4
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	9103      	str	r1, [sp, #12]
 8004564:	2b00      	cmp	r3, #0
 8004566:	bfbb      	ittet	lt
 8004568:	425b      	neglt	r3, r3
 800456a:	f042 0202 	orrlt.w	r2, r2, #2
 800456e:	9307      	strge	r3, [sp, #28]
 8004570:	9307      	strlt	r3, [sp, #28]
 8004572:	bfb8      	it	lt
 8004574:	9204      	strlt	r2, [sp, #16]
 8004576:	7823      	ldrb	r3, [r4, #0]
 8004578:	2b2e      	cmp	r3, #46	; 0x2e
 800457a:	d10c      	bne.n	8004596 <_vfiprintf_r+0x176>
 800457c:	7863      	ldrb	r3, [r4, #1]
 800457e:	2b2a      	cmp	r3, #42	; 0x2a
 8004580:	d135      	bne.n	80045ee <_vfiprintf_r+0x1ce>
 8004582:	9b03      	ldr	r3, [sp, #12]
 8004584:	1d1a      	adds	r2, r3, #4
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	9203      	str	r2, [sp, #12]
 800458a:	2b00      	cmp	r3, #0
 800458c:	bfb8      	it	lt
 800458e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004592:	3402      	adds	r4, #2
 8004594:	9305      	str	r3, [sp, #20]
 8004596:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800467c <_vfiprintf_r+0x25c>
 800459a:	7821      	ldrb	r1, [r4, #0]
 800459c:	2203      	movs	r2, #3
 800459e:	4650      	mov	r0, sl
 80045a0:	f7fb fe1e 	bl	80001e0 <memchr>
 80045a4:	b140      	cbz	r0, 80045b8 <_vfiprintf_r+0x198>
 80045a6:	2340      	movs	r3, #64	; 0x40
 80045a8:	eba0 000a 	sub.w	r0, r0, sl
 80045ac:	fa03 f000 	lsl.w	r0, r3, r0
 80045b0:	9b04      	ldr	r3, [sp, #16]
 80045b2:	4303      	orrs	r3, r0
 80045b4:	3401      	adds	r4, #1
 80045b6:	9304      	str	r3, [sp, #16]
 80045b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045bc:	482c      	ldr	r0, [pc, #176]	; (8004670 <_vfiprintf_r+0x250>)
 80045be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80045c2:	2206      	movs	r2, #6
 80045c4:	f7fb fe0c 	bl	80001e0 <memchr>
 80045c8:	2800      	cmp	r0, #0
 80045ca:	d03f      	beq.n	800464c <_vfiprintf_r+0x22c>
 80045cc:	4b29      	ldr	r3, [pc, #164]	; (8004674 <_vfiprintf_r+0x254>)
 80045ce:	bb1b      	cbnz	r3, 8004618 <_vfiprintf_r+0x1f8>
 80045d0:	9b03      	ldr	r3, [sp, #12]
 80045d2:	3307      	adds	r3, #7
 80045d4:	f023 0307 	bic.w	r3, r3, #7
 80045d8:	3308      	adds	r3, #8
 80045da:	9303      	str	r3, [sp, #12]
 80045dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045de:	443b      	add	r3, r7
 80045e0:	9309      	str	r3, [sp, #36]	; 0x24
 80045e2:	e767      	b.n	80044b4 <_vfiprintf_r+0x94>
 80045e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80045e8:	460c      	mov	r4, r1
 80045ea:	2001      	movs	r0, #1
 80045ec:	e7a5      	b.n	800453a <_vfiprintf_r+0x11a>
 80045ee:	2300      	movs	r3, #0
 80045f0:	3401      	adds	r4, #1
 80045f2:	9305      	str	r3, [sp, #20]
 80045f4:	4619      	mov	r1, r3
 80045f6:	f04f 0c0a 	mov.w	ip, #10
 80045fa:	4620      	mov	r0, r4
 80045fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004600:	3a30      	subs	r2, #48	; 0x30
 8004602:	2a09      	cmp	r2, #9
 8004604:	d903      	bls.n	800460e <_vfiprintf_r+0x1ee>
 8004606:	2b00      	cmp	r3, #0
 8004608:	d0c5      	beq.n	8004596 <_vfiprintf_r+0x176>
 800460a:	9105      	str	r1, [sp, #20]
 800460c:	e7c3      	b.n	8004596 <_vfiprintf_r+0x176>
 800460e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004612:	4604      	mov	r4, r0
 8004614:	2301      	movs	r3, #1
 8004616:	e7f0      	b.n	80045fa <_vfiprintf_r+0x1da>
 8004618:	ab03      	add	r3, sp, #12
 800461a:	9300      	str	r3, [sp, #0]
 800461c:	462a      	mov	r2, r5
 800461e:	4b16      	ldr	r3, [pc, #88]	; (8004678 <_vfiprintf_r+0x258>)
 8004620:	a904      	add	r1, sp, #16
 8004622:	4630      	mov	r0, r6
 8004624:	f3af 8000 	nop.w
 8004628:	4607      	mov	r7, r0
 800462a:	1c78      	adds	r0, r7, #1
 800462c:	d1d6      	bne.n	80045dc <_vfiprintf_r+0x1bc>
 800462e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004630:	07d9      	lsls	r1, r3, #31
 8004632:	d405      	bmi.n	8004640 <_vfiprintf_r+0x220>
 8004634:	89ab      	ldrh	r3, [r5, #12]
 8004636:	059a      	lsls	r2, r3, #22
 8004638:	d402      	bmi.n	8004640 <_vfiprintf_r+0x220>
 800463a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800463c:	f7ff fe31 	bl	80042a2 <__retarget_lock_release_recursive>
 8004640:	89ab      	ldrh	r3, [r5, #12]
 8004642:	065b      	lsls	r3, r3, #25
 8004644:	f53f af12 	bmi.w	800446c <_vfiprintf_r+0x4c>
 8004648:	9809      	ldr	r0, [sp, #36]	; 0x24
 800464a:	e711      	b.n	8004470 <_vfiprintf_r+0x50>
 800464c:	ab03      	add	r3, sp, #12
 800464e:	9300      	str	r3, [sp, #0]
 8004650:	462a      	mov	r2, r5
 8004652:	4b09      	ldr	r3, [pc, #36]	; (8004678 <_vfiprintf_r+0x258>)
 8004654:	a904      	add	r1, sp, #16
 8004656:	4630      	mov	r0, r6
 8004658:	f000 f880 	bl	800475c <_printf_i>
 800465c:	e7e4      	b.n	8004628 <_vfiprintf_r+0x208>
 800465e:	bf00      	nop
 8004660:	08005028 	.word	0x08005028
 8004664:	08005048 	.word	0x08005048
 8004668:	08005008 	.word	0x08005008
 800466c:	08005068 	.word	0x08005068
 8004670:	08005072 	.word	0x08005072
 8004674:	00000000 	.word	0x00000000
 8004678:	080043fb 	.word	0x080043fb
 800467c:	0800506e 	.word	0x0800506e

08004680 <_printf_common>:
 8004680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004684:	4616      	mov	r6, r2
 8004686:	4699      	mov	r9, r3
 8004688:	688a      	ldr	r2, [r1, #8]
 800468a:	690b      	ldr	r3, [r1, #16]
 800468c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004690:	4293      	cmp	r3, r2
 8004692:	bfb8      	it	lt
 8004694:	4613      	movlt	r3, r2
 8004696:	6033      	str	r3, [r6, #0]
 8004698:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800469c:	4607      	mov	r7, r0
 800469e:	460c      	mov	r4, r1
 80046a0:	b10a      	cbz	r2, 80046a6 <_printf_common+0x26>
 80046a2:	3301      	adds	r3, #1
 80046a4:	6033      	str	r3, [r6, #0]
 80046a6:	6823      	ldr	r3, [r4, #0]
 80046a8:	0699      	lsls	r1, r3, #26
 80046aa:	bf42      	ittt	mi
 80046ac:	6833      	ldrmi	r3, [r6, #0]
 80046ae:	3302      	addmi	r3, #2
 80046b0:	6033      	strmi	r3, [r6, #0]
 80046b2:	6825      	ldr	r5, [r4, #0]
 80046b4:	f015 0506 	ands.w	r5, r5, #6
 80046b8:	d106      	bne.n	80046c8 <_printf_common+0x48>
 80046ba:	f104 0a19 	add.w	sl, r4, #25
 80046be:	68e3      	ldr	r3, [r4, #12]
 80046c0:	6832      	ldr	r2, [r6, #0]
 80046c2:	1a9b      	subs	r3, r3, r2
 80046c4:	42ab      	cmp	r3, r5
 80046c6:	dc26      	bgt.n	8004716 <_printf_common+0x96>
 80046c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80046cc:	1e13      	subs	r3, r2, #0
 80046ce:	6822      	ldr	r2, [r4, #0]
 80046d0:	bf18      	it	ne
 80046d2:	2301      	movne	r3, #1
 80046d4:	0692      	lsls	r2, r2, #26
 80046d6:	d42b      	bmi.n	8004730 <_printf_common+0xb0>
 80046d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80046dc:	4649      	mov	r1, r9
 80046de:	4638      	mov	r0, r7
 80046e0:	47c0      	blx	r8
 80046e2:	3001      	adds	r0, #1
 80046e4:	d01e      	beq.n	8004724 <_printf_common+0xa4>
 80046e6:	6823      	ldr	r3, [r4, #0]
 80046e8:	68e5      	ldr	r5, [r4, #12]
 80046ea:	6832      	ldr	r2, [r6, #0]
 80046ec:	f003 0306 	and.w	r3, r3, #6
 80046f0:	2b04      	cmp	r3, #4
 80046f2:	bf08      	it	eq
 80046f4:	1aad      	subeq	r5, r5, r2
 80046f6:	68a3      	ldr	r3, [r4, #8]
 80046f8:	6922      	ldr	r2, [r4, #16]
 80046fa:	bf0c      	ite	eq
 80046fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004700:	2500      	movne	r5, #0
 8004702:	4293      	cmp	r3, r2
 8004704:	bfc4      	itt	gt
 8004706:	1a9b      	subgt	r3, r3, r2
 8004708:	18ed      	addgt	r5, r5, r3
 800470a:	2600      	movs	r6, #0
 800470c:	341a      	adds	r4, #26
 800470e:	42b5      	cmp	r5, r6
 8004710:	d11a      	bne.n	8004748 <_printf_common+0xc8>
 8004712:	2000      	movs	r0, #0
 8004714:	e008      	b.n	8004728 <_printf_common+0xa8>
 8004716:	2301      	movs	r3, #1
 8004718:	4652      	mov	r2, sl
 800471a:	4649      	mov	r1, r9
 800471c:	4638      	mov	r0, r7
 800471e:	47c0      	blx	r8
 8004720:	3001      	adds	r0, #1
 8004722:	d103      	bne.n	800472c <_printf_common+0xac>
 8004724:	f04f 30ff 	mov.w	r0, #4294967295
 8004728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800472c:	3501      	adds	r5, #1
 800472e:	e7c6      	b.n	80046be <_printf_common+0x3e>
 8004730:	18e1      	adds	r1, r4, r3
 8004732:	1c5a      	adds	r2, r3, #1
 8004734:	2030      	movs	r0, #48	; 0x30
 8004736:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800473a:	4422      	add	r2, r4
 800473c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004740:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004744:	3302      	adds	r3, #2
 8004746:	e7c7      	b.n	80046d8 <_printf_common+0x58>
 8004748:	2301      	movs	r3, #1
 800474a:	4622      	mov	r2, r4
 800474c:	4649      	mov	r1, r9
 800474e:	4638      	mov	r0, r7
 8004750:	47c0      	blx	r8
 8004752:	3001      	adds	r0, #1
 8004754:	d0e6      	beq.n	8004724 <_printf_common+0xa4>
 8004756:	3601      	adds	r6, #1
 8004758:	e7d9      	b.n	800470e <_printf_common+0x8e>
	...

0800475c <_printf_i>:
 800475c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004760:	7e0f      	ldrb	r7, [r1, #24]
 8004762:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004764:	2f78      	cmp	r7, #120	; 0x78
 8004766:	4691      	mov	r9, r2
 8004768:	4680      	mov	r8, r0
 800476a:	460c      	mov	r4, r1
 800476c:	469a      	mov	sl, r3
 800476e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004772:	d807      	bhi.n	8004784 <_printf_i+0x28>
 8004774:	2f62      	cmp	r7, #98	; 0x62
 8004776:	d80a      	bhi.n	800478e <_printf_i+0x32>
 8004778:	2f00      	cmp	r7, #0
 800477a:	f000 80d8 	beq.w	800492e <_printf_i+0x1d2>
 800477e:	2f58      	cmp	r7, #88	; 0x58
 8004780:	f000 80a3 	beq.w	80048ca <_printf_i+0x16e>
 8004784:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004788:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800478c:	e03a      	b.n	8004804 <_printf_i+0xa8>
 800478e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004792:	2b15      	cmp	r3, #21
 8004794:	d8f6      	bhi.n	8004784 <_printf_i+0x28>
 8004796:	a101      	add	r1, pc, #4	; (adr r1, 800479c <_printf_i+0x40>)
 8004798:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800479c:	080047f5 	.word	0x080047f5
 80047a0:	08004809 	.word	0x08004809
 80047a4:	08004785 	.word	0x08004785
 80047a8:	08004785 	.word	0x08004785
 80047ac:	08004785 	.word	0x08004785
 80047b0:	08004785 	.word	0x08004785
 80047b4:	08004809 	.word	0x08004809
 80047b8:	08004785 	.word	0x08004785
 80047bc:	08004785 	.word	0x08004785
 80047c0:	08004785 	.word	0x08004785
 80047c4:	08004785 	.word	0x08004785
 80047c8:	08004915 	.word	0x08004915
 80047cc:	08004839 	.word	0x08004839
 80047d0:	080048f7 	.word	0x080048f7
 80047d4:	08004785 	.word	0x08004785
 80047d8:	08004785 	.word	0x08004785
 80047dc:	08004937 	.word	0x08004937
 80047e0:	08004785 	.word	0x08004785
 80047e4:	08004839 	.word	0x08004839
 80047e8:	08004785 	.word	0x08004785
 80047ec:	08004785 	.word	0x08004785
 80047f0:	080048ff 	.word	0x080048ff
 80047f4:	682b      	ldr	r3, [r5, #0]
 80047f6:	1d1a      	adds	r2, r3, #4
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	602a      	str	r2, [r5, #0]
 80047fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004800:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004804:	2301      	movs	r3, #1
 8004806:	e0a3      	b.n	8004950 <_printf_i+0x1f4>
 8004808:	6820      	ldr	r0, [r4, #0]
 800480a:	6829      	ldr	r1, [r5, #0]
 800480c:	0606      	lsls	r6, r0, #24
 800480e:	f101 0304 	add.w	r3, r1, #4
 8004812:	d50a      	bpl.n	800482a <_printf_i+0xce>
 8004814:	680e      	ldr	r6, [r1, #0]
 8004816:	602b      	str	r3, [r5, #0]
 8004818:	2e00      	cmp	r6, #0
 800481a:	da03      	bge.n	8004824 <_printf_i+0xc8>
 800481c:	232d      	movs	r3, #45	; 0x2d
 800481e:	4276      	negs	r6, r6
 8004820:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004824:	485e      	ldr	r0, [pc, #376]	; (80049a0 <_printf_i+0x244>)
 8004826:	230a      	movs	r3, #10
 8004828:	e019      	b.n	800485e <_printf_i+0x102>
 800482a:	680e      	ldr	r6, [r1, #0]
 800482c:	602b      	str	r3, [r5, #0]
 800482e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004832:	bf18      	it	ne
 8004834:	b236      	sxthne	r6, r6
 8004836:	e7ef      	b.n	8004818 <_printf_i+0xbc>
 8004838:	682b      	ldr	r3, [r5, #0]
 800483a:	6820      	ldr	r0, [r4, #0]
 800483c:	1d19      	adds	r1, r3, #4
 800483e:	6029      	str	r1, [r5, #0]
 8004840:	0601      	lsls	r1, r0, #24
 8004842:	d501      	bpl.n	8004848 <_printf_i+0xec>
 8004844:	681e      	ldr	r6, [r3, #0]
 8004846:	e002      	b.n	800484e <_printf_i+0xf2>
 8004848:	0646      	lsls	r6, r0, #25
 800484a:	d5fb      	bpl.n	8004844 <_printf_i+0xe8>
 800484c:	881e      	ldrh	r6, [r3, #0]
 800484e:	4854      	ldr	r0, [pc, #336]	; (80049a0 <_printf_i+0x244>)
 8004850:	2f6f      	cmp	r7, #111	; 0x6f
 8004852:	bf0c      	ite	eq
 8004854:	2308      	moveq	r3, #8
 8004856:	230a      	movne	r3, #10
 8004858:	2100      	movs	r1, #0
 800485a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800485e:	6865      	ldr	r5, [r4, #4]
 8004860:	60a5      	str	r5, [r4, #8]
 8004862:	2d00      	cmp	r5, #0
 8004864:	bfa2      	ittt	ge
 8004866:	6821      	ldrge	r1, [r4, #0]
 8004868:	f021 0104 	bicge.w	r1, r1, #4
 800486c:	6021      	strge	r1, [r4, #0]
 800486e:	b90e      	cbnz	r6, 8004874 <_printf_i+0x118>
 8004870:	2d00      	cmp	r5, #0
 8004872:	d04d      	beq.n	8004910 <_printf_i+0x1b4>
 8004874:	4615      	mov	r5, r2
 8004876:	fbb6 f1f3 	udiv	r1, r6, r3
 800487a:	fb03 6711 	mls	r7, r3, r1, r6
 800487e:	5dc7      	ldrb	r7, [r0, r7]
 8004880:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004884:	4637      	mov	r7, r6
 8004886:	42bb      	cmp	r3, r7
 8004888:	460e      	mov	r6, r1
 800488a:	d9f4      	bls.n	8004876 <_printf_i+0x11a>
 800488c:	2b08      	cmp	r3, #8
 800488e:	d10b      	bne.n	80048a8 <_printf_i+0x14c>
 8004890:	6823      	ldr	r3, [r4, #0]
 8004892:	07de      	lsls	r6, r3, #31
 8004894:	d508      	bpl.n	80048a8 <_printf_i+0x14c>
 8004896:	6923      	ldr	r3, [r4, #16]
 8004898:	6861      	ldr	r1, [r4, #4]
 800489a:	4299      	cmp	r1, r3
 800489c:	bfde      	ittt	le
 800489e:	2330      	movle	r3, #48	; 0x30
 80048a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80048a4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80048a8:	1b52      	subs	r2, r2, r5
 80048aa:	6122      	str	r2, [r4, #16]
 80048ac:	f8cd a000 	str.w	sl, [sp]
 80048b0:	464b      	mov	r3, r9
 80048b2:	aa03      	add	r2, sp, #12
 80048b4:	4621      	mov	r1, r4
 80048b6:	4640      	mov	r0, r8
 80048b8:	f7ff fee2 	bl	8004680 <_printf_common>
 80048bc:	3001      	adds	r0, #1
 80048be:	d14c      	bne.n	800495a <_printf_i+0x1fe>
 80048c0:	f04f 30ff 	mov.w	r0, #4294967295
 80048c4:	b004      	add	sp, #16
 80048c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048ca:	4835      	ldr	r0, [pc, #212]	; (80049a0 <_printf_i+0x244>)
 80048cc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80048d0:	6829      	ldr	r1, [r5, #0]
 80048d2:	6823      	ldr	r3, [r4, #0]
 80048d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80048d8:	6029      	str	r1, [r5, #0]
 80048da:	061d      	lsls	r5, r3, #24
 80048dc:	d514      	bpl.n	8004908 <_printf_i+0x1ac>
 80048de:	07df      	lsls	r7, r3, #31
 80048e0:	bf44      	itt	mi
 80048e2:	f043 0320 	orrmi.w	r3, r3, #32
 80048e6:	6023      	strmi	r3, [r4, #0]
 80048e8:	b91e      	cbnz	r6, 80048f2 <_printf_i+0x196>
 80048ea:	6823      	ldr	r3, [r4, #0]
 80048ec:	f023 0320 	bic.w	r3, r3, #32
 80048f0:	6023      	str	r3, [r4, #0]
 80048f2:	2310      	movs	r3, #16
 80048f4:	e7b0      	b.n	8004858 <_printf_i+0xfc>
 80048f6:	6823      	ldr	r3, [r4, #0]
 80048f8:	f043 0320 	orr.w	r3, r3, #32
 80048fc:	6023      	str	r3, [r4, #0]
 80048fe:	2378      	movs	r3, #120	; 0x78
 8004900:	4828      	ldr	r0, [pc, #160]	; (80049a4 <_printf_i+0x248>)
 8004902:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004906:	e7e3      	b.n	80048d0 <_printf_i+0x174>
 8004908:	0659      	lsls	r1, r3, #25
 800490a:	bf48      	it	mi
 800490c:	b2b6      	uxthmi	r6, r6
 800490e:	e7e6      	b.n	80048de <_printf_i+0x182>
 8004910:	4615      	mov	r5, r2
 8004912:	e7bb      	b.n	800488c <_printf_i+0x130>
 8004914:	682b      	ldr	r3, [r5, #0]
 8004916:	6826      	ldr	r6, [r4, #0]
 8004918:	6961      	ldr	r1, [r4, #20]
 800491a:	1d18      	adds	r0, r3, #4
 800491c:	6028      	str	r0, [r5, #0]
 800491e:	0635      	lsls	r5, r6, #24
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	d501      	bpl.n	8004928 <_printf_i+0x1cc>
 8004924:	6019      	str	r1, [r3, #0]
 8004926:	e002      	b.n	800492e <_printf_i+0x1d2>
 8004928:	0670      	lsls	r0, r6, #25
 800492a:	d5fb      	bpl.n	8004924 <_printf_i+0x1c8>
 800492c:	8019      	strh	r1, [r3, #0]
 800492e:	2300      	movs	r3, #0
 8004930:	6123      	str	r3, [r4, #16]
 8004932:	4615      	mov	r5, r2
 8004934:	e7ba      	b.n	80048ac <_printf_i+0x150>
 8004936:	682b      	ldr	r3, [r5, #0]
 8004938:	1d1a      	adds	r2, r3, #4
 800493a:	602a      	str	r2, [r5, #0]
 800493c:	681d      	ldr	r5, [r3, #0]
 800493e:	6862      	ldr	r2, [r4, #4]
 8004940:	2100      	movs	r1, #0
 8004942:	4628      	mov	r0, r5
 8004944:	f7fb fc4c 	bl	80001e0 <memchr>
 8004948:	b108      	cbz	r0, 800494e <_printf_i+0x1f2>
 800494a:	1b40      	subs	r0, r0, r5
 800494c:	6060      	str	r0, [r4, #4]
 800494e:	6863      	ldr	r3, [r4, #4]
 8004950:	6123      	str	r3, [r4, #16]
 8004952:	2300      	movs	r3, #0
 8004954:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004958:	e7a8      	b.n	80048ac <_printf_i+0x150>
 800495a:	6923      	ldr	r3, [r4, #16]
 800495c:	462a      	mov	r2, r5
 800495e:	4649      	mov	r1, r9
 8004960:	4640      	mov	r0, r8
 8004962:	47d0      	blx	sl
 8004964:	3001      	adds	r0, #1
 8004966:	d0ab      	beq.n	80048c0 <_printf_i+0x164>
 8004968:	6823      	ldr	r3, [r4, #0]
 800496a:	079b      	lsls	r3, r3, #30
 800496c:	d413      	bmi.n	8004996 <_printf_i+0x23a>
 800496e:	68e0      	ldr	r0, [r4, #12]
 8004970:	9b03      	ldr	r3, [sp, #12]
 8004972:	4298      	cmp	r0, r3
 8004974:	bfb8      	it	lt
 8004976:	4618      	movlt	r0, r3
 8004978:	e7a4      	b.n	80048c4 <_printf_i+0x168>
 800497a:	2301      	movs	r3, #1
 800497c:	4632      	mov	r2, r6
 800497e:	4649      	mov	r1, r9
 8004980:	4640      	mov	r0, r8
 8004982:	47d0      	blx	sl
 8004984:	3001      	adds	r0, #1
 8004986:	d09b      	beq.n	80048c0 <_printf_i+0x164>
 8004988:	3501      	adds	r5, #1
 800498a:	68e3      	ldr	r3, [r4, #12]
 800498c:	9903      	ldr	r1, [sp, #12]
 800498e:	1a5b      	subs	r3, r3, r1
 8004990:	42ab      	cmp	r3, r5
 8004992:	dcf2      	bgt.n	800497a <_printf_i+0x21e>
 8004994:	e7eb      	b.n	800496e <_printf_i+0x212>
 8004996:	2500      	movs	r5, #0
 8004998:	f104 0619 	add.w	r6, r4, #25
 800499c:	e7f5      	b.n	800498a <_printf_i+0x22e>
 800499e:	bf00      	nop
 80049a0:	08005079 	.word	0x08005079
 80049a4:	0800508a 	.word	0x0800508a

080049a8 <_sbrk_r>:
 80049a8:	b538      	push	{r3, r4, r5, lr}
 80049aa:	4d06      	ldr	r5, [pc, #24]	; (80049c4 <_sbrk_r+0x1c>)
 80049ac:	2300      	movs	r3, #0
 80049ae:	4604      	mov	r4, r0
 80049b0:	4608      	mov	r0, r1
 80049b2:	602b      	str	r3, [r5, #0]
 80049b4:	f7fc f948 	bl	8000c48 <_sbrk>
 80049b8:	1c43      	adds	r3, r0, #1
 80049ba:	d102      	bne.n	80049c2 <_sbrk_r+0x1a>
 80049bc:	682b      	ldr	r3, [r5, #0]
 80049be:	b103      	cbz	r3, 80049c2 <_sbrk_r+0x1a>
 80049c0:	6023      	str	r3, [r4, #0]
 80049c2:	bd38      	pop	{r3, r4, r5, pc}
 80049c4:	200001f4 	.word	0x200001f4

080049c8 <__sread>:
 80049c8:	b510      	push	{r4, lr}
 80049ca:	460c      	mov	r4, r1
 80049cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049d0:	f000 fab2 	bl	8004f38 <_read_r>
 80049d4:	2800      	cmp	r0, #0
 80049d6:	bfab      	itete	ge
 80049d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80049da:	89a3      	ldrhlt	r3, [r4, #12]
 80049dc:	181b      	addge	r3, r3, r0
 80049de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80049e2:	bfac      	ite	ge
 80049e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80049e6:	81a3      	strhlt	r3, [r4, #12]
 80049e8:	bd10      	pop	{r4, pc}

080049ea <__swrite>:
 80049ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049ee:	461f      	mov	r7, r3
 80049f0:	898b      	ldrh	r3, [r1, #12]
 80049f2:	05db      	lsls	r3, r3, #23
 80049f4:	4605      	mov	r5, r0
 80049f6:	460c      	mov	r4, r1
 80049f8:	4616      	mov	r6, r2
 80049fa:	d505      	bpl.n	8004a08 <__swrite+0x1e>
 80049fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a00:	2302      	movs	r3, #2
 8004a02:	2200      	movs	r2, #0
 8004a04:	f000 f9c8 	bl	8004d98 <_lseek_r>
 8004a08:	89a3      	ldrh	r3, [r4, #12]
 8004a0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a12:	81a3      	strh	r3, [r4, #12]
 8004a14:	4632      	mov	r2, r6
 8004a16:	463b      	mov	r3, r7
 8004a18:	4628      	mov	r0, r5
 8004a1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a1e:	f000 b869 	b.w	8004af4 <_write_r>

08004a22 <__sseek>:
 8004a22:	b510      	push	{r4, lr}
 8004a24:	460c      	mov	r4, r1
 8004a26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a2a:	f000 f9b5 	bl	8004d98 <_lseek_r>
 8004a2e:	1c43      	adds	r3, r0, #1
 8004a30:	89a3      	ldrh	r3, [r4, #12]
 8004a32:	bf15      	itete	ne
 8004a34:	6560      	strne	r0, [r4, #84]	; 0x54
 8004a36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004a3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004a3e:	81a3      	strheq	r3, [r4, #12]
 8004a40:	bf18      	it	ne
 8004a42:	81a3      	strhne	r3, [r4, #12]
 8004a44:	bd10      	pop	{r4, pc}

08004a46 <__sclose>:
 8004a46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a4a:	f000 b8d3 	b.w	8004bf4 <_close_r>
	...

08004a50 <__swbuf_r>:
 8004a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a52:	460e      	mov	r6, r1
 8004a54:	4614      	mov	r4, r2
 8004a56:	4605      	mov	r5, r0
 8004a58:	b118      	cbz	r0, 8004a62 <__swbuf_r+0x12>
 8004a5a:	6983      	ldr	r3, [r0, #24]
 8004a5c:	b90b      	cbnz	r3, 8004a62 <__swbuf_r+0x12>
 8004a5e:	f7ff fb81 	bl	8004164 <__sinit>
 8004a62:	4b21      	ldr	r3, [pc, #132]	; (8004ae8 <__swbuf_r+0x98>)
 8004a64:	429c      	cmp	r4, r3
 8004a66:	d12b      	bne.n	8004ac0 <__swbuf_r+0x70>
 8004a68:	686c      	ldr	r4, [r5, #4]
 8004a6a:	69a3      	ldr	r3, [r4, #24]
 8004a6c:	60a3      	str	r3, [r4, #8]
 8004a6e:	89a3      	ldrh	r3, [r4, #12]
 8004a70:	071a      	lsls	r2, r3, #28
 8004a72:	d52f      	bpl.n	8004ad4 <__swbuf_r+0x84>
 8004a74:	6923      	ldr	r3, [r4, #16]
 8004a76:	b36b      	cbz	r3, 8004ad4 <__swbuf_r+0x84>
 8004a78:	6923      	ldr	r3, [r4, #16]
 8004a7a:	6820      	ldr	r0, [r4, #0]
 8004a7c:	1ac0      	subs	r0, r0, r3
 8004a7e:	6963      	ldr	r3, [r4, #20]
 8004a80:	b2f6      	uxtb	r6, r6
 8004a82:	4283      	cmp	r3, r0
 8004a84:	4637      	mov	r7, r6
 8004a86:	dc04      	bgt.n	8004a92 <__swbuf_r+0x42>
 8004a88:	4621      	mov	r1, r4
 8004a8a:	4628      	mov	r0, r5
 8004a8c:	f000 f948 	bl	8004d20 <_fflush_r>
 8004a90:	bb30      	cbnz	r0, 8004ae0 <__swbuf_r+0x90>
 8004a92:	68a3      	ldr	r3, [r4, #8]
 8004a94:	3b01      	subs	r3, #1
 8004a96:	60a3      	str	r3, [r4, #8]
 8004a98:	6823      	ldr	r3, [r4, #0]
 8004a9a:	1c5a      	adds	r2, r3, #1
 8004a9c:	6022      	str	r2, [r4, #0]
 8004a9e:	701e      	strb	r6, [r3, #0]
 8004aa0:	6963      	ldr	r3, [r4, #20]
 8004aa2:	3001      	adds	r0, #1
 8004aa4:	4283      	cmp	r3, r0
 8004aa6:	d004      	beq.n	8004ab2 <__swbuf_r+0x62>
 8004aa8:	89a3      	ldrh	r3, [r4, #12]
 8004aaa:	07db      	lsls	r3, r3, #31
 8004aac:	d506      	bpl.n	8004abc <__swbuf_r+0x6c>
 8004aae:	2e0a      	cmp	r6, #10
 8004ab0:	d104      	bne.n	8004abc <__swbuf_r+0x6c>
 8004ab2:	4621      	mov	r1, r4
 8004ab4:	4628      	mov	r0, r5
 8004ab6:	f000 f933 	bl	8004d20 <_fflush_r>
 8004aba:	b988      	cbnz	r0, 8004ae0 <__swbuf_r+0x90>
 8004abc:	4638      	mov	r0, r7
 8004abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ac0:	4b0a      	ldr	r3, [pc, #40]	; (8004aec <__swbuf_r+0x9c>)
 8004ac2:	429c      	cmp	r4, r3
 8004ac4:	d101      	bne.n	8004aca <__swbuf_r+0x7a>
 8004ac6:	68ac      	ldr	r4, [r5, #8]
 8004ac8:	e7cf      	b.n	8004a6a <__swbuf_r+0x1a>
 8004aca:	4b09      	ldr	r3, [pc, #36]	; (8004af0 <__swbuf_r+0xa0>)
 8004acc:	429c      	cmp	r4, r3
 8004ace:	bf08      	it	eq
 8004ad0:	68ec      	ldreq	r4, [r5, #12]
 8004ad2:	e7ca      	b.n	8004a6a <__swbuf_r+0x1a>
 8004ad4:	4621      	mov	r1, r4
 8004ad6:	4628      	mov	r0, r5
 8004ad8:	f000 f81e 	bl	8004b18 <__swsetup_r>
 8004adc:	2800      	cmp	r0, #0
 8004ade:	d0cb      	beq.n	8004a78 <__swbuf_r+0x28>
 8004ae0:	f04f 37ff 	mov.w	r7, #4294967295
 8004ae4:	e7ea      	b.n	8004abc <__swbuf_r+0x6c>
 8004ae6:	bf00      	nop
 8004ae8:	08005028 	.word	0x08005028
 8004aec:	08005048 	.word	0x08005048
 8004af0:	08005008 	.word	0x08005008

08004af4 <_write_r>:
 8004af4:	b538      	push	{r3, r4, r5, lr}
 8004af6:	4d07      	ldr	r5, [pc, #28]	; (8004b14 <_write_r+0x20>)
 8004af8:	4604      	mov	r4, r0
 8004afa:	4608      	mov	r0, r1
 8004afc:	4611      	mov	r1, r2
 8004afe:	2200      	movs	r2, #0
 8004b00:	602a      	str	r2, [r5, #0]
 8004b02:	461a      	mov	r2, r3
 8004b04:	f7fc f84f 	bl	8000ba6 <_write>
 8004b08:	1c43      	adds	r3, r0, #1
 8004b0a:	d102      	bne.n	8004b12 <_write_r+0x1e>
 8004b0c:	682b      	ldr	r3, [r5, #0]
 8004b0e:	b103      	cbz	r3, 8004b12 <_write_r+0x1e>
 8004b10:	6023      	str	r3, [r4, #0]
 8004b12:	bd38      	pop	{r3, r4, r5, pc}
 8004b14:	200001f4 	.word	0x200001f4

08004b18 <__swsetup_r>:
 8004b18:	4b32      	ldr	r3, [pc, #200]	; (8004be4 <__swsetup_r+0xcc>)
 8004b1a:	b570      	push	{r4, r5, r6, lr}
 8004b1c:	681d      	ldr	r5, [r3, #0]
 8004b1e:	4606      	mov	r6, r0
 8004b20:	460c      	mov	r4, r1
 8004b22:	b125      	cbz	r5, 8004b2e <__swsetup_r+0x16>
 8004b24:	69ab      	ldr	r3, [r5, #24]
 8004b26:	b913      	cbnz	r3, 8004b2e <__swsetup_r+0x16>
 8004b28:	4628      	mov	r0, r5
 8004b2a:	f7ff fb1b 	bl	8004164 <__sinit>
 8004b2e:	4b2e      	ldr	r3, [pc, #184]	; (8004be8 <__swsetup_r+0xd0>)
 8004b30:	429c      	cmp	r4, r3
 8004b32:	d10f      	bne.n	8004b54 <__swsetup_r+0x3c>
 8004b34:	686c      	ldr	r4, [r5, #4]
 8004b36:	89a3      	ldrh	r3, [r4, #12]
 8004b38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004b3c:	0719      	lsls	r1, r3, #28
 8004b3e:	d42c      	bmi.n	8004b9a <__swsetup_r+0x82>
 8004b40:	06dd      	lsls	r5, r3, #27
 8004b42:	d411      	bmi.n	8004b68 <__swsetup_r+0x50>
 8004b44:	2309      	movs	r3, #9
 8004b46:	6033      	str	r3, [r6, #0]
 8004b48:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004b4c:	81a3      	strh	r3, [r4, #12]
 8004b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8004b52:	e03e      	b.n	8004bd2 <__swsetup_r+0xba>
 8004b54:	4b25      	ldr	r3, [pc, #148]	; (8004bec <__swsetup_r+0xd4>)
 8004b56:	429c      	cmp	r4, r3
 8004b58:	d101      	bne.n	8004b5e <__swsetup_r+0x46>
 8004b5a:	68ac      	ldr	r4, [r5, #8]
 8004b5c:	e7eb      	b.n	8004b36 <__swsetup_r+0x1e>
 8004b5e:	4b24      	ldr	r3, [pc, #144]	; (8004bf0 <__swsetup_r+0xd8>)
 8004b60:	429c      	cmp	r4, r3
 8004b62:	bf08      	it	eq
 8004b64:	68ec      	ldreq	r4, [r5, #12]
 8004b66:	e7e6      	b.n	8004b36 <__swsetup_r+0x1e>
 8004b68:	0758      	lsls	r0, r3, #29
 8004b6a:	d512      	bpl.n	8004b92 <__swsetup_r+0x7a>
 8004b6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b6e:	b141      	cbz	r1, 8004b82 <__swsetup_r+0x6a>
 8004b70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b74:	4299      	cmp	r1, r3
 8004b76:	d002      	beq.n	8004b7e <__swsetup_r+0x66>
 8004b78:	4630      	mov	r0, r6
 8004b7a:	f000 f991 	bl	8004ea0 <_free_r>
 8004b7e:	2300      	movs	r3, #0
 8004b80:	6363      	str	r3, [r4, #52]	; 0x34
 8004b82:	89a3      	ldrh	r3, [r4, #12]
 8004b84:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004b88:	81a3      	strh	r3, [r4, #12]
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	6063      	str	r3, [r4, #4]
 8004b8e:	6923      	ldr	r3, [r4, #16]
 8004b90:	6023      	str	r3, [r4, #0]
 8004b92:	89a3      	ldrh	r3, [r4, #12]
 8004b94:	f043 0308 	orr.w	r3, r3, #8
 8004b98:	81a3      	strh	r3, [r4, #12]
 8004b9a:	6923      	ldr	r3, [r4, #16]
 8004b9c:	b94b      	cbnz	r3, 8004bb2 <__swsetup_r+0x9a>
 8004b9e:	89a3      	ldrh	r3, [r4, #12]
 8004ba0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004ba4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ba8:	d003      	beq.n	8004bb2 <__swsetup_r+0x9a>
 8004baa:	4621      	mov	r1, r4
 8004bac:	4630      	mov	r0, r6
 8004bae:	f000 f92b 	bl	8004e08 <__smakebuf_r>
 8004bb2:	89a0      	ldrh	r0, [r4, #12]
 8004bb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004bb8:	f010 0301 	ands.w	r3, r0, #1
 8004bbc:	d00a      	beq.n	8004bd4 <__swsetup_r+0xbc>
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	60a3      	str	r3, [r4, #8]
 8004bc2:	6963      	ldr	r3, [r4, #20]
 8004bc4:	425b      	negs	r3, r3
 8004bc6:	61a3      	str	r3, [r4, #24]
 8004bc8:	6923      	ldr	r3, [r4, #16]
 8004bca:	b943      	cbnz	r3, 8004bde <__swsetup_r+0xc6>
 8004bcc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004bd0:	d1ba      	bne.n	8004b48 <__swsetup_r+0x30>
 8004bd2:	bd70      	pop	{r4, r5, r6, pc}
 8004bd4:	0781      	lsls	r1, r0, #30
 8004bd6:	bf58      	it	pl
 8004bd8:	6963      	ldrpl	r3, [r4, #20]
 8004bda:	60a3      	str	r3, [r4, #8]
 8004bdc:	e7f4      	b.n	8004bc8 <__swsetup_r+0xb0>
 8004bde:	2000      	movs	r0, #0
 8004be0:	e7f7      	b.n	8004bd2 <__swsetup_r+0xba>
 8004be2:	bf00      	nop
 8004be4:	2000000c 	.word	0x2000000c
 8004be8:	08005028 	.word	0x08005028
 8004bec:	08005048 	.word	0x08005048
 8004bf0:	08005008 	.word	0x08005008

08004bf4 <_close_r>:
 8004bf4:	b538      	push	{r3, r4, r5, lr}
 8004bf6:	4d06      	ldr	r5, [pc, #24]	; (8004c10 <_close_r+0x1c>)
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	4604      	mov	r4, r0
 8004bfc:	4608      	mov	r0, r1
 8004bfe:	602b      	str	r3, [r5, #0]
 8004c00:	f7fb ffed 	bl	8000bde <_close>
 8004c04:	1c43      	adds	r3, r0, #1
 8004c06:	d102      	bne.n	8004c0e <_close_r+0x1a>
 8004c08:	682b      	ldr	r3, [r5, #0]
 8004c0a:	b103      	cbz	r3, 8004c0e <_close_r+0x1a>
 8004c0c:	6023      	str	r3, [r4, #0]
 8004c0e:	bd38      	pop	{r3, r4, r5, pc}
 8004c10:	200001f4 	.word	0x200001f4

08004c14 <__sflush_r>:
 8004c14:	898a      	ldrh	r2, [r1, #12]
 8004c16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c1a:	4605      	mov	r5, r0
 8004c1c:	0710      	lsls	r0, r2, #28
 8004c1e:	460c      	mov	r4, r1
 8004c20:	d458      	bmi.n	8004cd4 <__sflush_r+0xc0>
 8004c22:	684b      	ldr	r3, [r1, #4]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	dc05      	bgt.n	8004c34 <__sflush_r+0x20>
 8004c28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	dc02      	bgt.n	8004c34 <__sflush_r+0x20>
 8004c2e:	2000      	movs	r0, #0
 8004c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c36:	2e00      	cmp	r6, #0
 8004c38:	d0f9      	beq.n	8004c2e <__sflush_r+0x1a>
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004c40:	682f      	ldr	r7, [r5, #0]
 8004c42:	602b      	str	r3, [r5, #0]
 8004c44:	d032      	beq.n	8004cac <__sflush_r+0x98>
 8004c46:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004c48:	89a3      	ldrh	r3, [r4, #12]
 8004c4a:	075a      	lsls	r2, r3, #29
 8004c4c:	d505      	bpl.n	8004c5a <__sflush_r+0x46>
 8004c4e:	6863      	ldr	r3, [r4, #4]
 8004c50:	1ac0      	subs	r0, r0, r3
 8004c52:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004c54:	b10b      	cbz	r3, 8004c5a <__sflush_r+0x46>
 8004c56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004c58:	1ac0      	subs	r0, r0, r3
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c60:	6a21      	ldr	r1, [r4, #32]
 8004c62:	4628      	mov	r0, r5
 8004c64:	47b0      	blx	r6
 8004c66:	1c43      	adds	r3, r0, #1
 8004c68:	89a3      	ldrh	r3, [r4, #12]
 8004c6a:	d106      	bne.n	8004c7a <__sflush_r+0x66>
 8004c6c:	6829      	ldr	r1, [r5, #0]
 8004c6e:	291d      	cmp	r1, #29
 8004c70:	d82c      	bhi.n	8004ccc <__sflush_r+0xb8>
 8004c72:	4a2a      	ldr	r2, [pc, #168]	; (8004d1c <__sflush_r+0x108>)
 8004c74:	40ca      	lsrs	r2, r1
 8004c76:	07d6      	lsls	r6, r2, #31
 8004c78:	d528      	bpl.n	8004ccc <__sflush_r+0xb8>
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	6062      	str	r2, [r4, #4]
 8004c7e:	04d9      	lsls	r1, r3, #19
 8004c80:	6922      	ldr	r2, [r4, #16]
 8004c82:	6022      	str	r2, [r4, #0]
 8004c84:	d504      	bpl.n	8004c90 <__sflush_r+0x7c>
 8004c86:	1c42      	adds	r2, r0, #1
 8004c88:	d101      	bne.n	8004c8e <__sflush_r+0x7a>
 8004c8a:	682b      	ldr	r3, [r5, #0]
 8004c8c:	b903      	cbnz	r3, 8004c90 <__sflush_r+0x7c>
 8004c8e:	6560      	str	r0, [r4, #84]	; 0x54
 8004c90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c92:	602f      	str	r7, [r5, #0]
 8004c94:	2900      	cmp	r1, #0
 8004c96:	d0ca      	beq.n	8004c2e <__sflush_r+0x1a>
 8004c98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c9c:	4299      	cmp	r1, r3
 8004c9e:	d002      	beq.n	8004ca6 <__sflush_r+0x92>
 8004ca0:	4628      	mov	r0, r5
 8004ca2:	f000 f8fd 	bl	8004ea0 <_free_r>
 8004ca6:	2000      	movs	r0, #0
 8004ca8:	6360      	str	r0, [r4, #52]	; 0x34
 8004caa:	e7c1      	b.n	8004c30 <__sflush_r+0x1c>
 8004cac:	6a21      	ldr	r1, [r4, #32]
 8004cae:	2301      	movs	r3, #1
 8004cb0:	4628      	mov	r0, r5
 8004cb2:	47b0      	blx	r6
 8004cb4:	1c41      	adds	r1, r0, #1
 8004cb6:	d1c7      	bne.n	8004c48 <__sflush_r+0x34>
 8004cb8:	682b      	ldr	r3, [r5, #0]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d0c4      	beq.n	8004c48 <__sflush_r+0x34>
 8004cbe:	2b1d      	cmp	r3, #29
 8004cc0:	d001      	beq.n	8004cc6 <__sflush_r+0xb2>
 8004cc2:	2b16      	cmp	r3, #22
 8004cc4:	d101      	bne.n	8004cca <__sflush_r+0xb6>
 8004cc6:	602f      	str	r7, [r5, #0]
 8004cc8:	e7b1      	b.n	8004c2e <__sflush_r+0x1a>
 8004cca:	89a3      	ldrh	r3, [r4, #12]
 8004ccc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cd0:	81a3      	strh	r3, [r4, #12]
 8004cd2:	e7ad      	b.n	8004c30 <__sflush_r+0x1c>
 8004cd4:	690f      	ldr	r7, [r1, #16]
 8004cd6:	2f00      	cmp	r7, #0
 8004cd8:	d0a9      	beq.n	8004c2e <__sflush_r+0x1a>
 8004cda:	0793      	lsls	r3, r2, #30
 8004cdc:	680e      	ldr	r6, [r1, #0]
 8004cde:	bf08      	it	eq
 8004ce0:	694b      	ldreq	r3, [r1, #20]
 8004ce2:	600f      	str	r7, [r1, #0]
 8004ce4:	bf18      	it	ne
 8004ce6:	2300      	movne	r3, #0
 8004ce8:	eba6 0807 	sub.w	r8, r6, r7
 8004cec:	608b      	str	r3, [r1, #8]
 8004cee:	f1b8 0f00 	cmp.w	r8, #0
 8004cf2:	dd9c      	ble.n	8004c2e <__sflush_r+0x1a>
 8004cf4:	6a21      	ldr	r1, [r4, #32]
 8004cf6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004cf8:	4643      	mov	r3, r8
 8004cfa:	463a      	mov	r2, r7
 8004cfc:	4628      	mov	r0, r5
 8004cfe:	47b0      	blx	r6
 8004d00:	2800      	cmp	r0, #0
 8004d02:	dc06      	bgt.n	8004d12 <__sflush_r+0xfe>
 8004d04:	89a3      	ldrh	r3, [r4, #12]
 8004d06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d0a:	81a3      	strh	r3, [r4, #12]
 8004d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d10:	e78e      	b.n	8004c30 <__sflush_r+0x1c>
 8004d12:	4407      	add	r7, r0
 8004d14:	eba8 0800 	sub.w	r8, r8, r0
 8004d18:	e7e9      	b.n	8004cee <__sflush_r+0xda>
 8004d1a:	bf00      	nop
 8004d1c:	20400001 	.word	0x20400001

08004d20 <_fflush_r>:
 8004d20:	b538      	push	{r3, r4, r5, lr}
 8004d22:	690b      	ldr	r3, [r1, #16]
 8004d24:	4605      	mov	r5, r0
 8004d26:	460c      	mov	r4, r1
 8004d28:	b913      	cbnz	r3, 8004d30 <_fflush_r+0x10>
 8004d2a:	2500      	movs	r5, #0
 8004d2c:	4628      	mov	r0, r5
 8004d2e:	bd38      	pop	{r3, r4, r5, pc}
 8004d30:	b118      	cbz	r0, 8004d3a <_fflush_r+0x1a>
 8004d32:	6983      	ldr	r3, [r0, #24]
 8004d34:	b90b      	cbnz	r3, 8004d3a <_fflush_r+0x1a>
 8004d36:	f7ff fa15 	bl	8004164 <__sinit>
 8004d3a:	4b14      	ldr	r3, [pc, #80]	; (8004d8c <_fflush_r+0x6c>)
 8004d3c:	429c      	cmp	r4, r3
 8004d3e:	d11b      	bne.n	8004d78 <_fflush_r+0x58>
 8004d40:	686c      	ldr	r4, [r5, #4]
 8004d42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d0ef      	beq.n	8004d2a <_fflush_r+0xa>
 8004d4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004d4c:	07d0      	lsls	r0, r2, #31
 8004d4e:	d404      	bmi.n	8004d5a <_fflush_r+0x3a>
 8004d50:	0599      	lsls	r1, r3, #22
 8004d52:	d402      	bmi.n	8004d5a <_fflush_r+0x3a>
 8004d54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d56:	f7ff faa3 	bl	80042a0 <__retarget_lock_acquire_recursive>
 8004d5a:	4628      	mov	r0, r5
 8004d5c:	4621      	mov	r1, r4
 8004d5e:	f7ff ff59 	bl	8004c14 <__sflush_r>
 8004d62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d64:	07da      	lsls	r2, r3, #31
 8004d66:	4605      	mov	r5, r0
 8004d68:	d4e0      	bmi.n	8004d2c <_fflush_r+0xc>
 8004d6a:	89a3      	ldrh	r3, [r4, #12]
 8004d6c:	059b      	lsls	r3, r3, #22
 8004d6e:	d4dd      	bmi.n	8004d2c <_fflush_r+0xc>
 8004d70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d72:	f7ff fa96 	bl	80042a2 <__retarget_lock_release_recursive>
 8004d76:	e7d9      	b.n	8004d2c <_fflush_r+0xc>
 8004d78:	4b05      	ldr	r3, [pc, #20]	; (8004d90 <_fflush_r+0x70>)
 8004d7a:	429c      	cmp	r4, r3
 8004d7c:	d101      	bne.n	8004d82 <_fflush_r+0x62>
 8004d7e:	68ac      	ldr	r4, [r5, #8]
 8004d80:	e7df      	b.n	8004d42 <_fflush_r+0x22>
 8004d82:	4b04      	ldr	r3, [pc, #16]	; (8004d94 <_fflush_r+0x74>)
 8004d84:	429c      	cmp	r4, r3
 8004d86:	bf08      	it	eq
 8004d88:	68ec      	ldreq	r4, [r5, #12]
 8004d8a:	e7da      	b.n	8004d42 <_fflush_r+0x22>
 8004d8c:	08005028 	.word	0x08005028
 8004d90:	08005048 	.word	0x08005048
 8004d94:	08005008 	.word	0x08005008

08004d98 <_lseek_r>:
 8004d98:	b538      	push	{r3, r4, r5, lr}
 8004d9a:	4d07      	ldr	r5, [pc, #28]	; (8004db8 <_lseek_r+0x20>)
 8004d9c:	4604      	mov	r4, r0
 8004d9e:	4608      	mov	r0, r1
 8004da0:	4611      	mov	r1, r2
 8004da2:	2200      	movs	r2, #0
 8004da4:	602a      	str	r2, [r5, #0]
 8004da6:	461a      	mov	r2, r3
 8004da8:	f7fb ff40 	bl	8000c2c <_lseek>
 8004dac:	1c43      	adds	r3, r0, #1
 8004dae:	d102      	bne.n	8004db6 <_lseek_r+0x1e>
 8004db0:	682b      	ldr	r3, [r5, #0]
 8004db2:	b103      	cbz	r3, 8004db6 <_lseek_r+0x1e>
 8004db4:	6023      	str	r3, [r4, #0]
 8004db6:	bd38      	pop	{r3, r4, r5, pc}
 8004db8:	200001f4 	.word	0x200001f4

08004dbc <__swhatbuf_r>:
 8004dbc:	b570      	push	{r4, r5, r6, lr}
 8004dbe:	460e      	mov	r6, r1
 8004dc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dc4:	2900      	cmp	r1, #0
 8004dc6:	b096      	sub	sp, #88	; 0x58
 8004dc8:	4614      	mov	r4, r2
 8004dca:	461d      	mov	r5, r3
 8004dcc:	da08      	bge.n	8004de0 <__swhatbuf_r+0x24>
 8004dce:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	602a      	str	r2, [r5, #0]
 8004dd6:	061a      	lsls	r2, r3, #24
 8004dd8:	d410      	bmi.n	8004dfc <__swhatbuf_r+0x40>
 8004dda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004dde:	e00e      	b.n	8004dfe <__swhatbuf_r+0x42>
 8004de0:	466a      	mov	r2, sp
 8004de2:	f000 f8bb 	bl	8004f5c <_fstat_r>
 8004de6:	2800      	cmp	r0, #0
 8004de8:	dbf1      	blt.n	8004dce <__swhatbuf_r+0x12>
 8004dea:	9a01      	ldr	r2, [sp, #4]
 8004dec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004df0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004df4:	425a      	negs	r2, r3
 8004df6:	415a      	adcs	r2, r3
 8004df8:	602a      	str	r2, [r5, #0]
 8004dfa:	e7ee      	b.n	8004dda <__swhatbuf_r+0x1e>
 8004dfc:	2340      	movs	r3, #64	; 0x40
 8004dfe:	2000      	movs	r0, #0
 8004e00:	6023      	str	r3, [r4, #0]
 8004e02:	b016      	add	sp, #88	; 0x58
 8004e04:	bd70      	pop	{r4, r5, r6, pc}
	...

08004e08 <__smakebuf_r>:
 8004e08:	898b      	ldrh	r3, [r1, #12]
 8004e0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004e0c:	079d      	lsls	r5, r3, #30
 8004e0e:	4606      	mov	r6, r0
 8004e10:	460c      	mov	r4, r1
 8004e12:	d507      	bpl.n	8004e24 <__smakebuf_r+0x1c>
 8004e14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004e18:	6023      	str	r3, [r4, #0]
 8004e1a:	6123      	str	r3, [r4, #16]
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	6163      	str	r3, [r4, #20]
 8004e20:	b002      	add	sp, #8
 8004e22:	bd70      	pop	{r4, r5, r6, pc}
 8004e24:	ab01      	add	r3, sp, #4
 8004e26:	466a      	mov	r2, sp
 8004e28:	f7ff ffc8 	bl	8004dbc <__swhatbuf_r>
 8004e2c:	9900      	ldr	r1, [sp, #0]
 8004e2e:	4605      	mov	r5, r0
 8004e30:	4630      	mov	r0, r6
 8004e32:	f7ff fa57 	bl	80042e4 <_malloc_r>
 8004e36:	b948      	cbnz	r0, 8004e4c <__smakebuf_r+0x44>
 8004e38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e3c:	059a      	lsls	r2, r3, #22
 8004e3e:	d4ef      	bmi.n	8004e20 <__smakebuf_r+0x18>
 8004e40:	f023 0303 	bic.w	r3, r3, #3
 8004e44:	f043 0302 	orr.w	r3, r3, #2
 8004e48:	81a3      	strh	r3, [r4, #12]
 8004e4a:	e7e3      	b.n	8004e14 <__smakebuf_r+0xc>
 8004e4c:	4b0d      	ldr	r3, [pc, #52]	; (8004e84 <__smakebuf_r+0x7c>)
 8004e4e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004e50:	89a3      	ldrh	r3, [r4, #12]
 8004e52:	6020      	str	r0, [r4, #0]
 8004e54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e58:	81a3      	strh	r3, [r4, #12]
 8004e5a:	9b00      	ldr	r3, [sp, #0]
 8004e5c:	6163      	str	r3, [r4, #20]
 8004e5e:	9b01      	ldr	r3, [sp, #4]
 8004e60:	6120      	str	r0, [r4, #16]
 8004e62:	b15b      	cbz	r3, 8004e7c <__smakebuf_r+0x74>
 8004e64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e68:	4630      	mov	r0, r6
 8004e6a:	f000 f889 	bl	8004f80 <_isatty_r>
 8004e6e:	b128      	cbz	r0, 8004e7c <__smakebuf_r+0x74>
 8004e70:	89a3      	ldrh	r3, [r4, #12]
 8004e72:	f023 0303 	bic.w	r3, r3, #3
 8004e76:	f043 0301 	orr.w	r3, r3, #1
 8004e7a:	81a3      	strh	r3, [r4, #12]
 8004e7c:	89a0      	ldrh	r0, [r4, #12]
 8004e7e:	4305      	orrs	r5, r0
 8004e80:	81a5      	strh	r5, [r4, #12]
 8004e82:	e7cd      	b.n	8004e20 <__smakebuf_r+0x18>
 8004e84:	080040fd 	.word	0x080040fd

08004e88 <__malloc_lock>:
 8004e88:	4801      	ldr	r0, [pc, #4]	; (8004e90 <__malloc_lock+0x8>)
 8004e8a:	f7ff ba09 	b.w	80042a0 <__retarget_lock_acquire_recursive>
 8004e8e:	bf00      	nop
 8004e90:	200001e8 	.word	0x200001e8

08004e94 <__malloc_unlock>:
 8004e94:	4801      	ldr	r0, [pc, #4]	; (8004e9c <__malloc_unlock+0x8>)
 8004e96:	f7ff ba04 	b.w	80042a2 <__retarget_lock_release_recursive>
 8004e9a:	bf00      	nop
 8004e9c:	200001e8 	.word	0x200001e8

08004ea0 <_free_r>:
 8004ea0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004ea2:	2900      	cmp	r1, #0
 8004ea4:	d044      	beq.n	8004f30 <_free_r+0x90>
 8004ea6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004eaa:	9001      	str	r0, [sp, #4]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	f1a1 0404 	sub.w	r4, r1, #4
 8004eb2:	bfb8      	it	lt
 8004eb4:	18e4      	addlt	r4, r4, r3
 8004eb6:	f7ff ffe7 	bl	8004e88 <__malloc_lock>
 8004eba:	4a1e      	ldr	r2, [pc, #120]	; (8004f34 <_free_r+0x94>)
 8004ebc:	9801      	ldr	r0, [sp, #4]
 8004ebe:	6813      	ldr	r3, [r2, #0]
 8004ec0:	b933      	cbnz	r3, 8004ed0 <_free_r+0x30>
 8004ec2:	6063      	str	r3, [r4, #4]
 8004ec4:	6014      	str	r4, [r2, #0]
 8004ec6:	b003      	add	sp, #12
 8004ec8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004ecc:	f7ff bfe2 	b.w	8004e94 <__malloc_unlock>
 8004ed0:	42a3      	cmp	r3, r4
 8004ed2:	d908      	bls.n	8004ee6 <_free_r+0x46>
 8004ed4:	6825      	ldr	r5, [r4, #0]
 8004ed6:	1961      	adds	r1, r4, r5
 8004ed8:	428b      	cmp	r3, r1
 8004eda:	bf01      	itttt	eq
 8004edc:	6819      	ldreq	r1, [r3, #0]
 8004ede:	685b      	ldreq	r3, [r3, #4]
 8004ee0:	1949      	addeq	r1, r1, r5
 8004ee2:	6021      	streq	r1, [r4, #0]
 8004ee4:	e7ed      	b.n	8004ec2 <_free_r+0x22>
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	b10b      	cbz	r3, 8004ef0 <_free_r+0x50>
 8004eec:	42a3      	cmp	r3, r4
 8004eee:	d9fa      	bls.n	8004ee6 <_free_r+0x46>
 8004ef0:	6811      	ldr	r1, [r2, #0]
 8004ef2:	1855      	adds	r5, r2, r1
 8004ef4:	42a5      	cmp	r5, r4
 8004ef6:	d10b      	bne.n	8004f10 <_free_r+0x70>
 8004ef8:	6824      	ldr	r4, [r4, #0]
 8004efa:	4421      	add	r1, r4
 8004efc:	1854      	adds	r4, r2, r1
 8004efe:	42a3      	cmp	r3, r4
 8004f00:	6011      	str	r1, [r2, #0]
 8004f02:	d1e0      	bne.n	8004ec6 <_free_r+0x26>
 8004f04:	681c      	ldr	r4, [r3, #0]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	6053      	str	r3, [r2, #4]
 8004f0a:	4421      	add	r1, r4
 8004f0c:	6011      	str	r1, [r2, #0]
 8004f0e:	e7da      	b.n	8004ec6 <_free_r+0x26>
 8004f10:	d902      	bls.n	8004f18 <_free_r+0x78>
 8004f12:	230c      	movs	r3, #12
 8004f14:	6003      	str	r3, [r0, #0]
 8004f16:	e7d6      	b.n	8004ec6 <_free_r+0x26>
 8004f18:	6825      	ldr	r5, [r4, #0]
 8004f1a:	1961      	adds	r1, r4, r5
 8004f1c:	428b      	cmp	r3, r1
 8004f1e:	bf04      	itt	eq
 8004f20:	6819      	ldreq	r1, [r3, #0]
 8004f22:	685b      	ldreq	r3, [r3, #4]
 8004f24:	6063      	str	r3, [r4, #4]
 8004f26:	bf04      	itt	eq
 8004f28:	1949      	addeq	r1, r1, r5
 8004f2a:	6021      	streq	r1, [r4, #0]
 8004f2c:	6054      	str	r4, [r2, #4]
 8004f2e:	e7ca      	b.n	8004ec6 <_free_r+0x26>
 8004f30:	b003      	add	sp, #12
 8004f32:	bd30      	pop	{r4, r5, pc}
 8004f34:	200001ec 	.word	0x200001ec

08004f38 <_read_r>:
 8004f38:	b538      	push	{r3, r4, r5, lr}
 8004f3a:	4d07      	ldr	r5, [pc, #28]	; (8004f58 <_read_r+0x20>)
 8004f3c:	4604      	mov	r4, r0
 8004f3e:	4608      	mov	r0, r1
 8004f40:	4611      	mov	r1, r2
 8004f42:	2200      	movs	r2, #0
 8004f44:	602a      	str	r2, [r5, #0]
 8004f46:	461a      	mov	r2, r3
 8004f48:	f7fb fe10 	bl	8000b6c <_read>
 8004f4c:	1c43      	adds	r3, r0, #1
 8004f4e:	d102      	bne.n	8004f56 <_read_r+0x1e>
 8004f50:	682b      	ldr	r3, [r5, #0]
 8004f52:	b103      	cbz	r3, 8004f56 <_read_r+0x1e>
 8004f54:	6023      	str	r3, [r4, #0]
 8004f56:	bd38      	pop	{r3, r4, r5, pc}
 8004f58:	200001f4 	.word	0x200001f4

08004f5c <_fstat_r>:
 8004f5c:	b538      	push	{r3, r4, r5, lr}
 8004f5e:	4d07      	ldr	r5, [pc, #28]	; (8004f7c <_fstat_r+0x20>)
 8004f60:	2300      	movs	r3, #0
 8004f62:	4604      	mov	r4, r0
 8004f64:	4608      	mov	r0, r1
 8004f66:	4611      	mov	r1, r2
 8004f68:	602b      	str	r3, [r5, #0]
 8004f6a:	f7fb fe44 	bl	8000bf6 <_fstat>
 8004f6e:	1c43      	adds	r3, r0, #1
 8004f70:	d102      	bne.n	8004f78 <_fstat_r+0x1c>
 8004f72:	682b      	ldr	r3, [r5, #0]
 8004f74:	b103      	cbz	r3, 8004f78 <_fstat_r+0x1c>
 8004f76:	6023      	str	r3, [r4, #0]
 8004f78:	bd38      	pop	{r3, r4, r5, pc}
 8004f7a:	bf00      	nop
 8004f7c:	200001f4 	.word	0x200001f4

08004f80 <_isatty_r>:
 8004f80:	b538      	push	{r3, r4, r5, lr}
 8004f82:	4d06      	ldr	r5, [pc, #24]	; (8004f9c <_isatty_r+0x1c>)
 8004f84:	2300      	movs	r3, #0
 8004f86:	4604      	mov	r4, r0
 8004f88:	4608      	mov	r0, r1
 8004f8a:	602b      	str	r3, [r5, #0]
 8004f8c:	f7fb fe43 	bl	8000c16 <_isatty>
 8004f90:	1c43      	adds	r3, r0, #1
 8004f92:	d102      	bne.n	8004f9a <_isatty_r+0x1a>
 8004f94:	682b      	ldr	r3, [r5, #0]
 8004f96:	b103      	cbz	r3, 8004f9a <_isatty_r+0x1a>
 8004f98:	6023      	str	r3, [r4, #0]
 8004f9a:	bd38      	pop	{r3, r4, r5, pc}
 8004f9c:	200001f4 	.word	0x200001f4

08004fa0 <_init>:
 8004fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fa2:	bf00      	nop
 8004fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fa6:	bc08      	pop	{r3}
 8004fa8:	469e      	mov	lr, r3
 8004faa:	4770      	bx	lr

08004fac <_fini>:
 8004fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fae:	bf00      	nop
 8004fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fb2:	bc08      	pop	{r3}
 8004fb4:	469e      	mov	lr, r3
 8004fb6:	4770      	bx	lr
