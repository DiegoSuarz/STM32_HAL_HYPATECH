
08_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005dbc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  08005f60  08005f60  00015f60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063b4  080063b4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080063b4  080063b4  000163b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080063bc  080063bc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063bc  080063bc  000163bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063c0  080063c0  000163c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080063c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  200001dc  080065a0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a8  080065a0  000202a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009136  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001721  00000000  00000000  00029342  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007e0  00000000  00000000  0002aa68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000748  00000000  00000000  0002b248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017688  00000000  00000000  0002b990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009caa  00000000  00000000  00043018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091d59  00000000  00000000  0004ccc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dea1b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003044  00000000  00000000  000dea6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005f44 	.word	0x08005f44

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08005f44 	.word	0x08005f44

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int caracter);
#endif

int __io_putchar(int caracter)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2,(uint8_t *)&caracter,1,HAL_MAX_DELAY);
 8000ec4:	1d39      	adds	r1, r7, #4
 8000ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eca:	2201      	movs	r2, #1
 8000ecc:	4803      	ldr	r0, [pc, #12]	; (8000edc <__io_putchar+0x20>)
 8000ece:	f001 feee 	bl	8002cae <HAL_UART_Transmit>
	return caracter;
 8000ed2:	687b      	ldr	r3, [r7, #4]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20000240 	.word	0x20000240

08000ee0 <adc_read>:

/*****************************************************************/

uint32_t adc_read(uint32_t canal){
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b088      	sub	sp, #32
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
	uint32_t ADCValue;
	ADC_ChannelConfTypeDef sConfig;
	sConfig.Channel = canal;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	60fb      	str	r3, [r7, #12]
	sConfig.Rank = 1;
 8000eec:	2301      	movs	r3, #1
 8000eee:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	617b      	str	r3, [r7, #20]
	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8000ef4:	f107 030c 	add.w	r3, r7, #12
 8000ef8:	4619      	mov	r1, r3
 8000efa:	480b      	ldr	r0, [pc, #44]	; (8000f28 <adc_read+0x48>)
 8000efc:	f000 fdaa 	bl	8001a54 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc1);
 8000f00:	4809      	ldr	r0, [pc, #36]	; (8000f28 <adc_read+0x48>)
 8000f02:	f000 fc5b 	bl	80017bc <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(&hadc1, 1000000) == HAL_OK){
 8000f06:	4909      	ldr	r1, [pc, #36]	; (8000f2c <adc_read+0x4c>)
 8000f08:	4807      	ldr	r0, [pc, #28]	; (8000f28 <adc_read+0x48>)
 8000f0a:	f000 fd0b 	bl	8001924 <HAL_ADC_PollForConversion>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d103      	bne.n	8000f1c <adc_read+0x3c>
		ADCValue = HAL_ADC_GetValue(&hadc1);
 8000f14:	4804      	ldr	r0, [pc, #16]	; (8000f28 <adc_read+0x48>)
 8000f16:	f000 fd90 	bl	8001a3a <HAL_ADC_GetValue>
 8000f1a:	61f8      	str	r0, [r7, #28]
	}
	return ADCValue;
 8000f1c:	69fb      	ldr	r3, [r7, #28]
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3720      	adds	r7, #32
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	200001f8 	.word	0x200001f8
 8000f2c:	000f4240 	.word	0x000f4240

08000f30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f34:	f000 fb68 	bl	8001608 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f38:	f000 f880 	bl	800103c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f3c:	f000 f964 	bl	8001208 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000f40:	f000 f8e6 	bl	8001110 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000f44:	f000 f936 	bl	80011b4 <MX_USART2_UART_Init>
	  HAL_ADC_Stop(&hadc1);
	  HAL_Delay(200);
*/

	  //para 3 canales y 1 sola conversion:
	  adc0 =adc_read(ADC_CHANNEL_0);
 8000f48:	2000      	movs	r0, #0
 8000f4a:	f7ff ffc9 	bl	8000ee0 <adc_read>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	4a33      	ldr	r2, [pc, #204]	; (8001020 <main+0xf0>)
 8000f52:	6013      	str	r3, [r2, #0]
	  adc1 =adc_read(ADC_CHANNEL_1);
 8000f54:	2001      	movs	r0, #1
 8000f56:	f7ff ffc3 	bl	8000ee0 <adc_read>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	4a31      	ldr	r2, [pc, #196]	; (8001024 <main+0xf4>)
 8000f5e:	6013      	str	r3, [r2, #0]
	  adc4 =adc_read(ADC_CHANNEL_4);
 8000f60:	2004      	movs	r0, #4
 8000f62:	f7ff ffbd 	bl	8000ee0 <adc_read>
 8000f66:	4603      	mov	r3, r0
 8000f68:	4a2f      	ldr	r2, [pc, #188]	; (8001028 <main+0xf8>)
 8000f6a:	6013      	str	r3, [r2, #0]

	  printf("el voltaje de adc0 es: %0.3f\n\r",adc0*3.3/4095.0);
 8000f6c:	4b2c      	ldr	r3, [pc, #176]	; (8001020 <main+0xf0>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff facf 	bl	8000514 <__aeabi_ui2d>
 8000f76:	a326      	add	r3, pc, #152	; (adr r3, 8001010 <main+0xe0>)
 8000f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f7c:	f7ff fb44 	bl	8000608 <__aeabi_dmul>
 8000f80:	4602      	mov	r2, r0
 8000f82:	460b      	mov	r3, r1
 8000f84:	4610      	mov	r0, r2
 8000f86:	4619      	mov	r1, r3
 8000f88:	a323      	add	r3, pc, #140	; (adr r3, 8001018 <main+0xe8>)
 8000f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f8e:	f7ff fc65 	bl	800085c <__aeabi_ddiv>
 8000f92:	4602      	mov	r2, r0
 8000f94:	460b      	mov	r3, r1
 8000f96:	4825      	ldr	r0, [pc, #148]	; (800102c <main+0xfc>)
 8000f98:	f002 fe9a 	bl	8003cd0 <iprintf>
	  printf("el voltaje de adc1 es: %0.3f\n\r",adc1*3.3/4095.0);
 8000f9c:	4b21      	ldr	r3, [pc, #132]	; (8001024 <main+0xf4>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff fab7 	bl	8000514 <__aeabi_ui2d>
 8000fa6:	a31a      	add	r3, pc, #104	; (adr r3, 8001010 <main+0xe0>)
 8000fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fac:	f7ff fb2c 	bl	8000608 <__aeabi_dmul>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	4610      	mov	r0, r2
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	a317      	add	r3, pc, #92	; (adr r3, 8001018 <main+0xe8>)
 8000fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fbe:	f7ff fc4d 	bl	800085c <__aeabi_ddiv>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	481a      	ldr	r0, [pc, #104]	; (8001030 <main+0x100>)
 8000fc8:	f002 fe82 	bl	8003cd0 <iprintf>
	  printf("el voltaje de adc4 es: %0.3f\n\r",adc4*3.3/4095.0);
 8000fcc:	4b16      	ldr	r3, [pc, #88]	; (8001028 <main+0xf8>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff fa9f 	bl	8000514 <__aeabi_ui2d>
 8000fd6:	a30e      	add	r3, pc, #56	; (adr r3, 8001010 <main+0xe0>)
 8000fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fdc:	f7ff fb14 	bl	8000608 <__aeabi_dmul>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	4610      	mov	r0, r2
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	a30b      	add	r3, pc, #44	; (adr r3, 8001018 <main+0xe8>)
 8000fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fee:	f7ff fc35 	bl	800085c <__aeabi_ddiv>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	480f      	ldr	r0, [pc, #60]	; (8001034 <main+0x104>)
 8000ff8:	f002 fe6a 	bl	8003cd0 <iprintf>
	  printf("\n\n\n\n");
 8000ffc:	480e      	ldr	r0, [pc, #56]	; (8001038 <main+0x108>)
 8000ffe:	f002 feed 	bl	8003ddc <puts>
	  HAL_Delay(200);
 8001002:	20c8      	movs	r0, #200	; 0xc8
 8001004:	f000 fb72 	bl	80016ec <HAL_Delay>
	  adc0 =adc_read(ADC_CHANNEL_0);
 8001008:	e79e      	b.n	8000f48 <main+0x18>
 800100a:	bf00      	nop
 800100c:	f3af 8000 	nop.w
 8001010:	66666666 	.word	0x66666666
 8001014:	400a6666 	.word	0x400a6666
 8001018:	00000000 	.word	0x00000000
 800101c:	40affe00 	.word	0x40affe00
 8001020:	20000284 	.word	0x20000284
 8001024:	20000288 	.word	0x20000288
 8001028:	2000028c 	.word	0x2000028c
 800102c:	08005f60 	.word	0x08005f60
 8001030:	08005f80 	.word	0x08005f80
 8001034:	08005fa0 	.word	0x08005fa0
 8001038:	08005fc0 	.word	0x08005fc0

0800103c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b094      	sub	sp, #80	; 0x50
 8001040:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001042:	f107 0320 	add.w	r3, r7, #32
 8001046:	2230      	movs	r2, #48	; 0x30
 8001048:	2100      	movs	r1, #0
 800104a:	4618      	mov	r0, r3
 800104c:	f002 f9ce 	bl	80033ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001050:	f107 030c 	add.w	r3, r7, #12
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001060:	2300      	movs	r3, #0
 8001062:	60bb      	str	r3, [r7, #8]
 8001064:	4b28      	ldr	r3, [pc, #160]	; (8001108 <SystemClock_Config+0xcc>)
 8001066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001068:	4a27      	ldr	r2, [pc, #156]	; (8001108 <SystemClock_Config+0xcc>)
 800106a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800106e:	6413      	str	r3, [r2, #64]	; 0x40
 8001070:	4b25      	ldr	r3, [pc, #148]	; (8001108 <SystemClock_Config+0xcc>)
 8001072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001074:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001078:	60bb      	str	r3, [r7, #8]
 800107a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800107c:	2300      	movs	r3, #0
 800107e:	607b      	str	r3, [r7, #4]
 8001080:	4b22      	ldr	r3, [pc, #136]	; (800110c <SystemClock_Config+0xd0>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001088:	4a20      	ldr	r2, [pc, #128]	; (800110c <SystemClock_Config+0xd0>)
 800108a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800108e:	6013      	str	r3, [r2, #0]
 8001090:	4b1e      	ldr	r3, [pc, #120]	; (800110c <SystemClock_Config+0xd0>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001098:	607b      	str	r3, [r7, #4]
 800109a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800109c:	2302      	movs	r3, #2
 800109e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010a0:	2301      	movs	r3, #1
 80010a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010a4:	2310      	movs	r3, #16
 80010a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010a8:	2302      	movs	r3, #2
 80010aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010ac:	2300      	movs	r3, #0
 80010ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010b0:	2308      	movs	r3, #8
 80010b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80010b4:	2354      	movs	r3, #84	; 0x54
 80010b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010b8:	2302      	movs	r3, #2
 80010ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010bc:	2304      	movs	r3, #4
 80010be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010c0:	f107 0320 	add.w	r3, r7, #32
 80010c4:	4618      	mov	r0, r3
 80010c6:	f001 f94d 	bl	8002364 <HAL_RCC_OscConfig>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80010d0:	f000 f8b4 	bl	800123c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010d4:	230f      	movs	r3, #15
 80010d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010d8:	2302      	movs	r3, #2
 80010da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010e6:	2300      	movs	r3, #0
 80010e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010ea:	f107 030c 	add.w	r3, r7, #12
 80010ee:	2102      	movs	r1, #2
 80010f0:	4618      	mov	r0, r3
 80010f2:	f001 fbaf 	bl	8002854 <HAL_RCC_ClockConfig>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80010fc:	f000 f89e 	bl	800123c <Error_Handler>
  }
}
 8001100:	bf00      	nop
 8001102:	3750      	adds	r7, #80	; 0x50
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40023800 	.word	0x40023800
 800110c:	40007000 	.word	0x40007000

08001110 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001116:	463b      	mov	r3, r7
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001122:	4b21      	ldr	r3, [pc, #132]	; (80011a8 <MX_ADC1_Init+0x98>)
 8001124:	4a21      	ldr	r2, [pc, #132]	; (80011ac <MX_ADC1_Init+0x9c>)
 8001126:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001128:	4b1f      	ldr	r3, [pc, #124]	; (80011a8 <MX_ADC1_Init+0x98>)
 800112a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800112e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001130:	4b1d      	ldr	r3, [pc, #116]	; (80011a8 <MX_ADC1_Init+0x98>)
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001136:	4b1c      	ldr	r3, [pc, #112]	; (80011a8 <MX_ADC1_Init+0x98>)
 8001138:	2200      	movs	r2, #0
 800113a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800113c:	4b1a      	ldr	r3, [pc, #104]	; (80011a8 <MX_ADC1_Init+0x98>)
 800113e:	2200      	movs	r2, #0
 8001140:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001142:	4b19      	ldr	r3, [pc, #100]	; (80011a8 <MX_ADC1_Init+0x98>)
 8001144:	2200      	movs	r2, #0
 8001146:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800114a:	4b17      	ldr	r3, [pc, #92]	; (80011a8 <MX_ADC1_Init+0x98>)
 800114c:	2200      	movs	r2, #0
 800114e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001150:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <MX_ADC1_Init+0x98>)
 8001152:	4a17      	ldr	r2, [pc, #92]	; (80011b0 <MX_ADC1_Init+0xa0>)
 8001154:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001156:	4b14      	ldr	r3, [pc, #80]	; (80011a8 <MX_ADC1_Init+0x98>)
 8001158:	2200      	movs	r2, #0
 800115a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800115c:	4b12      	ldr	r3, [pc, #72]	; (80011a8 <MX_ADC1_Init+0x98>)
 800115e:	2201      	movs	r2, #1
 8001160:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001162:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <MX_ADC1_Init+0x98>)
 8001164:	2200      	movs	r2, #0
 8001166:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800116a:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <MX_ADC1_Init+0x98>)
 800116c:	2201      	movs	r2, #1
 800116e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001170:	480d      	ldr	r0, [pc, #52]	; (80011a8 <MX_ADC1_Init+0x98>)
 8001172:	f000 fadf 	bl	8001734 <HAL_ADC_Init>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800117c:	f000 f85e 	bl	800123c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001180:	2300      	movs	r3, #0
 8001182:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001184:	2301      	movs	r3, #1
 8001186:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001188:	2300      	movs	r3, #0
 800118a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800118c:	463b      	mov	r3, r7
 800118e:	4619      	mov	r1, r3
 8001190:	4805      	ldr	r0, [pc, #20]	; (80011a8 <MX_ADC1_Init+0x98>)
 8001192:	f000 fc5f 	bl	8001a54 <HAL_ADC_ConfigChannel>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800119c:	f000 f84e 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011a0:	bf00      	nop
 80011a2:	3710      	adds	r7, #16
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	200001f8 	.word	0x200001f8
 80011ac:	40012000 	.word	0x40012000
 80011b0:	0f000001 	.word	0x0f000001

080011b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011b8:	4b11      	ldr	r3, [pc, #68]	; (8001200 <MX_USART2_UART_Init+0x4c>)
 80011ba:	4a12      	ldr	r2, [pc, #72]	; (8001204 <MX_USART2_UART_Init+0x50>)
 80011bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011be:	4b10      	ldr	r3, [pc, #64]	; (8001200 <MX_USART2_UART_Init+0x4c>)
 80011c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011c6:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <MX_USART2_UART_Init+0x4c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011cc:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <MX_USART2_UART_Init+0x4c>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011d2:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <MX_USART2_UART_Init+0x4c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011d8:	4b09      	ldr	r3, [pc, #36]	; (8001200 <MX_USART2_UART_Init+0x4c>)
 80011da:	220c      	movs	r2, #12
 80011dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011de:	4b08      	ldr	r3, [pc, #32]	; (8001200 <MX_USART2_UART_Init+0x4c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011e4:	4b06      	ldr	r3, [pc, #24]	; (8001200 <MX_USART2_UART_Init+0x4c>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011ea:	4805      	ldr	r0, [pc, #20]	; (8001200 <MX_USART2_UART_Init+0x4c>)
 80011ec:	f001 fd12 	bl	8002c14 <HAL_UART_Init>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011f6:	f000 f821 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	20000240 	.word	0x20000240
 8001204:	40004400 	.word	0x40004400

08001208 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	607b      	str	r3, [r7, #4]
 8001212:	4b09      	ldr	r3, [pc, #36]	; (8001238 <MX_GPIO_Init+0x30>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	4a08      	ldr	r2, [pc, #32]	; (8001238 <MX_GPIO_Init+0x30>)
 8001218:	f043 0301 	orr.w	r3, r3, #1
 800121c:	6313      	str	r3, [r2, #48]	; 0x30
 800121e:	4b06      	ldr	r3, [pc, #24]	; (8001238 <MX_GPIO_Init+0x30>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	607b      	str	r3, [r7, #4]
 8001228:	687b      	ldr	r3, [r7, #4]

}
 800122a:	bf00      	nop
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	40023800 	.word	0x40023800

0800123c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001240:	b672      	cpsid	i
}
 8001242:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001244:	e7fe      	b.n	8001244 <Error_Handler+0x8>
	...

08001248 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	607b      	str	r3, [r7, #4]
 8001252:	4b10      	ldr	r3, [pc, #64]	; (8001294 <HAL_MspInit+0x4c>)
 8001254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001256:	4a0f      	ldr	r2, [pc, #60]	; (8001294 <HAL_MspInit+0x4c>)
 8001258:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800125c:	6453      	str	r3, [r2, #68]	; 0x44
 800125e:	4b0d      	ldr	r3, [pc, #52]	; (8001294 <HAL_MspInit+0x4c>)
 8001260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001262:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001266:	607b      	str	r3, [r7, #4]
 8001268:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	603b      	str	r3, [r7, #0]
 800126e:	4b09      	ldr	r3, [pc, #36]	; (8001294 <HAL_MspInit+0x4c>)
 8001270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001272:	4a08      	ldr	r2, [pc, #32]	; (8001294 <HAL_MspInit+0x4c>)
 8001274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001278:	6413      	str	r3, [r2, #64]	; 0x40
 800127a:	4b06      	ldr	r3, [pc, #24]	; (8001294 <HAL_MspInit+0x4c>)
 800127c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001282:	603b      	str	r3, [r7, #0]
 8001284:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001286:	bf00      	nop
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	40023800 	.word	0x40023800

08001298 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08a      	sub	sp, #40	; 0x28
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a0:	f107 0314 	add.w	r3, r7, #20
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a17      	ldr	r2, [pc, #92]	; (8001314 <HAL_ADC_MspInit+0x7c>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d127      	bne.n	800130a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	613b      	str	r3, [r7, #16]
 80012be:	4b16      	ldr	r3, [pc, #88]	; (8001318 <HAL_ADC_MspInit+0x80>)
 80012c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c2:	4a15      	ldr	r2, [pc, #84]	; (8001318 <HAL_ADC_MspInit+0x80>)
 80012c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012c8:	6453      	str	r3, [r2, #68]	; 0x44
 80012ca:	4b13      	ldr	r3, [pc, #76]	; (8001318 <HAL_ADC_MspInit+0x80>)
 80012cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012d2:	613b      	str	r3, [r7, #16]
 80012d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <HAL_ADC_MspInit+0x80>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	4a0e      	ldr	r2, [pc, #56]	; (8001318 <HAL_ADC_MspInit+0x80>)
 80012e0:	f043 0301 	orr.w	r3, r3, #1
 80012e4:	6313      	str	r3, [r2, #48]	; 0x30
 80012e6:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <HAL_ADC_MspInit+0x80>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 80012f2:	2313      	movs	r3, #19
 80012f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012f6:	2303      	movs	r3, #3
 80012f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fe:	f107 0314 	add.w	r3, r7, #20
 8001302:	4619      	mov	r1, r3
 8001304:	4805      	ldr	r0, [pc, #20]	; (800131c <HAL_ADC_MspInit+0x84>)
 8001306:	f000 fea9 	bl	800205c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800130a:	bf00      	nop
 800130c:	3728      	adds	r7, #40	; 0x28
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40012000 	.word	0x40012000
 8001318:	40023800 	.word	0x40023800
 800131c:	40020000 	.word	0x40020000

08001320 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08a      	sub	sp, #40	; 0x28
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001328:	f107 0314 	add.w	r3, r7, #20
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a19      	ldr	r2, [pc, #100]	; (80013a4 <HAL_UART_MspInit+0x84>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d12b      	bne.n	800139a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	613b      	str	r3, [r7, #16]
 8001346:	4b18      	ldr	r3, [pc, #96]	; (80013a8 <HAL_UART_MspInit+0x88>)
 8001348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134a:	4a17      	ldr	r2, [pc, #92]	; (80013a8 <HAL_UART_MspInit+0x88>)
 800134c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001350:	6413      	str	r3, [r2, #64]	; 0x40
 8001352:	4b15      	ldr	r3, [pc, #84]	; (80013a8 <HAL_UART_MspInit+0x88>)
 8001354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800135a:	613b      	str	r3, [r7, #16]
 800135c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	4b11      	ldr	r3, [pc, #68]	; (80013a8 <HAL_UART_MspInit+0x88>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	4a10      	ldr	r2, [pc, #64]	; (80013a8 <HAL_UART_MspInit+0x88>)
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	6313      	str	r3, [r2, #48]	; 0x30
 800136e:	4b0e      	ldr	r3, [pc, #56]	; (80013a8 <HAL_UART_MspInit+0x88>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800137a:	230c      	movs	r3, #12
 800137c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137e:	2302      	movs	r3, #2
 8001380:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001386:	2303      	movs	r3, #3
 8001388:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800138a:	2307      	movs	r3, #7
 800138c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138e:	f107 0314 	add.w	r3, r7, #20
 8001392:	4619      	mov	r1, r3
 8001394:	4805      	ldr	r0, [pc, #20]	; (80013ac <HAL_UART_MspInit+0x8c>)
 8001396:	f000 fe61 	bl	800205c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800139a:	bf00      	nop
 800139c:	3728      	adds	r7, #40	; 0x28
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40004400 	.word	0x40004400
 80013a8:	40023800 	.word	0x40023800
 80013ac:	40020000 	.word	0x40020000

080013b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013b4:	e7fe      	b.n	80013b4 <NMI_Handler+0x4>

080013b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013b6:	b480      	push	{r7}
 80013b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ba:	e7fe      	b.n	80013ba <HardFault_Handler+0x4>

080013bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013c0:	e7fe      	b.n	80013c0 <MemManage_Handler+0x4>

080013c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013c2:	b480      	push	{r7}
 80013c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013c6:	e7fe      	b.n	80013c6 <BusFault_Handler+0x4>

080013c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013cc:	e7fe      	b.n	80013cc <UsageFault_Handler+0x4>

080013ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ce:	b480      	push	{r7}
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013e0:	bf00      	nop
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr

080013ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ea:	b480      	push	{r7}
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ee:	bf00      	nop
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013fc:	f000 f956 	bl	80016ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001400:	bf00      	nop
 8001402:	bd80      	pop	{r7, pc}

08001404 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  return 1;
 8001408:	2301      	movs	r3, #1
}
 800140a:	4618      	mov	r0, r3
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <_kill>:

int _kill(int pid, int sig)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800141e:	f001 ffbb 	bl	8003398 <__errno>
 8001422:	4603      	mov	r3, r0
 8001424:	2216      	movs	r2, #22
 8001426:	601a      	str	r2, [r3, #0]
  return -1;
 8001428:	f04f 33ff 	mov.w	r3, #4294967295
}
 800142c:	4618      	mov	r0, r3
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <_exit>:

void _exit (int status)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800143c:	f04f 31ff 	mov.w	r1, #4294967295
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f7ff ffe7 	bl	8001414 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001446:	e7fe      	b.n	8001446 <_exit+0x12>

08001448 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001454:	2300      	movs	r3, #0
 8001456:	617b      	str	r3, [r7, #20]
 8001458:	e00a      	b.n	8001470 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800145a:	f3af 8000 	nop.w
 800145e:	4601      	mov	r1, r0
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	1c5a      	adds	r2, r3, #1
 8001464:	60ba      	str	r2, [r7, #8]
 8001466:	b2ca      	uxtb	r2, r1
 8001468:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	3301      	adds	r3, #1
 800146e:	617b      	str	r3, [r7, #20]
 8001470:	697a      	ldr	r2, [r7, #20]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	429a      	cmp	r2, r3
 8001476:	dbf0      	blt.n	800145a <_read+0x12>
  }

  return len;
 8001478:	687b      	ldr	r3, [r7, #4]
}
 800147a:	4618      	mov	r0, r3
 800147c:	3718      	adds	r7, #24
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b086      	sub	sp, #24
 8001486:	af00      	add	r7, sp, #0
 8001488:	60f8      	str	r0, [r7, #12]
 800148a:	60b9      	str	r1, [r7, #8]
 800148c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800148e:	2300      	movs	r3, #0
 8001490:	617b      	str	r3, [r7, #20]
 8001492:	e009      	b.n	80014a8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	1c5a      	adds	r2, r3, #1
 8001498:	60ba      	str	r2, [r7, #8]
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff fd0d 	bl	8000ebc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	3301      	adds	r3, #1
 80014a6:	617b      	str	r3, [r7, #20]
 80014a8:	697a      	ldr	r2, [r7, #20]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	dbf1      	blt.n	8001494 <_write+0x12>
  }
  return len;
 80014b0:	687b      	ldr	r3, [r7, #4]
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3718      	adds	r7, #24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <_close>:

int _close(int file)
{
 80014ba:	b480      	push	{r7}
 80014bc:	b083      	sub	sp, #12
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr

080014d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014d2:	b480      	push	{r7}
 80014d4:	b083      	sub	sp, #12
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
 80014da:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014e2:	605a      	str	r2, [r3, #4]
  return 0;
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <_isatty>:

int _isatty(int file)
{
 80014f2:	b480      	push	{r7}
 80014f4:	b083      	sub	sp, #12
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014fa:	2301      	movs	r3, #1
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
	...

08001524 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800152c:	4a14      	ldr	r2, [pc, #80]	; (8001580 <_sbrk+0x5c>)
 800152e:	4b15      	ldr	r3, [pc, #84]	; (8001584 <_sbrk+0x60>)
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001538:	4b13      	ldr	r3, [pc, #76]	; (8001588 <_sbrk+0x64>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d102      	bne.n	8001546 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001540:	4b11      	ldr	r3, [pc, #68]	; (8001588 <_sbrk+0x64>)
 8001542:	4a12      	ldr	r2, [pc, #72]	; (800158c <_sbrk+0x68>)
 8001544:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001546:	4b10      	ldr	r3, [pc, #64]	; (8001588 <_sbrk+0x64>)
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4413      	add	r3, r2
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	429a      	cmp	r2, r3
 8001552:	d207      	bcs.n	8001564 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001554:	f001 ff20 	bl	8003398 <__errno>
 8001558:	4603      	mov	r3, r0
 800155a:	220c      	movs	r2, #12
 800155c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800155e:	f04f 33ff 	mov.w	r3, #4294967295
 8001562:	e009      	b.n	8001578 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001564:	4b08      	ldr	r3, [pc, #32]	; (8001588 <_sbrk+0x64>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800156a:	4b07      	ldr	r3, [pc, #28]	; (8001588 <_sbrk+0x64>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4413      	add	r3, r2
 8001572:	4a05      	ldr	r2, [pc, #20]	; (8001588 <_sbrk+0x64>)
 8001574:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001576:	68fb      	ldr	r3, [r7, #12]
}
 8001578:	4618      	mov	r0, r3
 800157a:	3718      	adds	r7, #24
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	20018000 	.word	0x20018000
 8001584:	00000400 	.word	0x00000400
 8001588:	20000290 	.word	0x20000290
 800158c:	200002a8 	.word	0x200002a8

08001590 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001594:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <SystemInit+0x20>)
 8001596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800159a:	4a05      	ldr	r2, [pc, #20]	; (80015b0 <SystemInit+0x20>)
 800159c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015a4:	bf00      	nop
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	e000ed00 	.word	0xe000ed00

080015b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80015b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015ec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015b8:	480d      	ldr	r0, [pc, #52]	; (80015f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015ba:	490e      	ldr	r1, [pc, #56]	; (80015f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015bc:	4a0e      	ldr	r2, [pc, #56]	; (80015f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015c0:	e002      	b.n	80015c8 <LoopCopyDataInit>

080015c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015c6:	3304      	adds	r3, #4

080015c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015cc:	d3f9      	bcc.n	80015c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ce:	4a0b      	ldr	r2, [pc, #44]	; (80015fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015d0:	4c0b      	ldr	r4, [pc, #44]	; (8001600 <LoopFillZerobss+0x26>)
  movs r3, #0
 80015d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015d4:	e001      	b.n	80015da <LoopFillZerobss>

080015d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015d8:	3204      	adds	r2, #4

080015da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015dc:	d3fb      	bcc.n	80015d6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015de:	f7ff ffd7 	bl	8001590 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015e2:	f001 fedf 	bl	80033a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015e6:	f7ff fca3 	bl	8000f30 <main>
  bx  lr    
 80015ea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80015ec:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80015f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015f4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80015f8:	080063c4 	.word	0x080063c4
  ldr r2, =_sbss
 80015fc:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001600:	200002a8 	.word	0x200002a8

08001604 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001604:	e7fe      	b.n	8001604 <ADC_IRQHandler>
	...

08001608 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800160c:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <HAL_Init+0x40>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a0d      	ldr	r2, [pc, #52]	; (8001648 <HAL_Init+0x40>)
 8001612:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001616:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001618:	4b0b      	ldr	r3, [pc, #44]	; (8001648 <HAL_Init+0x40>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a0a      	ldr	r2, [pc, #40]	; (8001648 <HAL_Init+0x40>)
 800161e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001622:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001624:	4b08      	ldr	r3, [pc, #32]	; (8001648 <HAL_Init+0x40>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a07      	ldr	r2, [pc, #28]	; (8001648 <HAL_Init+0x40>)
 800162a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800162e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001630:	2003      	movs	r0, #3
 8001632:	f000 fcdf 	bl	8001ff4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001636:	200f      	movs	r0, #15
 8001638:	f000 f808 	bl	800164c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800163c:	f7ff fe04 	bl	8001248 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40023c00 	.word	0x40023c00

0800164c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001654:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <HAL_InitTick+0x54>)
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	4b12      	ldr	r3, [pc, #72]	; (80016a4 <HAL_InitTick+0x58>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	4619      	mov	r1, r3
 800165e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001662:	fbb3 f3f1 	udiv	r3, r3, r1
 8001666:	fbb2 f3f3 	udiv	r3, r2, r3
 800166a:	4618      	mov	r0, r3
 800166c:	f000 fce9 	bl	8002042 <HAL_SYSTICK_Config>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e00e      	b.n	8001698 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2b0f      	cmp	r3, #15
 800167e:	d80a      	bhi.n	8001696 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001680:	2200      	movs	r2, #0
 8001682:	6879      	ldr	r1, [r7, #4]
 8001684:	f04f 30ff 	mov.w	r0, #4294967295
 8001688:	f000 fcbf 	bl	800200a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800168c:	4a06      	ldr	r2, [pc, #24]	; (80016a8 <HAL_InitTick+0x5c>)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001692:	2300      	movs	r3, #0
 8001694:	e000      	b.n	8001698 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
}
 8001698:	4618      	mov	r0, r3
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20000000 	.word	0x20000000
 80016a4:	20000008 	.word	0x20000008
 80016a8:	20000004 	.word	0x20000004

080016ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016b0:	4b06      	ldr	r3, [pc, #24]	; (80016cc <HAL_IncTick+0x20>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	461a      	mov	r2, r3
 80016b6:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <HAL_IncTick+0x24>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4413      	add	r3, r2
 80016bc:	4a04      	ldr	r2, [pc, #16]	; (80016d0 <HAL_IncTick+0x24>)
 80016be:	6013      	str	r3, [r2, #0]
}
 80016c0:	bf00      	nop
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	20000008 	.word	0x20000008
 80016d0:	20000294 	.word	0x20000294

080016d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  return uwTick;
 80016d8:	4b03      	ldr	r3, [pc, #12]	; (80016e8 <HAL_GetTick+0x14>)
 80016da:	681b      	ldr	r3, [r3, #0]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	20000294 	.word	0x20000294

080016ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016f4:	f7ff ffee 	bl	80016d4 <HAL_GetTick>
 80016f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001704:	d005      	beq.n	8001712 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001706:	4b0a      	ldr	r3, [pc, #40]	; (8001730 <HAL_Delay+0x44>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	461a      	mov	r2, r3
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	4413      	add	r3, r2
 8001710:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001712:	bf00      	nop
 8001714:	f7ff ffde 	bl	80016d4 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	68fa      	ldr	r2, [r7, #12]
 8001720:	429a      	cmp	r2, r3
 8001722:	d8f7      	bhi.n	8001714 <HAL_Delay+0x28>
  {
  }
}
 8001724:	bf00      	nop
 8001726:	bf00      	nop
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	20000008 	.word	0x20000008

08001734 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800173c:	2300      	movs	r3, #0
 800173e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d101      	bne.n	800174a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e033      	b.n	80017b2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174e:	2b00      	cmp	r3, #0
 8001750:	d109      	bne.n	8001766 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f7ff fda0 	bl	8001298 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176a:	f003 0310 	and.w	r3, r3, #16
 800176e:	2b00      	cmp	r3, #0
 8001770:	d118      	bne.n	80017a4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001776:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800177a:	f023 0302 	bic.w	r3, r3, #2
 800177e:	f043 0202 	orr.w	r2, r3, #2
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f000 fa86 	bl	8001c98 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2200      	movs	r2, #0
 8001790:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	f023 0303 	bic.w	r3, r3, #3
 800179a:	f043 0201 	orr.w	r2, r3, #1
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	641a      	str	r2, [r3, #64]	; 0x40
 80017a2:	e001      	b.n	80017a8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80017b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
	...

080017bc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80017c4:	2300      	movs	r3, #0
 80017c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d101      	bne.n	80017d6 <HAL_ADC_Start+0x1a>
 80017d2:	2302      	movs	r3, #2
 80017d4:	e097      	b.n	8001906 <HAL_ADC_Start+0x14a>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2201      	movs	r2, #1
 80017da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	f003 0301 	and.w	r3, r3, #1
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d018      	beq.n	800181e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	689a      	ldr	r2, [r3, #8]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f042 0201 	orr.w	r2, r2, #1
 80017fa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80017fc:	4b45      	ldr	r3, [pc, #276]	; (8001914 <HAL_ADC_Start+0x158>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a45      	ldr	r2, [pc, #276]	; (8001918 <HAL_ADC_Start+0x15c>)
 8001802:	fba2 2303 	umull	r2, r3, r2, r3
 8001806:	0c9a      	lsrs	r2, r3, #18
 8001808:	4613      	mov	r3, r2
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	4413      	add	r3, r2
 800180e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001810:	e002      	b.n	8001818 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	3b01      	subs	r3, #1
 8001816:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1f9      	bne.n	8001812 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f003 0301 	and.w	r3, r3, #1
 8001828:	2b01      	cmp	r3, #1
 800182a:	d15f      	bne.n	80018ec <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001830:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001834:	f023 0301 	bic.w	r3, r3, #1
 8001838:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800184a:	2b00      	cmp	r3, #0
 800184c:	d007      	beq.n	800185e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001852:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001856:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001862:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001866:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800186a:	d106      	bne.n	800187a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001870:	f023 0206 	bic.w	r2, r3, #6
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	645a      	str	r2, [r3, #68]	; 0x44
 8001878:	e002      	b.n	8001880 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2200      	movs	r2, #0
 800187e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2200      	movs	r2, #0
 8001884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001888:	4b24      	ldr	r3, [pc, #144]	; (800191c <HAL_ADC_Start+0x160>)
 800188a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001894:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f003 031f 	and.w	r3, r3, #31
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d10f      	bne.n	80018c2 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d129      	bne.n	8001904 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	689a      	ldr	r2, [r3, #8]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	e020      	b.n	8001904 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a16      	ldr	r2, [pc, #88]	; (8001920 <HAL_ADC_Start+0x164>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d11b      	bne.n	8001904 <HAL_ADC_Start+0x148>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d114      	bne.n	8001904 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	689a      	ldr	r2, [r3, #8]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80018e8:	609a      	str	r2, [r3, #8]
 80018ea:	e00b      	b.n	8001904 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f0:	f043 0210 	orr.w	r2, r3, #16
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fc:	f043 0201 	orr.w	r2, r3, #1
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3714      	adds	r7, #20
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	20000000 	.word	0x20000000
 8001918:	431bde83 	.word	0x431bde83
 800191c:	40012300 	.word	0x40012300
 8001920:	40012000 	.word	0x40012000

08001924 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800192e:	2300      	movs	r3, #0
 8001930:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800193c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001940:	d113      	bne.n	800196a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800194c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001950:	d10b      	bne.n	800196a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001956:	f043 0220 	orr.w	r2, r3, #32
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e063      	b.n	8001a32 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800196a:	f7ff feb3 	bl	80016d4 <HAL_GetTick>
 800196e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001970:	e021      	b.n	80019b6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001978:	d01d      	beq.n	80019b6 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d007      	beq.n	8001990 <HAL_ADC_PollForConversion+0x6c>
 8001980:	f7ff fea8 	bl	80016d4 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	683a      	ldr	r2, [r7, #0]
 800198c:	429a      	cmp	r2, r3
 800198e:	d212      	bcs.n	80019b6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	2b02      	cmp	r3, #2
 800199c:	d00b      	beq.n	80019b6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a2:	f043 0204 	orr.w	r2, r3, #4
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e03d      	b.n	8001a32 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d1d6      	bne.n	8001972 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f06f 0212 	mvn.w	r2, #18
 80019cc:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d123      	bne.n	8001a30 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d11f      	bne.n	8001a30 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d006      	beq.n	8001a0c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d111      	bne.n	8001a30 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a10:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d105      	bne.n	8001a30 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a28:	f043 0201 	orr.w	r2, r3, #1
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3710      	adds	r7, #16
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001a3a:	b480      	push	{r7}
 8001a3c:	b083      	sub	sp, #12
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d101      	bne.n	8001a70 <HAL_ADC_ConfigChannel+0x1c>
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	e105      	b.n	8001c7c <HAL_ADC_ConfigChannel+0x228>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2201      	movs	r2, #1
 8001a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2b09      	cmp	r3, #9
 8001a7e:	d925      	bls.n	8001acc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	68d9      	ldr	r1, [r3, #12]
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	4613      	mov	r3, r2
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	4413      	add	r3, r2
 8001a94:	3b1e      	subs	r3, #30
 8001a96:	2207      	movs	r2, #7
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	43da      	mvns	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	400a      	ands	r2, r1
 8001aa4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	68d9      	ldr	r1, [r3, #12]
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	689a      	ldr	r2, [r3, #8]
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	4603      	mov	r3, r0
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	4403      	add	r3, r0
 8001abe:	3b1e      	subs	r3, #30
 8001ac0:	409a      	lsls	r2, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	60da      	str	r2, [r3, #12]
 8001aca:	e022      	b.n	8001b12 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6919      	ldr	r1, [r3, #16]
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	461a      	mov	r2, r3
 8001ada:	4613      	mov	r3, r2
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	4413      	add	r3, r2
 8001ae0:	2207      	movs	r2, #7
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	43da      	mvns	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	400a      	ands	r2, r1
 8001aee:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	6919      	ldr	r1, [r3, #16]
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	689a      	ldr	r2, [r3, #8]
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	4618      	mov	r0, r3
 8001b02:	4603      	mov	r3, r0
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	4403      	add	r3, r0
 8001b08:	409a      	lsls	r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	430a      	orrs	r2, r1
 8001b10:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	2b06      	cmp	r3, #6
 8001b18:	d824      	bhi.n	8001b64 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685a      	ldr	r2, [r3, #4]
 8001b24:	4613      	mov	r3, r2
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	4413      	add	r3, r2
 8001b2a:	3b05      	subs	r3, #5
 8001b2c:	221f      	movs	r2, #31
 8001b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b32:	43da      	mvns	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	400a      	ands	r2, r1
 8001b3a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	4618      	mov	r0, r3
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685a      	ldr	r2, [r3, #4]
 8001b4e:	4613      	mov	r3, r2
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	4413      	add	r3, r2
 8001b54:	3b05      	subs	r3, #5
 8001b56:	fa00 f203 	lsl.w	r2, r0, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	430a      	orrs	r2, r1
 8001b60:	635a      	str	r2, [r3, #52]	; 0x34
 8001b62:	e04c      	b.n	8001bfe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	2b0c      	cmp	r3, #12
 8001b6a:	d824      	bhi.n	8001bb6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685a      	ldr	r2, [r3, #4]
 8001b76:	4613      	mov	r3, r2
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	4413      	add	r3, r2
 8001b7c:	3b23      	subs	r3, #35	; 0x23
 8001b7e:	221f      	movs	r2, #31
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	43da      	mvns	r2, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	400a      	ands	r2, r1
 8001b8c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685a      	ldr	r2, [r3, #4]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	4413      	add	r3, r2
 8001ba6:	3b23      	subs	r3, #35	; 0x23
 8001ba8:	fa00 f203 	lsl.w	r2, r0, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	631a      	str	r2, [r3, #48]	; 0x30
 8001bb4:	e023      	b.n	8001bfe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685a      	ldr	r2, [r3, #4]
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	4413      	add	r3, r2
 8001bc6:	3b41      	subs	r3, #65	; 0x41
 8001bc8:	221f      	movs	r2, #31
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	43da      	mvns	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	400a      	ands	r2, r1
 8001bd6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	4618      	mov	r0, r3
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685a      	ldr	r2, [r3, #4]
 8001bea:	4613      	mov	r3, r2
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	4413      	add	r3, r2
 8001bf0:	3b41      	subs	r3, #65	; 0x41
 8001bf2:	fa00 f203 	lsl.w	r2, r0, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bfe:	4b22      	ldr	r3, [pc, #136]	; (8001c88 <HAL_ADC_ConfigChannel+0x234>)
 8001c00:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a21      	ldr	r2, [pc, #132]	; (8001c8c <HAL_ADC_ConfigChannel+0x238>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d109      	bne.n	8001c20 <HAL_ADC_ConfigChannel+0x1cc>
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2b12      	cmp	r3, #18
 8001c12:	d105      	bne.n	8001c20 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a19      	ldr	r2, [pc, #100]	; (8001c8c <HAL_ADC_ConfigChannel+0x238>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d123      	bne.n	8001c72 <HAL_ADC_ConfigChannel+0x21e>
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2b10      	cmp	r3, #16
 8001c30:	d003      	beq.n	8001c3a <HAL_ADC_ConfigChannel+0x1e6>
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2b11      	cmp	r3, #17
 8001c38:	d11b      	bne.n	8001c72 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2b10      	cmp	r3, #16
 8001c4c:	d111      	bne.n	8001c72 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c4e:	4b10      	ldr	r3, [pc, #64]	; (8001c90 <HAL_ADC_ConfigChannel+0x23c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a10      	ldr	r2, [pc, #64]	; (8001c94 <HAL_ADC_ConfigChannel+0x240>)
 8001c54:	fba2 2303 	umull	r2, r3, r2, r3
 8001c58:	0c9a      	lsrs	r2, r3, #18
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	4413      	add	r3, r2
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c64:	e002      	b.n	8001c6c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	3b01      	subs	r3, #1
 8001c6a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d1f9      	bne.n	8001c66 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3714      	adds	r7, #20
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	40012300 	.word	0x40012300
 8001c8c:	40012000 	.word	0x40012000
 8001c90:	20000000 	.word	0x20000000
 8001c94:	431bde83 	.word	0x431bde83

08001c98 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ca0:	4b79      	ldr	r3, [pc, #484]	; (8001e88 <ADC_Init+0x1f0>)
 8001ca2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	685a      	ldr	r2, [r3, #4]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	431a      	orrs	r2, r3
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	685a      	ldr	r2, [r3, #4]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ccc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	6859      	ldr	r1, [r3, #4]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	691b      	ldr	r3, [r3, #16]
 8001cd8:	021a      	lsls	r2, r3, #8
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	685a      	ldr	r2, [r3, #4]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001cf0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	6859      	ldr	r1, [r3, #4]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689a      	ldr	r2, [r3, #8]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	430a      	orrs	r2, r1
 8001d02:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	689a      	ldr	r2, [r3, #8]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	6899      	ldr	r1, [r3, #8]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	68da      	ldr	r2, [r3, #12]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	430a      	orrs	r2, r1
 8001d24:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d2a:	4a58      	ldr	r2, [pc, #352]	; (8001e8c <ADC_Init+0x1f4>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d022      	beq.n	8001d76 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	689a      	ldr	r2, [r3, #8]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d3e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	6899      	ldr	r1, [r3, #8]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	689a      	ldr	r2, [r3, #8]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	6899      	ldr	r1, [r3, #8]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	430a      	orrs	r2, r1
 8001d72:	609a      	str	r2, [r3, #8]
 8001d74:	e00f      	b.n	8001d96 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	689a      	ldr	r2, [r3, #8]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	689a      	ldr	r2, [r3, #8]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d94:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f022 0202 	bic.w	r2, r2, #2
 8001da4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	6899      	ldr	r1, [r3, #8]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	7e1b      	ldrb	r3, [r3, #24]
 8001db0:	005a      	lsls	r2, r3, #1
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	430a      	orrs	r2, r1
 8001db8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d01b      	beq.n	8001dfc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	685a      	ldr	r2, [r3, #4]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001dd2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	685a      	ldr	r2, [r3, #4]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001de2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	6859      	ldr	r1, [r3, #4]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dee:	3b01      	subs	r3, #1
 8001df0:	035a      	lsls	r2, r3, #13
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	430a      	orrs	r2, r1
 8001df8:	605a      	str	r2, [r3, #4]
 8001dfa:	e007      	b.n	8001e0c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	685a      	ldr	r2, [r3, #4]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e0a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001e1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	69db      	ldr	r3, [r3, #28]
 8001e26:	3b01      	subs	r3, #1
 8001e28:	051a      	lsls	r2, r3, #20
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	689a      	ldr	r2, [r3, #8]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	6899      	ldr	r1, [r3, #8]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e4e:	025a      	lsls	r2, r3, #9
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	430a      	orrs	r2, r1
 8001e56:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	689a      	ldr	r2, [r3, #8]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6899      	ldr	r1, [r3, #8]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	029a      	lsls	r2, r3, #10
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	609a      	str	r2, [r3, #8]
}
 8001e7c:	bf00      	nop
 8001e7e:	3714      	adds	r7, #20
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	40012300 	.word	0x40012300
 8001e8c:	0f000001 	.word	0x0f000001

08001e90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f003 0307 	and.w	r3, r3, #7
 8001e9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ea0:	4b0c      	ldr	r3, [pc, #48]	; (8001ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ea6:	68ba      	ldr	r2, [r7, #8]
 8001ea8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001eac:	4013      	ands	r3, r2
 8001eae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001eb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ebc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ec0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ec2:	4a04      	ldr	r2, [pc, #16]	; (8001ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	60d3      	str	r3, [r2, #12]
}
 8001ec8:	bf00      	nop
 8001eca:	3714      	adds	r7, #20
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr
 8001ed4:	e000ed00 	.word	0xe000ed00

08001ed8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001edc:	4b04      	ldr	r3, [pc, #16]	; (8001ef0 <__NVIC_GetPriorityGrouping+0x18>)
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	0a1b      	lsrs	r3, r3, #8
 8001ee2:	f003 0307 	and.w	r3, r3, #7
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr
 8001ef0:	e000ed00 	.word	0xe000ed00

08001ef4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	4603      	mov	r3, r0
 8001efc:	6039      	str	r1, [r7, #0]
 8001efe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	db0a      	blt.n	8001f1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	b2da      	uxtb	r2, r3
 8001f0c:	490c      	ldr	r1, [pc, #48]	; (8001f40 <__NVIC_SetPriority+0x4c>)
 8001f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f12:	0112      	lsls	r2, r2, #4
 8001f14:	b2d2      	uxtb	r2, r2
 8001f16:	440b      	add	r3, r1
 8001f18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f1c:	e00a      	b.n	8001f34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	b2da      	uxtb	r2, r3
 8001f22:	4908      	ldr	r1, [pc, #32]	; (8001f44 <__NVIC_SetPriority+0x50>)
 8001f24:	79fb      	ldrb	r3, [r7, #7]
 8001f26:	f003 030f 	and.w	r3, r3, #15
 8001f2a:	3b04      	subs	r3, #4
 8001f2c:	0112      	lsls	r2, r2, #4
 8001f2e:	b2d2      	uxtb	r2, r2
 8001f30:	440b      	add	r3, r1
 8001f32:	761a      	strb	r2, [r3, #24]
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	e000e100 	.word	0xe000e100
 8001f44:	e000ed00 	.word	0xe000ed00

08001f48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b089      	sub	sp, #36	; 0x24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f003 0307 	and.w	r3, r3, #7
 8001f5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	f1c3 0307 	rsb	r3, r3, #7
 8001f62:	2b04      	cmp	r3, #4
 8001f64:	bf28      	it	cs
 8001f66:	2304      	movcs	r3, #4
 8001f68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	3304      	adds	r3, #4
 8001f6e:	2b06      	cmp	r3, #6
 8001f70:	d902      	bls.n	8001f78 <NVIC_EncodePriority+0x30>
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	3b03      	subs	r3, #3
 8001f76:	e000      	b.n	8001f7a <NVIC_EncodePriority+0x32>
 8001f78:	2300      	movs	r3, #0
 8001f7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	43da      	mvns	r2, r3
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	401a      	ands	r2, r3
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f90:	f04f 31ff 	mov.w	r1, #4294967295
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9a:	43d9      	mvns	r1, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa0:	4313      	orrs	r3, r2
         );
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3724      	adds	r7, #36	; 0x24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
	...

08001fb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fc0:	d301      	bcc.n	8001fc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e00f      	b.n	8001fe6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fc6:	4a0a      	ldr	r2, [pc, #40]	; (8001ff0 <SysTick_Config+0x40>)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fce:	210f      	movs	r1, #15
 8001fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd4:	f7ff ff8e 	bl	8001ef4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fd8:	4b05      	ldr	r3, [pc, #20]	; (8001ff0 <SysTick_Config+0x40>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fde:	4b04      	ldr	r3, [pc, #16]	; (8001ff0 <SysTick_Config+0x40>)
 8001fe0:	2207      	movs	r2, #7
 8001fe2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	e000e010 	.word	0xe000e010

08001ff4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f7ff ff47 	bl	8001e90 <__NVIC_SetPriorityGrouping>
}
 8002002:	bf00      	nop
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800200a:	b580      	push	{r7, lr}
 800200c:	b086      	sub	sp, #24
 800200e:	af00      	add	r7, sp, #0
 8002010:	4603      	mov	r3, r0
 8002012:	60b9      	str	r1, [r7, #8]
 8002014:	607a      	str	r2, [r7, #4]
 8002016:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002018:	2300      	movs	r3, #0
 800201a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800201c:	f7ff ff5c 	bl	8001ed8 <__NVIC_GetPriorityGrouping>
 8002020:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	68b9      	ldr	r1, [r7, #8]
 8002026:	6978      	ldr	r0, [r7, #20]
 8002028:	f7ff ff8e 	bl	8001f48 <NVIC_EncodePriority>
 800202c:	4602      	mov	r2, r0
 800202e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002032:	4611      	mov	r1, r2
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff ff5d 	bl	8001ef4 <__NVIC_SetPriority>
}
 800203a:	bf00      	nop
 800203c:	3718      	adds	r7, #24
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b082      	sub	sp, #8
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f7ff ffb0 	bl	8001fb0 <SysTick_Config>
 8002050:	4603      	mov	r3, r0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
	...

0800205c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800205c:	b480      	push	{r7}
 800205e:	b089      	sub	sp, #36	; 0x24
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002066:	2300      	movs	r3, #0
 8002068:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800206a:	2300      	movs	r3, #0
 800206c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800206e:	2300      	movs	r3, #0
 8002070:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002072:	2300      	movs	r3, #0
 8002074:	61fb      	str	r3, [r7, #28]
 8002076:	e159      	b.n	800232c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002078:	2201      	movs	r2, #1
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	697a      	ldr	r2, [r7, #20]
 8002088:	4013      	ands	r3, r2
 800208a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	429a      	cmp	r2, r3
 8002092:	f040 8148 	bne.w	8002326 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f003 0303 	and.w	r3, r3, #3
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d005      	beq.n	80020ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d130      	bne.n	8002110 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	2203      	movs	r2, #3
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	43db      	mvns	r3, r3
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	4013      	ands	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	68da      	ldr	r2, [r3, #12]
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020e4:	2201      	movs	r2, #1
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	43db      	mvns	r3, r3
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	4013      	ands	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	091b      	lsrs	r3, r3, #4
 80020fa:	f003 0201 	and.w	r2, r3, #1
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	4313      	orrs	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f003 0303 	and.w	r3, r3, #3
 8002118:	2b03      	cmp	r3, #3
 800211a:	d017      	beq.n	800214c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	2203      	movs	r2, #3
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	43db      	mvns	r3, r3
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	4013      	ands	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	689a      	ldr	r2, [r3, #8]
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	4313      	orrs	r3, r2
 8002144:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f003 0303 	and.w	r3, r3, #3
 8002154:	2b02      	cmp	r3, #2
 8002156:	d123      	bne.n	80021a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	08da      	lsrs	r2, r3, #3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	3208      	adds	r2, #8
 8002160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002164:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	f003 0307 	and.w	r3, r3, #7
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	220f      	movs	r2, #15
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	43db      	mvns	r3, r3
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	4013      	ands	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	691a      	ldr	r2, [r3, #16]
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	f003 0307 	and.w	r3, r3, #7
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	4313      	orrs	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	08da      	lsrs	r2, r3, #3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	3208      	adds	r2, #8
 800219a:	69b9      	ldr	r1, [r7, #24]
 800219c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	2203      	movs	r2, #3
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	43db      	mvns	r3, r3
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	4013      	ands	r3, r2
 80021b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f003 0203 	and.w	r2, r3, #3
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	f000 80a2 	beq.w	8002326 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021e2:	2300      	movs	r3, #0
 80021e4:	60fb      	str	r3, [r7, #12]
 80021e6:	4b57      	ldr	r3, [pc, #348]	; (8002344 <HAL_GPIO_Init+0x2e8>)
 80021e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ea:	4a56      	ldr	r2, [pc, #344]	; (8002344 <HAL_GPIO_Init+0x2e8>)
 80021ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021f0:	6453      	str	r3, [r2, #68]	; 0x44
 80021f2:	4b54      	ldr	r3, [pc, #336]	; (8002344 <HAL_GPIO_Init+0x2e8>)
 80021f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021fa:	60fb      	str	r3, [r7, #12]
 80021fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021fe:	4a52      	ldr	r2, [pc, #328]	; (8002348 <HAL_GPIO_Init+0x2ec>)
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	089b      	lsrs	r3, r3, #2
 8002204:	3302      	adds	r3, #2
 8002206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800220a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	f003 0303 	and.w	r3, r3, #3
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	220f      	movs	r2, #15
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	43db      	mvns	r3, r3
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	4013      	ands	r3, r2
 8002220:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a49      	ldr	r2, [pc, #292]	; (800234c <HAL_GPIO_Init+0x2f0>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d019      	beq.n	800225e <HAL_GPIO_Init+0x202>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a48      	ldr	r2, [pc, #288]	; (8002350 <HAL_GPIO_Init+0x2f4>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d013      	beq.n	800225a <HAL_GPIO_Init+0x1fe>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a47      	ldr	r2, [pc, #284]	; (8002354 <HAL_GPIO_Init+0x2f8>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d00d      	beq.n	8002256 <HAL_GPIO_Init+0x1fa>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a46      	ldr	r2, [pc, #280]	; (8002358 <HAL_GPIO_Init+0x2fc>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d007      	beq.n	8002252 <HAL_GPIO_Init+0x1f6>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a45      	ldr	r2, [pc, #276]	; (800235c <HAL_GPIO_Init+0x300>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d101      	bne.n	800224e <HAL_GPIO_Init+0x1f2>
 800224a:	2304      	movs	r3, #4
 800224c:	e008      	b.n	8002260 <HAL_GPIO_Init+0x204>
 800224e:	2307      	movs	r3, #7
 8002250:	e006      	b.n	8002260 <HAL_GPIO_Init+0x204>
 8002252:	2303      	movs	r3, #3
 8002254:	e004      	b.n	8002260 <HAL_GPIO_Init+0x204>
 8002256:	2302      	movs	r3, #2
 8002258:	e002      	b.n	8002260 <HAL_GPIO_Init+0x204>
 800225a:	2301      	movs	r3, #1
 800225c:	e000      	b.n	8002260 <HAL_GPIO_Init+0x204>
 800225e:	2300      	movs	r3, #0
 8002260:	69fa      	ldr	r2, [r7, #28]
 8002262:	f002 0203 	and.w	r2, r2, #3
 8002266:	0092      	lsls	r2, r2, #2
 8002268:	4093      	lsls	r3, r2
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4313      	orrs	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002270:	4935      	ldr	r1, [pc, #212]	; (8002348 <HAL_GPIO_Init+0x2ec>)
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	089b      	lsrs	r3, r3, #2
 8002276:	3302      	adds	r3, #2
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800227e:	4b38      	ldr	r3, [pc, #224]	; (8002360 <HAL_GPIO_Init+0x304>)
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	43db      	mvns	r3, r3
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	4013      	ands	r3, r2
 800228c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d003      	beq.n	80022a2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	4313      	orrs	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022a2:	4a2f      	ldr	r2, [pc, #188]	; (8002360 <HAL_GPIO_Init+0x304>)
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022a8:	4b2d      	ldr	r3, [pc, #180]	; (8002360 <HAL_GPIO_Init+0x304>)
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	43db      	mvns	r3, r3
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	4013      	ands	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d003      	beq.n	80022cc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022cc:	4a24      	ldr	r2, [pc, #144]	; (8002360 <HAL_GPIO_Init+0x304>)
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022d2:	4b23      	ldr	r3, [pc, #140]	; (8002360 <HAL_GPIO_Init+0x304>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	43db      	mvns	r3, r3
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	4013      	ands	r3, r2
 80022e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d003      	beq.n	80022f6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022f6:	4a1a      	ldr	r2, [pc, #104]	; (8002360 <HAL_GPIO_Init+0x304>)
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022fc:	4b18      	ldr	r3, [pc, #96]	; (8002360 <HAL_GPIO_Init+0x304>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	43db      	mvns	r3, r3
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	4013      	ands	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d003      	beq.n	8002320 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	4313      	orrs	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002320:	4a0f      	ldr	r2, [pc, #60]	; (8002360 <HAL_GPIO_Init+0x304>)
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	3301      	adds	r3, #1
 800232a:	61fb      	str	r3, [r7, #28]
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	2b0f      	cmp	r3, #15
 8002330:	f67f aea2 	bls.w	8002078 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002334:	bf00      	nop
 8002336:	bf00      	nop
 8002338:	3724      	adds	r7, #36	; 0x24
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	40023800 	.word	0x40023800
 8002348:	40013800 	.word	0x40013800
 800234c:	40020000 	.word	0x40020000
 8002350:	40020400 	.word	0x40020400
 8002354:	40020800 	.word	0x40020800
 8002358:	40020c00 	.word	0x40020c00
 800235c:	40021000 	.word	0x40021000
 8002360:	40013c00 	.word	0x40013c00

08002364 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e267      	b.n	8002846 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	2b00      	cmp	r3, #0
 8002380:	d075      	beq.n	800246e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002382:	4b88      	ldr	r3, [pc, #544]	; (80025a4 <HAL_RCC_OscConfig+0x240>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f003 030c 	and.w	r3, r3, #12
 800238a:	2b04      	cmp	r3, #4
 800238c:	d00c      	beq.n	80023a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800238e:	4b85      	ldr	r3, [pc, #532]	; (80025a4 <HAL_RCC_OscConfig+0x240>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002396:	2b08      	cmp	r3, #8
 8002398:	d112      	bne.n	80023c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800239a:	4b82      	ldr	r3, [pc, #520]	; (80025a4 <HAL_RCC_OscConfig+0x240>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023a6:	d10b      	bne.n	80023c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a8:	4b7e      	ldr	r3, [pc, #504]	; (80025a4 <HAL_RCC_OscConfig+0x240>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d05b      	beq.n	800246c <HAL_RCC_OscConfig+0x108>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d157      	bne.n	800246c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e242      	b.n	8002846 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023c8:	d106      	bne.n	80023d8 <HAL_RCC_OscConfig+0x74>
 80023ca:	4b76      	ldr	r3, [pc, #472]	; (80025a4 <HAL_RCC_OscConfig+0x240>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a75      	ldr	r2, [pc, #468]	; (80025a4 <HAL_RCC_OscConfig+0x240>)
 80023d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023d4:	6013      	str	r3, [r2, #0]
 80023d6:	e01d      	b.n	8002414 <HAL_RCC_OscConfig+0xb0>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023e0:	d10c      	bne.n	80023fc <HAL_RCC_OscConfig+0x98>
 80023e2:	4b70      	ldr	r3, [pc, #448]	; (80025a4 <HAL_RCC_OscConfig+0x240>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a6f      	ldr	r2, [pc, #444]	; (80025a4 <HAL_RCC_OscConfig+0x240>)
 80023e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023ec:	6013      	str	r3, [r2, #0]
 80023ee:	4b6d      	ldr	r3, [pc, #436]	; (80025a4 <HAL_RCC_OscConfig+0x240>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a6c      	ldr	r2, [pc, #432]	; (80025a4 <HAL_RCC_OscConfig+0x240>)
 80023f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023f8:	6013      	str	r3, [r2, #0]
 80023fa:	e00b      	b.n	8002414 <HAL_RCC_OscConfig+0xb0>
 80023fc:	4b69      	ldr	r3, [pc, #420]	; (80025a4 <HAL_RCC_OscConfig+0x240>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a68      	ldr	r2, [pc, #416]	; (80025a4 <HAL_RCC_OscConfig+0x240>)
 8002402:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002406:	6013      	str	r3, [r2, #0]
 8002408:	4b66      	ldr	r3, [pc, #408]	; (80025a4 <HAL_RCC_OscConfig+0x240>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a65      	ldr	r2, [pc, #404]	; (80025a4 <HAL_RCC_OscConfig+0x240>)
 800240e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002412:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d013      	beq.n	8002444 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800241c:	f7ff f95a 	bl	80016d4 <HAL_GetTick>
 8002420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002422:	e008      	b.n	8002436 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002424:	f7ff f956 	bl	80016d4 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b64      	cmp	r3, #100	; 0x64
 8002430:	d901      	bls.n	8002436 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e207      	b.n	8002846 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002436:	4b5b      	ldr	r3, [pc, #364]	; (80025a4 <HAL_RCC_OscConfig+0x240>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d0f0      	beq.n	8002424 <HAL_RCC_OscConfig+0xc0>
 8002442:	e014      	b.n	800246e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002444:	f7ff f946 	bl	80016d4 <HAL_GetTick>
 8002448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800244a:	e008      	b.n	800245e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800244c:	f7ff f942 	bl	80016d4 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b64      	cmp	r3, #100	; 0x64
 8002458:	d901      	bls.n	800245e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e1f3      	b.n	8002846 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800245e:	4b51      	ldr	r3, [pc, #324]	; (80025a4 <HAL_RCC_OscConfig+0x240>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1f0      	bne.n	800244c <HAL_RCC_OscConfig+0xe8>
 800246a:	e000      	b.n	800246e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800246c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d063      	beq.n	8002542 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800247a:	4b4a      	ldr	r3, [pc, #296]	; (80025a4 <HAL_RCC_OscConfig+0x240>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f003 030c 	and.w	r3, r3, #12
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00b      	beq.n	800249e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002486:	4b47      	ldr	r3, [pc, #284]	; (80025a4 <HAL_RCC_OscConfig+0x240>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800248e:	2b08      	cmp	r3, #8
 8002490:	d11c      	bne.n	80024cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002492:	4b44      	ldr	r3, [pc, #272]	; (80025a4 <HAL_RCC_OscConfig+0x240>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d116      	bne.n	80024cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800249e:	4b41      	ldr	r3, [pc, #260]	; (80025a4 <HAL_RCC_OscConfig+0x240>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d005      	beq.n	80024b6 <HAL_RCC_OscConfig+0x152>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d001      	beq.n	80024b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e1c7      	b.n	8002846 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024b6:	4b3b      	ldr	r3, [pc, #236]	; (80025a4 <HAL_RCC_OscConfig+0x240>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	00db      	lsls	r3, r3, #3
 80024c4:	4937      	ldr	r1, [pc, #220]	; (80025a4 <HAL_RCC_OscConfig+0x240>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ca:	e03a      	b.n	8002542 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d020      	beq.n	8002516 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024d4:	4b34      	ldr	r3, [pc, #208]	; (80025a8 <HAL_RCC_OscConfig+0x244>)
 80024d6:	2201      	movs	r2, #1
 80024d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024da:	f7ff f8fb 	bl	80016d4 <HAL_GetTick>
 80024de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024e0:	e008      	b.n	80024f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024e2:	f7ff f8f7 	bl	80016d4 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e1a8      	b.n	8002846 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f4:	4b2b      	ldr	r3, [pc, #172]	; (80025a4 <HAL_RCC_OscConfig+0x240>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d0f0      	beq.n	80024e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002500:	4b28      	ldr	r3, [pc, #160]	; (80025a4 <HAL_RCC_OscConfig+0x240>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	691b      	ldr	r3, [r3, #16]
 800250c:	00db      	lsls	r3, r3, #3
 800250e:	4925      	ldr	r1, [pc, #148]	; (80025a4 <HAL_RCC_OscConfig+0x240>)
 8002510:	4313      	orrs	r3, r2
 8002512:	600b      	str	r3, [r1, #0]
 8002514:	e015      	b.n	8002542 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002516:	4b24      	ldr	r3, [pc, #144]	; (80025a8 <HAL_RCC_OscConfig+0x244>)
 8002518:	2200      	movs	r2, #0
 800251a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800251c:	f7ff f8da 	bl	80016d4 <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002522:	e008      	b.n	8002536 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002524:	f7ff f8d6 	bl	80016d4 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e187      	b.n	8002846 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002536:	4b1b      	ldr	r3, [pc, #108]	; (80025a4 <HAL_RCC_OscConfig+0x240>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d1f0      	bne.n	8002524 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0308 	and.w	r3, r3, #8
 800254a:	2b00      	cmp	r3, #0
 800254c:	d036      	beq.n	80025bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d016      	beq.n	8002584 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002556:	4b15      	ldr	r3, [pc, #84]	; (80025ac <HAL_RCC_OscConfig+0x248>)
 8002558:	2201      	movs	r2, #1
 800255a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800255c:	f7ff f8ba 	bl	80016d4 <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002564:	f7ff f8b6 	bl	80016d4 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e167      	b.n	8002846 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002576:	4b0b      	ldr	r3, [pc, #44]	; (80025a4 <HAL_RCC_OscConfig+0x240>)
 8002578:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d0f0      	beq.n	8002564 <HAL_RCC_OscConfig+0x200>
 8002582:	e01b      	b.n	80025bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002584:	4b09      	ldr	r3, [pc, #36]	; (80025ac <HAL_RCC_OscConfig+0x248>)
 8002586:	2200      	movs	r2, #0
 8002588:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800258a:	f7ff f8a3 	bl	80016d4 <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002590:	e00e      	b.n	80025b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002592:	f7ff f89f 	bl	80016d4 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d907      	bls.n	80025b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e150      	b.n	8002846 <HAL_RCC_OscConfig+0x4e2>
 80025a4:	40023800 	.word	0x40023800
 80025a8:	42470000 	.word	0x42470000
 80025ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025b0:	4b88      	ldr	r3, [pc, #544]	; (80027d4 <HAL_RCC_OscConfig+0x470>)
 80025b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025b4:	f003 0302 	and.w	r3, r3, #2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d1ea      	bne.n	8002592 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0304 	and.w	r3, r3, #4
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f000 8097 	beq.w	80026f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025ca:	2300      	movs	r3, #0
 80025cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025ce:	4b81      	ldr	r3, [pc, #516]	; (80027d4 <HAL_RCC_OscConfig+0x470>)
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d10f      	bne.n	80025fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025da:	2300      	movs	r3, #0
 80025dc:	60bb      	str	r3, [r7, #8]
 80025de:	4b7d      	ldr	r3, [pc, #500]	; (80027d4 <HAL_RCC_OscConfig+0x470>)
 80025e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e2:	4a7c      	ldr	r2, [pc, #496]	; (80027d4 <HAL_RCC_OscConfig+0x470>)
 80025e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025e8:	6413      	str	r3, [r2, #64]	; 0x40
 80025ea:	4b7a      	ldr	r3, [pc, #488]	; (80027d4 <HAL_RCC_OscConfig+0x470>)
 80025ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f2:	60bb      	str	r3, [r7, #8]
 80025f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025f6:	2301      	movs	r3, #1
 80025f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025fa:	4b77      	ldr	r3, [pc, #476]	; (80027d8 <HAL_RCC_OscConfig+0x474>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002602:	2b00      	cmp	r3, #0
 8002604:	d118      	bne.n	8002638 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002606:	4b74      	ldr	r3, [pc, #464]	; (80027d8 <HAL_RCC_OscConfig+0x474>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a73      	ldr	r2, [pc, #460]	; (80027d8 <HAL_RCC_OscConfig+0x474>)
 800260c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002610:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002612:	f7ff f85f 	bl	80016d4 <HAL_GetTick>
 8002616:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002618:	e008      	b.n	800262c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800261a:	f7ff f85b 	bl	80016d4 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d901      	bls.n	800262c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e10c      	b.n	8002846 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800262c:	4b6a      	ldr	r3, [pc, #424]	; (80027d8 <HAL_RCC_OscConfig+0x474>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002634:	2b00      	cmp	r3, #0
 8002636:	d0f0      	beq.n	800261a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d106      	bne.n	800264e <HAL_RCC_OscConfig+0x2ea>
 8002640:	4b64      	ldr	r3, [pc, #400]	; (80027d4 <HAL_RCC_OscConfig+0x470>)
 8002642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002644:	4a63      	ldr	r2, [pc, #396]	; (80027d4 <HAL_RCC_OscConfig+0x470>)
 8002646:	f043 0301 	orr.w	r3, r3, #1
 800264a:	6713      	str	r3, [r2, #112]	; 0x70
 800264c:	e01c      	b.n	8002688 <HAL_RCC_OscConfig+0x324>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	2b05      	cmp	r3, #5
 8002654:	d10c      	bne.n	8002670 <HAL_RCC_OscConfig+0x30c>
 8002656:	4b5f      	ldr	r3, [pc, #380]	; (80027d4 <HAL_RCC_OscConfig+0x470>)
 8002658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265a:	4a5e      	ldr	r2, [pc, #376]	; (80027d4 <HAL_RCC_OscConfig+0x470>)
 800265c:	f043 0304 	orr.w	r3, r3, #4
 8002660:	6713      	str	r3, [r2, #112]	; 0x70
 8002662:	4b5c      	ldr	r3, [pc, #368]	; (80027d4 <HAL_RCC_OscConfig+0x470>)
 8002664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002666:	4a5b      	ldr	r2, [pc, #364]	; (80027d4 <HAL_RCC_OscConfig+0x470>)
 8002668:	f043 0301 	orr.w	r3, r3, #1
 800266c:	6713      	str	r3, [r2, #112]	; 0x70
 800266e:	e00b      	b.n	8002688 <HAL_RCC_OscConfig+0x324>
 8002670:	4b58      	ldr	r3, [pc, #352]	; (80027d4 <HAL_RCC_OscConfig+0x470>)
 8002672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002674:	4a57      	ldr	r2, [pc, #348]	; (80027d4 <HAL_RCC_OscConfig+0x470>)
 8002676:	f023 0301 	bic.w	r3, r3, #1
 800267a:	6713      	str	r3, [r2, #112]	; 0x70
 800267c:	4b55      	ldr	r3, [pc, #340]	; (80027d4 <HAL_RCC_OscConfig+0x470>)
 800267e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002680:	4a54      	ldr	r2, [pc, #336]	; (80027d4 <HAL_RCC_OscConfig+0x470>)
 8002682:	f023 0304 	bic.w	r3, r3, #4
 8002686:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d015      	beq.n	80026bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002690:	f7ff f820 	bl	80016d4 <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002696:	e00a      	b.n	80026ae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002698:	f7ff f81c 	bl	80016d4 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e0cb      	b.n	8002846 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ae:	4b49      	ldr	r3, [pc, #292]	; (80027d4 <HAL_RCC_OscConfig+0x470>)
 80026b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d0ee      	beq.n	8002698 <HAL_RCC_OscConfig+0x334>
 80026ba:	e014      	b.n	80026e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026bc:	f7ff f80a 	bl	80016d4 <HAL_GetTick>
 80026c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026c2:	e00a      	b.n	80026da <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026c4:	f7ff f806 	bl	80016d4 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e0b5      	b.n	8002846 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026da:	4b3e      	ldr	r3, [pc, #248]	; (80027d4 <HAL_RCC_OscConfig+0x470>)
 80026dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d1ee      	bne.n	80026c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026e6:	7dfb      	ldrb	r3, [r7, #23]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d105      	bne.n	80026f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026ec:	4b39      	ldr	r3, [pc, #228]	; (80027d4 <HAL_RCC_OscConfig+0x470>)
 80026ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f0:	4a38      	ldr	r2, [pc, #224]	; (80027d4 <HAL_RCC_OscConfig+0x470>)
 80026f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f000 80a1 	beq.w	8002844 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002702:	4b34      	ldr	r3, [pc, #208]	; (80027d4 <HAL_RCC_OscConfig+0x470>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f003 030c 	and.w	r3, r3, #12
 800270a:	2b08      	cmp	r3, #8
 800270c:	d05c      	beq.n	80027c8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	2b02      	cmp	r3, #2
 8002714:	d141      	bne.n	800279a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002716:	4b31      	ldr	r3, [pc, #196]	; (80027dc <HAL_RCC_OscConfig+0x478>)
 8002718:	2200      	movs	r2, #0
 800271a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800271c:	f7fe ffda 	bl	80016d4 <HAL_GetTick>
 8002720:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002722:	e008      	b.n	8002736 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002724:	f7fe ffd6 	bl	80016d4 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b02      	cmp	r3, #2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e087      	b.n	8002846 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002736:	4b27      	ldr	r3, [pc, #156]	; (80027d4 <HAL_RCC_OscConfig+0x470>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1f0      	bne.n	8002724 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	69da      	ldr	r2, [r3, #28]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a1b      	ldr	r3, [r3, #32]
 800274a:	431a      	orrs	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002750:	019b      	lsls	r3, r3, #6
 8002752:	431a      	orrs	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002758:	085b      	lsrs	r3, r3, #1
 800275a:	3b01      	subs	r3, #1
 800275c:	041b      	lsls	r3, r3, #16
 800275e:	431a      	orrs	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002764:	061b      	lsls	r3, r3, #24
 8002766:	491b      	ldr	r1, [pc, #108]	; (80027d4 <HAL_RCC_OscConfig+0x470>)
 8002768:	4313      	orrs	r3, r2
 800276a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800276c:	4b1b      	ldr	r3, [pc, #108]	; (80027dc <HAL_RCC_OscConfig+0x478>)
 800276e:	2201      	movs	r2, #1
 8002770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002772:	f7fe ffaf 	bl	80016d4 <HAL_GetTick>
 8002776:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002778:	e008      	b.n	800278c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800277a:	f7fe ffab 	bl	80016d4 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d901      	bls.n	800278c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e05c      	b.n	8002846 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800278c:	4b11      	ldr	r3, [pc, #68]	; (80027d4 <HAL_RCC_OscConfig+0x470>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d0f0      	beq.n	800277a <HAL_RCC_OscConfig+0x416>
 8002798:	e054      	b.n	8002844 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800279a:	4b10      	ldr	r3, [pc, #64]	; (80027dc <HAL_RCC_OscConfig+0x478>)
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a0:	f7fe ff98 	bl	80016d4 <HAL_GetTick>
 80027a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027a6:	e008      	b.n	80027ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027a8:	f7fe ff94 	bl	80016d4 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e045      	b.n	8002846 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ba:	4b06      	ldr	r3, [pc, #24]	; (80027d4 <HAL_RCC_OscConfig+0x470>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d1f0      	bne.n	80027a8 <HAL_RCC_OscConfig+0x444>
 80027c6:	e03d      	b.n	8002844 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d107      	bne.n	80027e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e038      	b.n	8002846 <HAL_RCC_OscConfig+0x4e2>
 80027d4:	40023800 	.word	0x40023800
 80027d8:	40007000 	.word	0x40007000
 80027dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027e0:	4b1b      	ldr	r3, [pc, #108]	; (8002850 <HAL_RCC_OscConfig+0x4ec>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d028      	beq.n	8002840 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d121      	bne.n	8002840 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002806:	429a      	cmp	r2, r3
 8002808:	d11a      	bne.n	8002840 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002810:	4013      	ands	r3, r2
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002816:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002818:	4293      	cmp	r3, r2
 800281a:	d111      	bne.n	8002840 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002826:	085b      	lsrs	r3, r3, #1
 8002828:	3b01      	subs	r3, #1
 800282a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800282c:	429a      	cmp	r2, r3
 800282e:	d107      	bne.n	8002840 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800283c:	429a      	cmp	r2, r3
 800283e:	d001      	beq.n	8002844 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e000      	b.n	8002846 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3718      	adds	r7, #24
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	40023800 	.word	0x40023800

08002854 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d101      	bne.n	8002868 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e0cc      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002868:	4b68      	ldr	r3, [pc, #416]	; (8002a0c <HAL_RCC_ClockConfig+0x1b8>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0307 	and.w	r3, r3, #7
 8002870:	683a      	ldr	r2, [r7, #0]
 8002872:	429a      	cmp	r2, r3
 8002874:	d90c      	bls.n	8002890 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002876:	4b65      	ldr	r3, [pc, #404]	; (8002a0c <HAL_RCC_ClockConfig+0x1b8>)
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	b2d2      	uxtb	r2, r2
 800287c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800287e:	4b63      	ldr	r3, [pc, #396]	; (8002a0c <HAL_RCC_ClockConfig+0x1b8>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0307 	and.w	r3, r3, #7
 8002886:	683a      	ldr	r2, [r7, #0]
 8002888:	429a      	cmp	r2, r3
 800288a:	d001      	beq.n	8002890 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e0b8      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d020      	beq.n	80028de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0304 	and.w	r3, r3, #4
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d005      	beq.n	80028b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028a8:	4b59      	ldr	r3, [pc, #356]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	4a58      	ldr	r2, [pc, #352]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80028ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0308 	and.w	r3, r3, #8
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d005      	beq.n	80028cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028c0:	4b53      	ldr	r3, [pc, #332]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	4a52      	ldr	r2, [pc, #328]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80028c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80028ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028cc:	4b50      	ldr	r3, [pc, #320]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	494d      	ldr	r1, [pc, #308]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d044      	beq.n	8002974 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d107      	bne.n	8002902 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028f2:	4b47      	ldr	r3, [pc, #284]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d119      	bne.n	8002932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e07f      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	2b02      	cmp	r3, #2
 8002908:	d003      	beq.n	8002912 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800290e:	2b03      	cmp	r3, #3
 8002910:	d107      	bne.n	8002922 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002912:	4b3f      	ldr	r3, [pc, #252]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d109      	bne.n	8002932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e06f      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002922:	4b3b      	ldr	r3, [pc, #236]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e067      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002932:	4b37      	ldr	r3, [pc, #220]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f023 0203 	bic.w	r2, r3, #3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	4934      	ldr	r1, [pc, #208]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 8002940:	4313      	orrs	r3, r2
 8002942:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002944:	f7fe fec6 	bl	80016d4 <HAL_GetTick>
 8002948:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800294a:	e00a      	b.n	8002962 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800294c:	f7fe fec2 	bl	80016d4 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	f241 3288 	movw	r2, #5000	; 0x1388
 800295a:	4293      	cmp	r3, r2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e04f      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002962:	4b2b      	ldr	r3, [pc, #172]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f003 020c 	and.w	r2, r3, #12
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	429a      	cmp	r2, r3
 8002972:	d1eb      	bne.n	800294c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002974:	4b25      	ldr	r3, [pc, #148]	; (8002a0c <HAL_RCC_ClockConfig+0x1b8>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0307 	and.w	r3, r3, #7
 800297c:	683a      	ldr	r2, [r7, #0]
 800297e:	429a      	cmp	r2, r3
 8002980:	d20c      	bcs.n	800299c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002982:	4b22      	ldr	r3, [pc, #136]	; (8002a0c <HAL_RCC_ClockConfig+0x1b8>)
 8002984:	683a      	ldr	r2, [r7, #0]
 8002986:	b2d2      	uxtb	r2, r2
 8002988:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800298a:	4b20      	ldr	r3, [pc, #128]	; (8002a0c <HAL_RCC_ClockConfig+0x1b8>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0307 	and.w	r3, r3, #7
 8002992:	683a      	ldr	r2, [r7, #0]
 8002994:	429a      	cmp	r2, r3
 8002996:	d001      	beq.n	800299c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e032      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0304 	and.w	r3, r3, #4
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d008      	beq.n	80029ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029a8:	4b19      	ldr	r3, [pc, #100]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	4916      	ldr	r1, [pc, #88]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0308 	and.w	r3, r3, #8
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d009      	beq.n	80029da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029c6:	4b12      	ldr	r3, [pc, #72]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	490e      	ldr	r1, [pc, #56]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029da:	f000 f821 	bl	8002a20 <HAL_RCC_GetSysClockFreq>
 80029de:	4602      	mov	r2, r0
 80029e0:	4b0b      	ldr	r3, [pc, #44]	; (8002a10 <HAL_RCC_ClockConfig+0x1bc>)
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	091b      	lsrs	r3, r3, #4
 80029e6:	f003 030f 	and.w	r3, r3, #15
 80029ea:	490a      	ldr	r1, [pc, #40]	; (8002a14 <HAL_RCC_ClockConfig+0x1c0>)
 80029ec:	5ccb      	ldrb	r3, [r1, r3]
 80029ee:	fa22 f303 	lsr.w	r3, r2, r3
 80029f2:	4a09      	ldr	r2, [pc, #36]	; (8002a18 <HAL_RCC_ClockConfig+0x1c4>)
 80029f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80029f6:	4b09      	ldr	r3, [pc, #36]	; (8002a1c <HAL_RCC_ClockConfig+0x1c8>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7fe fe26 	bl	800164c <HAL_InitTick>

  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3710      	adds	r7, #16
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	40023c00 	.word	0x40023c00
 8002a10:	40023800 	.word	0x40023800
 8002a14:	08005fc4 	.word	0x08005fc4
 8002a18:	20000000 	.word	0x20000000
 8002a1c:	20000004 	.word	0x20000004

08002a20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a24:	b090      	sub	sp, #64	; 0x40
 8002a26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	637b      	str	r3, [r7, #52]	; 0x34
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a30:	2300      	movs	r3, #0
 8002a32:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002a34:	2300      	movs	r3, #0
 8002a36:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a38:	4b59      	ldr	r3, [pc, #356]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f003 030c 	and.w	r3, r3, #12
 8002a40:	2b08      	cmp	r3, #8
 8002a42:	d00d      	beq.n	8002a60 <HAL_RCC_GetSysClockFreq+0x40>
 8002a44:	2b08      	cmp	r3, #8
 8002a46:	f200 80a1 	bhi.w	8002b8c <HAL_RCC_GetSysClockFreq+0x16c>
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d002      	beq.n	8002a54 <HAL_RCC_GetSysClockFreq+0x34>
 8002a4e:	2b04      	cmp	r3, #4
 8002a50:	d003      	beq.n	8002a5a <HAL_RCC_GetSysClockFreq+0x3a>
 8002a52:	e09b      	b.n	8002b8c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a54:	4b53      	ldr	r3, [pc, #332]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002a56:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002a58:	e09b      	b.n	8002b92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a5a:	4b53      	ldr	r3, [pc, #332]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a5c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a5e:	e098      	b.n	8002b92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a60:	4b4f      	ldr	r3, [pc, #316]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a68:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a6a:	4b4d      	ldr	r3, [pc, #308]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d028      	beq.n	8002ac8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a76:	4b4a      	ldr	r3, [pc, #296]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	099b      	lsrs	r3, r3, #6
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	623b      	str	r3, [r7, #32]
 8002a80:	627a      	str	r2, [r7, #36]	; 0x24
 8002a82:	6a3b      	ldr	r3, [r7, #32]
 8002a84:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002a88:	2100      	movs	r1, #0
 8002a8a:	4b47      	ldr	r3, [pc, #284]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a8c:	fb03 f201 	mul.w	r2, r3, r1
 8002a90:	2300      	movs	r3, #0
 8002a92:	fb00 f303 	mul.w	r3, r0, r3
 8002a96:	4413      	add	r3, r2
 8002a98:	4a43      	ldr	r2, [pc, #268]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a9a:	fba0 1202 	umull	r1, r2, r0, r2
 8002a9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002aa0:	460a      	mov	r2, r1
 8002aa2:	62ba      	str	r2, [r7, #40]	; 0x28
 8002aa4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002aa6:	4413      	add	r3, r2
 8002aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aac:	2200      	movs	r2, #0
 8002aae:	61bb      	str	r3, [r7, #24]
 8002ab0:	61fa      	str	r2, [r7, #28]
 8002ab2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ab6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002aba:	f7fe f87d 	bl	8000bb8 <__aeabi_uldivmod>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ac6:	e053      	b.n	8002b70 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ac8:	4b35      	ldr	r3, [pc, #212]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	099b      	lsrs	r3, r3, #6
 8002ace:	2200      	movs	r2, #0
 8002ad0:	613b      	str	r3, [r7, #16]
 8002ad2:	617a      	str	r2, [r7, #20]
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002ada:	f04f 0b00 	mov.w	fp, #0
 8002ade:	4652      	mov	r2, sl
 8002ae0:	465b      	mov	r3, fp
 8002ae2:	f04f 0000 	mov.w	r0, #0
 8002ae6:	f04f 0100 	mov.w	r1, #0
 8002aea:	0159      	lsls	r1, r3, #5
 8002aec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002af0:	0150      	lsls	r0, r2, #5
 8002af2:	4602      	mov	r2, r0
 8002af4:	460b      	mov	r3, r1
 8002af6:	ebb2 080a 	subs.w	r8, r2, sl
 8002afa:	eb63 090b 	sbc.w	r9, r3, fp
 8002afe:	f04f 0200 	mov.w	r2, #0
 8002b02:	f04f 0300 	mov.w	r3, #0
 8002b06:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002b0a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002b0e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002b12:	ebb2 0408 	subs.w	r4, r2, r8
 8002b16:	eb63 0509 	sbc.w	r5, r3, r9
 8002b1a:	f04f 0200 	mov.w	r2, #0
 8002b1e:	f04f 0300 	mov.w	r3, #0
 8002b22:	00eb      	lsls	r3, r5, #3
 8002b24:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b28:	00e2      	lsls	r2, r4, #3
 8002b2a:	4614      	mov	r4, r2
 8002b2c:	461d      	mov	r5, r3
 8002b2e:	eb14 030a 	adds.w	r3, r4, sl
 8002b32:	603b      	str	r3, [r7, #0]
 8002b34:	eb45 030b 	adc.w	r3, r5, fp
 8002b38:	607b      	str	r3, [r7, #4]
 8002b3a:	f04f 0200 	mov.w	r2, #0
 8002b3e:	f04f 0300 	mov.w	r3, #0
 8002b42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b46:	4629      	mov	r1, r5
 8002b48:	028b      	lsls	r3, r1, #10
 8002b4a:	4621      	mov	r1, r4
 8002b4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b50:	4621      	mov	r1, r4
 8002b52:	028a      	lsls	r2, r1, #10
 8002b54:	4610      	mov	r0, r2
 8002b56:	4619      	mov	r1, r3
 8002b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	60bb      	str	r3, [r7, #8]
 8002b5e:	60fa      	str	r2, [r7, #12]
 8002b60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b64:	f7fe f828 	bl	8000bb8 <__aeabi_uldivmod>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b70:	4b0b      	ldr	r3, [pc, #44]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	0c1b      	lsrs	r3, r3, #16
 8002b76:	f003 0303 	and.w	r3, r3, #3
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002b80:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b88:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b8a:	e002      	b.n	8002b92 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b8c:	4b05      	ldr	r3, [pc, #20]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002b8e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3740      	adds	r7, #64	; 0x40
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b9e:	bf00      	nop
 8002ba0:	40023800 	.word	0x40023800
 8002ba4:	00f42400 	.word	0x00f42400
 8002ba8:	017d7840 	.word	0x017d7840

08002bac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bb0:	4b03      	ldr	r3, [pc, #12]	; (8002bc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	20000000 	.word	0x20000000

08002bc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002bc8:	f7ff fff0 	bl	8002bac <HAL_RCC_GetHCLKFreq>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	4b05      	ldr	r3, [pc, #20]	; (8002be4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	0a9b      	lsrs	r3, r3, #10
 8002bd4:	f003 0307 	and.w	r3, r3, #7
 8002bd8:	4903      	ldr	r1, [pc, #12]	; (8002be8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bda:	5ccb      	ldrb	r3, [r1, r3]
 8002bdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	40023800 	.word	0x40023800
 8002be8:	08005fd4 	.word	0x08005fd4

08002bec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002bf0:	f7ff ffdc 	bl	8002bac <HAL_RCC_GetHCLKFreq>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	4b05      	ldr	r3, [pc, #20]	; (8002c0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	0b5b      	lsrs	r3, r3, #13
 8002bfc:	f003 0307 	and.w	r3, r3, #7
 8002c00:	4903      	ldr	r1, [pc, #12]	; (8002c10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c02:	5ccb      	ldrb	r3, [r1, r3]
 8002c04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	40023800 	.word	0x40023800
 8002c10:	08005fd4 	.word	0x08005fd4

08002c14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d101      	bne.n	8002c26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e03f      	b.n	8002ca6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d106      	bne.n	8002c40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f7fe fb70 	bl	8001320 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2224      	movs	r2, #36	; 0x24
 8002c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68da      	ldr	r2, [r3, #12]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f000 f929 	bl	8002eb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	691a      	ldr	r2, [r3, #16]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	695a      	ldr	r2, [r3, #20]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68da      	ldr	r2, [r3, #12]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2220      	movs	r2, #32
 8002c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2220      	movs	r2, #32
 8002ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3708      	adds	r7, #8
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b08a      	sub	sp, #40	; 0x28
 8002cb2:	af02      	add	r7, sp, #8
 8002cb4:	60f8      	str	r0, [r7, #12]
 8002cb6:	60b9      	str	r1, [r7, #8]
 8002cb8:	603b      	str	r3, [r7, #0]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b20      	cmp	r3, #32
 8002ccc:	d17c      	bne.n	8002dc8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d002      	beq.n	8002cda <HAL_UART_Transmit+0x2c>
 8002cd4:	88fb      	ldrh	r3, [r7, #6]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e075      	b.n	8002dca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d101      	bne.n	8002cec <HAL_UART_Transmit+0x3e>
 8002ce8:	2302      	movs	r3, #2
 8002cea:	e06e      	b.n	8002dca <HAL_UART_Transmit+0x11c>
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2221      	movs	r2, #33	; 0x21
 8002cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d02:	f7fe fce7 	bl	80016d4 <HAL_GetTick>
 8002d06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	88fa      	ldrh	r2, [r7, #6]
 8002d0c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	88fa      	ldrh	r2, [r7, #6]
 8002d12:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d1c:	d108      	bne.n	8002d30 <HAL_UART_Transmit+0x82>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d104      	bne.n	8002d30 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002d26:	2300      	movs	r3, #0
 8002d28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	61bb      	str	r3, [r7, #24]
 8002d2e:	e003      	b.n	8002d38 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d34:	2300      	movs	r3, #0
 8002d36:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002d40:	e02a      	b.n	8002d98 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	9300      	str	r3, [sp, #0]
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	2180      	movs	r1, #128	; 0x80
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	f000 f840 	bl	8002dd2 <UART_WaitOnFlagUntilTimeout>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e036      	b.n	8002dca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d10b      	bne.n	8002d7a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	881b      	ldrh	r3, [r3, #0]
 8002d66:	461a      	mov	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d70:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	3302      	adds	r3, #2
 8002d76:	61bb      	str	r3, [r7, #24]
 8002d78:	e007      	b.n	8002d8a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	781a      	ldrb	r2, [r3, #0]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	3301      	adds	r3, #1
 8002d88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	3b01      	subs	r3, #1
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d1cf      	bne.n	8002d42 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	9300      	str	r3, [sp, #0]
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	2200      	movs	r2, #0
 8002daa:	2140      	movs	r1, #64	; 0x40
 8002dac:	68f8      	ldr	r0, [r7, #12]
 8002dae:	f000 f810 	bl	8002dd2 <UART_WaitOnFlagUntilTimeout>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e006      	b.n	8002dca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2220      	movs	r2, #32
 8002dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	e000      	b.n	8002dca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002dc8:	2302      	movs	r3, #2
  }
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3720      	adds	r7, #32
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b090      	sub	sp, #64	; 0x40
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	60f8      	str	r0, [r7, #12]
 8002dda:	60b9      	str	r1, [r7, #8]
 8002ddc:	603b      	str	r3, [r7, #0]
 8002dde:	4613      	mov	r3, r2
 8002de0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002de2:	e050      	b.n	8002e86 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002de4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dea:	d04c      	beq.n	8002e86 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002dec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d007      	beq.n	8002e02 <UART_WaitOnFlagUntilTimeout+0x30>
 8002df2:	f7fe fc6f 	bl	80016d4 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d241      	bcs.n	8002e86 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	330c      	adds	r3, #12
 8002e08:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e0c:	e853 3f00 	ldrex	r3, [r3]
 8002e10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e14:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002e18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	330c      	adds	r3, #12
 8002e20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e22:	637a      	str	r2, [r7, #52]	; 0x34
 8002e24:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e26:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e2a:	e841 2300 	strex	r3, r2, [r1]
 8002e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1e5      	bne.n	8002e02 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	3314      	adds	r3, #20
 8002e3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	e853 3f00 	ldrex	r3, [r3]
 8002e44:	613b      	str	r3, [r7, #16]
   return(result);
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	f023 0301 	bic.w	r3, r3, #1
 8002e4c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	3314      	adds	r3, #20
 8002e54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e56:	623a      	str	r2, [r7, #32]
 8002e58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e5a:	69f9      	ldr	r1, [r7, #28]
 8002e5c:	6a3a      	ldr	r2, [r7, #32]
 8002e5e:	e841 2300 	strex	r3, r2, [r1]
 8002e62:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1e5      	bne.n	8002e36 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2220      	movs	r2, #32
 8002e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2220      	movs	r2, #32
 8002e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e00f      	b.n	8002ea6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	4013      	ands	r3, r2
 8002e90:	68ba      	ldr	r2, [r7, #8]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	bf0c      	ite	eq
 8002e96:	2301      	moveq	r3, #1
 8002e98:	2300      	movne	r3, #0
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	79fb      	ldrb	r3, [r7, #7]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d09f      	beq.n	8002de4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3740      	adds	r7, #64	; 0x40
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
	...

08002eb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002eb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002eb4:	b0c0      	sub	sp, #256	; 0x100
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	691b      	ldr	r3, [r3, #16]
 8002ec4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ecc:	68d9      	ldr	r1, [r3, #12]
 8002ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	ea40 0301 	orr.w	r3, r0, r1
 8002ed8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ede:	689a      	ldr	r2, [r3, #8]
 8002ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	431a      	orrs	r2, r3
 8002ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ef4:	69db      	ldr	r3, [r3, #28]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002f08:	f021 010c 	bic.w	r1, r1, #12
 8002f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002f16:	430b      	orrs	r3, r1
 8002f18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f2a:	6999      	ldr	r1, [r3, #24]
 8002f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	ea40 0301 	orr.w	r3, r0, r1
 8002f36:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	4b8f      	ldr	r3, [pc, #572]	; (800317c <UART_SetConfig+0x2cc>)
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d005      	beq.n	8002f50 <UART_SetConfig+0xa0>
 8002f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	4b8d      	ldr	r3, [pc, #564]	; (8003180 <UART_SetConfig+0x2d0>)
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d104      	bne.n	8002f5a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f50:	f7ff fe4c 	bl	8002bec <HAL_RCC_GetPCLK2Freq>
 8002f54:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002f58:	e003      	b.n	8002f62 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f5a:	f7ff fe33 	bl	8002bc4 <HAL_RCC_GetPCLK1Freq>
 8002f5e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f66:	69db      	ldr	r3, [r3, #28]
 8002f68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f6c:	f040 810c 	bne.w	8003188 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f74:	2200      	movs	r2, #0
 8002f76:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002f7a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002f7e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002f82:	4622      	mov	r2, r4
 8002f84:	462b      	mov	r3, r5
 8002f86:	1891      	adds	r1, r2, r2
 8002f88:	65b9      	str	r1, [r7, #88]	; 0x58
 8002f8a:	415b      	adcs	r3, r3
 8002f8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002f92:	4621      	mov	r1, r4
 8002f94:	eb12 0801 	adds.w	r8, r2, r1
 8002f98:	4629      	mov	r1, r5
 8002f9a:	eb43 0901 	adc.w	r9, r3, r1
 8002f9e:	f04f 0200 	mov.w	r2, #0
 8002fa2:	f04f 0300 	mov.w	r3, #0
 8002fa6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002faa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fb2:	4690      	mov	r8, r2
 8002fb4:	4699      	mov	r9, r3
 8002fb6:	4623      	mov	r3, r4
 8002fb8:	eb18 0303 	adds.w	r3, r8, r3
 8002fbc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002fc0:	462b      	mov	r3, r5
 8002fc2:	eb49 0303 	adc.w	r3, r9, r3
 8002fc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002fd6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002fda:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002fde:	460b      	mov	r3, r1
 8002fe0:	18db      	adds	r3, r3, r3
 8002fe2:	653b      	str	r3, [r7, #80]	; 0x50
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	eb42 0303 	adc.w	r3, r2, r3
 8002fea:	657b      	str	r3, [r7, #84]	; 0x54
 8002fec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002ff0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002ff4:	f7fd fde0 	bl	8000bb8 <__aeabi_uldivmod>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	4b61      	ldr	r3, [pc, #388]	; (8003184 <UART_SetConfig+0x2d4>)
 8002ffe:	fba3 2302 	umull	r2, r3, r3, r2
 8003002:	095b      	lsrs	r3, r3, #5
 8003004:	011c      	lsls	r4, r3, #4
 8003006:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800300a:	2200      	movs	r2, #0
 800300c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003010:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003014:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003018:	4642      	mov	r2, r8
 800301a:	464b      	mov	r3, r9
 800301c:	1891      	adds	r1, r2, r2
 800301e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003020:	415b      	adcs	r3, r3
 8003022:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003024:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003028:	4641      	mov	r1, r8
 800302a:	eb12 0a01 	adds.w	sl, r2, r1
 800302e:	4649      	mov	r1, r9
 8003030:	eb43 0b01 	adc.w	fp, r3, r1
 8003034:	f04f 0200 	mov.w	r2, #0
 8003038:	f04f 0300 	mov.w	r3, #0
 800303c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003040:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003044:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003048:	4692      	mov	sl, r2
 800304a:	469b      	mov	fp, r3
 800304c:	4643      	mov	r3, r8
 800304e:	eb1a 0303 	adds.w	r3, sl, r3
 8003052:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003056:	464b      	mov	r3, r9
 8003058:	eb4b 0303 	adc.w	r3, fp, r3
 800305c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800306c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003070:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003074:	460b      	mov	r3, r1
 8003076:	18db      	adds	r3, r3, r3
 8003078:	643b      	str	r3, [r7, #64]	; 0x40
 800307a:	4613      	mov	r3, r2
 800307c:	eb42 0303 	adc.w	r3, r2, r3
 8003080:	647b      	str	r3, [r7, #68]	; 0x44
 8003082:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003086:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800308a:	f7fd fd95 	bl	8000bb8 <__aeabi_uldivmod>
 800308e:	4602      	mov	r2, r0
 8003090:	460b      	mov	r3, r1
 8003092:	4611      	mov	r1, r2
 8003094:	4b3b      	ldr	r3, [pc, #236]	; (8003184 <UART_SetConfig+0x2d4>)
 8003096:	fba3 2301 	umull	r2, r3, r3, r1
 800309a:	095b      	lsrs	r3, r3, #5
 800309c:	2264      	movs	r2, #100	; 0x64
 800309e:	fb02 f303 	mul.w	r3, r2, r3
 80030a2:	1acb      	subs	r3, r1, r3
 80030a4:	00db      	lsls	r3, r3, #3
 80030a6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80030aa:	4b36      	ldr	r3, [pc, #216]	; (8003184 <UART_SetConfig+0x2d4>)
 80030ac:	fba3 2302 	umull	r2, r3, r3, r2
 80030b0:	095b      	lsrs	r3, r3, #5
 80030b2:	005b      	lsls	r3, r3, #1
 80030b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80030b8:	441c      	add	r4, r3
 80030ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030be:	2200      	movs	r2, #0
 80030c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80030c4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80030c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80030cc:	4642      	mov	r2, r8
 80030ce:	464b      	mov	r3, r9
 80030d0:	1891      	adds	r1, r2, r2
 80030d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80030d4:	415b      	adcs	r3, r3
 80030d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80030dc:	4641      	mov	r1, r8
 80030de:	1851      	adds	r1, r2, r1
 80030e0:	6339      	str	r1, [r7, #48]	; 0x30
 80030e2:	4649      	mov	r1, r9
 80030e4:	414b      	adcs	r3, r1
 80030e6:	637b      	str	r3, [r7, #52]	; 0x34
 80030e8:	f04f 0200 	mov.w	r2, #0
 80030ec:	f04f 0300 	mov.w	r3, #0
 80030f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80030f4:	4659      	mov	r1, fp
 80030f6:	00cb      	lsls	r3, r1, #3
 80030f8:	4651      	mov	r1, sl
 80030fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030fe:	4651      	mov	r1, sl
 8003100:	00ca      	lsls	r2, r1, #3
 8003102:	4610      	mov	r0, r2
 8003104:	4619      	mov	r1, r3
 8003106:	4603      	mov	r3, r0
 8003108:	4642      	mov	r2, r8
 800310a:	189b      	adds	r3, r3, r2
 800310c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003110:	464b      	mov	r3, r9
 8003112:	460a      	mov	r2, r1
 8003114:	eb42 0303 	adc.w	r3, r2, r3
 8003118:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800311c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003128:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800312c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003130:	460b      	mov	r3, r1
 8003132:	18db      	adds	r3, r3, r3
 8003134:	62bb      	str	r3, [r7, #40]	; 0x28
 8003136:	4613      	mov	r3, r2
 8003138:	eb42 0303 	adc.w	r3, r2, r3
 800313c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800313e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003142:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003146:	f7fd fd37 	bl	8000bb8 <__aeabi_uldivmod>
 800314a:	4602      	mov	r2, r0
 800314c:	460b      	mov	r3, r1
 800314e:	4b0d      	ldr	r3, [pc, #52]	; (8003184 <UART_SetConfig+0x2d4>)
 8003150:	fba3 1302 	umull	r1, r3, r3, r2
 8003154:	095b      	lsrs	r3, r3, #5
 8003156:	2164      	movs	r1, #100	; 0x64
 8003158:	fb01 f303 	mul.w	r3, r1, r3
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	3332      	adds	r3, #50	; 0x32
 8003162:	4a08      	ldr	r2, [pc, #32]	; (8003184 <UART_SetConfig+0x2d4>)
 8003164:	fba2 2303 	umull	r2, r3, r2, r3
 8003168:	095b      	lsrs	r3, r3, #5
 800316a:	f003 0207 	and.w	r2, r3, #7
 800316e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4422      	add	r2, r4
 8003176:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003178:	e105      	b.n	8003386 <UART_SetConfig+0x4d6>
 800317a:	bf00      	nop
 800317c:	40011000 	.word	0x40011000
 8003180:	40011400 	.word	0x40011400
 8003184:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003188:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800318c:	2200      	movs	r2, #0
 800318e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003192:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003196:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800319a:	4642      	mov	r2, r8
 800319c:	464b      	mov	r3, r9
 800319e:	1891      	adds	r1, r2, r2
 80031a0:	6239      	str	r1, [r7, #32]
 80031a2:	415b      	adcs	r3, r3
 80031a4:	627b      	str	r3, [r7, #36]	; 0x24
 80031a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80031aa:	4641      	mov	r1, r8
 80031ac:	1854      	adds	r4, r2, r1
 80031ae:	4649      	mov	r1, r9
 80031b0:	eb43 0501 	adc.w	r5, r3, r1
 80031b4:	f04f 0200 	mov.w	r2, #0
 80031b8:	f04f 0300 	mov.w	r3, #0
 80031bc:	00eb      	lsls	r3, r5, #3
 80031be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031c2:	00e2      	lsls	r2, r4, #3
 80031c4:	4614      	mov	r4, r2
 80031c6:	461d      	mov	r5, r3
 80031c8:	4643      	mov	r3, r8
 80031ca:	18e3      	adds	r3, r4, r3
 80031cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80031d0:	464b      	mov	r3, r9
 80031d2:	eb45 0303 	adc.w	r3, r5, r3
 80031d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80031da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80031e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80031ea:	f04f 0200 	mov.w	r2, #0
 80031ee:	f04f 0300 	mov.w	r3, #0
 80031f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80031f6:	4629      	mov	r1, r5
 80031f8:	008b      	lsls	r3, r1, #2
 80031fa:	4621      	mov	r1, r4
 80031fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003200:	4621      	mov	r1, r4
 8003202:	008a      	lsls	r2, r1, #2
 8003204:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003208:	f7fd fcd6 	bl	8000bb8 <__aeabi_uldivmod>
 800320c:	4602      	mov	r2, r0
 800320e:	460b      	mov	r3, r1
 8003210:	4b60      	ldr	r3, [pc, #384]	; (8003394 <UART_SetConfig+0x4e4>)
 8003212:	fba3 2302 	umull	r2, r3, r3, r2
 8003216:	095b      	lsrs	r3, r3, #5
 8003218:	011c      	lsls	r4, r3, #4
 800321a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800321e:	2200      	movs	r2, #0
 8003220:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003224:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003228:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800322c:	4642      	mov	r2, r8
 800322e:	464b      	mov	r3, r9
 8003230:	1891      	adds	r1, r2, r2
 8003232:	61b9      	str	r1, [r7, #24]
 8003234:	415b      	adcs	r3, r3
 8003236:	61fb      	str	r3, [r7, #28]
 8003238:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800323c:	4641      	mov	r1, r8
 800323e:	1851      	adds	r1, r2, r1
 8003240:	6139      	str	r1, [r7, #16]
 8003242:	4649      	mov	r1, r9
 8003244:	414b      	adcs	r3, r1
 8003246:	617b      	str	r3, [r7, #20]
 8003248:	f04f 0200 	mov.w	r2, #0
 800324c:	f04f 0300 	mov.w	r3, #0
 8003250:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003254:	4659      	mov	r1, fp
 8003256:	00cb      	lsls	r3, r1, #3
 8003258:	4651      	mov	r1, sl
 800325a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800325e:	4651      	mov	r1, sl
 8003260:	00ca      	lsls	r2, r1, #3
 8003262:	4610      	mov	r0, r2
 8003264:	4619      	mov	r1, r3
 8003266:	4603      	mov	r3, r0
 8003268:	4642      	mov	r2, r8
 800326a:	189b      	adds	r3, r3, r2
 800326c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003270:	464b      	mov	r3, r9
 8003272:	460a      	mov	r2, r1
 8003274:	eb42 0303 	adc.w	r3, r2, r3
 8003278:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800327c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	67bb      	str	r3, [r7, #120]	; 0x78
 8003286:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003288:	f04f 0200 	mov.w	r2, #0
 800328c:	f04f 0300 	mov.w	r3, #0
 8003290:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003294:	4649      	mov	r1, r9
 8003296:	008b      	lsls	r3, r1, #2
 8003298:	4641      	mov	r1, r8
 800329a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800329e:	4641      	mov	r1, r8
 80032a0:	008a      	lsls	r2, r1, #2
 80032a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80032a6:	f7fd fc87 	bl	8000bb8 <__aeabi_uldivmod>
 80032aa:	4602      	mov	r2, r0
 80032ac:	460b      	mov	r3, r1
 80032ae:	4b39      	ldr	r3, [pc, #228]	; (8003394 <UART_SetConfig+0x4e4>)
 80032b0:	fba3 1302 	umull	r1, r3, r3, r2
 80032b4:	095b      	lsrs	r3, r3, #5
 80032b6:	2164      	movs	r1, #100	; 0x64
 80032b8:	fb01 f303 	mul.w	r3, r1, r3
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	011b      	lsls	r3, r3, #4
 80032c0:	3332      	adds	r3, #50	; 0x32
 80032c2:	4a34      	ldr	r2, [pc, #208]	; (8003394 <UART_SetConfig+0x4e4>)
 80032c4:	fba2 2303 	umull	r2, r3, r2, r3
 80032c8:	095b      	lsrs	r3, r3, #5
 80032ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032ce:	441c      	add	r4, r3
 80032d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032d4:	2200      	movs	r2, #0
 80032d6:	673b      	str	r3, [r7, #112]	; 0x70
 80032d8:	677a      	str	r2, [r7, #116]	; 0x74
 80032da:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80032de:	4642      	mov	r2, r8
 80032e0:	464b      	mov	r3, r9
 80032e2:	1891      	adds	r1, r2, r2
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	415b      	adcs	r3, r3
 80032e8:	60fb      	str	r3, [r7, #12]
 80032ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032ee:	4641      	mov	r1, r8
 80032f0:	1851      	adds	r1, r2, r1
 80032f2:	6039      	str	r1, [r7, #0]
 80032f4:	4649      	mov	r1, r9
 80032f6:	414b      	adcs	r3, r1
 80032f8:	607b      	str	r3, [r7, #4]
 80032fa:	f04f 0200 	mov.w	r2, #0
 80032fe:	f04f 0300 	mov.w	r3, #0
 8003302:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003306:	4659      	mov	r1, fp
 8003308:	00cb      	lsls	r3, r1, #3
 800330a:	4651      	mov	r1, sl
 800330c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003310:	4651      	mov	r1, sl
 8003312:	00ca      	lsls	r2, r1, #3
 8003314:	4610      	mov	r0, r2
 8003316:	4619      	mov	r1, r3
 8003318:	4603      	mov	r3, r0
 800331a:	4642      	mov	r2, r8
 800331c:	189b      	adds	r3, r3, r2
 800331e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003320:	464b      	mov	r3, r9
 8003322:	460a      	mov	r2, r1
 8003324:	eb42 0303 	adc.w	r3, r2, r3
 8003328:	66fb      	str	r3, [r7, #108]	; 0x6c
 800332a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	663b      	str	r3, [r7, #96]	; 0x60
 8003334:	667a      	str	r2, [r7, #100]	; 0x64
 8003336:	f04f 0200 	mov.w	r2, #0
 800333a:	f04f 0300 	mov.w	r3, #0
 800333e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003342:	4649      	mov	r1, r9
 8003344:	008b      	lsls	r3, r1, #2
 8003346:	4641      	mov	r1, r8
 8003348:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800334c:	4641      	mov	r1, r8
 800334e:	008a      	lsls	r2, r1, #2
 8003350:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003354:	f7fd fc30 	bl	8000bb8 <__aeabi_uldivmod>
 8003358:	4602      	mov	r2, r0
 800335a:	460b      	mov	r3, r1
 800335c:	4b0d      	ldr	r3, [pc, #52]	; (8003394 <UART_SetConfig+0x4e4>)
 800335e:	fba3 1302 	umull	r1, r3, r3, r2
 8003362:	095b      	lsrs	r3, r3, #5
 8003364:	2164      	movs	r1, #100	; 0x64
 8003366:	fb01 f303 	mul.w	r3, r1, r3
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	011b      	lsls	r3, r3, #4
 800336e:	3332      	adds	r3, #50	; 0x32
 8003370:	4a08      	ldr	r2, [pc, #32]	; (8003394 <UART_SetConfig+0x4e4>)
 8003372:	fba2 2303 	umull	r2, r3, r2, r3
 8003376:	095b      	lsrs	r3, r3, #5
 8003378:	f003 020f 	and.w	r2, r3, #15
 800337c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4422      	add	r2, r4
 8003384:	609a      	str	r2, [r3, #8]
}
 8003386:	bf00      	nop
 8003388:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800338c:	46bd      	mov	sp, r7
 800338e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003392:	bf00      	nop
 8003394:	51eb851f 	.word	0x51eb851f

08003398 <__errno>:
 8003398:	4b01      	ldr	r3, [pc, #4]	; (80033a0 <__errno+0x8>)
 800339a:	6818      	ldr	r0, [r3, #0]
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	2000000c 	.word	0x2000000c

080033a4 <__libc_init_array>:
 80033a4:	b570      	push	{r4, r5, r6, lr}
 80033a6:	4d0d      	ldr	r5, [pc, #52]	; (80033dc <__libc_init_array+0x38>)
 80033a8:	4c0d      	ldr	r4, [pc, #52]	; (80033e0 <__libc_init_array+0x3c>)
 80033aa:	1b64      	subs	r4, r4, r5
 80033ac:	10a4      	asrs	r4, r4, #2
 80033ae:	2600      	movs	r6, #0
 80033b0:	42a6      	cmp	r6, r4
 80033b2:	d109      	bne.n	80033c8 <__libc_init_array+0x24>
 80033b4:	4d0b      	ldr	r5, [pc, #44]	; (80033e4 <__libc_init_array+0x40>)
 80033b6:	4c0c      	ldr	r4, [pc, #48]	; (80033e8 <__libc_init_array+0x44>)
 80033b8:	f002 fdc4 	bl	8005f44 <_init>
 80033bc:	1b64      	subs	r4, r4, r5
 80033be:	10a4      	asrs	r4, r4, #2
 80033c0:	2600      	movs	r6, #0
 80033c2:	42a6      	cmp	r6, r4
 80033c4:	d105      	bne.n	80033d2 <__libc_init_array+0x2e>
 80033c6:	bd70      	pop	{r4, r5, r6, pc}
 80033c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80033cc:	4798      	blx	r3
 80033ce:	3601      	adds	r6, #1
 80033d0:	e7ee      	b.n	80033b0 <__libc_init_array+0xc>
 80033d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80033d6:	4798      	blx	r3
 80033d8:	3601      	adds	r6, #1
 80033da:	e7f2      	b.n	80033c2 <__libc_init_array+0x1e>
 80033dc:	080063bc 	.word	0x080063bc
 80033e0:	080063bc 	.word	0x080063bc
 80033e4:	080063bc 	.word	0x080063bc
 80033e8:	080063c0 	.word	0x080063c0

080033ec <memset>:
 80033ec:	4402      	add	r2, r0
 80033ee:	4603      	mov	r3, r0
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d100      	bne.n	80033f6 <memset+0xa>
 80033f4:	4770      	bx	lr
 80033f6:	f803 1b01 	strb.w	r1, [r3], #1
 80033fa:	e7f9      	b.n	80033f0 <memset+0x4>

080033fc <__cvt>:
 80033fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003400:	ec55 4b10 	vmov	r4, r5, d0
 8003404:	2d00      	cmp	r5, #0
 8003406:	460e      	mov	r6, r1
 8003408:	4619      	mov	r1, r3
 800340a:	462b      	mov	r3, r5
 800340c:	bfbb      	ittet	lt
 800340e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003412:	461d      	movlt	r5, r3
 8003414:	2300      	movge	r3, #0
 8003416:	232d      	movlt	r3, #45	; 0x2d
 8003418:	700b      	strb	r3, [r1, #0]
 800341a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800341c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003420:	4691      	mov	r9, r2
 8003422:	f023 0820 	bic.w	r8, r3, #32
 8003426:	bfbc      	itt	lt
 8003428:	4622      	movlt	r2, r4
 800342a:	4614      	movlt	r4, r2
 800342c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003430:	d005      	beq.n	800343e <__cvt+0x42>
 8003432:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003436:	d100      	bne.n	800343a <__cvt+0x3e>
 8003438:	3601      	adds	r6, #1
 800343a:	2102      	movs	r1, #2
 800343c:	e000      	b.n	8003440 <__cvt+0x44>
 800343e:	2103      	movs	r1, #3
 8003440:	ab03      	add	r3, sp, #12
 8003442:	9301      	str	r3, [sp, #4]
 8003444:	ab02      	add	r3, sp, #8
 8003446:	9300      	str	r3, [sp, #0]
 8003448:	ec45 4b10 	vmov	d0, r4, r5
 800344c:	4653      	mov	r3, sl
 800344e:	4632      	mov	r2, r6
 8003450:	f000 fe1a 	bl	8004088 <_dtoa_r>
 8003454:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003458:	4607      	mov	r7, r0
 800345a:	d102      	bne.n	8003462 <__cvt+0x66>
 800345c:	f019 0f01 	tst.w	r9, #1
 8003460:	d022      	beq.n	80034a8 <__cvt+0xac>
 8003462:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003466:	eb07 0906 	add.w	r9, r7, r6
 800346a:	d110      	bne.n	800348e <__cvt+0x92>
 800346c:	783b      	ldrb	r3, [r7, #0]
 800346e:	2b30      	cmp	r3, #48	; 0x30
 8003470:	d10a      	bne.n	8003488 <__cvt+0x8c>
 8003472:	2200      	movs	r2, #0
 8003474:	2300      	movs	r3, #0
 8003476:	4620      	mov	r0, r4
 8003478:	4629      	mov	r1, r5
 800347a:	f7fd fb2d 	bl	8000ad8 <__aeabi_dcmpeq>
 800347e:	b918      	cbnz	r0, 8003488 <__cvt+0x8c>
 8003480:	f1c6 0601 	rsb	r6, r6, #1
 8003484:	f8ca 6000 	str.w	r6, [sl]
 8003488:	f8da 3000 	ldr.w	r3, [sl]
 800348c:	4499      	add	r9, r3
 800348e:	2200      	movs	r2, #0
 8003490:	2300      	movs	r3, #0
 8003492:	4620      	mov	r0, r4
 8003494:	4629      	mov	r1, r5
 8003496:	f7fd fb1f 	bl	8000ad8 <__aeabi_dcmpeq>
 800349a:	b108      	cbz	r0, 80034a0 <__cvt+0xa4>
 800349c:	f8cd 900c 	str.w	r9, [sp, #12]
 80034a0:	2230      	movs	r2, #48	; 0x30
 80034a2:	9b03      	ldr	r3, [sp, #12]
 80034a4:	454b      	cmp	r3, r9
 80034a6:	d307      	bcc.n	80034b8 <__cvt+0xbc>
 80034a8:	9b03      	ldr	r3, [sp, #12]
 80034aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80034ac:	1bdb      	subs	r3, r3, r7
 80034ae:	4638      	mov	r0, r7
 80034b0:	6013      	str	r3, [r2, #0]
 80034b2:	b004      	add	sp, #16
 80034b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034b8:	1c59      	adds	r1, r3, #1
 80034ba:	9103      	str	r1, [sp, #12]
 80034bc:	701a      	strb	r2, [r3, #0]
 80034be:	e7f0      	b.n	80034a2 <__cvt+0xa6>

080034c0 <__exponent>:
 80034c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80034c2:	4603      	mov	r3, r0
 80034c4:	2900      	cmp	r1, #0
 80034c6:	bfb8      	it	lt
 80034c8:	4249      	neglt	r1, r1
 80034ca:	f803 2b02 	strb.w	r2, [r3], #2
 80034ce:	bfb4      	ite	lt
 80034d0:	222d      	movlt	r2, #45	; 0x2d
 80034d2:	222b      	movge	r2, #43	; 0x2b
 80034d4:	2909      	cmp	r1, #9
 80034d6:	7042      	strb	r2, [r0, #1]
 80034d8:	dd2a      	ble.n	8003530 <__exponent+0x70>
 80034da:	f10d 0407 	add.w	r4, sp, #7
 80034de:	46a4      	mov	ip, r4
 80034e0:	270a      	movs	r7, #10
 80034e2:	46a6      	mov	lr, r4
 80034e4:	460a      	mov	r2, r1
 80034e6:	fb91 f6f7 	sdiv	r6, r1, r7
 80034ea:	fb07 1516 	mls	r5, r7, r6, r1
 80034ee:	3530      	adds	r5, #48	; 0x30
 80034f0:	2a63      	cmp	r2, #99	; 0x63
 80034f2:	f104 34ff 	add.w	r4, r4, #4294967295
 80034f6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80034fa:	4631      	mov	r1, r6
 80034fc:	dcf1      	bgt.n	80034e2 <__exponent+0x22>
 80034fe:	3130      	adds	r1, #48	; 0x30
 8003500:	f1ae 0502 	sub.w	r5, lr, #2
 8003504:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003508:	1c44      	adds	r4, r0, #1
 800350a:	4629      	mov	r1, r5
 800350c:	4561      	cmp	r1, ip
 800350e:	d30a      	bcc.n	8003526 <__exponent+0x66>
 8003510:	f10d 0209 	add.w	r2, sp, #9
 8003514:	eba2 020e 	sub.w	r2, r2, lr
 8003518:	4565      	cmp	r5, ip
 800351a:	bf88      	it	hi
 800351c:	2200      	movhi	r2, #0
 800351e:	4413      	add	r3, r2
 8003520:	1a18      	subs	r0, r3, r0
 8003522:	b003      	add	sp, #12
 8003524:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003526:	f811 2b01 	ldrb.w	r2, [r1], #1
 800352a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800352e:	e7ed      	b.n	800350c <__exponent+0x4c>
 8003530:	2330      	movs	r3, #48	; 0x30
 8003532:	3130      	adds	r1, #48	; 0x30
 8003534:	7083      	strb	r3, [r0, #2]
 8003536:	70c1      	strb	r1, [r0, #3]
 8003538:	1d03      	adds	r3, r0, #4
 800353a:	e7f1      	b.n	8003520 <__exponent+0x60>

0800353c <_printf_float>:
 800353c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003540:	ed2d 8b02 	vpush	{d8}
 8003544:	b08d      	sub	sp, #52	; 0x34
 8003546:	460c      	mov	r4, r1
 8003548:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800354c:	4616      	mov	r6, r2
 800354e:	461f      	mov	r7, r3
 8003550:	4605      	mov	r5, r0
 8003552:	f001 fd3f 	bl	8004fd4 <_localeconv_r>
 8003556:	f8d0 a000 	ldr.w	sl, [r0]
 800355a:	4650      	mov	r0, sl
 800355c:	f7fc fe40 	bl	80001e0 <strlen>
 8003560:	2300      	movs	r3, #0
 8003562:	930a      	str	r3, [sp, #40]	; 0x28
 8003564:	6823      	ldr	r3, [r4, #0]
 8003566:	9305      	str	r3, [sp, #20]
 8003568:	f8d8 3000 	ldr.w	r3, [r8]
 800356c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003570:	3307      	adds	r3, #7
 8003572:	f023 0307 	bic.w	r3, r3, #7
 8003576:	f103 0208 	add.w	r2, r3, #8
 800357a:	f8c8 2000 	str.w	r2, [r8]
 800357e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003582:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003586:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800358a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800358e:	9307      	str	r3, [sp, #28]
 8003590:	f8cd 8018 	str.w	r8, [sp, #24]
 8003594:	ee08 0a10 	vmov	s16, r0
 8003598:	4b9f      	ldr	r3, [pc, #636]	; (8003818 <_printf_float+0x2dc>)
 800359a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800359e:	f04f 32ff 	mov.w	r2, #4294967295
 80035a2:	f7fd facb 	bl	8000b3c <__aeabi_dcmpun>
 80035a6:	bb88      	cbnz	r0, 800360c <_printf_float+0xd0>
 80035a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80035ac:	4b9a      	ldr	r3, [pc, #616]	; (8003818 <_printf_float+0x2dc>)
 80035ae:	f04f 32ff 	mov.w	r2, #4294967295
 80035b2:	f7fd faa5 	bl	8000b00 <__aeabi_dcmple>
 80035b6:	bb48      	cbnz	r0, 800360c <_printf_float+0xd0>
 80035b8:	2200      	movs	r2, #0
 80035ba:	2300      	movs	r3, #0
 80035bc:	4640      	mov	r0, r8
 80035be:	4649      	mov	r1, r9
 80035c0:	f7fd fa94 	bl	8000aec <__aeabi_dcmplt>
 80035c4:	b110      	cbz	r0, 80035cc <_printf_float+0x90>
 80035c6:	232d      	movs	r3, #45	; 0x2d
 80035c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035cc:	4b93      	ldr	r3, [pc, #588]	; (800381c <_printf_float+0x2e0>)
 80035ce:	4894      	ldr	r0, [pc, #592]	; (8003820 <_printf_float+0x2e4>)
 80035d0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80035d4:	bf94      	ite	ls
 80035d6:	4698      	movls	r8, r3
 80035d8:	4680      	movhi	r8, r0
 80035da:	2303      	movs	r3, #3
 80035dc:	6123      	str	r3, [r4, #16]
 80035de:	9b05      	ldr	r3, [sp, #20]
 80035e0:	f023 0204 	bic.w	r2, r3, #4
 80035e4:	6022      	str	r2, [r4, #0]
 80035e6:	f04f 0900 	mov.w	r9, #0
 80035ea:	9700      	str	r7, [sp, #0]
 80035ec:	4633      	mov	r3, r6
 80035ee:	aa0b      	add	r2, sp, #44	; 0x2c
 80035f0:	4621      	mov	r1, r4
 80035f2:	4628      	mov	r0, r5
 80035f4:	f000 f9d8 	bl	80039a8 <_printf_common>
 80035f8:	3001      	adds	r0, #1
 80035fa:	f040 8090 	bne.w	800371e <_printf_float+0x1e2>
 80035fe:	f04f 30ff 	mov.w	r0, #4294967295
 8003602:	b00d      	add	sp, #52	; 0x34
 8003604:	ecbd 8b02 	vpop	{d8}
 8003608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800360c:	4642      	mov	r2, r8
 800360e:	464b      	mov	r3, r9
 8003610:	4640      	mov	r0, r8
 8003612:	4649      	mov	r1, r9
 8003614:	f7fd fa92 	bl	8000b3c <__aeabi_dcmpun>
 8003618:	b140      	cbz	r0, 800362c <_printf_float+0xf0>
 800361a:	464b      	mov	r3, r9
 800361c:	2b00      	cmp	r3, #0
 800361e:	bfbc      	itt	lt
 8003620:	232d      	movlt	r3, #45	; 0x2d
 8003622:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003626:	487f      	ldr	r0, [pc, #508]	; (8003824 <_printf_float+0x2e8>)
 8003628:	4b7f      	ldr	r3, [pc, #508]	; (8003828 <_printf_float+0x2ec>)
 800362a:	e7d1      	b.n	80035d0 <_printf_float+0x94>
 800362c:	6863      	ldr	r3, [r4, #4]
 800362e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003632:	9206      	str	r2, [sp, #24]
 8003634:	1c5a      	adds	r2, r3, #1
 8003636:	d13f      	bne.n	80036b8 <_printf_float+0x17c>
 8003638:	2306      	movs	r3, #6
 800363a:	6063      	str	r3, [r4, #4]
 800363c:	9b05      	ldr	r3, [sp, #20]
 800363e:	6861      	ldr	r1, [r4, #4]
 8003640:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003644:	2300      	movs	r3, #0
 8003646:	9303      	str	r3, [sp, #12]
 8003648:	ab0a      	add	r3, sp, #40	; 0x28
 800364a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800364e:	ab09      	add	r3, sp, #36	; 0x24
 8003650:	ec49 8b10 	vmov	d0, r8, r9
 8003654:	9300      	str	r3, [sp, #0]
 8003656:	6022      	str	r2, [r4, #0]
 8003658:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800365c:	4628      	mov	r0, r5
 800365e:	f7ff fecd 	bl	80033fc <__cvt>
 8003662:	9b06      	ldr	r3, [sp, #24]
 8003664:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003666:	2b47      	cmp	r3, #71	; 0x47
 8003668:	4680      	mov	r8, r0
 800366a:	d108      	bne.n	800367e <_printf_float+0x142>
 800366c:	1cc8      	adds	r0, r1, #3
 800366e:	db02      	blt.n	8003676 <_printf_float+0x13a>
 8003670:	6863      	ldr	r3, [r4, #4]
 8003672:	4299      	cmp	r1, r3
 8003674:	dd41      	ble.n	80036fa <_printf_float+0x1be>
 8003676:	f1ab 0b02 	sub.w	fp, fp, #2
 800367a:	fa5f fb8b 	uxtb.w	fp, fp
 800367e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003682:	d820      	bhi.n	80036c6 <_printf_float+0x18a>
 8003684:	3901      	subs	r1, #1
 8003686:	465a      	mov	r2, fp
 8003688:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800368c:	9109      	str	r1, [sp, #36]	; 0x24
 800368e:	f7ff ff17 	bl	80034c0 <__exponent>
 8003692:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003694:	1813      	adds	r3, r2, r0
 8003696:	2a01      	cmp	r2, #1
 8003698:	4681      	mov	r9, r0
 800369a:	6123      	str	r3, [r4, #16]
 800369c:	dc02      	bgt.n	80036a4 <_printf_float+0x168>
 800369e:	6822      	ldr	r2, [r4, #0]
 80036a0:	07d2      	lsls	r2, r2, #31
 80036a2:	d501      	bpl.n	80036a8 <_printf_float+0x16c>
 80036a4:	3301      	adds	r3, #1
 80036a6:	6123      	str	r3, [r4, #16]
 80036a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d09c      	beq.n	80035ea <_printf_float+0xae>
 80036b0:	232d      	movs	r3, #45	; 0x2d
 80036b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036b6:	e798      	b.n	80035ea <_printf_float+0xae>
 80036b8:	9a06      	ldr	r2, [sp, #24]
 80036ba:	2a47      	cmp	r2, #71	; 0x47
 80036bc:	d1be      	bne.n	800363c <_printf_float+0x100>
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1bc      	bne.n	800363c <_printf_float+0x100>
 80036c2:	2301      	movs	r3, #1
 80036c4:	e7b9      	b.n	800363a <_printf_float+0xfe>
 80036c6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80036ca:	d118      	bne.n	80036fe <_printf_float+0x1c2>
 80036cc:	2900      	cmp	r1, #0
 80036ce:	6863      	ldr	r3, [r4, #4]
 80036d0:	dd0b      	ble.n	80036ea <_printf_float+0x1ae>
 80036d2:	6121      	str	r1, [r4, #16]
 80036d4:	b913      	cbnz	r3, 80036dc <_printf_float+0x1a0>
 80036d6:	6822      	ldr	r2, [r4, #0]
 80036d8:	07d0      	lsls	r0, r2, #31
 80036da:	d502      	bpl.n	80036e2 <_printf_float+0x1a6>
 80036dc:	3301      	adds	r3, #1
 80036de:	440b      	add	r3, r1
 80036e0:	6123      	str	r3, [r4, #16]
 80036e2:	65a1      	str	r1, [r4, #88]	; 0x58
 80036e4:	f04f 0900 	mov.w	r9, #0
 80036e8:	e7de      	b.n	80036a8 <_printf_float+0x16c>
 80036ea:	b913      	cbnz	r3, 80036f2 <_printf_float+0x1b6>
 80036ec:	6822      	ldr	r2, [r4, #0]
 80036ee:	07d2      	lsls	r2, r2, #31
 80036f0:	d501      	bpl.n	80036f6 <_printf_float+0x1ba>
 80036f2:	3302      	adds	r3, #2
 80036f4:	e7f4      	b.n	80036e0 <_printf_float+0x1a4>
 80036f6:	2301      	movs	r3, #1
 80036f8:	e7f2      	b.n	80036e0 <_printf_float+0x1a4>
 80036fa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80036fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003700:	4299      	cmp	r1, r3
 8003702:	db05      	blt.n	8003710 <_printf_float+0x1d4>
 8003704:	6823      	ldr	r3, [r4, #0]
 8003706:	6121      	str	r1, [r4, #16]
 8003708:	07d8      	lsls	r0, r3, #31
 800370a:	d5ea      	bpl.n	80036e2 <_printf_float+0x1a6>
 800370c:	1c4b      	adds	r3, r1, #1
 800370e:	e7e7      	b.n	80036e0 <_printf_float+0x1a4>
 8003710:	2900      	cmp	r1, #0
 8003712:	bfd4      	ite	le
 8003714:	f1c1 0202 	rsble	r2, r1, #2
 8003718:	2201      	movgt	r2, #1
 800371a:	4413      	add	r3, r2
 800371c:	e7e0      	b.n	80036e0 <_printf_float+0x1a4>
 800371e:	6823      	ldr	r3, [r4, #0]
 8003720:	055a      	lsls	r2, r3, #21
 8003722:	d407      	bmi.n	8003734 <_printf_float+0x1f8>
 8003724:	6923      	ldr	r3, [r4, #16]
 8003726:	4642      	mov	r2, r8
 8003728:	4631      	mov	r1, r6
 800372a:	4628      	mov	r0, r5
 800372c:	47b8      	blx	r7
 800372e:	3001      	adds	r0, #1
 8003730:	d12c      	bne.n	800378c <_printf_float+0x250>
 8003732:	e764      	b.n	80035fe <_printf_float+0xc2>
 8003734:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003738:	f240 80e0 	bls.w	80038fc <_printf_float+0x3c0>
 800373c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003740:	2200      	movs	r2, #0
 8003742:	2300      	movs	r3, #0
 8003744:	f7fd f9c8 	bl	8000ad8 <__aeabi_dcmpeq>
 8003748:	2800      	cmp	r0, #0
 800374a:	d034      	beq.n	80037b6 <_printf_float+0x27a>
 800374c:	4a37      	ldr	r2, [pc, #220]	; (800382c <_printf_float+0x2f0>)
 800374e:	2301      	movs	r3, #1
 8003750:	4631      	mov	r1, r6
 8003752:	4628      	mov	r0, r5
 8003754:	47b8      	blx	r7
 8003756:	3001      	adds	r0, #1
 8003758:	f43f af51 	beq.w	80035fe <_printf_float+0xc2>
 800375c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003760:	429a      	cmp	r2, r3
 8003762:	db02      	blt.n	800376a <_printf_float+0x22e>
 8003764:	6823      	ldr	r3, [r4, #0]
 8003766:	07d8      	lsls	r0, r3, #31
 8003768:	d510      	bpl.n	800378c <_printf_float+0x250>
 800376a:	ee18 3a10 	vmov	r3, s16
 800376e:	4652      	mov	r2, sl
 8003770:	4631      	mov	r1, r6
 8003772:	4628      	mov	r0, r5
 8003774:	47b8      	blx	r7
 8003776:	3001      	adds	r0, #1
 8003778:	f43f af41 	beq.w	80035fe <_printf_float+0xc2>
 800377c:	f04f 0800 	mov.w	r8, #0
 8003780:	f104 091a 	add.w	r9, r4, #26
 8003784:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003786:	3b01      	subs	r3, #1
 8003788:	4543      	cmp	r3, r8
 800378a:	dc09      	bgt.n	80037a0 <_printf_float+0x264>
 800378c:	6823      	ldr	r3, [r4, #0]
 800378e:	079b      	lsls	r3, r3, #30
 8003790:	f100 8105 	bmi.w	800399e <_printf_float+0x462>
 8003794:	68e0      	ldr	r0, [r4, #12]
 8003796:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003798:	4298      	cmp	r0, r3
 800379a:	bfb8      	it	lt
 800379c:	4618      	movlt	r0, r3
 800379e:	e730      	b.n	8003602 <_printf_float+0xc6>
 80037a0:	2301      	movs	r3, #1
 80037a2:	464a      	mov	r2, r9
 80037a4:	4631      	mov	r1, r6
 80037a6:	4628      	mov	r0, r5
 80037a8:	47b8      	blx	r7
 80037aa:	3001      	adds	r0, #1
 80037ac:	f43f af27 	beq.w	80035fe <_printf_float+0xc2>
 80037b0:	f108 0801 	add.w	r8, r8, #1
 80037b4:	e7e6      	b.n	8003784 <_printf_float+0x248>
 80037b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	dc39      	bgt.n	8003830 <_printf_float+0x2f4>
 80037bc:	4a1b      	ldr	r2, [pc, #108]	; (800382c <_printf_float+0x2f0>)
 80037be:	2301      	movs	r3, #1
 80037c0:	4631      	mov	r1, r6
 80037c2:	4628      	mov	r0, r5
 80037c4:	47b8      	blx	r7
 80037c6:	3001      	adds	r0, #1
 80037c8:	f43f af19 	beq.w	80035fe <_printf_float+0xc2>
 80037cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80037d0:	4313      	orrs	r3, r2
 80037d2:	d102      	bne.n	80037da <_printf_float+0x29e>
 80037d4:	6823      	ldr	r3, [r4, #0]
 80037d6:	07d9      	lsls	r1, r3, #31
 80037d8:	d5d8      	bpl.n	800378c <_printf_float+0x250>
 80037da:	ee18 3a10 	vmov	r3, s16
 80037de:	4652      	mov	r2, sl
 80037e0:	4631      	mov	r1, r6
 80037e2:	4628      	mov	r0, r5
 80037e4:	47b8      	blx	r7
 80037e6:	3001      	adds	r0, #1
 80037e8:	f43f af09 	beq.w	80035fe <_printf_float+0xc2>
 80037ec:	f04f 0900 	mov.w	r9, #0
 80037f0:	f104 0a1a 	add.w	sl, r4, #26
 80037f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037f6:	425b      	negs	r3, r3
 80037f8:	454b      	cmp	r3, r9
 80037fa:	dc01      	bgt.n	8003800 <_printf_float+0x2c4>
 80037fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80037fe:	e792      	b.n	8003726 <_printf_float+0x1ea>
 8003800:	2301      	movs	r3, #1
 8003802:	4652      	mov	r2, sl
 8003804:	4631      	mov	r1, r6
 8003806:	4628      	mov	r0, r5
 8003808:	47b8      	blx	r7
 800380a:	3001      	adds	r0, #1
 800380c:	f43f aef7 	beq.w	80035fe <_printf_float+0xc2>
 8003810:	f109 0901 	add.w	r9, r9, #1
 8003814:	e7ee      	b.n	80037f4 <_printf_float+0x2b8>
 8003816:	bf00      	nop
 8003818:	7fefffff 	.word	0x7fefffff
 800381c:	08005fe0 	.word	0x08005fe0
 8003820:	08005fe4 	.word	0x08005fe4
 8003824:	08005fec 	.word	0x08005fec
 8003828:	08005fe8 	.word	0x08005fe8
 800382c:	08005ff0 	.word	0x08005ff0
 8003830:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003832:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003834:	429a      	cmp	r2, r3
 8003836:	bfa8      	it	ge
 8003838:	461a      	movge	r2, r3
 800383a:	2a00      	cmp	r2, #0
 800383c:	4691      	mov	r9, r2
 800383e:	dc37      	bgt.n	80038b0 <_printf_float+0x374>
 8003840:	f04f 0b00 	mov.w	fp, #0
 8003844:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003848:	f104 021a 	add.w	r2, r4, #26
 800384c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800384e:	9305      	str	r3, [sp, #20]
 8003850:	eba3 0309 	sub.w	r3, r3, r9
 8003854:	455b      	cmp	r3, fp
 8003856:	dc33      	bgt.n	80038c0 <_printf_float+0x384>
 8003858:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800385c:	429a      	cmp	r2, r3
 800385e:	db3b      	blt.n	80038d8 <_printf_float+0x39c>
 8003860:	6823      	ldr	r3, [r4, #0]
 8003862:	07da      	lsls	r2, r3, #31
 8003864:	d438      	bmi.n	80038d8 <_printf_float+0x39c>
 8003866:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003868:	9a05      	ldr	r2, [sp, #20]
 800386a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800386c:	1a9a      	subs	r2, r3, r2
 800386e:	eba3 0901 	sub.w	r9, r3, r1
 8003872:	4591      	cmp	r9, r2
 8003874:	bfa8      	it	ge
 8003876:	4691      	movge	r9, r2
 8003878:	f1b9 0f00 	cmp.w	r9, #0
 800387c:	dc35      	bgt.n	80038ea <_printf_float+0x3ae>
 800387e:	f04f 0800 	mov.w	r8, #0
 8003882:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003886:	f104 0a1a 	add.w	sl, r4, #26
 800388a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800388e:	1a9b      	subs	r3, r3, r2
 8003890:	eba3 0309 	sub.w	r3, r3, r9
 8003894:	4543      	cmp	r3, r8
 8003896:	f77f af79 	ble.w	800378c <_printf_float+0x250>
 800389a:	2301      	movs	r3, #1
 800389c:	4652      	mov	r2, sl
 800389e:	4631      	mov	r1, r6
 80038a0:	4628      	mov	r0, r5
 80038a2:	47b8      	blx	r7
 80038a4:	3001      	adds	r0, #1
 80038a6:	f43f aeaa 	beq.w	80035fe <_printf_float+0xc2>
 80038aa:	f108 0801 	add.w	r8, r8, #1
 80038ae:	e7ec      	b.n	800388a <_printf_float+0x34e>
 80038b0:	4613      	mov	r3, r2
 80038b2:	4631      	mov	r1, r6
 80038b4:	4642      	mov	r2, r8
 80038b6:	4628      	mov	r0, r5
 80038b8:	47b8      	blx	r7
 80038ba:	3001      	adds	r0, #1
 80038bc:	d1c0      	bne.n	8003840 <_printf_float+0x304>
 80038be:	e69e      	b.n	80035fe <_printf_float+0xc2>
 80038c0:	2301      	movs	r3, #1
 80038c2:	4631      	mov	r1, r6
 80038c4:	4628      	mov	r0, r5
 80038c6:	9205      	str	r2, [sp, #20]
 80038c8:	47b8      	blx	r7
 80038ca:	3001      	adds	r0, #1
 80038cc:	f43f ae97 	beq.w	80035fe <_printf_float+0xc2>
 80038d0:	9a05      	ldr	r2, [sp, #20]
 80038d2:	f10b 0b01 	add.w	fp, fp, #1
 80038d6:	e7b9      	b.n	800384c <_printf_float+0x310>
 80038d8:	ee18 3a10 	vmov	r3, s16
 80038dc:	4652      	mov	r2, sl
 80038de:	4631      	mov	r1, r6
 80038e0:	4628      	mov	r0, r5
 80038e2:	47b8      	blx	r7
 80038e4:	3001      	adds	r0, #1
 80038e6:	d1be      	bne.n	8003866 <_printf_float+0x32a>
 80038e8:	e689      	b.n	80035fe <_printf_float+0xc2>
 80038ea:	9a05      	ldr	r2, [sp, #20]
 80038ec:	464b      	mov	r3, r9
 80038ee:	4442      	add	r2, r8
 80038f0:	4631      	mov	r1, r6
 80038f2:	4628      	mov	r0, r5
 80038f4:	47b8      	blx	r7
 80038f6:	3001      	adds	r0, #1
 80038f8:	d1c1      	bne.n	800387e <_printf_float+0x342>
 80038fa:	e680      	b.n	80035fe <_printf_float+0xc2>
 80038fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80038fe:	2a01      	cmp	r2, #1
 8003900:	dc01      	bgt.n	8003906 <_printf_float+0x3ca>
 8003902:	07db      	lsls	r3, r3, #31
 8003904:	d538      	bpl.n	8003978 <_printf_float+0x43c>
 8003906:	2301      	movs	r3, #1
 8003908:	4642      	mov	r2, r8
 800390a:	4631      	mov	r1, r6
 800390c:	4628      	mov	r0, r5
 800390e:	47b8      	blx	r7
 8003910:	3001      	adds	r0, #1
 8003912:	f43f ae74 	beq.w	80035fe <_printf_float+0xc2>
 8003916:	ee18 3a10 	vmov	r3, s16
 800391a:	4652      	mov	r2, sl
 800391c:	4631      	mov	r1, r6
 800391e:	4628      	mov	r0, r5
 8003920:	47b8      	blx	r7
 8003922:	3001      	adds	r0, #1
 8003924:	f43f ae6b 	beq.w	80035fe <_printf_float+0xc2>
 8003928:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800392c:	2200      	movs	r2, #0
 800392e:	2300      	movs	r3, #0
 8003930:	f7fd f8d2 	bl	8000ad8 <__aeabi_dcmpeq>
 8003934:	b9d8      	cbnz	r0, 800396e <_printf_float+0x432>
 8003936:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003938:	f108 0201 	add.w	r2, r8, #1
 800393c:	3b01      	subs	r3, #1
 800393e:	4631      	mov	r1, r6
 8003940:	4628      	mov	r0, r5
 8003942:	47b8      	blx	r7
 8003944:	3001      	adds	r0, #1
 8003946:	d10e      	bne.n	8003966 <_printf_float+0x42a>
 8003948:	e659      	b.n	80035fe <_printf_float+0xc2>
 800394a:	2301      	movs	r3, #1
 800394c:	4652      	mov	r2, sl
 800394e:	4631      	mov	r1, r6
 8003950:	4628      	mov	r0, r5
 8003952:	47b8      	blx	r7
 8003954:	3001      	adds	r0, #1
 8003956:	f43f ae52 	beq.w	80035fe <_printf_float+0xc2>
 800395a:	f108 0801 	add.w	r8, r8, #1
 800395e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003960:	3b01      	subs	r3, #1
 8003962:	4543      	cmp	r3, r8
 8003964:	dcf1      	bgt.n	800394a <_printf_float+0x40e>
 8003966:	464b      	mov	r3, r9
 8003968:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800396c:	e6dc      	b.n	8003728 <_printf_float+0x1ec>
 800396e:	f04f 0800 	mov.w	r8, #0
 8003972:	f104 0a1a 	add.w	sl, r4, #26
 8003976:	e7f2      	b.n	800395e <_printf_float+0x422>
 8003978:	2301      	movs	r3, #1
 800397a:	4642      	mov	r2, r8
 800397c:	e7df      	b.n	800393e <_printf_float+0x402>
 800397e:	2301      	movs	r3, #1
 8003980:	464a      	mov	r2, r9
 8003982:	4631      	mov	r1, r6
 8003984:	4628      	mov	r0, r5
 8003986:	47b8      	blx	r7
 8003988:	3001      	adds	r0, #1
 800398a:	f43f ae38 	beq.w	80035fe <_printf_float+0xc2>
 800398e:	f108 0801 	add.w	r8, r8, #1
 8003992:	68e3      	ldr	r3, [r4, #12]
 8003994:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003996:	1a5b      	subs	r3, r3, r1
 8003998:	4543      	cmp	r3, r8
 800399a:	dcf0      	bgt.n	800397e <_printf_float+0x442>
 800399c:	e6fa      	b.n	8003794 <_printf_float+0x258>
 800399e:	f04f 0800 	mov.w	r8, #0
 80039a2:	f104 0919 	add.w	r9, r4, #25
 80039a6:	e7f4      	b.n	8003992 <_printf_float+0x456>

080039a8 <_printf_common>:
 80039a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039ac:	4616      	mov	r6, r2
 80039ae:	4699      	mov	r9, r3
 80039b0:	688a      	ldr	r2, [r1, #8]
 80039b2:	690b      	ldr	r3, [r1, #16]
 80039b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80039b8:	4293      	cmp	r3, r2
 80039ba:	bfb8      	it	lt
 80039bc:	4613      	movlt	r3, r2
 80039be:	6033      	str	r3, [r6, #0]
 80039c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80039c4:	4607      	mov	r7, r0
 80039c6:	460c      	mov	r4, r1
 80039c8:	b10a      	cbz	r2, 80039ce <_printf_common+0x26>
 80039ca:	3301      	adds	r3, #1
 80039cc:	6033      	str	r3, [r6, #0]
 80039ce:	6823      	ldr	r3, [r4, #0]
 80039d0:	0699      	lsls	r1, r3, #26
 80039d2:	bf42      	ittt	mi
 80039d4:	6833      	ldrmi	r3, [r6, #0]
 80039d6:	3302      	addmi	r3, #2
 80039d8:	6033      	strmi	r3, [r6, #0]
 80039da:	6825      	ldr	r5, [r4, #0]
 80039dc:	f015 0506 	ands.w	r5, r5, #6
 80039e0:	d106      	bne.n	80039f0 <_printf_common+0x48>
 80039e2:	f104 0a19 	add.w	sl, r4, #25
 80039e6:	68e3      	ldr	r3, [r4, #12]
 80039e8:	6832      	ldr	r2, [r6, #0]
 80039ea:	1a9b      	subs	r3, r3, r2
 80039ec:	42ab      	cmp	r3, r5
 80039ee:	dc26      	bgt.n	8003a3e <_printf_common+0x96>
 80039f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80039f4:	1e13      	subs	r3, r2, #0
 80039f6:	6822      	ldr	r2, [r4, #0]
 80039f8:	bf18      	it	ne
 80039fa:	2301      	movne	r3, #1
 80039fc:	0692      	lsls	r2, r2, #26
 80039fe:	d42b      	bmi.n	8003a58 <_printf_common+0xb0>
 8003a00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a04:	4649      	mov	r1, r9
 8003a06:	4638      	mov	r0, r7
 8003a08:	47c0      	blx	r8
 8003a0a:	3001      	adds	r0, #1
 8003a0c:	d01e      	beq.n	8003a4c <_printf_common+0xa4>
 8003a0e:	6823      	ldr	r3, [r4, #0]
 8003a10:	68e5      	ldr	r5, [r4, #12]
 8003a12:	6832      	ldr	r2, [r6, #0]
 8003a14:	f003 0306 	and.w	r3, r3, #6
 8003a18:	2b04      	cmp	r3, #4
 8003a1a:	bf08      	it	eq
 8003a1c:	1aad      	subeq	r5, r5, r2
 8003a1e:	68a3      	ldr	r3, [r4, #8]
 8003a20:	6922      	ldr	r2, [r4, #16]
 8003a22:	bf0c      	ite	eq
 8003a24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a28:	2500      	movne	r5, #0
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	bfc4      	itt	gt
 8003a2e:	1a9b      	subgt	r3, r3, r2
 8003a30:	18ed      	addgt	r5, r5, r3
 8003a32:	2600      	movs	r6, #0
 8003a34:	341a      	adds	r4, #26
 8003a36:	42b5      	cmp	r5, r6
 8003a38:	d11a      	bne.n	8003a70 <_printf_common+0xc8>
 8003a3a:	2000      	movs	r0, #0
 8003a3c:	e008      	b.n	8003a50 <_printf_common+0xa8>
 8003a3e:	2301      	movs	r3, #1
 8003a40:	4652      	mov	r2, sl
 8003a42:	4649      	mov	r1, r9
 8003a44:	4638      	mov	r0, r7
 8003a46:	47c0      	blx	r8
 8003a48:	3001      	adds	r0, #1
 8003a4a:	d103      	bne.n	8003a54 <_printf_common+0xac>
 8003a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a54:	3501      	adds	r5, #1
 8003a56:	e7c6      	b.n	80039e6 <_printf_common+0x3e>
 8003a58:	18e1      	adds	r1, r4, r3
 8003a5a:	1c5a      	adds	r2, r3, #1
 8003a5c:	2030      	movs	r0, #48	; 0x30
 8003a5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003a62:	4422      	add	r2, r4
 8003a64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003a68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003a6c:	3302      	adds	r3, #2
 8003a6e:	e7c7      	b.n	8003a00 <_printf_common+0x58>
 8003a70:	2301      	movs	r3, #1
 8003a72:	4622      	mov	r2, r4
 8003a74:	4649      	mov	r1, r9
 8003a76:	4638      	mov	r0, r7
 8003a78:	47c0      	blx	r8
 8003a7a:	3001      	adds	r0, #1
 8003a7c:	d0e6      	beq.n	8003a4c <_printf_common+0xa4>
 8003a7e:	3601      	adds	r6, #1
 8003a80:	e7d9      	b.n	8003a36 <_printf_common+0x8e>
	...

08003a84 <_printf_i>:
 8003a84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a88:	7e0f      	ldrb	r7, [r1, #24]
 8003a8a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003a8c:	2f78      	cmp	r7, #120	; 0x78
 8003a8e:	4691      	mov	r9, r2
 8003a90:	4680      	mov	r8, r0
 8003a92:	460c      	mov	r4, r1
 8003a94:	469a      	mov	sl, r3
 8003a96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003a9a:	d807      	bhi.n	8003aac <_printf_i+0x28>
 8003a9c:	2f62      	cmp	r7, #98	; 0x62
 8003a9e:	d80a      	bhi.n	8003ab6 <_printf_i+0x32>
 8003aa0:	2f00      	cmp	r7, #0
 8003aa2:	f000 80d8 	beq.w	8003c56 <_printf_i+0x1d2>
 8003aa6:	2f58      	cmp	r7, #88	; 0x58
 8003aa8:	f000 80a3 	beq.w	8003bf2 <_printf_i+0x16e>
 8003aac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ab0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ab4:	e03a      	b.n	8003b2c <_printf_i+0xa8>
 8003ab6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003aba:	2b15      	cmp	r3, #21
 8003abc:	d8f6      	bhi.n	8003aac <_printf_i+0x28>
 8003abe:	a101      	add	r1, pc, #4	; (adr r1, 8003ac4 <_printf_i+0x40>)
 8003ac0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ac4:	08003b1d 	.word	0x08003b1d
 8003ac8:	08003b31 	.word	0x08003b31
 8003acc:	08003aad 	.word	0x08003aad
 8003ad0:	08003aad 	.word	0x08003aad
 8003ad4:	08003aad 	.word	0x08003aad
 8003ad8:	08003aad 	.word	0x08003aad
 8003adc:	08003b31 	.word	0x08003b31
 8003ae0:	08003aad 	.word	0x08003aad
 8003ae4:	08003aad 	.word	0x08003aad
 8003ae8:	08003aad 	.word	0x08003aad
 8003aec:	08003aad 	.word	0x08003aad
 8003af0:	08003c3d 	.word	0x08003c3d
 8003af4:	08003b61 	.word	0x08003b61
 8003af8:	08003c1f 	.word	0x08003c1f
 8003afc:	08003aad 	.word	0x08003aad
 8003b00:	08003aad 	.word	0x08003aad
 8003b04:	08003c5f 	.word	0x08003c5f
 8003b08:	08003aad 	.word	0x08003aad
 8003b0c:	08003b61 	.word	0x08003b61
 8003b10:	08003aad 	.word	0x08003aad
 8003b14:	08003aad 	.word	0x08003aad
 8003b18:	08003c27 	.word	0x08003c27
 8003b1c:	682b      	ldr	r3, [r5, #0]
 8003b1e:	1d1a      	adds	r2, r3, #4
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	602a      	str	r2, [r5, #0]
 8003b24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e0a3      	b.n	8003c78 <_printf_i+0x1f4>
 8003b30:	6820      	ldr	r0, [r4, #0]
 8003b32:	6829      	ldr	r1, [r5, #0]
 8003b34:	0606      	lsls	r6, r0, #24
 8003b36:	f101 0304 	add.w	r3, r1, #4
 8003b3a:	d50a      	bpl.n	8003b52 <_printf_i+0xce>
 8003b3c:	680e      	ldr	r6, [r1, #0]
 8003b3e:	602b      	str	r3, [r5, #0]
 8003b40:	2e00      	cmp	r6, #0
 8003b42:	da03      	bge.n	8003b4c <_printf_i+0xc8>
 8003b44:	232d      	movs	r3, #45	; 0x2d
 8003b46:	4276      	negs	r6, r6
 8003b48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b4c:	485e      	ldr	r0, [pc, #376]	; (8003cc8 <_printf_i+0x244>)
 8003b4e:	230a      	movs	r3, #10
 8003b50:	e019      	b.n	8003b86 <_printf_i+0x102>
 8003b52:	680e      	ldr	r6, [r1, #0]
 8003b54:	602b      	str	r3, [r5, #0]
 8003b56:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003b5a:	bf18      	it	ne
 8003b5c:	b236      	sxthne	r6, r6
 8003b5e:	e7ef      	b.n	8003b40 <_printf_i+0xbc>
 8003b60:	682b      	ldr	r3, [r5, #0]
 8003b62:	6820      	ldr	r0, [r4, #0]
 8003b64:	1d19      	adds	r1, r3, #4
 8003b66:	6029      	str	r1, [r5, #0]
 8003b68:	0601      	lsls	r1, r0, #24
 8003b6a:	d501      	bpl.n	8003b70 <_printf_i+0xec>
 8003b6c:	681e      	ldr	r6, [r3, #0]
 8003b6e:	e002      	b.n	8003b76 <_printf_i+0xf2>
 8003b70:	0646      	lsls	r6, r0, #25
 8003b72:	d5fb      	bpl.n	8003b6c <_printf_i+0xe8>
 8003b74:	881e      	ldrh	r6, [r3, #0]
 8003b76:	4854      	ldr	r0, [pc, #336]	; (8003cc8 <_printf_i+0x244>)
 8003b78:	2f6f      	cmp	r7, #111	; 0x6f
 8003b7a:	bf0c      	ite	eq
 8003b7c:	2308      	moveq	r3, #8
 8003b7e:	230a      	movne	r3, #10
 8003b80:	2100      	movs	r1, #0
 8003b82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003b86:	6865      	ldr	r5, [r4, #4]
 8003b88:	60a5      	str	r5, [r4, #8]
 8003b8a:	2d00      	cmp	r5, #0
 8003b8c:	bfa2      	ittt	ge
 8003b8e:	6821      	ldrge	r1, [r4, #0]
 8003b90:	f021 0104 	bicge.w	r1, r1, #4
 8003b94:	6021      	strge	r1, [r4, #0]
 8003b96:	b90e      	cbnz	r6, 8003b9c <_printf_i+0x118>
 8003b98:	2d00      	cmp	r5, #0
 8003b9a:	d04d      	beq.n	8003c38 <_printf_i+0x1b4>
 8003b9c:	4615      	mov	r5, r2
 8003b9e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003ba2:	fb03 6711 	mls	r7, r3, r1, r6
 8003ba6:	5dc7      	ldrb	r7, [r0, r7]
 8003ba8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003bac:	4637      	mov	r7, r6
 8003bae:	42bb      	cmp	r3, r7
 8003bb0:	460e      	mov	r6, r1
 8003bb2:	d9f4      	bls.n	8003b9e <_printf_i+0x11a>
 8003bb4:	2b08      	cmp	r3, #8
 8003bb6:	d10b      	bne.n	8003bd0 <_printf_i+0x14c>
 8003bb8:	6823      	ldr	r3, [r4, #0]
 8003bba:	07de      	lsls	r6, r3, #31
 8003bbc:	d508      	bpl.n	8003bd0 <_printf_i+0x14c>
 8003bbe:	6923      	ldr	r3, [r4, #16]
 8003bc0:	6861      	ldr	r1, [r4, #4]
 8003bc2:	4299      	cmp	r1, r3
 8003bc4:	bfde      	ittt	le
 8003bc6:	2330      	movle	r3, #48	; 0x30
 8003bc8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003bcc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003bd0:	1b52      	subs	r2, r2, r5
 8003bd2:	6122      	str	r2, [r4, #16]
 8003bd4:	f8cd a000 	str.w	sl, [sp]
 8003bd8:	464b      	mov	r3, r9
 8003bda:	aa03      	add	r2, sp, #12
 8003bdc:	4621      	mov	r1, r4
 8003bde:	4640      	mov	r0, r8
 8003be0:	f7ff fee2 	bl	80039a8 <_printf_common>
 8003be4:	3001      	adds	r0, #1
 8003be6:	d14c      	bne.n	8003c82 <_printf_i+0x1fe>
 8003be8:	f04f 30ff 	mov.w	r0, #4294967295
 8003bec:	b004      	add	sp, #16
 8003bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bf2:	4835      	ldr	r0, [pc, #212]	; (8003cc8 <_printf_i+0x244>)
 8003bf4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003bf8:	6829      	ldr	r1, [r5, #0]
 8003bfa:	6823      	ldr	r3, [r4, #0]
 8003bfc:	f851 6b04 	ldr.w	r6, [r1], #4
 8003c00:	6029      	str	r1, [r5, #0]
 8003c02:	061d      	lsls	r5, r3, #24
 8003c04:	d514      	bpl.n	8003c30 <_printf_i+0x1ac>
 8003c06:	07df      	lsls	r7, r3, #31
 8003c08:	bf44      	itt	mi
 8003c0a:	f043 0320 	orrmi.w	r3, r3, #32
 8003c0e:	6023      	strmi	r3, [r4, #0]
 8003c10:	b91e      	cbnz	r6, 8003c1a <_printf_i+0x196>
 8003c12:	6823      	ldr	r3, [r4, #0]
 8003c14:	f023 0320 	bic.w	r3, r3, #32
 8003c18:	6023      	str	r3, [r4, #0]
 8003c1a:	2310      	movs	r3, #16
 8003c1c:	e7b0      	b.n	8003b80 <_printf_i+0xfc>
 8003c1e:	6823      	ldr	r3, [r4, #0]
 8003c20:	f043 0320 	orr.w	r3, r3, #32
 8003c24:	6023      	str	r3, [r4, #0]
 8003c26:	2378      	movs	r3, #120	; 0x78
 8003c28:	4828      	ldr	r0, [pc, #160]	; (8003ccc <_printf_i+0x248>)
 8003c2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003c2e:	e7e3      	b.n	8003bf8 <_printf_i+0x174>
 8003c30:	0659      	lsls	r1, r3, #25
 8003c32:	bf48      	it	mi
 8003c34:	b2b6      	uxthmi	r6, r6
 8003c36:	e7e6      	b.n	8003c06 <_printf_i+0x182>
 8003c38:	4615      	mov	r5, r2
 8003c3a:	e7bb      	b.n	8003bb4 <_printf_i+0x130>
 8003c3c:	682b      	ldr	r3, [r5, #0]
 8003c3e:	6826      	ldr	r6, [r4, #0]
 8003c40:	6961      	ldr	r1, [r4, #20]
 8003c42:	1d18      	adds	r0, r3, #4
 8003c44:	6028      	str	r0, [r5, #0]
 8003c46:	0635      	lsls	r5, r6, #24
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	d501      	bpl.n	8003c50 <_printf_i+0x1cc>
 8003c4c:	6019      	str	r1, [r3, #0]
 8003c4e:	e002      	b.n	8003c56 <_printf_i+0x1d2>
 8003c50:	0670      	lsls	r0, r6, #25
 8003c52:	d5fb      	bpl.n	8003c4c <_printf_i+0x1c8>
 8003c54:	8019      	strh	r1, [r3, #0]
 8003c56:	2300      	movs	r3, #0
 8003c58:	6123      	str	r3, [r4, #16]
 8003c5a:	4615      	mov	r5, r2
 8003c5c:	e7ba      	b.n	8003bd4 <_printf_i+0x150>
 8003c5e:	682b      	ldr	r3, [r5, #0]
 8003c60:	1d1a      	adds	r2, r3, #4
 8003c62:	602a      	str	r2, [r5, #0]
 8003c64:	681d      	ldr	r5, [r3, #0]
 8003c66:	6862      	ldr	r2, [r4, #4]
 8003c68:	2100      	movs	r1, #0
 8003c6a:	4628      	mov	r0, r5
 8003c6c:	f7fc fac0 	bl	80001f0 <memchr>
 8003c70:	b108      	cbz	r0, 8003c76 <_printf_i+0x1f2>
 8003c72:	1b40      	subs	r0, r0, r5
 8003c74:	6060      	str	r0, [r4, #4]
 8003c76:	6863      	ldr	r3, [r4, #4]
 8003c78:	6123      	str	r3, [r4, #16]
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c80:	e7a8      	b.n	8003bd4 <_printf_i+0x150>
 8003c82:	6923      	ldr	r3, [r4, #16]
 8003c84:	462a      	mov	r2, r5
 8003c86:	4649      	mov	r1, r9
 8003c88:	4640      	mov	r0, r8
 8003c8a:	47d0      	blx	sl
 8003c8c:	3001      	adds	r0, #1
 8003c8e:	d0ab      	beq.n	8003be8 <_printf_i+0x164>
 8003c90:	6823      	ldr	r3, [r4, #0]
 8003c92:	079b      	lsls	r3, r3, #30
 8003c94:	d413      	bmi.n	8003cbe <_printf_i+0x23a>
 8003c96:	68e0      	ldr	r0, [r4, #12]
 8003c98:	9b03      	ldr	r3, [sp, #12]
 8003c9a:	4298      	cmp	r0, r3
 8003c9c:	bfb8      	it	lt
 8003c9e:	4618      	movlt	r0, r3
 8003ca0:	e7a4      	b.n	8003bec <_printf_i+0x168>
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	4632      	mov	r2, r6
 8003ca6:	4649      	mov	r1, r9
 8003ca8:	4640      	mov	r0, r8
 8003caa:	47d0      	blx	sl
 8003cac:	3001      	adds	r0, #1
 8003cae:	d09b      	beq.n	8003be8 <_printf_i+0x164>
 8003cb0:	3501      	adds	r5, #1
 8003cb2:	68e3      	ldr	r3, [r4, #12]
 8003cb4:	9903      	ldr	r1, [sp, #12]
 8003cb6:	1a5b      	subs	r3, r3, r1
 8003cb8:	42ab      	cmp	r3, r5
 8003cba:	dcf2      	bgt.n	8003ca2 <_printf_i+0x21e>
 8003cbc:	e7eb      	b.n	8003c96 <_printf_i+0x212>
 8003cbe:	2500      	movs	r5, #0
 8003cc0:	f104 0619 	add.w	r6, r4, #25
 8003cc4:	e7f5      	b.n	8003cb2 <_printf_i+0x22e>
 8003cc6:	bf00      	nop
 8003cc8:	08005ff2 	.word	0x08005ff2
 8003ccc:	08006003 	.word	0x08006003

08003cd0 <iprintf>:
 8003cd0:	b40f      	push	{r0, r1, r2, r3}
 8003cd2:	4b0a      	ldr	r3, [pc, #40]	; (8003cfc <iprintf+0x2c>)
 8003cd4:	b513      	push	{r0, r1, r4, lr}
 8003cd6:	681c      	ldr	r4, [r3, #0]
 8003cd8:	b124      	cbz	r4, 8003ce4 <iprintf+0x14>
 8003cda:	69a3      	ldr	r3, [r4, #24]
 8003cdc:	b913      	cbnz	r3, 8003ce4 <iprintf+0x14>
 8003cde:	4620      	mov	r0, r4
 8003ce0:	f001 f8da 	bl	8004e98 <__sinit>
 8003ce4:	ab05      	add	r3, sp, #20
 8003ce6:	9a04      	ldr	r2, [sp, #16]
 8003ce8:	68a1      	ldr	r1, [r4, #8]
 8003cea:	9301      	str	r3, [sp, #4]
 8003cec:	4620      	mov	r0, r4
 8003cee:	f001 fe97 	bl	8005a20 <_vfiprintf_r>
 8003cf2:	b002      	add	sp, #8
 8003cf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cf8:	b004      	add	sp, #16
 8003cfa:	4770      	bx	lr
 8003cfc:	2000000c 	.word	0x2000000c

08003d00 <_puts_r>:
 8003d00:	b570      	push	{r4, r5, r6, lr}
 8003d02:	460e      	mov	r6, r1
 8003d04:	4605      	mov	r5, r0
 8003d06:	b118      	cbz	r0, 8003d10 <_puts_r+0x10>
 8003d08:	6983      	ldr	r3, [r0, #24]
 8003d0a:	b90b      	cbnz	r3, 8003d10 <_puts_r+0x10>
 8003d0c:	f001 f8c4 	bl	8004e98 <__sinit>
 8003d10:	69ab      	ldr	r3, [r5, #24]
 8003d12:	68ac      	ldr	r4, [r5, #8]
 8003d14:	b913      	cbnz	r3, 8003d1c <_puts_r+0x1c>
 8003d16:	4628      	mov	r0, r5
 8003d18:	f001 f8be 	bl	8004e98 <__sinit>
 8003d1c:	4b2c      	ldr	r3, [pc, #176]	; (8003dd0 <_puts_r+0xd0>)
 8003d1e:	429c      	cmp	r4, r3
 8003d20:	d120      	bne.n	8003d64 <_puts_r+0x64>
 8003d22:	686c      	ldr	r4, [r5, #4]
 8003d24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d26:	07db      	lsls	r3, r3, #31
 8003d28:	d405      	bmi.n	8003d36 <_puts_r+0x36>
 8003d2a:	89a3      	ldrh	r3, [r4, #12]
 8003d2c:	0598      	lsls	r0, r3, #22
 8003d2e:	d402      	bmi.n	8003d36 <_puts_r+0x36>
 8003d30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d32:	f001 f954 	bl	8004fde <__retarget_lock_acquire_recursive>
 8003d36:	89a3      	ldrh	r3, [r4, #12]
 8003d38:	0719      	lsls	r1, r3, #28
 8003d3a:	d51d      	bpl.n	8003d78 <_puts_r+0x78>
 8003d3c:	6923      	ldr	r3, [r4, #16]
 8003d3e:	b1db      	cbz	r3, 8003d78 <_puts_r+0x78>
 8003d40:	3e01      	subs	r6, #1
 8003d42:	68a3      	ldr	r3, [r4, #8]
 8003d44:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	60a3      	str	r3, [r4, #8]
 8003d4c:	bb39      	cbnz	r1, 8003d9e <_puts_r+0x9e>
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	da38      	bge.n	8003dc4 <_puts_r+0xc4>
 8003d52:	4622      	mov	r2, r4
 8003d54:	210a      	movs	r1, #10
 8003d56:	4628      	mov	r0, r5
 8003d58:	f000 f848 	bl	8003dec <__swbuf_r>
 8003d5c:	3001      	adds	r0, #1
 8003d5e:	d011      	beq.n	8003d84 <_puts_r+0x84>
 8003d60:	250a      	movs	r5, #10
 8003d62:	e011      	b.n	8003d88 <_puts_r+0x88>
 8003d64:	4b1b      	ldr	r3, [pc, #108]	; (8003dd4 <_puts_r+0xd4>)
 8003d66:	429c      	cmp	r4, r3
 8003d68:	d101      	bne.n	8003d6e <_puts_r+0x6e>
 8003d6a:	68ac      	ldr	r4, [r5, #8]
 8003d6c:	e7da      	b.n	8003d24 <_puts_r+0x24>
 8003d6e:	4b1a      	ldr	r3, [pc, #104]	; (8003dd8 <_puts_r+0xd8>)
 8003d70:	429c      	cmp	r4, r3
 8003d72:	bf08      	it	eq
 8003d74:	68ec      	ldreq	r4, [r5, #12]
 8003d76:	e7d5      	b.n	8003d24 <_puts_r+0x24>
 8003d78:	4621      	mov	r1, r4
 8003d7a:	4628      	mov	r0, r5
 8003d7c:	f000 f888 	bl	8003e90 <__swsetup_r>
 8003d80:	2800      	cmp	r0, #0
 8003d82:	d0dd      	beq.n	8003d40 <_puts_r+0x40>
 8003d84:	f04f 35ff 	mov.w	r5, #4294967295
 8003d88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d8a:	07da      	lsls	r2, r3, #31
 8003d8c:	d405      	bmi.n	8003d9a <_puts_r+0x9a>
 8003d8e:	89a3      	ldrh	r3, [r4, #12]
 8003d90:	059b      	lsls	r3, r3, #22
 8003d92:	d402      	bmi.n	8003d9a <_puts_r+0x9a>
 8003d94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d96:	f001 f923 	bl	8004fe0 <__retarget_lock_release_recursive>
 8003d9a:	4628      	mov	r0, r5
 8003d9c:	bd70      	pop	{r4, r5, r6, pc}
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	da04      	bge.n	8003dac <_puts_r+0xac>
 8003da2:	69a2      	ldr	r2, [r4, #24]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	dc06      	bgt.n	8003db6 <_puts_r+0xb6>
 8003da8:	290a      	cmp	r1, #10
 8003daa:	d004      	beq.n	8003db6 <_puts_r+0xb6>
 8003dac:	6823      	ldr	r3, [r4, #0]
 8003dae:	1c5a      	adds	r2, r3, #1
 8003db0:	6022      	str	r2, [r4, #0]
 8003db2:	7019      	strb	r1, [r3, #0]
 8003db4:	e7c5      	b.n	8003d42 <_puts_r+0x42>
 8003db6:	4622      	mov	r2, r4
 8003db8:	4628      	mov	r0, r5
 8003dba:	f000 f817 	bl	8003dec <__swbuf_r>
 8003dbe:	3001      	adds	r0, #1
 8003dc0:	d1bf      	bne.n	8003d42 <_puts_r+0x42>
 8003dc2:	e7df      	b.n	8003d84 <_puts_r+0x84>
 8003dc4:	6823      	ldr	r3, [r4, #0]
 8003dc6:	250a      	movs	r5, #10
 8003dc8:	1c5a      	adds	r2, r3, #1
 8003dca:	6022      	str	r2, [r4, #0]
 8003dcc:	701d      	strb	r5, [r3, #0]
 8003dce:	e7db      	b.n	8003d88 <_puts_r+0x88>
 8003dd0:	080060c4 	.word	0x080060c4
 8003dd4:	080060e4 	.word	0x080060e4
 8003dd8:	080060a4 	.word	0x080060a4

08003ddc <puts>:
 8003ddc:	4b02      	ldr	r3, [pc, #8]	; (8003de8 <puts+0xc>)
 8003dde:	4601      	mov	r1, r0
 8003de0:	6818      	ldr	r0, [r3, #0]
 8003de2:	f7ff bf8d 	b.w	8003d00 <_puts_r>
 8003de6:	bf00      	nop
 8003de8:	2000000c 	.word	0x2000000c

08003dec <__swbuf_r>:
 8003dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dee:	460e      	mov	r6, r1
 8003df0:	4614      	mov	r4, r2
 8003df2:	4605      	mov	r5, r0
 8003df4:	b118      	cbz	r0, 8003dfe <__swbuf_r+0x12>
 8003df6:	6983      	ldr	r3, [r0, #24]
 8003df8:	b90b      	cbnz	r3, 8003dfe <__swbuf_r+0x12>
 8003dfa:	f001 f84d 	bl	8004e98 <__sinit>
 8003dfe:	4b21      	ldr	r3, [pc, #132]	; (8003e84 <__swbuf_r+0x98>)
 8003e00:	429c      	cmp	r4, r3
 8003e02:	d12b      	bne.n	8003e5c <__swbuf_r+0x70>
 8003e04:	686c      	ldr	r4, [r5, #4]
 8003e06:	69a3      	ldr	r3, [r4, #24]
 8003e08:	60a3      	str	r3, [r4, #8]
 8003e0a:	89a3      	ldrh	r3, [r4, #12]
 8003e0c:	071a      	lsls	r2, r3, #28
 8003e0e:	d52f      	bpl.n	8003e70 <__swbuf_r+0x84>
 8003e10:	6923      	ldr	r3, [r4, #16]
 8003e12:	b36b      	cbz	r3, 8003e70 <__swbuf_r+0x84>
 8003e14:	6923      	ldr	r3, [r4, #16]
 8003e16:	6820      	ldr	r0, [r4, #0]
 8003e18:	1ac0      	subs	r0, r0, r3
 8003e1a:	6963      	ldr	r3, [r4, #20]
 8003e1c:	b2f6      	uxtb	r6, r6
 8003e1e:	4283      	cmp	r3, r0
 8003e20:	4637      	mov	r7, r6
 8003e22:	dc04      	bgt.n	8003e2e <__swbuf_r+0x42>
 8003e24:	4621      	mov	r1, r4
 8003e26:	4628      	mov	r0, r5
 8003e28:	f000 ffa2 	bl	8004d70 <_fflush_r>
 8003e2c:	bb30      	cbnz	r0, 8003e7c <__swbuf_r+0x90>
 8003e2e:	68a3      	ldr	r3, [r4, #8]
 8003e30:	3b01      	subs	r3, #1
 8003e32:	60a3      	str	r3, [r4, #8]
 8003e34:	6823      	ldr	r3, [r4, #0]
 8003e36:	1c5a      	adds	r2, r3, #1
 8003e38:	6022      	str	r2, [r4, #0]
 8003e3a:	701e      	strb	r6, [r3, #0]
 8003e3c:	6963      	ldr	r3, [r4, #20]
 8003e3e:	3001      	adds	r0, #1
 8003e40:	4283      	cmp	r3, r0
 8003e42:	d004      	beq.n	8003e4e <__swbuf_r+0x62>
 8003e44:	89a3      	ldrh	r3, [r4, #12]
 8003e46:	07db      	lsls	r3, r3, #31
 8003e48:	d506      	bpl.n	8003e58 <__swbuf_r+0x6c>
 8003e4a:	2e0a      	cmp	r6, #10
 8003e4c:	d104      	bne.n	8003e58 <__swbuf_r+0x6c>
 8003e4e:	4621      	mov	r1, r4
 8003e50:	4628      	mov	r0, r5
 8003e52:	f000 ff8d 	bl	8004d70 <_fflush_r>
 8003e56:	b988      	cbnz	r0, 8003e7c <__swbuf_r+0x90>
 8003e58:	4638      	mov	r0, r7
 8003e5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e5c:	4b0a      	ldr	r3, [pc, #40]	; (8003e88 <__swbuf_r+0x9c>)
 8003e5e:	429c      	cmp	r4, r3
 8003e60:	d101      	bne.n	8003e66 <__swbuf_r+0x7a>
 8003e62:	68ac      	ldr	r4, [r5, #8]
 8003e64:	e7cf      	b.n	8003e06 <__swbuf_r+0x1a>
 8003e66:	4b09      	ldr	r3, [pc, #36]	; (8003e8c <__swbuf_r+0xa0>)
 8003e68:	429c      	cmp	r4, r3
 8003e6a:	bf08      	it	eq
 8003e6c:	68ec      	ldreq	r4, [r5, #12]
 8003e6e:	e7ca      	b.n	8003e06 <__swbuf_r+0x1a>
 8003e70:	4621      	mov	r1, r4
 8003e72:	4628      	mov	r0, r5
 8003e74:	f000 f80c 	bl	8003e90 <__swsetup_r>
 8003e78:	2800      	cmp	r0, #0
 8003e7a:	d0cb      	beq.n	8003e14 <__swbuf_r+0x28>
 8003e7c:	f04f 37ff 	mov.w	r7, #4294967295
 8003e80:	e7ea      	b.n	8003e58 <__swbuf_r+0x6c>
 8003e82:	bf00      	nop
 8003e84:	080060c4 	.word	0x080060c4
 8003e88:	080060e4 	.word	0x080060e4
 8003e8c:	080060a4 	.word	0x080060a4

08003e90 <__swsetup_r>:
 8003e90:	4b32      	ldr	r3, [pc, #200]	; (8003f5c <__swsetup_r+0xcc>)
 8003e92:	b570      	push	{r4, r5, r6, lr}
 8003e94:	681d      	ldr	r5, [r3, #0]
 8003e96:	4606      	mov	r6, r0
 8003e98:	460c      	mov	r4, r1
 8003e9a:	b125      	cbz	r5, 8003ea6 <__swsetup_r+0x16>
 8003e9c:	69ab      	ldr	r3, [r5, #24]
 8003e9e:	b913      	cbnz	r3, 8003ea6 <__swsetup_r+0x16>
 8003ea0:	4628      	mov	r0, r5
 8003ea2:	f000 fff9 	bl	8004e98 <__sinit>
 8003ea6:	4b2e      	ldr	r3, [pc, #184]	; (8003f60 <__swsetup_r+0xd0>)
 8003ea8:	429c      	cmp	r4, r3
 8003eaa:	d10f      	bne.n	8003ecc <__swsetup_r+0x3c>
 8003eac:	686c      	ldr	r4, [r5, #4]
 8003eae:	89a3      	ldrh	r3, [r4, #12]
 8003eb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003eb4:	0719      	lsls	r1, r3, #28
 8003eb6:	d42c      	bmi.n	8003f12 <__swsetup_r+0x82>
 8003eb8:	06dd      	lsls	r5, r3, #27
 8003eba:	d411      	bmi.n	8003ee0 <__swsetup_r+0x50>
 8003ebc:	2309      	movs	r3, #9
 8003ebe:	6033      	str	r3, [r6, #0]
 8003ec0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003ec4:	81a3      	strh	r3, [r4, #12]
 8003ec6:	f04f 30ff 	mov.w	r0, #4294967295
 8003eca:	e03e      	b.n	8003f4a <__swsetup_r+0xba>
 8003ecc:	4b25      	ldr	r3, [pc, #148]	; (8003f64 <__swsetup_r+0xd4>)
 8003ece:	429c      	cmp	r4, r3
 8003ed0:	d101      	bne.n	8003ed6 <__swsetup_r+0x46>
 8003ed2:	68ac      	ldr	r4, [r5, #8]
 8003ed4:	e7eb      	b.n	8003eae <__swsetup_r+0x1e>
 8003ed6:	4b24      	ldr	r3, [pc, #144]	; (8003f68 <__swsetup_r+0xd8>)
 8003ed8:	429c      	cmp	r4, r3
 8003eda:	bf08      	it	eq
 8003edc:	68ec      	ldreq	r4, [r5, #12]
 8003ede:	e7e6      	b.n	8003eae <__swsetup_r+0x1e>
 8003ee0:	0758      	lsls	r0, r3, #29
 8003ee2:	d512      	bpl.n	8003f0a <__swsetup_r+0x7a>
 8003ee4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ee6:	b141      	cbz	r1, 8003efa <__swsetup_r+0x6a>
 8003ee8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003eec:	4299      	cmp	r1, r3
 8003eee:	d002      	beq.n	8003ef6 <__swsetup_r+0x66>
 8003ef0:	4630      	mov	r0, r6
 8003ef2:	f001 fc8b 	bl	800580c <_free_r>
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	6363      	str	r3, [r4, #52]	; 0x34
 8003efa:	89a3      	ldrh	r3, [r4, #12]
 8003efc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003f00:	81a3      	strh	r3, [r4, #12]
 8003f02:	2300      	movs	r3, #0
 8003f04:	6063      	str	r3, [r4, #4]
 8003f06:	6923      	ldr	r3, [r4, #16]
 8003f08:	6023      	str	r3, [r4, #0]
 8003f0a:	89a3      	ldrh	r3, [r4, #12]
 8003f0c:	f043 0308 	orr.w	r3, r3, #8
 8003f10:	81a3      	strh	r3, [r4, #12]
 8003f12:	6923      	ldr	r3, [r4, #16]
 8003f14:	b94b      	cbnz	r3, 8003f2a <__swsetup_r+0x9a>
 8003f16:	89a3      	ldrh	r3, [r4, #12]
 8003f18:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003f1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f20:	d003      	beq.n	8003f2a <__swsetup_r+0x9a>
 8003f22:	4621      	mov	r1, r4
 8003f24:	4630      	mov	r0, r6
 8003f26:	f001 f881 	bl	800502c <__smakebuf_r>
 8003f2a:	89a0      	ldrh	r0, [r4, #12]
 8003f2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003f30:	f010 0301 	ands.w	r3, r0, #1
 8003f34:	d00a      	beq.n	8003f4c <__swsetup_r+0xbc>
 8003f36:	2300      	movs	r3, #0
 8003f38:	60a3      	str	r3, [r4, #8]
 8003f3a:	6963      	ldr	r3, [r4, #20]
 8003f3c:	425b      	negs	r3, r3
 8003f3e:	61a3      	str	r3, [r4, #24]
 8003f40:	6923      	ldr	r3, [r4, #16]
 8003f42:	b943      	cbnz	r3, 8003f56 <__swsetup_r+0xc6>
 8003f44:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003f48:	d1ba      	bne.n	8003ec0 <__swsetup_r+0x30>
 8003f4a:	bd70      	pop	{r4, r5, r6, pc}
 8003f4c:	0781      	lsls	r1, r0, #30
 8003f4e:	bf58      	it	pl
 8003f50:	6963      	ldrpl	r3, [r4, #20]
 8003f52:	60a3      	str	r3, [r4, #8]
 8003f54:	e7f4      	b.n	8003f40 <__swsetup_r+0xb0>
 8003f56:	2000      	movs	r0, #0
 8003f58:	e7f7      	b.n	8003f4a <__swsetup_r+0xba>
 8003f5a:	bf00      	nop
 8003f5c:	2000000c 	.word	0x2000000c
 8003f60:	080060c4 	.word	0x080060c4
 8003f64:	080060e4 	.word	0x080060e4
 8003f68:	080060a4 	.word	0x080060a4

08003f6c <quorem>:
 8003f6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f70:	6903      	ldr	r3, [r0, #16]
 8003f72:	690c      	ldr	r4, [r1, #16]
 8003f74:	42a3      	cmp	r3, r4
 8003f76:	4607      	mov	r7, r0
 8003f78:	f2c0 8081 	blt.w	800407e <quorem+0x112>
 8003f7c:	3c01      	subs	r4, #1
 8003f7e:	f101 0814 	add.w	r8, r1, #20
 8003f82:	f100 0514 	add.w	r5, r0, #20
 8003f86:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003f8a:	9301      	str	r3, [sp, #4]
 8003f8c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003f90:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003f94:	3301      	adds	r3, #1
 8003f96:	429a      	cmp	r2, r3
 8003f98:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003f9c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003fa0:	fbb2 f6f3 	udiv	r6, r2, r3
 8003fa4:	d331      	bcc.n	800400a <quorem+0x9e>
 8003fa6:	f04f 0e00 	mov.w	lr, #0
 8003faa:	4640      	mov	r0, r8
 8003fac:	46ac      	mov	ip, r5
 8003fae:	46f2      	mov	sl, lr
 8003fb0:	f850 2b04 	ldr.w	r2, [r0], #4
 8003fb4:	b293      	uxth	r3, r2
 8003fb6:	fb06 e303 	mla	r3, r6, r3, lr
 8003fba:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	ebaa 0303 	sub.w	r3, sl, r3
 8003fc4:	f8dc a000 	ldr.w	sl, [ip]
 8003fc8:	0c12      	lsrs	r2, r2, #16
 8003fca:	fa13 f38a 	uxtah	r3, r3, sl
 8003fce:	fb06 e202 	mla	r2, r6, r2, lr
 8003fd2:	9300      	str	r3, [sp, #0]
 8003fd4:	9b00      	ldr	r3, [sp, #0]
 8003fd6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003fda:	b292      	uxth	r2, r2
 8003fdc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8003fe0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003fe4:	f8bd 3000 	ldrh.w	r3, [sp]
 8003fe8:	4581      	cmp	r9, r0
 8003fea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003fee:	f84c 3b04 	str.w	r3, [ip], #4
 8003ff2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003ff6:	d2db      	bcs.n	8003fb0 <quorem+0x44>
 8003ff8:	f855 300b 	ldr.w	r3, [r5, fp]
 8003ffc:	b92b      	cbnz	r3, 800400a <quorem+0x9e>
 8003ffe:	9b01      	ldr	r3, [sp, #4]
 8004000:	3b04      	subs	r3, #4
 8004002:	429d      	cmp	r5, r3
 8004004:	461a      	mov	r2, r3
 8004006:	d32e      	bcc.n	8004066 <quorem+0xfa>
 8004008:	613c      	str	r4, [r7, #16]
 800400a:	4638      	mov	r0, r7
 800400c:	f001 fae6 	bl	80055dc <__mcmp>
 8004010:	2800      	cmp	r0, #0
 8004012:	db24      	blt.n	800405e <quorem+0xf2>
 8004014:	3601      	adds	r6, #1
 8004016:	4628      	mov	r0, r5
 8004018:	f04f 0c00 	mov.w	ip, #0
 800401c:	f858 2b04 	ldr.w	r2, [r8], #4
 8004020:	f8d0 e000 	ldr.w	lr, [r0]
 8004024:	b293      	uxth	r3, r2
 8004026:	ebac 0303 	sub.w	r3, ip, r3
 800402a:	0c12      	lsrs	r2, r2, #16
 800402c:	fa13 f38e 	uxtah	r3, r3, lr
 8004030:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004034:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004038:	b29b      	uxth	r3, r3
 800403a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800403e:	45c1      	cmp	r9, r8
 8004040:	f840 3b04 	str.w	r3, [r0], #4
 8004044:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004048:	d2e8      	bcs.n	800401c <quorem+0xb0>
 800404a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800404e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004052:	b922      	cbnz	r2, 800405e <quorem+0xf2>
 8004054:	3b04      	subs	r3, #4
 8004056:	429d      	cmp	r5, r3
 8004058:	461a      	mov	r2, r3
 800405a:	d30a      	bcc.n	8004072 <quorem+0x106>
 800405c:	613c      	str	r4, [r7, #16]
 800405e:	4630      	mov	r0, r6
 8004060:	b003      	add	sp, #12
 8004062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004066:	6812      	ldr	r2, [r2, #0]
 8004068:	3b04      	subs	r3, #4
 800406a:	2a00      	cmp	r2, #0
 800406c:	d1cc      	bne.n	8004008 <quorem+0x9c>
 800406e:	3c01      	subs	r4, #1
 8004070:	e7c7      	b.n	8004002 <quorem+0x96>
 8004072:	6812      	ldr	r2, [r2, #0]
 8004074:	3b04      	subs	r3, #4
 8004076:	2a00      	cmp	r2, #0
 8004078:	d1f0      	bne.n	800405c <quorem+0xf0>
 800407a:	3c01      	subs	r4, #1
 800407c:	e7eb      	b.n	8004056 <quorem+0xea>
 800407e:	2000      	movs	r0, #0
 8004080:	e7ee      	b.n	8004060 <quorem+0xf4>
 8004082:	0000      	movs	r0, r0
 8004084:	0000      	movs	r0, r0
	...

08004088 <_dtoa_r>:
 8004088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800408c:	ed2d 8b04 	vpush	{d8-d9}
 8004090:	ec57 6b10 	vmov	r6, r7, d0
 8004094:	b093      	sub	sp, #76	; 0x4c
 8004096:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004098:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800409c:	9106      	str	r1, [sp, #24]
 800409e:	ee10 aa10 	vmov	sl, s0
 80040a2:	4604      	mov	r4, r0
 80040a4:	9209      	str	r2, [sp, #36]	; 0x24
 80040a6:	930c      	str	r3, [sp, #48]	; 0x30
 80040a8:	46bb      	mov	fp, r7
 80040aa:	b975      	cbnz	r5, 80040ca <_dtoa_r+0x42>
 80040ac:	2010      	movs	r0, #16
 80040ae:	f000 fffd 	bl	80050ac <malloc>
 80040b2:	4602      	mov	r2, r0
 80040b4:	6260      	str	r0, [r4, #36]	; 0x24
 80040b6:	b920      	cbnz	r0, 80040c2 <_dtoa_r+0x3a>
 80040b8:	4ba7      	ldr	r3, [pc, #668]	; (8004358 <_dtoa_r+0x2d0>)
 80040ba:	21ea      	movs	r1, #234	; 0xea
 80040bc:	48a7      	ldr	r0, [pc, #668]	; (800435c <_dtoa_r+0x2d4>)
 80040be:	f001 fe45 	bl	8005d4c <__assert_func>
 80040c2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80040c6:	6005      	str	r5, [r0, #0]
 80040c8:	60c5      	str	r5, [r0, #12]
 80040ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80040cc:	6819      	ldr	r1, [r3, #0]
 80040ce:	b151      	cbz	r1, 80040e6 <_dtoa_r+0x5e>
 80040d0:	685a      	ldr	r2, [r3, #4]
 80040d2:	604a      	str	r2, [r1, #4]
 80040d4:	2301      	movs	r3, #1
 80040d6:	4093      	lsls	r3, r2
 80040d8:	608b      	str	r3, [r1, #8]
 80040da:	4620      	mov	r0, r4
 80040dc:	f001 f83c 	bl	8005158 <_Bfree>
 80040e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80040e2:	2200      	movs	r2, #0
 80040e4:	601a      	str	r2, [r3, #0]
 80040e6:	1e3b      	subs	r3, r7, #0
 80040e8:	bfaa      	itet	ge
 80040ea:	2300      	movge	r3, #0
 80040ec:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80040f0:	f8c8 3000 	strge.w	r3, [r8]
 80040f4:	4b9a      	ldr	r3, [pc, #616]	; (8004360 <_dtoa_r+0x2d8>)
 80040f6:	bfbc      	itt	lt
 80040f8:	2201      	movlt	r2, #1
 80040fa:	f8c8 2000 	strlt.w	r2, [r8]
 80040fe:	ea33 030b 	bics.w	r3, r3, fp
 8004102:	d11b      	bne.n	800413c <_dtoa_r+0xb4>
 8004104:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004106:	f242 730f 	movw	r3, #9999	; 0x270f
 800410a:	6013      	str	r3, [r2, #0]
 800410c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004110:	4333      	orrs	r3, r6
 8004112:	f000 8592 	beq.w	8004c3a <_dtoa_r+0xbb2>
 8004116:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004118:	b963      	cbnz	r3, 8004134 <_dtoa_r+0xac>
 800411a:	4b92      	ldr	r3, [pc, #584]	; (8004364 <_dtoa_r+0x2dc>)
 800411c:	e022      	b.n	8004164 <_dtoa_r+0xdc>
 800411e:	4b92      	ldr	r3, [pc, #584]	; (8004368 <_dtoa_r+0x2e0>)
 8004120:	9301      	str	r3, [sp, #4]
 8004122:	3308      	adds	r3, #8
 8004124:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004126:	6013      	str	r3, [r2, #0]
 8004128:	9801      	ldr	r0, [sp, #4]
 800412a:	b013      	add	sp, #76	; 0x4c
 800412c:	ecbd 8b04 	vpop	{d8-d9}
 8004130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004134:	4b8b      	ldr	r3, [pc, #556]	; (8004364 <_dtoa_r+0x2dc>)
 8004136:	9301      	str	r3, [sp, #4]
 8004138:	3303      	adds	r3, #3
 800413a:	e7f3      	b.n	8004124 <_dtoa_r+0x9c>
 800413c:	2200      	movs	r2, #0
 800413e:	2300      	movs	r3, #0
 8004140:	4650      	mov	r0, sl
 8004142:	4659      	mov	r1, fp
 8004144:	f7fc fcc8 	bl	8000ad8 <__aeabi_dcmpeq>
 8004148:	ec4b ab19 	vmov	d9, sl, fp
 800414c:	4680      	mov	r8, r0
 800414e:	b158      	cbz	r0, 8004168 <_dtoa_r+0xe0>
 8004150:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004152:	2301      	movs	r3, #1
 8004154:	6013      	str	r3, [r2, #0]
 8004156:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004158:	2b00      	cmp	r3, #0
 800415a:	f000 856b 	beq.w	8004c34 <_dtoa_r+0xbac>
 800415e:	4883      	ldr	r0, [pc, #524]	; (800436c <_dtoa_r+0x2e4>)
 8004160:	6018      	str	r0, [r3, #0]
 8004162:	1e43      	subs	r3, r0, #1
 8004164:	9301      	str	r3, [sp, #4]
 8004166:	e7df      	b.n	8004128 <_dtoa_r+0xa0>
 8004168:	ec4b ab10 	vmov	d0, sl, fp
 800416c:	aa10      	add	r2, sp, #64	; 0x40
 800416e:	a911      	add	r1, sp, #68	; 0x44
 8004170:	4620      	mov	r0, r4
 8004172:	f001 fad9 	bl	8005728 <__d2b>
 8004176:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800417a:	ee08 0a10 	vmov	s16, r0
 800417e:	2d00      	cmp	r5, #0
 8004180:	f000 8084 	beq.w	800428c <_dtoa_r+0x204>
 8004184:	ee19 3a90 	vmov	r3, s19
 8004188:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800418c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004190:	4656      	mov	r6, sl
 8004192:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004196:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800419a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800419e:	4b74      	ldr	r3, [pc, #464]	; (8004370 <_dtoa_r+0x2e8>)
 80041a0:	2200      	movs	r2, #0
 80041a2:	4630      	mov	r0, r6
 80041a4:	4639      	mov	r1, r7
 80041a6:	f7fc f877 	bl	8000298 <__aeabi_dsub>
 80041aa:	a365      	add	r3, pc, #404	; (adr r3, 8004340 <_dtoa_r+0x2b8>)
 80041ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b0:	f7fc fa2a 	bl	8000608 <__aeabi_dmul>
 80041b4:	a364      	add	r3, pc, #400	; (adr r3, 8004348 <_dtoa_r+0x2c0>)
 80041b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ba:	f7fc f86f 	bl	800029c <__adddf3>
 80041be:	4606      	mov	r6, r0
 80041c0:	4628      	mov	r0, r5
 80041c2:	460f      	mov	r7, r1
 80041c4:	f7fc f9b6 	bl	8000534 <__aeabi_i2d>
 80041c8:	a361      	add	r3, pc, #388	; (adr r3, 8004350 <_dtoa_r+0x2c8>)
 80041ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ce:	f7fc fa1b 	bl	8000608 <__aeabi_dmul>
 80041d2:	4602      	mov	r2, r0
 80041d4:	460b      	mov	r3, r1
 80041d6:	4630      	mov	r0, r6
 80041d8:	4639      	mov	r1, r7
 80041da:	f7fc f85f 	bl	800029c <__adddf3>
 80041de:	4606      	mov	r6, r0
 80041e0:	460f      	mov	r7, r1
 80041e2:	f7fc fcc1 	bl	8000b68 <__aeabi_d2iz>
 80041e6:	2200      	movs	r2, #0
 80041e8:	9000      	str	r0, [sp, #0]
 80041ea:	2300      	movs	r3, #0
 80041ec:	4630      	mov	r0, r6
 80041ee:	4639      	mov	r1, r7
 80041f0:	f7fc fc7c 	bl	8000aec <__aeabi_dcmplt>
 80041f4:	b150      	cbz	r0, 800420c <_dtoa_r+0x184>
 80041f6:	9800      	ldr	r0, [sp, #0]
 80041f8:	f7fc f99c 	bl	8000534 <__aeabi_i2d>
 80041fc:	4632      	mov	r2, r6
 80041fe:	463b      	mov	r3, r7
 8004200:	f7fc fc6a 	bl	8000ad8 <__aeabi_dcmpeq>
 8004204:	b910      	cbnz	r0, 800420c <_dtoa_r+0x184>
 8004206:	9b00      	ldr	r3, [sp, #0]
 8004208:	3b01      	subs	r3, #1
 800420a:	9300      	str	r3, [sp, #0]
 800420c:	9b00      	ldr	r3, [sp, #0]
 800420e:	2b16      	cmp	r3, #22
 8004210:	d85a      	bhi.n	80042c8 <_dtoa_r+0x240>
 8004212:	9a00      	ldr	r2, [sp, #0]
 8004214:	4b57      	ldr	r3, [pc, #348]	; (8004374 <_dtoa_r+0x2ec>)
 8004216:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800421a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800421e:	ec51 0b19 	vmov	r0, r1, d9
 8004222:	f7fc fc63 	bl	8000aec <__aeabi_dcmplt>
 8004226:	2800      	cmp	r0, #0
 8004228:	d050      	beq.n	80042cc <_dtoa_r+0x244>
 800422a:	9b00      	ldr	r3, [sp, #0]
 800422c:	3b01      	subs	r3, #1
 800422e:	9300      	str	r3, [sp, #0]
 8004230:	2300      	movs	r3, #0
 8004232:	930b      	str	r3, [sp, #44]	; 0x2c
 8004234:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004236:	1b5d      	subs	r5, r3, r5
 8004238:	1e6b      	subs	r3, r5, #1
 800423a:	9305      	str	r3, [sp, #20]
 800423c:	bf45      	ittet	mi
 800423e:	f1c5 0301 	rsbmi	r3, r5, #1
 8004242:	9304      	strmi	r3, [sp, #16]
 8004244:	2300      	movpl	r3, #0
 8004246:	2300      	movmi	r3, #0
 8004248:	bf4c      	ite	mi
 800424a:	9305      	strmi	r3, [sp, #20]
 800424c:	9304      	strpl	r3, [sp, #16]
 800424e:	9b00      	ldr	r3, [sp, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	db3d      	blt.n	80042d0 <_dtoa_r+0x248>
 8004254:	9b05      	ldr	r3, [sp, #20]
 8004256:	9a00      	ldr	r2, [sp, #0]
 8004258:	920a      	str	r2, [sp, #40]	; 0x28
 800425a:	4413      	add	r3, r2
 800425c:	9305      	str	r3, [sp, #20]
 800425e:	2300      	movs	r3, #0
 8004260:	9307      	str	r3, [sp, #28]
 8004262:	9b06      	ldr	r3, [sp, #24]
 8004264:	2b09      	cmp	r3, #9
 8004266:	f200 8089 	bhi.w	800437c <_dtoa_r+0x2f4>
 800426a:	2b05      	cmp	r3, #5
 800426c:	bfc4      	itt	gt
 800426e:	3b04      	subgt	r3, #4
 8004270:	9306      	strgt	r3, [sp, #24]
 8004272:	9b06      	ldr	r3, [sp, #24]
 8004274:	f1a3 0302 	sub.w	r3, r3, #2
 8004278:	bfcc      	ite	gt
 800427a:	2500      	movgt	r5, #0
 800427c:	2501      	movle	r5, #1
 800427e:	2b03      	cmp	r3, #3
 8004280:	f200 8087 	bhi.w	8004392 <_dtoa_r+0x30a>
 8004284:	e8df f003 	tbb	[pc, r3]
 8004288:	59383a2d 	.word	0x59383a2d
 800428c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004290:	441d      	add	r5, r3
 8004292:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004296:	2b20      	cmp	r3, #32
 8004298:	bfc1      	itttt	gt
 800429a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800429e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80042a2:	fa0b f303 	lslgt.w	r3, fp, r3
 80042a6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80042aa:	bfda      	itte	le
 80042ac:	f1c3 0320 	rsble	r3, r3, #32
 80042b0:	fa06 f003 	lslle.w	r0, r6, r3
 80042b4:	4318      	orrgt	r0, r3
 80042b6:	f7fc f92d 	bl	8000514 <__aeabi_ui2d>
 80042ba:	2301      	movs	r3, #1
 80042bc:	4606      	mov	r6, r0
 80042be:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80042c2:	3d01      	subs	r5, #1
 80042c4:	930e      	str	r3, [sp, #56]	; 0x38
 80042c6:	e76a      	b.n	800419e <_dtoa_r+0x116>
 80042c8:	2301      	movs	r3, #1
 80042ca:	e7b2      	b.n	8004232 <_dtoa_r+0x1aa>
 80042cc:	900b      	str	r0, [sp, #44]	; 0x2c
 80042ce:	e7b1      	b.n	8004234 <_dtoa_r+0x1ac>
 80042d0:	9b04      	ldr	r3, [sp, #16]
 80042d2:	9a00      	ldr	r2, [sp, #0]
 80042d4:	1a9b      	subs	r3, r3, r2
 80042d6:	9304      	str	r3, [sp, #16]
 80042d8:	4253      	negs	r3, r2
 80042da:	9307      	str	r3, [sp, #28]
 80042dc:	2300      	movs	r3, #0
 80042de:	930a      	str	r3, [sp, #40]	; 0x28
 80042e0:	e7bf      	b.n	8004262 <_dtoa_r+0x1da>
 80042e2:	2300      	movs	r3, #0
 80042e4:	9308      	str	r3, [sp, #32]
 80042e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	dc55      	bgt.n	8004398 <_dtoa_r+0x310>
 80042ec:	2301      	movs	r3, #1
 80042ee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80042f2:	461a      	mov	r2, r3
 80042f4:	9209      	str	r2, [sp, #36]	; 0x24
 80042f6:	e00c      	b.n	8004312 <_dtoa_r+0x28a>
 80042f8:	2301      	movs	r3, #1
 80042fa:	e7f3      	b.n	80042e4 <_dtoa_r+0x25c>
 80042fc:	2300      	movs	r3, #0
 80042fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004300:	9308      	str	r3, [sp, #32]
 8004302:	9b00      	ldr	r3, [sp, #0]
 8004304:	4413      	add	r3, r2
 8004306:	9302      	str	r3, [sp, #8]
 8004308:	3301      	adds	r3, #1
 800430a:	2b01      	cmp	r3, #1
 800430c:	9303      	str	r3, [sp, #12]
 800430e:	bfb8      	it	lt
 8004310:	2301      	movlt	r3, #1
 8004312:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004314:	2200      	movs	r2, #0
 8004316:	6042      	str	r2, [r0, #4]
 8004318:	2204      	movs	r2, #4
 800431a:	f102 0614 	add.w	r6, r2, #20
 800431e:	429e      	cmp	r6, r3
 8004320:	6841      	ldr	r1, [r0, #4]
 8004322:	d93d      	bls.n	80043a0 <_dtoa_r+0x318>
 8004324:	4620      	mov	r0, r4
 8004326:	f000 fed7 	bl	80050d8 <_Balloc>
 800432a:	9001      	str	r0, [sp, #4]
 800432c:	2800      	cmp	r0, #0
 800432e:	d13b      	bne.n	80043a8 <_dtoa_r+0x320>
 8004330:	4b11      	ldr	r3, [pc, #68]	; (8004378 <_dtoa_r+0x2f0>)
 8004332:	4602      	mov	r2, r0
 8004334:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004338:	e6c0      	b.n	80040bc <_dtoa_r+0x34>
 800433a:	2301      	movs	r3, #1
 800433c:	e7df      	b.n	80042fe <_dtoa_r+0x276>
 800433e:	bf00      	nop
 8004340:	636f4361 	.word	0x636f4361
 8004344:	3fd287a7 	.word	0x3fd287a7
 8004348:	8b60c8b3 	.word	0x8b60c8b3
 800434c:	3fc68a28 	.word	0x3fc68a28
 8004350:	509f79fb 	.word	0x509f79fb
 8004354:	3fd34413 	.word	0x3fd34413
 8004358:	08006021 	.word	0x08006021
 800435c:	08006038 	.word	0x08006038
 8004360:	7ff00000 	.word	0x7ff00000
 8004364:	0800601d 	.word	0x0800601d
 8004368:	08006014 	.word	0x08006014
 800436c:	08005ff1 	.word	0x08005ff1
 8004370:	3ff80000 	.word	0x3ff80000
 8004374:	08006188 	.word	0x08006188
 8004378:	08006093 	.word	0x08006093
 800437c:	2501      	movs	r5, #1
 800437e:	2300      	movs	r3, #0
 8004380:	9306      	str	r3, [sp, #24]
 8004382:	9508      	str	r5, [sp, #32]
 8004384:	f04f 33ff 	mov.w	r3, #4294967295
 8004388:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800438c:	2200      	movs	r2, #0
 800438e:	2312      	movs	r3, #18
 8004390:	e7b0      	b.n	80042f4 <_dtoa_r+0x26c>
 8004392:	2301      	movs	r3, #1
 8004394:	9308      	str	r3, [sp, #32]
 8004396:	e7f5      	b.n	8004384 <_dtoa_r+0x2fc>
 8004398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800439a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800439e:	e7b8      	b.n	8004312 <_dtoa_r+0x28a>
 80043a0:	3101      	adds	r1, #1
 80043a2:	6041      	str	r1, [r0, #4]
 80043a4:	0052      	lsls	r2, r2, #1
 80043a6:	e7b8      	b.n	800431a <_dtoa_r+0x292>
 80043a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80043aa:	9a01      	ldr	r2, [sp, #4]
 80043ac:	601a      	str	r2, [r3, #0]
 80043ae:	9b03      	ldr	r3, [sp, #12]
 80043b0:	2b0e      	cmp	r3, #14
 80043b2:	f200 809d 	bhi.w	80044f0 <_dtoa_r+0x468>
 80043b6:	2d00      	cmp	r5, #0
 80043b8:	f000 809a 	beq.w	80044f0 <_dtoa_r+0x468>
 80043bc:	9b00      	ldr	r3, [sp, #0]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	dd32      	ble.n	8004428 <_dtoa_r+0x3a0>
 80043c2:	4ab7      	ldr	r2, [pc, #732]	; (80046a0 <_dtoa_r+0x618>)
 80043c4:	f003 030f 	and.w	r3, r3, #15
 80043c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80043cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80043d0:	9b00      	ldr	r3, [sp, #0]
 80043d2:	05d8      	lsls	r0, r3, #23
 80043d4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80043d8:	d516      	bpl.n	8004408 <_dtoa_r+0x380>
 80043da:	4bb2      	ldr	r3, [pc, #712]	; (80046a4 <_dtoa_r+0x61c>)
 80043dc:	ec51 0b19 	vmov	r0, r1, d9
 80043e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80043e4:	f7fc fa3a 	bl	800085c <__aeabi_ddiv>
 80043e8:	f007 070f 	and.w	r7, r7, #15
 80043ec:	4682      	mov	sl, r0
 80043ee:	468b      	mov	fp, r1
 80043f0:	2503      	movs	r5, #3
 80043f2:	4eac      	ldr	r6, [pc, #688]	; (80046a4 <_dtoa_r+0x61c>)
 80043f4:	b957      	cbnz	r7, 800440c <_dtoa_r+0x384>
 80043f6:	4642      	mov	r2, r8
 80043f8:	464b      	mov	r3, r9
 80043fa:	4650      	mov	r0, sl
 80043fc:	4659      	mov	r1, fp
 80043fe:	f7fc fa2d 	bl	800085c <__aeabi_ddiv>
 8004402:	4682      	mov	sl, r0
 8004404:	468b      	mov	fp, r1
 8004406:	e028      	b.n	800445a <_dtoa_r+0x3d2>
 8004408:	2502      	movs	r5, #2
 800440a:	e7f2      	b.n	80043f2 <_dtoa_r+0x36a>
 800440c:	07f9      	lsls	r1, r7, #31
 800440e:	d508      	bpl.n	8004422 <_dtoa_r+0x39a>
 8004410:	4640      	mov	r0, r8
 8004412:	4649      	mov	r1, r9
 8004414:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004418:	f7fc f8f6 	bl	8000608 <__aeabi_dmul>
 800441c:	3501      	adds	r5, #1
 800441e:	4680      	mov	r8, r0
 8004420:	4689      	mov	r9, r1
 8004422:	107f      	asrs	r7, r7, #1
 8004424:	3608      	adds	r6, #8
 8004426:	e7e5      	b.n	80043f4 <_dtoa_r+0x36c>
 8004428:	f000 809b 	beq.w	8004562 <_dtoa_r+0x4da>
 800442c:	9b00      	ldr	r3, [sp, #0]
 800442e:	4f9d      	ldr	r7, [pc, #628]	; (80046a4 <_dtoa_r+0x61c>)
 8004430:	425e      	negs	r6, r3
 8004432:	4b9b      	ldr	r3, [pc, #620]	; (80046a0 <_dtoa_r+0x618>)
 8004434:	f006 020f 	and.w	r2, r6, #15
 8004438:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800443c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004440:	ec51 0b19 	vmov	r0, r1, d9
 8004444:	f7fc f8e0 	bl	8000608 <__aeabi_dmul>
 8004448:	1136      	asrs	r6, r6, #4
 800444a:	4682      	mov	sl, r0
 800444c:	468b      	mov	fp, r1
 800444e:	2300      	movs	r3, #0
 8004450:	2502      	movs	r5, #2
 8004452:	2e00      	cmp	r6, #0
 8004454:	d17a      	bne.n	800454c <_dtoa_r+0x4c4>
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1d3      	bne.n	8004402 <_dtoa_r+0x37a>
 800445a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800445c:	2b00      	cmp	r3, #0
 800445e:	f000 8082 	beq.w	8004566 <_dtoa_r+0x4de>
 8004462:	4b91      	ldr	r3, [pc, #580]	; (80046a8 <_dtoa_r+0x620>)
 8004464:	2200      	movs	r2, #0
 8004466:	4650      	mov	r0, sl
 8004468:	4659      	mov	r1, fp
 800446a:	f7fc fb3f 	bl	8000aec <__aeabi_dcmplt>
 800446e:	2800      	cmp	r0, #0
 8004470:	d079      	beq.n	8004566 <_dtoa_r+0x4de>
 8004472:	9b03      	ldr	r3, [sp, #12]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d076      	beq.n	8004566 <_dtoa_r+0x4de>
 8004478:	9b02      	ldr	r3, [sp, #8]
 800447a:	2b00      	cmp	r3, #0
 800447c:	dd36      	ble.n	80044ec <_dtoa_r+0x464>
 800447e:	9b00      	ldr	r3, [sp, #0]
 8004480:	4650      	mov	r0, sl
 8004482:	4659      	mov	r1, fp
 8004484:	1e5f      	subs	r7, r3, #1
 8004486:	2200      	movs	r2, #0
 8004488:	4b88      	ldr	r3, [pc, #544]	; (80046ac <_dtoa_r+0x624>)
 800448a:	f7fc f8bd 	bl	8000608 <__aeabi_dmul>
 800448e:	9e02      	ldr	r6, [sp, #8]
 8004490:	4682      	mov	sl, r0
 8004492:	468b      	mov	fp, r1
 8004494:	3501      	adds	r5, #1
 8004496:	4628      	mov	r0, r5
 8004498:	f7fc f84c 	bl	8000534 <__aeabi_i2d>
 800449c:	4652      	mov	r2, sl
 800449e:	465b      	mov	r3, fp
 80044a0:	f7fc f8b2 	bl	8000608 <__aeabi_dmul>
 80044a4:	4b82      	ldr	r3, [pc, #520]	; (80046b0 <_dtoa_r+0x628>)
 80044a6:	2200      	movs	r2, #0
 80044a8:	f7fb fef8 	bl	800029c <__adddf3>
 80044ac:	46d0      	mov	r8, sl
 80044ae:	46d9      	mov	r9, fp
 80044b0:	4682      	mov	sl, r0
 80044b2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80044b6:	2e00      	cmp	r6, #0
 80044b8:	d158      	bne.n	800456c <_dtoa_r+0x4e4>
 80044ba:	4b7e      	ldr	r3, [pc, #504]	; (80046b4 <_dtoa_r+0x62c>)
 80044bc:	2200      	movs	r2, #0
 80044be:	4640      	mov	r0, r8
 80044c0:	4649      	mov	r1, r9
 80044c2:	f7fb fee9 	bl	8000298 <__aeabi_dsub>
 80044c6:	4652      	mov	r2, sl
 80044c8:	465b      	mov	r3, fp
 80044ca:	4680      	mov	r8, r0
 80044cc:	4689      	mov	r9, r1
 80044ce:	f7fc fb2b 	bl	8000b28 <__aeabi_dcmpgt>
 80044d2:	2800      	cmp	r0, #0
 80044d4:	f040 8295 	bne.w	8004a02 <_dtoa_r+0x97a>
 80044d8:	4652      	mov	r2, sl
 80044da:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80044de:	4640      	mov	r0, r8
 80044e0:	4649      	mov	r1, r9
 80044e2:	f7fc fb03 	bl	8000aec <__aeabi_dcmplt>
 80044e6:	2800      	cmp	r0, #0
 80044e8:	f040 8289 	bne.w	80049fe <_dtoa_r+0x976>
 80044ec:	ec5b ab19 	vmov	sl, fp, d9
 80044f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	f2c0 8148 	blt.w	8004788 <_dtoa_r+0x700>
 80044f8:	9a00      	ldr	r2, [sp, #0]
 80044fa:	2a0e      	cmp	r2, #14
 80044fc:	f300 8144 	bgt.w	8004788 <_dtoa_r+0x700>
 8004500:	4b67      	ldr	r3, [pc, #412]	; (80046a0 <_dtoa_r+0x618>)
 8004502:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004506:	e9d3 8900 	ldrd	r8, r9, [r3]
 800450a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800450c:	2b00      	cmp	r3, #0
 800450e:	f280 80d5 	bge.w	80046bc <_dtoa_r+0x634>
 8004512:	9b03      	ldr	r3, [sp, #12]
 8004514:	2b00      	cmp	r3, #0
 8004516:	f300 80d1 	bgt.w	80046bc <_dtoa_r+0x634>
 800451a:	f040 826f 	bne.w	80049fc <_dtoa_r+0x974>
 800451e:	4b65      	ldr	r3, [pc, #404]	; (80046b4 <_dtoa_r+0x62c>)
 8004520:	2200      	movs	r2, #0
 8004522:	4640      	mov	r0, r8
 8004524:	4649      	mov	r1, r9
 8004526:	f7fc f86f 	bl	8000608 <__aeabi_dmul>
 800452a:	4652      	mov	r2, sl
 800452c:	465b      	mov	r3, fp
 800452e:	f7fc faf1 	bl	8000b14 <__aeabi_dcmpge>
 8004532:	9e03      	ldr	r6, [sp, #12]
 8004534:	4637      	mov	r7, r6
 8004536:	2800      	cmp	r0, #0
 8004538:	f040 8245 	bne.w	80049c6 <_dtoa_r+0x93e>
 800453c:	9d01      	ldr	r5, [sp, #4]
 800453e:	2331      	movs	r3, #49	; 0x31
 8004540:	f805 3b01 	strb.w	r3, [r5], #1
 8004544:	9b00      	ldr	r3, [sp, #0]
 8004546:	3301      	adds	r3, #1
 8004548:	9300      	str	r3, [sp, #0]
 800454a:	e240      	b.n	80049ce <_dtoa_r+0x946>
 800454c:	07f2      	lsls	r2, r6, #31
 800454e:	d505      	bpl.n	800455c <_dtoa_r+0x4d4>
 8004550:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004554:	f7fc f858 	bl	8000608 <__aeabi_dmul>
 8004558:	3501      	adds	r5, #1
 800455a:	2301      	movs	r3, #1
 800455c:	1076      	asrs	r6, r6, #1
 800455e:	3708      	adds	r7, #8
 8004560:	e777      	b.n	8004452 <_dtoa_r+0x3ca>
 8004562:	2502      	movs	r5, #2
 8004564:	e779      	b.n	800445a <_dtoa_r+0x3d2>
 8004566:	9f00      	ldr	r7, [sp, #0]
 8004568:	9e03      	ldr	r6, [sp, #12]
 800456a:	e794      	b.n	8004496 <_dtoa_r+0x40e>
 800456c:	9901      	ldr	r1, [sp, #4]
 800456e:	4b4c      	ldr	r3, [pc, #304]	; (80046a0 <_dtoa_r+0x618>)
 8004570:	4431      	add	r1, r6
 8004572:	910d      	str	r1, [sp, #52]	; 0x34
 8004574:	9908      	ldr	r1, [sp, #32]
 8004576:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800457a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800457e:	2900      	cmp	r1, #0
 8004580:	d043      	beq.n	800460a <_dtoa_r+0x582>
 8004582:	494d      	ldr	r1, [pc, #308]	; (80046b8 <_dtoa_r+0x630>)
 8004584:	2000      	movs	r0, #0
 8004586:	f7fc f969 	bl	800085c <__aeabi_ddiv>
 800458a:	4652      	mov	r2, sl
 800458c:	465b      	mov	r3, fp
 800458e:	f7fb fe83 	bl	8000298 <__aeabi_dsub>
 8004592:	9d01      	ldr	r5, [sp, #4]
 8004594:	4682      	mov	sl, r0
 8004596:	468b      	mov	fp, r1
 8004598:	4649      	mov	r1, r9
 800459a:	4640      	mov	r0, r8
 800459c:	f7fc fae4 	bl	8000b68 <__aeabi_d2iz>
 80045a0:	4606      	mov	r6, r0
 80045a2:	f7fb ffc7 	bl	8000534 <__aeabi_i2d>
 80045a6:	4602      	mov	r2, r0
 80045a8:	460b      	mov	r3, r1
 80045aa:	4640      	mov	r0, r8
 80045ac:	4649      	mov	r1, r9
 80045ae:	f7fb fe73 	bl	8000298 <__aeabi_dsub>
 80045b2:	3630      	adds	r6, #48	; 0x30
 80045b4:	f805 6b01 	strb.w	r6, [r5], #1
 80045b8:	4652      	mov	r2, sl
 80045ba:	465b      	mov	r3, fp
 80045bc:	4680      	mov	r8, r0
 80045be:	4689      	mov	r9, r1
 80045c0:	f7fc fa94 	bl	8000aec <__aeabi_dcmplt>
 80045c4:	2800      	cmp	r0, #0
 80045c6:	d163      	bne.n	8004690 <_dtoa_r+0x608>
 80045c8:	4642      	mov	r2, r8
 80045ca:	464b      	mov	r3, r9
 80045cc:	4936      	ldr	r1, [pc, #216]	; (80046a8 <_dtoa_r+0x620>)
 80045ce:	2000      	movs	r0, #0
 80045d0:	f7fb fe62 	bl	8000298 <__aeabi_dsub>
 80045d4:	4652      	mov	r2, sl
 80045d6:	465b      	mov	r3, fp
 80045d8:	f7fc fa88 	bl	8000aec <__aeabi_dcmplt>
 80045dc:	2800      	cmp	r0, #0
 80045de:	f040 80b5 	bne.w	800474c <_dtoa_r+0x6c4>
 80045e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80045e4:	429d      	cmp	r5, r3
 80045e6:	d081      	beq.n	80044ec <_dtoa_r+0x464>
 80045e8:	4b30      	ldr	r3, [pc, #192]	; (80046ac <_dtoa_r+0x624>)
 80045ea:	2200      	movs	r2, #0
 80045ec:	4650      	mov	r0, sl
 80045ee:	4659      	mov	r1, fp
 80045f0:	f7fc f80a 	bl	8000608 <__aeabi_dmul>
 80045f4:	4b2d      	ldr	r3, [pc, #180]	; (80046ac <_dtoa_r+0x624>)
 80045f6:	4682      	mov	sl, r0
 80045f8:	468b      	mov	fp, r1
 80045fa:	4640      	mov	r0, r8
 80045fc:	4649      	mov	r1, r9
 80045fe:	2200      	movs	r2, #0
 8004600:	f7fc f802 	bl	8000608 <__aeabi_dmul>
 8004604:	4680      	mov	r8, r0
 8004606:	4689      	mov	r9, r1
 8004608:	e7c6      	b.n	8004598 <_dtoa_r+0x510>
 800460a:	4650      	mov	r0, sl
 800460c:	4659      	mov	r1, fp
 800460e:	f7fb fffb 	bl	8000608 <__aeabi_dmul>
 8004612:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004614:	9d01      	ldr	r5, [sp, #4]
 8004616:	930f      	str	r3, [sp, #60]	; 0x3c
 8004618:	4682      	mov	sl, r0
 800461a:	468b      	mov	fp, r1
 800461c:	4649      	mov	r1, r9
 800461e:	4640      	mov	r0, r8
 8004620:	f7fc faa2 	bl	8000b68 <__aeabi_d2iz>
 8004624:	4606      	mov	r6, r0
 8004626:	f7fb ff85 	bl	8000534 <__aeabi_i2d>
 800462a:	3630      	adds	r6, #48	; 0x30
 800462c:	4602      	mov	r2, r0
 800462e:	460b      	mov	r3, r1
 8004630:	4640      	mov	r0, r8
 8004632:	4649      	mov	r1, r9
 8004634:	f7fb fe30 	bl	8000298 <__aeabi_dsub>
 8004638:	f805 6b01 	strb.w	r6, [r5], #1
 800463c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800463e:	429d      	cmp	r5, r3
 8004640:	4680      	mov	r8, r0
 8004642:	4689      	mov	r9, r1
 8004644:	f04f 0200 	mov.w	r2, #0
 8004648:	d124      	bne.n	8004694 <_dtoa_r+0x60c>
 800464a:	4b1b      	ldr	r3, [pc, #108]	; (80046b8 <_dtoa_r+0x630>)
 800464c:	4650      	mov	r0, sl
 800464e:	4659      	mov	r1, fp
 8004650:	f7fb fe24 	bl	800029c <__adddf3>
 8004654:	4602      	mov	r2, r0
 8004656:	460b      	mov	r3, r1
 8004658:	4640      	mov	r0, r8
 800465a:	4649      	mov	r1, r9
 800465c:	f7fc fa64 	bl	8000b28 <__aeabi_dcmpgt>
 8004660:	2800      	cmp	r0, #0
 8004662:	d173      	bne.n	800474c <_dtoa_r+0x6c4>
 8004664:	4652      	mov	r2, sl
 8004666:	465b      	mov	r3, fp
 8004668:	4913      	ldr	r1, [pc, #76]	; (80046b8 <_dtoa_r+0x630>)
 800466a:	2000      	movs	r0, #0
 800466c:	f7fb fe14 	bl	8000298 <__aeabi_dsub>
 8004670:	4602      	mov	r2, r0
 8004672:	460b      	mov	r3, r1
 8004674:	4640      	mov	r0, r8
 8004676:	4649      	mov	r1, r9
 8004678:	f7fc fa38 	bl	8000aec <__aeabi_dcmplt>
 800467c:	2800      	cmp	r0, #0
 800467e:	f43f af35 	beq.w	80044ec <_dtoa_r+0x464>
 8004682:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8004684:	1e6b      	subs	r3, r5, #1
 8004686:	930f      	str	r3, [sp, #60]	; 0x3c
 8004688:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800468c:	2b30      	cmp	r3, #48	; 0x30
 800468e:	d0f8      	beq.n	8004682 <_dtoa_r+0x5fa>
 8004690:	9700      	str	r7, [sp, #0]
 8004692:	e049      	b.n	8004728 <_dtoa_r+0x6a0>
 8004694:	4b05      	ldr	r3, [pc, #20]	; (80046ac <_dtoa_r+0x624>)
 8004696:	f7fb ffb7 	bl	8000608 <__aeabi_dmul>
 800469a:	4680      	mov	r8, r0
 800469c:	4689      	mov	r9, r1
 800469e:	e7bd      	b.n	800461c <_dtoa_r+0x594>
 80046a0:	08006188 	.word	0x08006188
 80046a4:	08006160 	.word	0x08006160
 80046a8:	3ff00000 	.word	0x3ff00000
 80046ac:	40240000 	.word	0x40240000
 80046b0:	401c0000 	.word	0x401c0000
 80046b4:	40140000 	.word	0x40140000
 80046b8:	3fe00000 	.word	0x3fe00000
 80046bc:	9d01      	ldr	r5, [sp, #4]
 80046be:	4656      	mov	r6, sl
 80046c0:	465f      	mov	r7, fp
 80046c2:	4642      	mov	r2, r8
 80046c4:	464b      	mov	r3, r9
 80046c6:	4630      	mov	r0, r6
 80046c8:	4639      	mov	r1, r7
 80046ca:	f7fc f8c7 	bl	800085c <__aeabi_ddiv>
 80046ce:	f7fc fa4b 	bl	8000b68 <__aeabi_d2iz>
 80046d2:	4682      	mov	sl, r0
 80046d4:	f7fb ff2e 	bl	8000534 <__aeabi_i2d>
 80046d8:	4642      	mov	r2, r8
 80046da:	464b      	mov	r3, r9
 80046dc:	f7fb ff94 	bl	8000608 <__aeabi_dmul>
 80046e0:	4602      	mov	r2, r0
 80046e2:	460b      	mov	r3, r1
 80046e4:	4630      	mov	r0, r6
 80046e6:	4639      	mov	r1, r7
 80046e8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80046ec:	f7fb fdd4 	bl	8000298 <__aeabi_dsub>
 80046f0:	f805 6b01 	strb.w	r6, [r5], #1
 80046f4:	9e01      	ldr	r6, [sp, #4]
 80046f6:	9f03      	ldr	r7, [sp, #12]
 80046f8:	1bae      	subs	r6, r5, r6
 80046fa:	42b7      	cmp	r7, r6
 80046fc:	4602      	mov	r2, r0
 80046fe:	460b      	mov	r3, r1
 8004700:	d135      	bne.n	800476e <_dtoa_r+0x6e6>
 8004702:	f7fb fdcb 	bl	800029c <__adddf3>
 8004706:	4642      	mov	r2, r8
 8004708:	464b      	mov	r3, r9
 800470a:	4606      	mov	r6, r0
 800470c:	460f      	mov	r7, r1
 800470e:	f7fc fa0b 	bl	8000b28 <__aeabi_dcmpgt>
 8004712:	b9d0      	cbnz	r0, 800474a <_dtoa_r+0x6c2>
 8004714:	4642      	mov	r2, r8
 8004716:	464b      	mov	r3, r9
 8004718:	4630      	mov	r0, r6
 800471a:	4639      	mov	r1, r7
 800471c:	f7fc f9dc 	bl	8000ad8 <__aeabi_dcmpeq>
 8004720:	b110      	cbz	r0, 8004728 <_dtoa_r+0x6a0>
 8004722:	f01a 0f01 	tst.w	sl, #1
 8004726:	d110      	bne.n	800474a <_dtoa_r+0x6c2>
 8004728:	4620      	mov	r0, r4
 800472a:	ee18 1a10 	vmov	r1, s16
 800472e:	f000 fd13 	bl	8005158 <_Bfree>
 8004732:	2300      	movs	r3, #0
 8004734:	9800      	ldr	r0, [sp, #0]
 8004736:	702b      	strb	r3, [r5, #0]
 8004738:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800473a:	3001      	adds	r0, #1
 800473c:	6018      	str	r0, [r3, #0]
 800473e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004740:	2b00      	cmp	r3, #0
 8004742:	f43f acf1 	beq.w	8004128 <_dtoa_r+0xa0>
 8004746:	601d      	str	r5, [r3, #0]
 8004748:	e4ee      	b.n	8004128 <_dtoa_r+0xa0>
 800474a:	9f00      	ldr	r7, [sp, #0]
 800474c:	462b      	mov	r3, r5
 800474e:	461d      	mov	r5, r3
 8004750:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004754:	2a39      	cmp	r2, #57	; 0x39
 8004756:	d106      	bne.n	8004766 <_dtoa_r+0x6de>
 8004758:	9a01      	ldr	r2, [sp, #4]
 800475a:	429a      	cmp	r2, r3
 800475c:	d1f7      	bne.n	800474e <_dtoa_r+0x6c6>
 800475e:	9901      	ldr	r1, [sp, #4]
 8004760:	2230      	movs	r2, #48	; 0x30
 8004762:	3701      	adds	r7, #1
 8004764:	700a      	strb	r2, [r1, #0]
 8004766:	781a      	ldrb	r2, [r3, #0]
 8004768:	3201      	adds	r2, #1
 800476a:	701a      	strb	r2, [r3, #0]
 800476c:	e790      	b.n	8004690 <_dtoa_r+0x608>
 800476e:	4ba6      	ldr	r3, [pc, #664]	; (8004a08 <_dtoa_r+0x980>)
 8004770:	2200      	movs	r2, #0
 8004772:	f7fb ff49 	bl	8000608 <__aeabi_dmul>
 8004776:	2200      	movs	r2, #0
 8004778:	2300      	movs	r3, #0
 800477a:	4606      	mov	r6, r0
 800477c:	460f      	mov	r7, r1
 800477e:	f7fc f9ab 	bl	8000ad8 <__aeabi_dcmpeq>
 8004782:	2800      	cmp	r0, #0
 8004784:	d09d      	beq.n	80046c2 <_dtoa_r+0x63a>
 8004786:	e7cf      	b.n	8004728 <_dtoa_r+0x6a0>
 8004788:	9a08      	ldr	r2, [sp, #32]
 800478a:	2a00      	cmp	r2, #0
 800478c:	f000 80d7 	beq.w	800493e <_dtoa_r+0x8b6>
 8004790:	9a06      	ldr	r2, [sp, #24]
 8004792:	2a01      	cmp	r2, #1
 8004794:	f300 80ba 	bgt.w	800490c <_dtoa_r+0x884>
 8004798:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800479a:	2a00      	cmp	r2, #0
 800479c:	f000 80b2 	beq.w	8004904 <_dtoa_r+0x87c>
 80047a0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80047a4:	9e07      	ldr	r6, [sp, #28]
 80047a6:	9d04      	ldr	r5, [sp, #16]
 80047a8:	9a04      	ldr	r2, [sp, #16]
 80047aa:	441a      	add	r2, r3
 80047ac:	9204      	str	r2, [sp, #16]
 80047ae:	9a05      	ldr	r2, [sp, #20]
 80047b0:	2101      	movs	r1, #1
 80047b2:	441a      	add	r2, r3
 80047b4:	4620      	mov	r0, r4
 80047b6:	9205      	str	r2, [sp, #20]
 80047b8:	f000 fd86 	bl	80052c8 <__i2b>
 80047bc:	4607      	mov	r7, r0
 80047be:	2d00      	cmp	r5, #0
 80047c0:	dd0c      	ble.n	80047dc <_dtoa_r+0x754>
 80047c2:	9b05      	ldr	r3, [sp, #20]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	dd09      	ble.n	80047dc <_dtoa_r+0x754>
 80047c8:	42ab      	cmp	r3, r5
 80047ca:	9a04      	ldr	r2, [sp, #16]
 80047cc:	bfa8      	it	ge
 80047ce:	462b      	movge	r3, r5
 80047d0:	1ad2      	subs	r2, r2, r3
 80047d2:	9204      	str	r2, [sp, #16]
 80047d4:	9a05      	ldr	r2, [sp, #20]
 80047d6:	1aed      	subs	r5, r5, r3
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	9305      	str	r3, [sp, #20]
 80047dc:	9b07      	ldr	r3, [sp, #28]
 80047de:	b31b      	cbz	r3, 8004828 <_dtoa_r+0x7a0>
 80047e0:	9b08      	ldr	r3, [sp, #32]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	f000 80af 	beq.w	8004946 <_dtoa_r+0x8be>
 80047e8:	2e00      	cmp	r6, #0
 80047ea:	dd13      	ble.n	8004814 <_dtoa_r+0x78c>
 80047ec:	4639      	mov	r1, r7
 80047ee:	4632      	mov	r2, r6
 80047f0:	4620      	mov	r0, r4
 80047f2:	f000 fe29 	bl	8005448 <__pow5mult>
 80047f6:	ee18 2a10 	vmov	r2, s16
 80047fa:	4601      	mov	r1, r0
 80047fc:	4607      	mov	r7, r0
 80047fe:	4620      	mov	r0, r4
 8004800:	f000 fd78 	bl	80052f4 <__multiply>
 8004804:	ee18 1a10 	vmov	r1, s16
 8004808:	4680      	mov	r8, r0
 800480a:	4620      	mov	r0, r4
 800480c:	f000 fca4 	bl	8005158 <_Bfree>
 8004810:	ee08 8a10 	vmov	s16, r8
 8004814:	9b07      	ldr	r3, [sp, #28]
 8004816:	1b9a      	subs	r2, r3, r6
 8004818:	d006      	beq.n	8004828 <_dtoa_r+0x7a0>
 800481a:	ee18 1a10 	vmov	r1, s16
 800481e:	4620      	mov	r0, r4
 8004820:	f000 fe12 	bl	8005448 <__pow5mult>
 8004824:	ee08 0a10 	vmov	s16, r0
 8004828:	2101      	movs	r1, #1
 800482a:	4620      	mov	r0, r4
 800482c:	f000 fd4c 	bl	80052c8 <__i2b>
 8004830:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004832:	2b00      	cmp	r3, #0
 8004834:	4606      	mov	r6, r0
 8004836:	f340 8088 	ble.w	800494a <_dtoa_r+0x8c2>
 800483a:	461a      	mov	r2, r3
 800483c:	4601      	mov	r1, r0
 800483e:	4620      	mov	r0, r4
 8004840:	f000 fe02 	bl	8005448 <__pow5mult>
 8004844:	9b06      	ldr	r3, [sp, #24]
 8004846:	2b01      	cmp	r3, #1
 8004848:	4606      	mov	r6, r0
 800484a:	f340 8081 	ble.w	8004950 <_dtoa_r+0x8c8>
 800484e:	f04f 0800 	mov.w	r8, #0
 8004852:	6933      	ldr	r3, [r6, #16]
 8004854:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004858:	6918      	ldr	r0, [r3, #16]
 800485a:	f000 fce5 	bl	8005228 <__hi0bits>
 800485e:	f1c0 0020 	rsb	r0, r0, #32
 8004862:	9b05      	ldr	r3, [sp, #20]
 8004864:	4418      	add	r0, r3
 8004866:	f010 001f 	ands.w	r0, r0, #31
 800486a:	f000 8092 	beq.w	8004992 <_dtoa_r+0x90a>
 800486e:	f1c0 0320 	rsb	r3, r0, #32
 8004872:	2b04      	cmp	r3, #4
 8004874:	f340 808a 	ble.w	800498c <_dtoa_r+0x904>
 8004878:	f1c0 001c 	rsb	r0, r0, #28
 800487c:	9b04      	ldr	r3, [sp, #16]
 800487e:	4403      	add	r3, r0
 8004880:	9304      	str	r3, [sp, #16]
 8004882:	9b05      	ldr	r3, [sp, #20]
 8004884:	4403      	add	r3, r0
 8004886:	4405      	add	r5, r0
 8004888:	9305      	str	r3, [sp, #20]
 800488a:	9b04      	ldr	r3, [sp, #16]
 800488c:	2b00      	cmp	r3, #0
 800488e:	dd07      	ble.n	80048a0 <_dtoa_r+0x818>
 8004890:	ee18 1a10 	vmov	r1, s16
 8004894:	461a      	mov	r2, r3
 8004896:	4620      	mov	r0, r4
 8004898:	f000 fe30 	bl	80054fc <__lshift>
 800489c:	ee08 0a10 	vmov	s16, r0
 80048a0:	9b05      	ldr	r3, [sp, #20]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	dd05      	ble.n	80048b2 <_dtoa_r+0x82a>
 80048a6:	4631      	mov	r1, r6
 80048a8:	461a      	mov	r2, r3
 80048aa:	4620      	mov	r0, r4
 80048ac:	f000 fe26 	bl	80054fc <__lshift>
 80048b0:	4606      	mov	r6, r0
 80048b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d06e      	beq.n	8004996 <_dtoa_r+0x90e>
 80048b8:	ee18 0a10 	vmov	r0, s16
 80048bc:	4631      	mov	r1, r6
 80048be:	f000 fe8d 	bl	80055dc <__mcmp>
 80048c2:	2800      	cmp	r0, #0
 80048c4:	da67      	bge.n	8004996 <_dtoa_r+0x90e>
 80048c6:	9b00      	ldr	r3, [sp, #0]
 80048c8:	3b01      	subs	r3, #1
 80048ca:	ee18 1a10 	vmov	r1, s16
 80048ce:	9300      	str	r3, [sp, #0]
 80048d0:	220a      	movs	r2, #10
 80048d2:	2300      	movs	r3, #0
 80048d4:	4620      	mov	r0, r4
 80048d6:	f000 fc61 	bl	800519c <__multadd>
 80048da:	9b08      	ldr	r3, [sp, #32]
 80048dc:	ee08 0a10 	vmov	s16, r0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	f000 81b1 	beq.w	8004c48 <_dtoa_r+0xbc0>
 80048e6:	2300      	movs	r3, #0
 80048e8:	4639      	mov	r1, r7
 80048ea:	220a      	movs	r2, #10
 80048ec:	4620      	mov	r0, r4
 80048ee:	f000 fc55 	bl	800519c <__multadd>
 80048f2:	9b02      	ldr	r3, [sp, #8]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	4607      	mov	r7, r0
 80048f8:	f300 808e 	bgt.w	8004a18 <_dtoa_r+0x990>
 80048fc:	9b06      	ldr	r3, [sp, #24]
 80048fe:	2b02      	cmp	r3, #2
 8004900:	dc51      	bgt.n	80049a6 <_dtoa_r+0x91e>
 8004902:	e089      	b.n	8004a18 <_dtoa_r+0x990>
 8004904:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004906:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800490a:	e74b      	b.n	80047a4 <_dtoa_r+0x71c>
 800490c:	9b03      	ldr	r3, [sp, #12]
 800490e:	1e5e      	subs	r6, r3, #1
 8004910:	9b07      	ldr	r3, [sp, #28]
 8004912:	42b3      	cmp	r3, r6
 8004914:	bfbf      	itttt	lt
 8004916:	9b07      	ldrlt	r3, [sp, #28]
 8004918:	9607      	strlt	r6, [sp, #28]
 800491a:	1af2      	sublt	r2, r6, r3
 800491c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800491e:	bfb6      	itet	lt
 8004920:	189b      	addlt	r3, r3, r2
 8004922:	1b9e      	subge	r6, r3, r6
 8004924:	930a      	strlt	r3, [sp, #40]	; 0x28
 8004926:	9b03      	ldr	r3, [sp, #12]
 8004928:	bfb8      	it	lt
 800492a:	2600      	movlt	r6, #0
 800492c:	2b00      	cmp	r3, #0
 800492e:	bfb7      	itett	lt
 8004930:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8004934:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8004938:	1a9d      	sublt	r5, r3, r2
 800493a:	2300      	movlt	r3, #0
 800493c:	e734      	b.n	80047a8 <_dtoa_r+0x720>
 800493e:	9e07      	ldr	r6, [sp, #28]
 8004940:	9d04      	ldr	r5, [sp, #16]
 8004942:	9f08      	ldr	r7, [sp, #32]
 8004944:	e73b      	b.n	80047be <_dtoa_r+0x736>
 8004946:	9a07      	ldr	r2, [sp, #28]
 8004948:	e767      	b.n	800481a <_dtoa_r+0x792>
 800494a:	9b06      	ldr	r3, [sp, #24]
 800494c:	2b01      	cmp	r3, #1
 800494e:	dc18      	bgt.n	8004982 <_dtoa_r+0x8fa>
 8004950:	f1ba 0f00 	cmp.w	sl, #0
 8004954:	d115      	bne.n	8004982 <_dtoa_r+0x8fa>
 8004956:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800495a:	b993      	cbnz	r3, 8004982 <_dtoa_r+0x8fa>
 800495c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004960:	0d1b      	lsrs	r3, r3, #20
 8004962:	051b      	lsls	r3, r3, #20
 8004964:	b183      	cbz	r3, 8004988 <_dtoa_r+0x900>
 8004966:	9b04      	ldr	r3, [sp, #16]
 8004968:	3301      	adds	r3, #1
 800496a:	9304      	str	r3, [sp, #16]
 800496c:	9b05      	ldr	r3, [sp, #20]
 800496e:	3301      	adds	r3, #1
 8004970:	9305      	str	r3, [sp, #20]
 8004972:	f04f 0801 	mov.w	r8, #1
 8004976:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004978:	2b00      	cmp	r3, #0
 800497a:	f47f af6a 	bne.w	8004852 <_dtoa_r+0x7ca>
 800497e:	2001      	movs	r0, #1
 8004980:	e76f      	b.n	8004862 <_dtoa_r+0x7da>
 8004982:	f04f 0800 	mov.w	r8, #0
 8004986:	e7f6      	b.n	8004976 <_dtoa_r+0x8ee>
 8004988:	4698      	mov	r8, r3
 800498a:	e7f4      	b.n	8004976 <_dtoa_r+0x8ee>
 800498c:	f43f af7d 	beq.w	800488a <_dtoa_r+0x802>
 8004990:	4618      	mov	r0, r3
 8004992:	301c      	adds	r0, #28
 8004994:	e772      	b.n	800487c <_dtoa_r+0x7f4>
 8004996:	9b03      	ldr	r3, [sp, #12]
 8004998:	2b00      	cmp	r3, #0
 800499a:	dc37      	bgt.n	8004a0c <_dtoa_r+0x984>
 800499c:	9b06      	ldr	r3, [sp, #24]
 800499e:	2b02      	cmp	r3, #2
 80049a0:	dd34      	ble.n	8004a0c <_dtoa_r+0x984>
 80049a2:	9b03      	ldr	r3, [sp, #12]
 80049a4:	9302      	str	r3, [sp, #8]
 80049a6:	9b02      	ldr	r3, [sp, #8]
 80049a8:	b96b      	cbnz	r3, 80049c6 <_dtoa_r+0x93e>
 80049aa:	4631      	mov	r1, r6
 80049ac:	2205      	movs	r2, #5
 80049ae:	4620      	mov	r0, r4
 80049b0:	f000 fbf4 	bl	800519c <__multadd>
 80049b4:	4601      	mov	r1, r0
 80049b6:	4606      	mov	r6, r0
 80049b8:	ee18 0a10 	vmov	r0, s16
 80049bc:	f000 fe0e 	bl	80055dc <__mcmp>
 80049c0:	2800      	cmp	r0, #0
 80049c2:	f73f adbb 	bgt.w	800453c <_dtoa_r+0x4b4>
 80049c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049c8:	9d01      	ldr	r5, [sp, #4]
 80049ca:	43db      	mvns	r3, r3
 80049cc:	9300      	str	r3, [sp, #0]
 80049ce:	f04f 0800 	mov.w	r8, #0
 80049d2:	4631      	mov	r1, r6
 80049d4:	4620      	mov	r0, r4
 80049d6:	f000 fbbf 	bl	8005158 <_Bfree>
 80049da:	2f00      	cmp	r7, #0
 80049dc:	f43f aea4 	beq.w	8004728 <_dtoa_r+0x6a0>
 80049e0:	f1b8 0f00 	cmp.w	r8, #0
 80049e4:	d005      	beq.n	80049f2 <_dtoa_r+0x96a>
 80049e6:	45b8      	cmp	r8, r7
 80049e8:	d003      	beq.n	80049f2 <_dtoa_r+0x96a>
 80049ea:	4641      	mov	r1, r8
 80049ec:	4620      	mov	r0, r4
 80049ee:	f000 fbb3 	bl	8005158 <_Bfree>
 80049f2:	4639      	mov	r1, r7
 80049f4:	4620      	mov	r0, r4
 80049f6:	f000 fbaf 	bl	8005158 <_Bfree>
 80049fa:	e695      	b.n	8004728 <_dtoa_r+0x6a0>
 80049fc:	2600      	movs	r6, #0
 80049fe:	4637      	mov	r7, r6
 8004a00:	e7e1      	b.n	80049c6 <_dtoa_r+0x93e>
 8004a02:	9700      	str	r7, [sp, #0]
 8004a04:	4637      	mov	r7, r6
 8004a06:	e599      	b.n	800453c <_dtoa_r+0x4b4>
 8004a08:	40240000 	.word	0x40240000
 8004a0c:	9b08      	ldr	r3, [sp, #32]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	f000 80ca 	beq.w	8004ba8 <_dtoa_r+0xb20>
 8004a14:	9b03      	ldr	r3, [sp, #12]
 8004a16:	9302      	str	r3, [sp, #8]
 8004a18:	2d00      	cmp	r5, #0
 8004a1a:	dd05      	ble.n	8004a28 <_dtoa_r+0x9a0>
 8004a1c:	4639      	mov	r1, r7
 8004a1e:	462a      	mov	r2, r5
 8004a20:	4620      	mov	r0, r4
 8004a22:	f000 fd6b 	bl	80054fc <__lshift>
 8004a26:	4607      	mov	r7, r0
 8004a28:	f1b8 0f00 	cmp.w	r8, #0
 8004a2c:	d05b      	beq.n	8004ae6 <_dtoa_r+0xa5e>
 8004a2e:	6879      	ldr	r1, [r7, #4]
 8004a30:	4620      	mov	r0, r4
 8004a32:	f000 fb51 	bl	80050d8 <_Balloc>
 8004a36:	4605      	mov	r5, r0
 8004a38:	b928      	cbnz	r0, 8004a46 <_dtoa_r+0x9be>
 8004a3a:	4b87      	ldr	r3, [pc, #540]	; (8004c58 <_dtoa_r+0xbd0>)
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004a42:	f7ff bb3b 	b.w	80040bc <_dtoa_r+0x34>
 8004a46:	693a      	ldr	r2, [r7, #16]
 8004a48:	3202      	adds	r2, #2
 8004a4a:	0092      	lsls	r2, r2, #2
 8004a4c:	f107 010c 	add.w	r1, r7, #12
 8004a50:	300c      	adds	r0, #12
 8004a52:	f000 fb33 	bl	80050bc <memcpy>
 8004a56:	2201      	movs	r2, #1
 8004a58:	4629      	mov	r1, r5
 8004a5a:	4620      	mov	r0, r4
 8004a5c:	f000 fd4e 	bl	80054fc <__lshift>
 8004a60:	9b01      	ldr	r3, [sp, #4]
 8004a62:	f103 0901 	add.w	r9, r3, #1
 8004a66:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	9305      	str	r3, [sp, #20]
 8004a6e:	f00a 0301 	and.w	r3, sl, #1
 8004a72:	46b8      	mov	r8, r7
 8004a74:	9304      	str	r3, [sp, #16]
 8004a76:	4607      	mov	r7, r0
 8004a78:	4631      	mov	r1, r6
 8004a7a:	ee18 0a10 	vmov	r0, s16
 8004a7e:	f7ff fa75 	bl	8003f6c <quorem>
 8004a82:	4641      	mov	r1, r8
 8004a84:	9002      	str	r0, [sp, #8]
 8004a86:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8004a8a:	ee18 0a10 	vmov	r0, s16
 8004a8e:	f000 fda5 	bl	80055dc <__mcmp>
 8004a92:	463a      	mov	r2, r7
 8004a94:	9003      	str	r0, [sp, #12]
 8004a96:	4631      	mov	r1, r6
 8004a98:	4620      	mov	r0, r4
 8004a9a:	f000 fdbb 	bl	8005614 <__mdiff>
 8004a9e:	68c2      	ldr	r2, [r0, #12]
 8004aa0:	f109 3bff 	add.w	fp, r9, #4294967295
 8004aa4:	4605      	mov	r5, r0
 8004aa6:	bb02      	cbnz	r2, 8004aea <_dtoa_r+0xa62>
 8004aa8:	4601      	mov	r1, r0
 8004aaa:	ee18 0a10 	vmov	r0, s16
 8004aae:	f000 fd95 	bl	80055dc <__mcmp>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	4629      	mov	r1, r5
 8004ab6:	4620      	mov	r0, r4
 8004ab8:	9207      	str	r2, [sp, #28]
 8004aba:	f000 fb4d 	bl	8005158 <_Bfree>
 8004abe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8004ac2:	ea43 0102 	orr.w	r1, r3, r2
 8004ac6:	9b04      	ldr	r3, [sp, #16]
 8004ac8:	430b      	orrs	r3, r1
 8004aca:	464d      	mov	r5, r9
 8004acc:	d10f      	bne.n	8004aee <_dtoa_r+0xa66>
 8004ace:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004ad2:	d02a      	beq.n	8004b2a <_dtoa_r+0xaa2>
 8004ad4:	9b03      	ldr	r3, [sp, #12]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	dd02      	ble.n	8004ae0 <_dtoa_r+0xa58>
 8004ada:	9b02      	ldr	r3, [sp, #8]
 8004adc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8004ae0:	f88b a000 	strb.w	sl, [fp]
 8004ae4:	e775      	b.n	80049d2 <_dtoa_r+0x94a>
 8004ae6:	4638      	mov	r0, r7
 8004ae8:	e7ba      	b.n	8004a60 <_dtoa_r+0x9d8>
 8004aea:	2201      	movs	r2, #1
 8004aec:	e7e2      	b.n	8004ab4 <_dtoa_r+0xa2c>
 8004aee:	9b03      	ldr	r3, [sp, #12]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	db04      	blt.n	8004afe <_dtoa_r+0xa76>
 8004af4:	9906      	ldr	r1, [sp, #24]
 8004af6:	430b      	orrs	r3, r1
 8004af8:	9904      	ldr	r1, [sp, #16]
 8004afa:	430b      	orrs	r3, r1
 8004afc:	d122      	bne.n	8004b44 <_dtoa_r+0xabc>
 8004afe:	2a00      	cmp	r2, #0
 8004b00:	ddee      	ble.n	8004ae0 <_dtoa_r+0xa58>
 8004b02:	ee18 1a10 	vmov	r1, s16
 8004b06:	2201      	movs	r2, #1
 8004b08:	4620      	mov	r0, r4
 8004b0a:	f000 fcf7 	bl	80054fc <__lshift>
 8004b0e:	4631      	mov	r1, r6
 8004b10:	ee08 0a10 	vmov	s16, r0
 8004b14:	f000 fd62 	bl	80055dc <__mcmp>
 8004b18:	2800      	cmp	r0, #0
 8004b1a:	dc03      	bgt.n	8004b24 <_dtoa_r+0xa9c>
 8004b1c:	d1e0      	bne.n	8004ae0 <_dtoa_r+0xa58>
 8004b1e:	f01a 0f01 	tst.w	sl, #1
 8004b22:	d0dd      	beq.n	8004ae0 <_dtoa_r+0xa58>
 8004b24:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004b28:	d1d7      	bne.n	8004ada <_dtoa_r+0xa52>
 8004b2a:	2339      	movs	r3, #57	; 0x39
 8004b2c:	f88b 3000 	strb.w	r3, [fp]
 8004b30:	462b      	mov	r3, r5
 8004b32:	461d      	mov	r5, r3
 8004b34:	3b01      	subs	r3, #1
 8004b36:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004b3a:	2a39      	cmp	r2, #57	; 0x39
 8004b3c:	d071      	beq.n	8004c22 <_dtoa_r+0xb9a>
 8004b3e:	3201      	adds	r2, #1
 8004b40:	701a      	strb	r2, [r3, #0]
 8004b42:	e746      	b.n	80049d2 <_dtoa_r+0x94a>
 8004b44:	2a00      	cmp	r2, #0
 8004b46:	dd07      	ble.n	8004b58 <_dtoa_r+0xad0>
 8004b48:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004b4c:	d0ed      	beq.n	8004b2a <_dtoa_r+0xaa2>
 8004b4e:	f10a 0301 	add.w	r3, sl, #1
 8004b52:	f88b 3000 	strb.w	r3, [fp]
 8004b56:	e73c      	b.n	80049d2 <_dtoa_r+0x94a>
 8004b58:	9b05      	ldr	r3, [sp, #20]
 8004b5a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8004b5e:	4599      	cmp	r9, r3
 8004b60:	d047      	beq.n	8004bf2 <_dtoa_r+0xb6a>
 8004b62:	ee18 1a10 	vmov	r1, s16
 8004b66:	2300      	movs	r3, #0
 8004b68:	220a      	movs	r2, #10
 8004b6a:	4620      	mov	r0, r4
 8004b6c:	f000 fb16 	bl	800519c <__multadd>
 8004b70:	45b8      	cmp	r8, r7
 8004b72:	ee08 0a10 	vmov	s16, r0
 8004b76:	f04f 0300 	mov.w	r3, #0
 8004b7a:	f04f 020a 	mov.w	r2, #10
 8004b7e:	4641      	mov	r1, r8
 8004b80:	4620      	mov	r0, r4
 8004b82:	d106      	bne.n	8004b92 <_dtoa_r+0xb0a>
 8004b84:	f000 fb0a 	bl	800519c <__multadd>
 8004b88:	4680      	mov	r8, r0
 8004b8a:	4607      	mov	r7, r0
 8004b8c:	f109 0901 	add.w	r9, r9, #1
 8004b90:	e772      	b.n	8004a78 <_dtoa_r+0x9f0>
 8004b92:	f000 fb03 	bl	800519c <__multadd>
 8004b96:	4639      	mov	r1, r7
 8004b98:	4680      	mov	r8, r0
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	220a      	movs	r2, #10
 8004b9e:	4620      	mov	r0, r4
 8004ba0:	f000 fafc 	bl	800519c <__multadd>
 8004ba4:	4607      	mov	r7, r0
 8004ba6:	e7f1      	b.n	8004b8c <_dtoa_r+0xb04>
 8004ba8:	9b03      	ldr	r3, [sp, #12]
 8004baa:	9302      	str	r3, [sp, #8]
 8004bac:	9d01      	ldr	r5, [sp, #4]
 8004bae:	ee18 0a10 	vmov	r0, s16
 8004bb2:	4631      	mov	r1, r6
 8004bb4:	f7ff f9da 	bl	8003f6c <quorem>
 8004bb8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8004bbc:	9b01      	ldr	r3, [sp, #4]
 8004bbe:	f805 ab01 	strb.w	sl, [r5], #1
 8004bc2:	1aea      	subs	r2, r5, r3
 8004bc4:	9b02      	ldr	r3, [sp, #8]
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	dd09      	ble.n	8004bde <_dtoa_r+0xb56>
 8004bca:	ee18 1a10 	vmov	r1, s16
 8004bce:	2300      	movs	r3, #0
 8004bd0:	220a      	movs	r2, #10
 8004bd2:	4620      	mov	r0, r4
 8004bd4:	f000 fae2 	bl	800519c <__multadd>
 8004bd8:	ee08 0a10 	vmov	s16, r0
 8004bdc:	e7e7      	b.n	8004bae <_dtoa_r+0xb26>
 8004bde:	9b02      	ldr	r3, [sp, #8]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	bfc8      	it	gt
 8004be4:	461d      	movgt	r5, r3
 8004be6:	9b01      	ldr	r3, [sp, #4]
 8004be8:	bfd8      	it	le
 8004bea:	2501      	movle	r5, #1
 8004bec:	441d      	add	r5, r3
 8004bee:	f04f 0800 	mov.w	r8, #0
 8004bf2:	ee18 1a10 	vmov	r1, s16
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	4620      	mov	r0, r4
 8004bfa:	f000 fc7f 	bl	80054fc <__lshift>
 8004bfe:	4631      	mov	r1, r6
 8004c00:	ee08 0a10 	vmov	s16, r0
 8004c04:	f000 fcea 	bl	80055dc <__mcmp>
 8004c08:	2800      	cmp	r0, #0
 8004c0a:	dc91      	bgt.n	8004b30 <_dtoa_r+0xaa8>
 8004c0c:	d102      	bne.n	8004c14 <_dtoa_r+0xb8c>
 8004c0e:	f01a 0f01 	tst.w	sl, #1
 8004c12:	d18d      	bne.n	8004b30 <_dtoa_r+0xaa8>
 8004c14:	462b      	mov	r3, r5
 8004c16:	461d      	mov	r5, r3
 8004c18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004c1c:	2a30      	cmp	r2, #48	; 0x30
 8004c1e:	d0fa      	beq.n	8004c16 <_dtoa_r+0xb8e>
 8004c20:	e6d7      	b.n	80049d2 <_dtoa_r+0x94a>
 8004c22:	9a01      	ldr	r2, [sp, #4]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d184      	bne.n	8004b32 <_dtoa_r+0xaaa>
 8004c28:	9b00      	ldr	r3, [sp, #0]
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	9300      	str	r3, [sp, #0]
 8004c2e:	2331      	movs	r3, #49	; 0x31
 8004c30:	7013      	strb	r3, [r2, #0]
 8004c32:	e6ce      	b.n	80049d2 <_dtoa_r+0x94a>
 8004c34:	4b09      	ldr	r3, [pc, #36]	; (8004c5c <_dtoa_r+0xbd4>)
 8004c36:	f7ff ba95 	b.w	8004164 <_dtoa_r+0xdc>
 8004c3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	f47f aa6e 	bne.w	800411e <_dtoa_r+0x96>
 8004c42:	4b07      	ldr	r3, [pc, #28]	; (8004c60 <_dtoa_r+0xbd8>)
 8004c44:	f7ff ba8e 	b.w	8004164 <_dtoa_r+0xdc>
 8004c48:	9b02      	ldr	r3, [sp, #8]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	dcae      	bgt.n	8004bac <_dtoa_r+0xb24>
 8004c4e:	9b06      	ldr	r3, [sp, #24]
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	f73f aea8 	bgt.w	80049a6 <_dtoa_r+0x91e>
 8004c56:	e7a9      	b.n	8004bac <_dtoa_r+0xb24>
 8004c58:	08006093 	.word	0x08006093
 8004c5c:	08005ff0 	.word	0x08005ff0
 8004c60:	08006014 	.word	0x08006014

08004c64 <__sflush_r>:
 8004c64:	898a      	ldrh	r2, [r1, #12]
 8004c66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c6a:	4605      	mov	r5, r0
 8004c6c:	0710      	lsls	r0, r2, #28
 8004c6e:	460c      	mov	r4, r1
 8004c70:	d458      	bmi.n	8004d24 <__sflush_r+0xc0>
 8004c72:	684b      	ldr	r3, [r1, #4]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	dc05      	bgt.n	8004c84 <__sflush_r+0x20>
 8004c78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	dc02      	bgt.n	8004c84 <__sflush_r+0x20>
 8004c7e:	2000      	movs	r0, #0
 8004c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c86:	2e00      	cmp	r6, #0
 8004c88:	d0f9      	beq.n	8004c7e <__sflush_r+0x1a>
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004c90:	682f      	ldr	r7, [r5, #0]
 8004c92:	602b      	str	r3, [r5, #0]
 8004c94:	d032      	beq.n	8004cfc <__sflush_r+0x98>
 8004c96:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004c98:	89a3      	ldrh	r3, [r4, #12]
 8004c9a:	075a      	lsls	r2, r3, #29
 8004c9c:	d505      	bpl.n	8004caa <__sflush_r+0x46>
 8004c9e:	6863      	ldr	r3, [r4, #4]
 8004ca0:	1ac0      	subs	r0, r0, r3
 8004ca2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004ca4:	b10b      	cbz	r3, 8004caa <__sflush_r+0x46>
 8004ca6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004ca8:	1ac0      	subs	r0, r0, r3
 8004caa:	2300      	movs	r3, #0
 8004cac:	4602      	mov	r2, r0
 8004cae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004cb0:	6a21      	ldr	r1, [r4, #32]
 8004cb2:	4628      	mov	r0, r5
 8004cb4:	47b0      	blx	r6
 8004cb6:	1c43      	adds	r3, r0, #1
 8004cb8:	89a3      	ldrh	r3, [r4, #12]
 8004cba:	d106      	bne.n	8004cca <__sflush_r+0x66>
 8004cbc:	6829      	ldr	r1, [r5, #0]
 8004cbe:	291d      	cmp	r1, #29
 8004cc0:	d82c      	bhi.n	8004d1c <__sflush_r+0xb8>
 8004cc2:	4a2a      	ldr	r2, [pc, #168]	; (8004d6c <__sflush_r+0x108>)
 8004cc4:	40ca      	lsrs	r2, r1
 8004cc6:	07d6      	lsls	r6, r2, #31
 8004cc8:	d528      	bpl.n	8004d1c <__sflush_r+0xb8>
 8004cca:	2200      	movs	r2, #0
 8004ccc:	6062      	str	r2, [r4, #4]
 8004cce:	04d9      	lsls	r1, r3, #19
 8004cd0:	6922      	ldr	r2, [r4, #16]
 8004cd2:	6022      	str	r2, [r4, #0]
 8004cd4:	d504      	bpl.n	8004ce0 <__sflush_r+0x7c>
 8004cd6:	1c42      	adds	r2, r0, #1
 8004cd8:	d101      	bne.n	8004cde <__sflush_r+0x7a>
 8004cda:	682b      	ldr	r3, [r5, #0]
 8004cdc:	b903      	cbnz	r3, 8004ce0 <__sflush_r+0x7c>
 8004cde:	6560      	str	r0, [r4, #84]	; 0x54
 8004ce0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ce2:	602f      	str	r7, [r5, #0]
 8004ce4:	2900      	cmp	r1, #0
 8004ce6:	d0ca      	beq.n	8004c7e <__sflush_r+0x1a>
 8004ce8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004cec:	4299      	cmp	r1, r3
 8004cee:	d002      	beq.n	8004cf6 <__sflush_r+0x92>
 8004cf0:	4628      	mov	r0, r5
 8004cf2:	f000 fd8b 	bl	800580c <_free_r>
 8004cf6:	2000      	movs	r0, #0
 8004cf8:	6360      	str	r0, [r4, #52]	; 0x34
 8004cfa:	e7c1      	b.n	8004c80 <__sflush_r+0x1c>
 8004cfc:	6a21      	ldr	r1, [r4, #32]
 8004cfe:	2301      	movs	r3, #1
 8004d00:	4628      	mov	r0, r5
 8004d02:	47b0      	blx	r6
 8004d04:	1c41      	adds	r1, r0, #1
 8004d06:	d1c7      	bne.n	8004c98 <__sflush_r+0x34>
 8004d08:	682b      	ldr	r3, [r5, #0]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d0c4      	beq.n	8004c98 <__sflush_r+0x34>
 8004d0e:	2b1d      	cmp	r3, #29
 8004d10:	d001      	beq.n	8004d16 <__sflush_r+0xb2>
 8004d12:	2b16      	cmp	r3, #22
 8004d14:	d101      	bne.n	8004d1a <__sflush_r+0xb6>
 8004d16:	602f      	str	r7, [r5, #0]
 8004d18:	e7b1      	b.n	8004c7e <__sflush_r+0x1a>
 8004d1a:	89a3      	ldrh	r3, [r4, #12]
 8004d1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d20:	81a3      	strh	r3, [r4, #12]
 8004d22:	e7ad      	b.n	8004c80 <__sflush_r+0x1c>
 8004d24:	690f      	ldr	r7, [r1, #16]
 8004d26:	2f00      	cmp	r7, #0
 8004d28:	d0a9      	beq.n	8004c7e <__sflush_r+0x1a>
 8004d2a:	0793      	lsls	r3, r2, #30
 8004d2c:	680e      	ldr	r6, [r1, #0]
 8004d2e:	bf08      	it	eq
 8004d30:	694b      	ldreq	r3, [r1, #20]
 8004d32:	600f      	str	r7, [r1, #0]
 8004d34:	bf18      	it	ne
 8004d36:	2300      	movne	r3, #0
 8004d38:	eba6 0807 	sub.w	r8, r6, r7
 8004d3c:	608b      	str	r3, [r1, #8]
 8004d3e:	f1b8 0f00 	cmp.w	r8, #0
 8004d42:	dd9c      	ble.n	8004c7e <__sflush_r+0x1a>
 8004d44:	6a21      	ldr	r1, [r4, #32]
 8004d46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004d48:	4643      	mov	r3, r8
 8004d4a:	463a      	mov	r2, r7
 8004d4c:	4628      	mov	r0, r5
 8004d4e:	47b0      	blx	r6
 8004d50:	2800      	cmp	r0, #0
 8004d52:	dc06      	bgt.n	8004d62 <__sflush_r+0xfe>
 8004d54:	89a3      	ldrh	r3, [r4, #12]
 8004d56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d5a:	81a3      	strh	r3, [r4, #12]
 8004d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d60:	e78e      	b.n	8004c80 <__sflush_r+0x1c>
 8004d62:	4407      	add	r7, r0
 8004d64:	eba8 0800 	sub.w	r8, r8, r0
 8004d68:	e7e9      	b.n	8004d3e <__sflush_r+0xda>
 8004d6a:	bf00      	nop
 8004d6c:	20400001 	.word	0x20400001

08004d70 <_fflush_r>:
 8004d70:	b538      	push	{r3, r4, r5, lr}
 8004d72:	690b      	ldr	r3, [r1, #16]
 8004d74:	4605      	mov	r5, r0
 8004d76:	460c      	mov	r4, r1
 8004d78:	b913      	cbnz	r3, 8004d80 <_fflush_r+0x10>
 8004d7a:	2500      	movs	r5, #0
 8004d7c:	4628      	mov	r0, r5
 8004d7e:	bd38      	pop	{r3, r4, r5, pc}
 8004d80:	b118      	cbz	r0, 8004d8a <_fflush_r+0x1a>
 8004d82:	6983      	ldr	r3, [r0, #24]
 8004d84:	b90b      	cbnz	r3, 8004d8a <_fflush_r+0x1a>
 8004d86:	f000 f887 	bl	8004e98 <__sinit>
 8004d8a:	4b14      	ldr	r3, [pc, #80]	; (8004ddc <_fflush_r+0x6c>)
 8004d8c:	429c      	cmp	r4, r3
 8004d8e:	d11b      	bne.n	8004dc8 <_fflush_r+0x58>
 8004d90:	686c      	ldr	r4, [r5, #4]
 8004d92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d0ef      	beq.n	8004d7a <_fflush_r+0xa>
 8004d9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004d9c:	07d0      	lsls	r0, r2, #31
 8004d9e:	d404      	bmi.n	8004daa <_fflush_r+0x3a>
 8004da0:	0599      	lsls	r1, r3, #22
 8004da2:	d402      	bmi.n	8004daa <_fflush_r+0x3a>
 8004da4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004da6:	f000 f91a 	bl	8004fde <__retarget_lock_acquire_recursive>
 8004daa:	4628      	mov	r0, r5
 8004dac:	4621      	mov	r1, r4
 8004dae:	f7ff ff59 	bl	8004c64 <__sflush_r>
 8004db2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004db4:	07da      	lsls	r2, r3, #31
 8004db6:	4605      	mov	r5, r0
 8004db8:	d4e0      	bmi.n	8004d7c <_fflush_r+0xc>
 8004dba:	89a3      	ldrh	r3, [r4, #12]
 8004dbc:	059b      	lsls	r3, r3, #22
 8004dbe:	d4dd      	bmi.n	8004d7c <_fflush_r+0xc>
 8004dc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004dc2:	f000 f90d 	bl	8004fe0 <__retarget_lock_release_recursive>
 8004dc6:	e7d9      	b.n	8004d7c <_fflush_r+0xc>
 8004dc8:	4b05      	ldr	r3, [pc, #20]	; (8004de0 <_fflush_r+0x70>)
 8004dca:	429c      	cmp	r4, r3
 8004dcc:	d101      	bne.n	8004dd2 <_fflush_r+0x62>
 8004dce:	68ac      	ldr	r4, [r5, #8]
 8004dd0:	e7df      	b.n	8004d92 <_fflush_r+0x22>
 8004dd2:	4b04      	ldr	r3, [pc, #16]	; (8004de4 <_fflush_r+0x74>)
 8004dd4:	429c      	cmp	r4, r3
 8004dd6:	bf08      	it	eq
 8004dd8:	68ec      	ldreq	r4, [r5, #12]
 8004dda:	e7da      	b.n	8004d92 <_fflush_r+0x22>
 8004ddc:	080060c4 	.word	0x080060c4
 8004de0:	080060e4 	.word	0x080060e4
 8004de4:	080060a4 	.word	0x080060a4

08004de8 <std>:
 8004de8:	2300      	movs	r3, #0
 8004dea:	b510      	push	{r4, lr}
 8004dec:	4604      	mov	r4, r0
 8004dee:	e9c0 3300 	strd	r3, r3, [r0]
 8004df2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004df6:	6083      	str	r3, [r0, #8]
 8004df8:	8181      	strh	r1, [r0, #12]
 8004dfa:	6643      	str	r3, [r0, #100]	; 0x64
 8004dfc:	81c2      	strh	r2, [r0, #14]
 8004dfe:	6183      	str	r3, [r0, #24]
 8004e00:	4619      	mov	r1, r3
 8004e02:	2208      	movs	r2, #8
 8004e04:	305c      	adds	r0, #92	; 0x5c
 8004e06:	f7fe faf1 	bl	80033ec <memset>
 8004e0a:	4b05      	ldr	r3, [pc, #20]	; (8004e20 <std+0x38>)
 8004e0c:	6263      	str	r3, [r4, #36]	; 0x24
 8004e0e:	4b05      	ldr	r3, [pc, #20]	; (8004e24 <std+0x3c>)
 8004e10:	62a3      	str	r3, [r4, #40]	; 0x28
 8004e12:	4b05      	ldr	r3, [pc, #20]	; (8004e28 <std+0x40>)
 8004e14:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004e16:	4b05      	ldr	r3, [pc, #20]	; (8004e2c <std+0x44>)
 8004e18:	6224      	str	r4, [r4, #32]
 8004e1a:	6323      	str	r3, [r4, #48]	; 0x30
 8004e1c:	bd10      	pop	{r4, pc}
 8004e1e:	bf00      	nop
 8004e20:	08005ca1 	.word	0x08005ca1
 8004e24:	08005cc3 	.word	0x08005cc3
 8004e28:	08005cfb 	.word	0x08005cfb
 8004e2c:	08005d1f 	.word	0x08005d1f

08004e30 <_cleanup_r>:
 8004e30:	4901      	ldr	r1, [pc, #4]	; (8004e38 <_cleanup_r+0x8>)
 8004e32:	f000 b8af 	b.w	8004f94 <_fwalk_reent>
 8004e36:	bf00      	nop
 8004e38:	08004d71 	.word	0x08004d71

08004e3c <__sfmoreglue>:
 8004e3c:	b570      	push	{r4, r5, r6, lr}
 8004e3e:	2268      	movs	r2, #104	; 0x68
 8004e40:	1e4d      	subs	r5, r1, #1
 8004e42:	4355      	muls	r5, r2
 8004e44:	460e      	mov	r6, r1
 8004e46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004e4a:	f000 fd4b 	bl	80058e4 <_malloc_r>
 8004e4e:	4604      	mov	r4, r0
 8004e50:	b140      	cbz	r0, 8004e64 <__sfmoreglue+0x28>
 8004e52:	2100      	movs	r1, #0
 8004e54:	e9c0 1600 	strd	r1, r6, [r0]
 8004e58:	300c      	adds	r0, #12
 8004e5a:	60a0      	str	r0, [r4, #8]
 8004e5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004e60:	f7fe fac4 	bl	80033ec <memset>
 8004e64:	4620      	mov	r0, r4
 8004e66:	bd70      	pop	{r4, r5, r6, pc}

08004e68 <__sfp_lock_acquire>:
 8004e68:	4801      	ldr	r0, [pc, #4]	; (8004e70 <__sfp_lock_acquire+0x8>)
 8004e6a:	f000 b8b8 	b.w	8004fde <__retarget_lock_acquire_recursive>
 8004e6e:	bf00      	nop
 8004e70:	20000299 	.word	0x20000299

08004e74 <__sfp_lock_release>:
 8004e74:	4801      	ldr	r0, [pc, #4]	; (8004e7c <__sfp_lock_release+0x8>)
 8004e76:	f000 b8b3 	b.w	8004fe0 <__retarget_lock_release_recursive>
 8004e7a:	bf00      	nop
 8004e7c:	20000299 	.word	0x20000299

08004e80 <__sinit_lock_acquire>:
 8004e80:	4801      	ldr	r0, [pc, #4]	; (8004e88 <__sinit_lock_acquire+0x8>)
 8004e82:	f000 b8ac 	b.w	8004fde <__retarget_lock_acquire_recursive>
 8004e86:	bf00      	nop
 8004e88:	2000029a 	.word	0x2000029a

08004e8c <__sinit_lock_release>:
 8004e8c:	4801      	ldr	r0, [pc, #4]	; (8004e94 <__sinit_lock_release+0x8>)
 8004e8e:	f000 b8a7 	b.w	8004fe0 <__retarget_lock_release_recursive>
 8004e92:	bf00      	nop
 8004e94:	2000029a 	.word	0x2000029a

08004e98 <__sinit>:
 8004e98:	b510      	push	{r4, lr}
 8004e9a:	4604      	mov	r4, r0
 8004e9c:	f7ff fff0 	bl	8004e80 <__sinit_lock_acquire>
 8004ea0:	69a3      	ldr	r3, [r4, #24]
 8004ea2:	b11b      	cbz	r3, 8004eac <__sinit+0x14>
 8004ea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ea8:	f7ff bff0 	b.w	8004e8c <__sinit_lock_release>
 8004eac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004eb0:	6523      	str	r3, [r4, #80]	; 0x50
 8004eb2:	4b13      	ldr	r3, [pc, #76]	; (8004f00 <__sinit+0x68>)
 8004eb4:	4a13      	ldr	r2, [pc, #76]	; (8004f04 <__sinit+0x6c>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	62a2      	str	r2, [r4, #40]	; 0x28
 8004eba:	42a3      	cmp	r3, r4
 8004ebc:	bf04      	itt	eq
 8004ebe:	2301      	moveq	r3, #1
 8004ec0:	61a3      	streq	r3, [r4, #24]
 8004ec2:	4620      	mov	r0, r4
 8004ec4:	f000 f820 	bl	8004f08 <__sfp>
 8004ec8:	6060      	str	r0, [r4, #4]
 8004eca:	4620      	mov	r0, r4
 8004ecc:	f000 f81c 	bl	8004f08 <__sfp>
 8004ed0:	60a0      	str	r0, [r4, #8]
 8004ed2:	4620      	mov	r0, r4
 8004ed4:	f000 f818 	bl	8004f08 <__sfp>
 8004ed8:	2200      	movs	r2, #0
 8004eda:	60e0      	str	r0, [r4, #12]
 8004edc:	2104      	movs	r1, #4
 8004ede:	6860      	ldr	r0, [r4, #4]
 8004ee0:	f7ff ff82 	bl	8004de8 <std>
 8004ee4:	68a0      	ldr	r0, [r4, #8]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	2109      	movs	r1, #9
 8004eea:	f7ff ff7d 	bl	8004de8 <std>
 8004eee:	68e0      	ldr	r0, [r4, #12]
 8004ef0:	2202      	movs	r2, #2
 8004ef2:	2112      	movs	r1, #18
 8004ef4:	f7ff ff78 	bl	8004de8 <std>
 8004ef8:	2301      	movs	r3, #1
 8004efa:	61a3      	str	r3, [r4, #24]
 8004efc:	e7d2      	b.n	8004ea4 <__sinit+0xc>
 8004efe:	bf00      	nop
 8004f00:	08005fdc 	.word	0x08005fdc
 8004f04:	08004e31 	.word	0x08004e31

08004f08 <__sfp>:
 8004f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f0a:	4607      	mov	r7, r0
 8004f0c:	f7ff ffac 	bl	8004e68 <__sfp_lock_acquire>
 8004f10:	4b1e      	ldr	r3, [pc, #120]	; (8004f8c <__sfp+0x84>)
 8004f12:	681e      	ldr	r6, [r3, #0]
 8004f14:	69b3      	ldr	r3, [r6, #24]
 8004f16:	b913      	cbnz	r3, 8004f1e <__sfp+0x16>
 8004f18:	4630      	mov	r0, r6
 8004f1a:	f7ff ffbd 	bl	8004e98 <__sinit>
 8004f1e:	3648      	adds	r6, #72	; 0x48
 8004f20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004f24:	3b01      	subs	r3, #1
 8004f26:	d503      	bpl.n	8004f30 <__sfp+0x28>
 8004f28:	6833      	ldr	r3, [r6, #0]
 8004f2a:	b30b      	cbz	r3, 8004f70 <__sfp+0x68>
 8004f2c:	6836      	ldr	r6, [r6, #0]
 8004f2e:	e7f7      	b.n	8004f20 <__sfp+0x18>
 8004f30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004f34:	b9d5      	cbnz	r5, 8004f6c <__sfp+0x64>
 8004f36:	4b16      	ldr	r3, [pc, #88]	; (8004f90 <__sfp+0x88>)
 8004f38:	60e3      	str	r3, [r4, #12]
 8004f3a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004f3e:	6665      	str	r5, [r4, #100]	; 0x64
 8004f40:	f000 f84c 	bl	8004fdc <__retarget_lock_init_recursive>
 8004f44:	f7ff ff96 	bl	8004e74 <__sfp_lock_release>
 8004f48:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004f4c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004f50:	6025      	str	r5, [r4, #0]
 8004f52:	61a5      	str	r5, [r4, #24]
 8004f54:	2208      	movs	r2, #8
 8004f56:	4629      	mov	r1, r5
 8004f58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004f5c:	f7fe fa46 	bl	80033ec <memset>
 8004f60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004f64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004f68:	4620      	mov	r0, r4
 8004f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f6c:	3468      	adds	r4, #104	; 0x68
 8004f6e:	e7d9      	b.n	8004f24 <__sfp+0x1c>
 8004f70:	2104      	movs	r1, #4
 8004f72:	4638      	mov	r0, r7
 8004f74:	f7ff ff62 	bl	8004e3c <__sfmoreglue>
 8004f78:	4604      	mov	r4, r0
 8004f7a:	6030      	str	r0, [r6, #0]
 8004f7c:	2800      	cmp	r0, #0
 8004f7e:	d1d5      	bne.n	8004f2c <__sfp+0x24>
 8004f80:	f7ff ff78 	bl	8004e74 <__sfp_lock_release>
 8004f84:	230c      	movs	r3, #12
 8004f86:	603b      	str	r3, [r7, #0]
 8004f88:	e7ee      	b.n	8004f68 <__sfp+0x60>
 8004f8a:	bf00      	nop
 8004f8c:	08005fdc 	.word	0x08005fdc
 8004f90:	ffff0001 	.word	0xffff0001

08004f94 <_fwalk_reent>:
 8004f94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f98:	4606      	mov	r6, r0
 8004f9a:	4688      	mov	r8, r1
 8004f9c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004fa0:	2700      	movs	r7, #0
 8004fa2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004fa6:	f1b9 0901 	subs.w	r9, r9, #1
 8004faa:	d505      	bpl.n	8004fb8 <_fwalk_reent+0x24>
 8004fac:	6824      	ldr	r4, [r4, #0]
 8004fae:	2c00      	cmp	r4, #0
 8004fb0:	d1f7      	bne.n	8004fa2 <_fwalk_reent+0xe>
 8004fb2:	4638      	mov	r0, r7
 8004fb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fb8:	89ab      	ldrh	r3, [r5, #12]
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d907      	bls.n	8004fce <_fwalk_reent+0x3a>
 8004fbe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	d003      	beq.n	8004fce <_fwalk_reent+0x3a>
 8004fc6:	4629      	mov	r1, r5
 8004fc8:	4630      	mov	r0, r6
 8004fca:	47c0      	blx	r8
 8004fcc:	4307      	orrs	r7, r0
 8004fce:	3568      	adds	r5, #104	; 0x68
 8004fd0:	e7e9      	b.n	8004fa6 <_fwalk_reent+0x12>
	...

08004fd4 <_localeconv_r>:
 8004fd4:	4800      	ldr	r0, [pc, #0]	; (8004fd8 <_localeconv_r+0x4>)
 8004fd6:	4770      	bx	lr
 8004fd8:	20000160 	.word	0x20000160

08004fdc <__retarget_lock_init_recursive>:
 8004fdc:	4770      	bx	lr

08004fde <__retarget_lock_acquire_recursive>:
 8004fde:	4770      	bx	lr

08004fe0 <__retarget_lock_release_recursive>:
 8004fe0:	4770      	bx	lr

08004fe2 <__swhatbuf_r>:
 8004fe2:	b570      	push	{r4, r5, r6, lr}
 8004fe4:	460e      	mov	r6, r1
 8004fe6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fea:	2900      	cmp	r1, #0
 8004fec:	b096      	sub	sp, #88	; 0x58
 8004fee:	4614      	mov	r4, r2
 8004ff0:	461d      	mov	r5, r3
 8004ff2:	da08      	bge.n	8005006 <__swhatbuf_r+0x24>
 8004ff4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	602a      	str	r2, [r5, #0]
 8004ffc:	061a      	lsls	r2, r3, #24
 8004ffe:	d410      	bmi.n	8005022 <__swhatbuf_r+0x40>
 8005000:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005004:	e00e      	b.n	8005024 <__swhatbuf_r+0x42>
 8005006:	466a      	mov	r2, sp
 8005008:	f000 fee0 	bl	8005dcc <_fstat_r>
 800500c:	2800      	cmp	r0, #0
 800500e:	dbf1      	blt.n	8004ff4 <__swhatbuf_r+0x12>
 8005010:	9a01      	ldr	r2, [sp, #4]
 8005012:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005016:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800501a:	425a      	negs	r2, r3
 800501c:	415a      	adcs	r2, r3
 800501e:	602a      	str	r2, [r5, #0]
 8005020:	e7ee      	b.n	8005000 <__swhatbuf_r+0x1e>
 8005022:	2340      	movs	r3, #64	; 0x40
 8005024:	2000      	movs	r0, #0
 8005026:	6023      	str	r3, [r4, #0]
 8005028:	b016      	add	sp, #88	; 0x58
 800502a:	bd70      	pop	{r4, r5, r6, pc}

0800502c <__smakebuf_r>:
 800502c:	898b      	ldrh	r3, [r1, #12]
 800502e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005030:	079d      	lsls	r5, r3, #30
 8005032:	4606      	mov	r6, r0
 8005034:	460c      	mov	r4, r1
 8005036:	d507      	bpl.n	8005048 <__smakebuf_r+0x1c>
 8005038:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800503c:	6023      	str	r3, [r4, #0]
 800503e:	6123      	str	r3, [r4, #16]
 8005040:	2301      	movs	r3, #1
 8005042:	6163      	str	r3, [r4, #20]
 8005044:	b002      	add	sp, #8
 8005046:	bd70      	pop	{r4, r5, r6, pc}
 8005048:	ab01      	add	r3, sp, #4
 800504a:	466a      	mov	r2, sp
 800504c:	f7ff ffc9 	bl	8004fe2 <__swhatbuf_r>
 8005050:	9900      	ldr	r1, [sp, #0]
 8005052:	4605      	mov	r5, r0
 8005054:	4630      	mov	r0, r6
 8005056:	f000 fc45 	bl	80058e4 <_malloc_r>
 800505a:	b948      	cbnz	r0, 8005070 <__smakebuf_r+0x44>
 800505c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005060:	059a      	lsls	r2, r3, #22
 8005062:	d4ef      	bmi.n	8005044 <__smakebuf_r+0x18>
 8005064:	f023 0303 	bic.w	r3, r3, #3
 8005068:	f043 0302 	orr.w	r3, r3, #2
 800506c:	81a3      	strh	r3, [r4, #12]
 800506e:	e7e3      	b.n	8005038 <__smakebuf_r+0xc>
 8005070:	4b0d      	ldr	r3, [pc, #52]	; (80050a8 <__smakebuf_r+0x7c>)
 8005072:	62b3      	str	r3, [r6, #40]	; 0x28
 8005074:	89a3      	ldrh	r3, [r4, #12]
 8005076:	6020      	str	r0, [r4, #0]
 8005078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800507c:	81a3      	strh	r3, [r4, #12]
 800507e:	9b00      	ldr	r3, [sp, #0]
 8005080:	6163      	str	r3, [r4, #20]
 8005082:	9b01      	ldr	r3, [sp, #4]
 8005084:	6120      	str	r0, [r4, #16]
 8005086:	b15b      	cbz	r3, 80050a0 <__smakebuf_r+0x74>
 8005088:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800508c:	4630      	mov	r0, r6
 800508e:	f000 feaf 	bl	8005df0 <_isatty_r>
 8005092:	b128      	cbz	r0, 80050a0 <__smakebuf_r+0x74>
 8005094:	89a3      	ldrh	r3, [r4, #12]
 8005096:	f023 0303 	bic.w	r3, r3, #3
 800509a:	f043 0301 	orr.w	r3, r3, #1
 800509e:	81a3      	strh	r3, [r4, #12]
 80050a0:	89a0      	ldrh	r0, [r4, #12]
 80050a2:	4305      	orrs	r5, r0
 80050a4:	81a5      	strh	r5, [r4, #12]
 80050a6:	e7cd      	b.n	8005044 <__smakebuf_r+0x18>
 80050a8:	08004e31 	.word	0x08004e31

080050ac <malloc>:
 80050ac:	4b02      	ldr	r3, [pc, #8]	; (80050b8 <malloc+0xc>)
 80050ae:	4601      	mov	r1, r0
 80050b0:	6818      	ldr	r0, [r3, #0]
 80050b2:	f000 bc17 	b.w	80058e4 <_malloc_r>
 80050b6:	bf00      	nop
 80050b8:	2000000c 	.word	0x2000000c

080050bc <memcpy>:
 80050bc:	440a      	add	r2, r1
 80050be:	4291      	cmp	r1, r2
 80050c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80050c4:	d100      	bne.n	80050c8 <memcpy+0xc>
 80050c6:	4770      	bx	lr
 80050c8:	b510      	push	{r4, lr}
 80050ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050d2:	4291      	cmp	r1, r2
 80050d4:	d1f9      	bne.n	80050ca <memcpy+0xe>
 80050d6:	bd10      	pop	{r4, pc}

080050d8 <_Balloc>:
 80050d8:	b570      	push	{r4, r5, r6, lr}
 80050da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80050dc:	4604      	mov	r4, r0
 80050de:	460d      	mov	r5, r1
 80050e0:	b976      	cbnz	r6, 8005100 <_Balloc+0x28>
 80050e2:	2010      	movs	r0, #16
 80050e4:	f7ff ffe2 	bl	80050ac <malloc>
 80050e8:	4602      	mov	r2, r0
 80050ea:	6260      	str	r0, [r4, #36]	; 0x24
 80050ec:	b920      	cbnz	r0, 80050f8 <_Balloc+0x20>
 80050ee:	4b18      	ldr	r3, [pc, #96]	; (8005150 <_Balloc+0x78>)
 80050f0:	4818      	ldr	r0, [pc, #96]	; (8005154 <_Balloc+0x7c>)
 80050f2:	2166      	movs	r1, #102	; 0x66
 80050f4:	f000 fe2a 	bl	8005d4c <__assert_func>
 80050f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80050fc:	6006      	str	r6, [r0, #0]
 80050fe:	60c6      	str	r6, [r0, #12]
 8005100:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005102:	68f3      	ldr	r3, [r6, #12]
 8005104:	b183      	cbz	r3, 8005128 <_Balloc+0x50>
 8005106:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800510e:	b9b8      	cbnz	r0, 8005140 <_Balloc+0x68>
 8005110:	2101      	movs	r1, #1
 8005112:	fa01 f605 	lsl.w	r6, r1, r5
 8005116:	1d72      	adds	r2, r6, #5
 8005118:	0092      	lsls	r2, r2, #2
 800511a:	4620      	mov	r0, r4
 800511c:	f000 fb60 	bl	80057e0 <_calloc_r>
 8005120:	b160      	cbz	r0, 800513c <_Balloc+0x64>
 8005122:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005126:	e00e      	b.n	8005146 <_Balloc+0x6e>
 8005128:	2221      	movs	r2, #33	; 0x21
 800512a:	2104      	movs	r1, #4
 800512c:	4620      	mov	r0, r4
 800512e:	f000 fb57 	bl	80057e0 <_calloc_r>
 8005132:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005134:	60f0      	str	r0, [r6, #12]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d1e4      	bne.n	8005106 <_Balloc+0x2e>
 800513c:	2000      	movs	r0, #0
 800513e:	bd70      	pop	{r4, r5, r6, pc}
 8005140:	6802      	ldr	r2, [r0, #0]
 8005142:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005146:	2300      	movs	r3, #0
 8005148:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800514c:	e7f7      	b.n	800513e <_Balloc+0x66>
 800514e:	bf00      	nop
 8005150:	08006021 	.word	0x08006021
 8005154:	08006104 	.word	0x08006104

08005158 <_Bfree>:
 8005158:	b570      	push	{r4, r5, r6, lr}
 800515a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800515c:	4605      	mov	r5, r0
 800515e:	460c      	mov	r4, r1
 8005160:	b976      	cbnz	r6, 8005180 <_Bfree+0x28>
 8005162:	2010      	movs	r0, #16
 8005164:	f7ff ffa2 	bl	80050ac <malloc>
 8005168:	4602      	mov	r2, r0
 800516a:	6268      	str	r0, [r5, #36]	; 0x24
 800516c:	b920      	cbnz	r0, 8005178 <_Bfree+0x20>
 800516e:	4b09      	ldr	r3, [pc, #36]	; (8005194 <_Bfree+0x3c>)
 8005170:	4809      	ldr	r0, [pc, #36]	; (8005198 <_Bfree+0x40>)
 8005172:	218a      	movs	r1, #138	; 0x8a
 8005174:	f000 fdea 	bl	8005d4c <__assert_func>
 8005178:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800517c:	6006      	str	r6, [r0, #0]
 800517e:	60c6      	str	r6, [r0, #12]
 8005180:	b13c      	cbz	r4, 8005192 <_Bfree+0x3a>
 8005182:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005184:	6862      	ldr	r2, [r4, #4]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800518c:	6021      	str	r1, [r4, #0]
 800518e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005192:	bd70      	pop	{r4, r5, r6, pc}
 8005194:	08006021 	.word	0x08006021
 8005198:	08006104 	.word	0x08006104

0800519c <__multadd>:
 800519c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051a0:	690d      	ldr	r5, [r1, #16]
 80051a2:	4607      	mov	r7, r0
 80051a4:	460c      	mov	r4, r1
 80051a6:	461e      	mov	r6, r3
 80051a8:	f101 0c14 	add.w	ip, r1, #20
 80051ac:	2000      	movs	r0, #0
 80051ae:	f8dc 3000 	ldr.w	r3, [ip]
 80051b2:	b299      	uxth	r1, r3
 80051b4:	fb02 6101 	mla	r1, r2, r1, r6
 80051b8:	0c1e      	lsrs	r6, r3, #16
 80051ba:	0c0b      	lsrs	r3, r1, #16
 80051bc:	fb02 3306 	mla	r3, r2, r6, r3
 80051c0:	b289      	uxth	r1, r1
 80051c2:	3001      	adds	r0, #1
 80051c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80051c8:	4285      	cmp	r5, r0
 80051ca:	f84c 1b04 	str.w	r1, [ip], #4
 80051ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80051d2:	dcec      	bgt.n	80051ae <__multadd+0x12>
 80051d4:	b30e      	cbz	r6, 800521a <__multadd+0x7e>
 80051d6:	68a3      	ldr	r3, [r4, #8]
 80051d8:	42ab      	cmp	r3, r5
 80051da:	dc19      	bgt.n	8005210 <__multadd+0x74>
 80051dc:	6861      	ldr	r1, [r4, #4]
 80051de:	4638      	mov	r0, r7
 80051e0:	3101      	adds	r1, #1
 80051e2:	f7ff ff79 	bl	80050d8 <_Balloc>
 80051e6:	4680      	mov	r8, r0
 80051e8:	b928      	cbnz	r0, 80051f6 <__multadd+0x5a>
 80051ea:	4602      	mov	r2, r0
 80051ec:	4b0c      	ldr	r3, [pc, #48]	; (8005220 <__multadd+0x84>)
 80051ee:	480d      	ldr	r0, [pc, #52]	; (8005224 <__multadd+0x88>)
 80051f0:	21b5      	movs	r1, #181	; 0xb5
 80051f2:	f000 fdab 	bl	8005d4c <__assert_func>
 80051f6:	6922      	ldr	r2, [r4, #16]
 80051f8:	3202      	adds	r2, #2
 80051fa:	f104 010c 	add.w	r1, r4, #12
 80051fe:	0092      	lsls	r2, r2, #2
 8005200:	300c      	adds	r0, #12
 8005202:	f7ff ff5b 	bl	80050bc <memcpy>
 8005206:	4621      	mov	r1, r4
 8005208:	4638      	mov	r0, r7
 800520a:	f7ff ffa5 	bl	8005158 <_Bfree>
 800520e:	4644      	mov	r4, r8
 8005210:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005214:	3501      	adds	r5, #1
 8005216:	615e      	str	r6, [r3, #20]
 8005218:	6125      	str	r5, [r4, #16]
 800521a:	4620      	mov	r0, r4
 800521c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005220:	08006093 	.word	0x08006093
 8005224:	08006104 	.word	0x08006104

08005228 <__hi0bits>:
 8005228:	0c03      	lsrs	r3, r0, #16
 800522a:	041b      	lsls	r3, r3, #16
 800522c:	b9d3      	cbnz	r3, 8005264 <__hi0bits+0x3c>
 800522e:	0400      	lsls	r0, r0, #16
 8005230:	2310      	movs	r3, #16
 8005232:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005236:	bf04      	itt	eq
 8005238:	0200      	lsleq	r0, r0, #8
 800523a:	3308      	addeq	r3, #8
 800523c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005240:	bf04      	itt	eq
 8005242:	0100      	lsleq	r0, r0, #4
 8005244:	3304      	addeq	r3, #4
 8005246:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800524a:	bf04      	itt	eq
 800524c:	0080      	lsleq	r0, r0, #2
 800524e:	3302      	addeq	r3, #2
 8005250:	2800      	cmp	r0, #0
 8005252:	db05      	blt.n	8005260 <__hi0bits+0x38>
 8005254:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005258:	f103 0301 	add.w	r3, r3, #1
 800525c:	bf08      	it	eq
 800525e:	2320      	moveq	r3, #32
 8005260:	4618      	mov	r0, r3
 8005262:	4770      	bx	lr
 8005264:	2300      	movs	r3, #0
 8005266:	e7e4      	b.n	8005232 <__hi0bits+0xa>

08005268 <__lo0bits>:
 8005268:	6803      	ldr	r3, [r0, #0]
 800526a:	f013 0207 	ands.w	r2, r3, #7
 800526e:	4601      	mov	r1, r0
 8005270:	d00b      	beq.n	800528a <__lo0bits+0x22>
 8005272:	07da      	lsls	r2, r3, #31
 8005274:	d423      	bmi.n	80052be <__lo0bits+0x56>
 8005276:	0798      	lsls	r0, r3, #30
 8005278:	bf49      	itett	mi
 800527a:	085b      	lsrmi	r3, r3, #1
 800527c:	089b      	lsrpl	r3, r3, #2
 800527e:	2001      	movmi	r0, #1
 8005280:	600b      	strmi	r3, [r1, #0]
 8005282:	bf5c      	itt	pl
 8005284:	600b      	strpl	r3, [r1, #0]
 8005286:	2002      	movpl	r0, #2
 8005288:	4770      	bx	lr
 800528a:	b298      	uxth	r0, r3
 800528c:	b9a8      	cbnz	r0, 80052ba <__lo0bits+0x52>
 800528e:	0c1b      	lsrs	r3, r3, #16
 8005290:	2010      	movs	r0, #16
 8005292:	b2da      	uxtb	r2, r3
 8005294:	b90a      	cbnz	r2, 800529a <__lo0bits+0x32>
 8005296:	3008      	adds	r0, #8
 8005298:	0a1b      	lsrs	r3, r3, #8
 800529a:	071a      	lsls	r2, r3, #28
 800529c:	bf04      	itt	eq
 800529e:	091b      	lsreq	r3, r3, #4
 80052a0:	3004      	addeq	r0, #4
 80052a2:	079a      	lsls	r2, r3, #30
 80052a4:	bf04      	itt	eq
 80052a6:	089b      	lsreq	r3, r3, #2
 80052a8:	3002      	addeq	r0, #2
 80052aa:	07da      	lsls	r2, r3, #31
 80052ac:	d403      	bmi.n	80052b6 <__lo0bits+0x4e>
 80052ae:	085b      	lsrs	r3, r3, #1
 80052b0:	f100 0001 	add.w	r0, r0, #1
 80052b4:	d005      	beq.n	80052c2 <__lo0bits+0x5a>
 80052b6:	600b      	str	r3, [r1, #0]
 80052b8:	4770      	bx	lr
 80052ba:	4610      	mov	r0, r2
 80052bc:	e7e9      	b.n	8005292 <__lo0bits+0x2a>
 80052be:	2000      	movs	r0, #0
 80052c0:	4770      	bx	lr
 80052c2:	2020      	movs	r0, #32
 80052c4:	4770      	bx	lr
	...

080052c8 <__i2b>:
 80052c8:	b510      	push	{r4, lr}
 80052ca:	460c      	mov	r4, r1
 80052cc:	2101      	movs	r1, #1
 80052ce:	f7ff ff03 	bl	80050d8 <_Balloc>
 80052d2:	4602      	mov	r2, r0
 80052d4:	b928      	cbnz	r0, 80052e2 <__i2b+0x1a>
 80052d6:	4b05      	ldr	r3, [pc, #20]	; (80052ec <__i2b+0x24>)
 80052d8:	4805      	ldr	r0, [pc, #20]	; (80052f0 <__i2b+0x28>)
 80052da:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80052de:	f000 fd35 	bl	8005d4c <__assert_func>
 80052e2:	2301      	movs	r3, #1
 80052e4:	6144      	str	r4, [r0, #20]
 80052e6:	6103      	str	r3, [r0, #16]
 80052e8:	bd10      	pop	{r4, pc}
 80052ea:	bf00      	nop
 80052ec:	08006093 	.word	0x08006093
 80052f0:	08006104 	.word	0x08006104

080052f4 <__multiply>:
 80052f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052f8:	4691      	mov	r9, r2
 80052fa:	690a      	ldr	r2, [r1, #16]
 80052fc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005300:	429a      	cmp	r2, r3
 8005302:	bfb8      	it	lt
 8005304:	460b      	movlt	r3, r1
 8005306:	460c      	mov	r4, r1
 8005308:	bfbc      	itt	lt
 800530a:	464c      	movlt	r4, r9
 800530c:	4699      	movlt	r9, r3
 800530e:	6927      	ldr	r7, [r4, #16]
 8005310:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005314:	68a3      	ldr	r3, [r4, #8]
 8005316:	6861      	ldr	r1, [r4, #4]
 8005318:	eb07 060a 	add.w	r6, r7, sl
 800531c:	42b3      	cmp	r3, r6
 800531e:	b085      	sub	sp, #20
 8005320:	bfb8      	it	lt
 8005322:	3101      	addlt	r1, #1
 8005324:	f7ff fed8 	bl	80050d8 <_Balloc>
 8005328:	b930      	cbnz	r0, 8005338 <__multiply+0x44>
 800532a:	4602      	mov	r2, r0
 800532c:	4b44      	ldr	r3, [pc, #272]	; (8005440 <__multiply+0x14c>)
 800532e:	4845      	ldr	r0, [pc, #276]	; (8005444 <__multiply+0x150>)
 8005330:	f240 115d 	movw	r1, #349	; 0x15d
 8005334:	f000 fd0a 	bl	8005d4c <__assert_func>
 8005338:	f100 0514 	add.w	r5, r0, #20
 800533c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005340:	462b      	mov	r3, r5
 8005342:	2200      	movs	r2, #0
 8005344:	4543      	cmp	r3, r8
 8005346:	d321      	bcc.n	800538c <__multiply+0x98>
 8005348:	f104 0314 	add.w	r3, r4, #20
 800534c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005350:	f109 0314 	add.w	r3, r9, #20
 8005354:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005358:	9202      	str	r2, [sp, #8]
 800535a:	1b3a      	subs	r2, r7, r4
 800535c:	3a15      	subs	r2, #21
 800535e:	f022 0203 	bic.w	r2, r2, #3
 8005362:	3204      	adds	r2, #4
 8005364:	f104 0115 	add.w	r1, r4, #21
 8005368:	428f      	cmp	r7, r1
 800536a:	bf38      	it	cc
 800536c:	2204      	movcc	r2, #4
 800536e:	9201      	str	r2, [sp, #4]
 8005370:	9a02      	ldr	r2, [sp, #8]
 8005372:	9303      	str	r3, [sp, #12]
 8005374:	429a      	cmp	r2, r3
 8005376:	d80c      	bhi.n	8005392 <__multiply+0x9e>
 8005378:	2e00      	cmp	r6, #0
 800537a:	dd03      	ble.n	8005384 <__multiply+0x90>
 800537c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005380:	2b00      	cmp	r3, #0
 8005382:	d05a      	beq.n	800543a <__multiply+0x146>
 8005384:	6106      	str	r6, [r0, #16]
 8005386:	b005      	add	sp, #20
 8005388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800538c:	f843 2b04 	str.w	r2, [r3], #4
 8005390:	e7d8      	b.n	8005344 <__multiply+0x50>
 8005392:	f8b3 a000 	ldrh.w	sl, [r3]
 8005396:	f1ba 0f00 	cmp.w	sl, #0
 800539a:	d024      	beq.n	80053e6 <__multiply+0xf2>
 800539c:	f104 0e14 	add.w	lr, r4, #20
 80053a0:	46a9      	mov	r9, r5
 80053a2:	f04f 0c00 	mov.w	ip, #0
 80053a6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80053aa:	f8d9 1000 	ldr.w	r1, [r9]
 80053ae:	fa1f fb82 	uxth.w	fp, r2
 80053b2:	b289      	uxth	r1, r1
 80053b4:	fb0a 110b 	mla	r1, sl, fp, r1
 80053b8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80053bc:	f8d9 2000 	ldr.w	r2, [r9]
 80053c0:	4461      	add	r1, ip
 80053c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80053c6:	fb0a c20b 	mla	r2, sl, fp, ip
 80053ca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80053ce:	b289      	uxth	r1, r1
 80053d0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80053d4:	4577      	cmp	r7, lr
 80053d6:	f849 1b04 	str.w	r1, [r9], #4
 80053da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80053de:	d8e2      	bhi.n	80053a6 <__multiply+0xb2>
 80053e0:	9a01      	ldr	r2, [sp, #4]
 80053e2:	f845 c002 	str.w	ip, [r5, r2]
 80053e6:	9a03      	ldr	r2, [sp, #12]
 80053e8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80053ec:	3304      	adds	r3, #4
 80053ee:	f1b9 0f00 	cmp.w	r9, #0
 80053f2:	d020      	beq.n	8005436 <__multiply+0x142>
 80053f4:	6829      	ldr	r1, [r5, #0]
 80053f6:	f104 0c14 	add.w	ip, r4, #20
 80053fa:	46ae      	mov	lr, r5
 80053fc:	f04f 0a00 	mov.w	sl, #0
 8005400:	f8bc b000 	ldrh.w	fp, [ip]
 8005404:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005408:	fb09 220b 	mla	r2, r9, fp, r2
 800540c:	4492      	add	sl, r2
 800540e:	b289      	uxth	r1, r1
 8005410:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005414:	f84e 1b04 	str.w	r1, [lr], #4
 8005418:	f85c 2b04 	ldr.w	r2, [ip], #4
 800541c:	f8be 1000 	ldrh.w	r1, [lr]
 8005420:	0c12      	lsrs	r2, r2, #16
 8005422:	fb09 1102 	mla	r1, r9, r2, r1
 8005426:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800542a:	4567      	cmp	r7, ip
 800542c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005430:	d8e6      	bhi.n	8005400 <__multiply+0x10c>
 8005432:	9a01      	ldr	r2, [sp, #4]
 8005434:	50a9      	str	r1, [r5, r2]
 8005436:	3504      	adds	r5, #4
 8005438:	e79a      	b.n	8005370 <__multiply+0x7c>
 800543a:	3e01      	subs	r6, #1
 800543c:	e79c      	b.n	8005378 <__multiply+0x84>
 800543e:	bf00      	nop
 8005440:	08006093 	.word	0x08006093
 8005444:	08006104 	.word	0x08006104

08005448 <__pow5mult>:
 8005448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800544c:	4615      	mov	r5, r2
 800544e:	f012 0203 	ands.w	r2, r2, #3
 8005452:	4606      	mov	r6, r0
 8005454:	460f      	mov	r7, r1
 8005456:	d007      	beq.n	8005468 <__pow5mult+0x20>
 8005458:	4c25      	ldr	r4, [pc, #148]	; (80054f0 <__pow5mult+0xa8>)
 800545a:	3a01      	subs	r2, #1
 800545c:	2300      	movs	r3, #0
 800545e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005462:	f7ff fe9b 	bl	800519c <__multadd>
 8005466:	4607      	mov	r7, r0
 8005468:	10ad      	asrs	r5, r5, #2
 800546a:	d03d      	beq.n	80054e8 <__pow5mult+0xa0>
 800546c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800546e:	b97c      	cbnz	r4, 8005490 <__pow5mult+0x48>
 8005470:	2010      	movs	r0, #16
 8005472:	f7ff fe1b 	bl	80050ac <malloc>
 8005476:	4602      	mov	r2, r0
 8005478:	6270      	str	r0, [r6, #36]	; 0x24
 800547a:	b928      	cbnz	r0, 8005488 <__pow5mult+0x40>
 800547c:	4b1d      	ldr	r3, [pc, #116]	; (80054f4 <__pow5mult+0xac>)
 800547e:	481e      	ldr	r0, [pc, #120]	; (80054f8 <__pow5mult+0xb0>)
 8005480:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005484:	f000 fc62 	bl	8005d4c <__assert_func>
 8005488:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800548c:	6004      	str	r4, [r0, #0]
 800548e:	60c4      	str	r4, [r0, #12]
 8005490:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005494:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005498:	b94c      	cbnz	r4, 80054ae <__pow5mult+0x66>
 800549a:	f240 2171 	movw	r1, #625	; 0x271
 800549e:	4630      	mov	r0, r6
 80054a0:	f7ff ff12 	bl	80052c8 <__i2b>
 80054a4:	2300      	movs	r3, #0
 80054a6:	f8c8 0008 	str.w	r0, [r8, #8]
 80054aa:	4604      	mov	r4, r0
 80054ac:	6003      	str	r3, [r0, #0]
 80054ae:	f04f 0900 	mov.w	r9, #0
 80054b2:	07eb      	lsls	r3, r5, #31
 80054b4:	d50a      	bpl.n	80054cc <__pow5mult+0x84>
 80054b6:	4639      	mov	r1, r7
 80054b8:	4622      	mov	r2, r4
 80054ba:	4630      	mov	r0, r6
 80054bc:	f7ff ff1a 	bl	80052f4 <__multiply>
 80054c0:	4639      	mov	r1, r7
 80054c2:	4680      	mov	r8, r0
 80054c4:	4630      	mov	r0, r6
 80054c6:	f7ff fe47 	bl	8005158 <_Bfree>
 80054ca:	4647      	mov	r7, r8
 80054cc:	106d      	asrs	r5, r5, #1
 80054ce:	d00b      	beq.n	80054e8 <__pow5mult+0xa0>
 80054d0:	6820      	ldr	r0, [r4, #0]
 80054d2:	b938      	cbnz	r0, 80054e4 <__pow5mult+0x9c>
 80054d4:	4622      	mov	r2, r4
 80054d6:	4621      	mov	r1, r4
 80054d8:	4630      	mov	r0, r6
 80054da:	f7ff ff0b 	bl	80052f4 <__multiply>
 80054de:	6020      	str	r0, [r4, #0]
 80054e0:	f8c0 9000 	str.w	r9, [r0]
 80054e4:	4604      	mov	r4, r0
 80054e6:	e7e4      	b.n	80054b2 <__pow5mult+0x6a>
 80054e8:	4638      	mov	r0, r7
 80054ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054ee:	bf00      	nop
 80054f0:	08006250 	.word	0x08006250
 80054f4:	08006021 	.word	0x08006021
 80054f8:	08006104 	.word	0x08006104

080054fc <__lshift>:
 80054fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005500:	460c      	mov	r4, r1
 8005502:	6849      	ldr	r1, [r1, #4]
 8005504:	6923      	ldr	r3, [r4, #16]
 8005506:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800550a:	68a3      	ldr	r3, [r4, #8]
 800550c:	4607      	mov	r7, r0
 800550e:	4691      	mov	r9, r2
 8005510:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005514:	f108 0601 	add.w	r6, r8, #1
 8005518:	42b3      	cmp	r3, r6
 800551a:	db0b      	blt.n	8005534 <__lshift+0x38>
 800551c:	4638      	mov	r0, r7
 800551e:	f7ff fddb 	bl	80050d8 <_Balloc>
 8005522:	4605      	mov	r5, r0
 8005524:	b948      	cbnz	r0, 800553a <__lshift+0x3e>
 8005526:	4602      	mov	r2, r0
 8005528:	4b2a      	ldr	r3, [pc, #168]	; (80055d4 <__lshift+0xd8>)
 800552a:	482b      	ldr	r0, [pc, #172]	; (80055d8 <__lshift+0xdc>)
 800552c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005530:	f000 fc0c 	bl	8005d4c <__assert_func>
 8005534:	3101      	adds	r1, #1
 8005536:	005b      	lsls	r3, r3, #1
 8005538:	e7ee      	b.n	8005518 <__lshift+0x1c>
 800553a:	2300      	movs	r3, #0
 800553c:	f100 0114 	add.w	r1, r0, #20
 8005540:	f100 0210 	add.w	r2, r0, #16
 8005544:	4618      	mov	r0, r3
 8005546:	4553      	cmp	r3, sl
 8005548:	db37      	blt.n	80055ba <__lshift+0xbe>
 800554a:	6920      	ldr	r0, [r4, #16]
 800554c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005550:	f104 0314 	add.w	r3, r4, #20
 8005554:	f019 091f 	ands.w	r9, r9, #31
 8005558:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800555c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005560:	d02f      	beq.n	80055c2 <__lshift+0xc6>
 8005562:	f1c9 0e20 	rsb	lr, r9, #32
 8005566:	468a      	mov	sl, r1
 8005568:	f04f 0c00 	mov.w	ip, #0
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	fa02 f209 	lsl.w	r2, r2, r9
 8005572:	ea42 020c 	orr.w	r2, r2, ip
 8005576:	f84a 2b04 	str.w	r2, [sl], #4
 800557a:	f853 2b04 	ldr.w	r2, [r3], #4
 800557e:	4298      	cmp	r0, r3
 8005580:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005584:	d8f2      	bhi.n	800556c <__lshift+0x70>
 8005586:	1b03      	subs	r3, r0, r4
 8005588:	3b15      	subs	r3, #21
 800558a:	f023 0303 	bic.w	r3, r3, #3
 800558e:	3304      	adds	r3, #4
 8005590:	f104 0215 	add.w	r2, r4, #21
 8005594:	4290      	cmp	r0, r2
 8005596:	bf38      	it	cc
 8005598:	2304      	movcc	r3, #4
 800559a:	f841 c003 	str.w	ip, [r1, r3]
 800559e:	f1bc 0f00 	cmp.w	ip, #0
 80055a2:	d001      	beq.n	80055a8 <__lshift+0xac>
 80055a4:	f108 0602 	add.w	r6, r8, #2
 80055a8:	3e01      	subs	r6, #1
 80055aa:	4638      	mov	r0, r7
 80055ac:	612e      	str	r6, [r5, #16]
 80055ae:	4621      	mov	r1, r4
 80055b0:	f7ff fdd2 	bl	8005158 <_Bfree>
 80055b4:	4628      	mov	r0, r5
 80055b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055ba:	f842 0f04 	str.w	r0, [r2, #4]!
 80055be:	3301      	adds	r3, #1
 80055c0:	e7c1      	b.n	8005546 <__lshift+0x4a>
 80055c2:	3904      	subs	r1, #4
 80055c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80055c8:	f841 2f04 	str.w	r2, [r1, #4]!
 80055cc:	4298      	cmp	r0, r3
 80055ce:	d8f9      	bhi.n	80055c4 <__lshift+0xc8>
 80055d0:	e7ea      	b.n	80055a8 <__lshift+0xac>
 80055d2:	bf00      	nop
 80055d4:	08006093 	.word	0x08006093
 80055d8:	08006104 	.word	0x08006104

080055dc <__mcmp>:
 80055dc:	b530      	push	{r4, r5, lr}
 80055de:	6902      	ldr	r2, [r0, #16]
 80055e0:	690c      	ldr	r4, [r1, #16]
 80055e2:	1b12      	subs	r2, r2, r4
 80055e4:	d10e      	bne.n	8005604 <__mcmp+0x28>
 80055e6:	f100 0314 	add.w	r3, r0, #20
 80055ea:	3114      	adds	r1, #20
 80055ec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80055f0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80055f4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80055f8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80055fc:	42a5      	cmp	r5, r4
 80055fe:	d003      	beq.n	8005608 <__mcmp+0x2c>
 8005600:	d305      	bcc.n	800560e <__mcmp+0x32>
 8005602:	2201      	movs	r2, #1
 8005604:	4610      	mov	r0, r2
 8005606:	bd30      	pop	{r4, r5, pc}
 8005608:	4283      	cmp	r3, r0
 800560a:	d3f3      	bcc.n	80055f4 <__mcmp+0x18>
 800560c:	e7fa      	b.n	8005604 <__mcmp+0x28>
 800560e:	f04f 32ff 	mov.w	r2, #4294967295
 8005612:	e7f7      	b.n	8005604 <__mcmp+0x28>

08005614 <__mdiff>:
 8005614:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005618:	460c      	mov	r4, r1
 800561a:	4606      	mov	r6, r0
 800561c:	4611      	mov	r1, r2
 800561e:	4620      	mov	r0, r4
 8005620:	4690      	mov	r8, r2
 8005622:	f7ff ffdb 	bl	80055dc <__mcmp>
 8005626:	1e05      	subs	r5, r0, #0
 8005628:	d110      	bne.n	800564c <__mdiff+0x38>
 800562a:	4629      	mov	r1, r5
 800562c:	4630      	mov	r0, r6
 800562e:	f7ff fd53 	bl	80050d8 <_Balloc>
 8005632:	b930      	cbnz	r0, 8005642 <__mdiff+0x2e>
 8005634:	4b3a      	ldr	r3, [pc, #232]	; (8005720 <__mdiff+0x10c>)
 8005636:	4602      	mov	r2, r0
 8005638:	f240 2132 	movw	r1, #562	; 0x232
 800563c:	4839      	ldr	r0, [pc, #228]	; (8005724 <__mdiff+0x110>)
 800563e:	f000 fb85 	bl	8005d4c <__assert_func>
 8005642:	2301      	movs	r3, #1
 8005644:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005648:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800564c:	bfa4      	itt	ge
 800564e:	4643      	movge	r3, r8
 8005650:	46a0      	movge	r8, r4
 8005652:	4630      	mov	r0, r6
 8005654:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005658:	bfa6      	itte	ge
 800565a:	461c      	movge	r4, r3
 800565c:	2500      	movge	r5, #0
 800565e:	2501      	movlt	r5, #1
 8005660:	f7ff fd3a 	bl	80050d8 <_Balloc>
 8005664:	b920      	cbnz	r0, 8005670 <__mdiff+0x5c>
 8005666:	4b2e      	ldr	r3, [pc, #184]	; (8005720 <__mdiff+0x10c>)
 8005668:	4602      	mov	r2, r0
 800566a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800566e:	e7e5      	b.n	800563c <__mdiff+0x28>
 8005670:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005674:	6926      	ldr	r6, [r4, #16]
 8005676:	60c5      	str	r5, [r0, #12]
 8005678:	f104 0914 	add.w	r9, r4, #20
 800567c:	f108 0514 	add.w	r5, r8, #20
 8005680:	f100 0e14 	add.w	lr, r0, #20
 8005684:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005688:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800568c:	f108 0210 	add.w	r2, r8, #16
 8005690:	46f2      	mov	sl, lr
 8005692:	2100      	movs	r1, #0
 8005694:	f859 3b04 	ldr.w	r3, [r9], #4
 8005698:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800569c:	fa1f f883 	uxth.w	r8, r3
 80056a0:	fa11 f18b 	uxtah	r1, r1, fp
 80056a4:	0c1b      	lsrs	r3, r3, #16
 80056a6:	eba1 0808 	sub.w	r8, r1, r8
 80056aa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80056ae:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80056b2:	fa1f f888 	uxth.w	r8, r8
 80056b6:	1419      	asrs	r1, r3, #16
 80056b8:	454e      	cmp	r6, r9
 80056ba:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80056be:	f84a 3b04 	str.w	r3, [sl], #4
 80056c2:	d8e7      	bhi.n	8005694 <__mdiff+0x80>
 80056c4:	1b33      	subs	r3, r6, r4
 80056c6:	3b15      	subs	r3, #21
 80056c8:	f023 0303 	bic.w	r3, r3, #3
 80056cc:	3304      	adds	r3, #4
 80056ce:	3415      	adds	r4, #21
 80056d0:	42a6      	cmp	r6, r4
 80056d2:	bf38      	it	cc
 80056d4:	2304      	movcc	r3, #4
 80056d6:	441d      	add	r5, r3
 80056d8:	4473      	add	r3, lr
 80056da:	469e      	mov	lr, r3
 80056dc:	462e      	mov	r6, r5
 80056de:	4566      	cmp	r6, ip
 80056e0:	d30e      	bcc.n	8005700 <__mdiff+0xec>
 80056e2:	f10c 0203 	add.w	r2, ip, #3
 80056e6:	1b52      	subs	r2, r2, r5
 80056e8:	f022 0203 	bic.w	r2, r2, #3
 80056ec:	3d03      	subs	r5, #3
 80056ee:	45ac      	cmp	ip, r5
 80056f0:	bf38      	it	cc
 80056f2:	2200      	movcc	r2, #0
 80056f4:	441a      	add	r2, r3
 80056f6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80056fa:	b17b      	cbz	r3, 800571c <__mdiff+0x108>
 80056fc:	6107      	str	r7, [r0, #16]
 80056fe:	e7a3      	b.n	8005648 <__mdiff+0x34>
 8005700:	f856 8b04 	ldr.w	r8, [r6], #4
 8005704:	fa11 f288 	uxtah	r2, r1, r8
 8005708:	1414      	asrs	r4, r2, #16
 800570a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800570e:	b292      	uxth	r2, r2
 8005710:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005714:	f84e 2b04 	str.w	r2, [lr], #4
 8005718:	1421      	asrs	r1, r4, #16
 800571a:	e7e0      	b.n	80056de <__mdiff+0xca>
 800571c:	3f01      	subs	r7, #1
 800571e:	e7ea      	b.n	80056f6 <__mdiff+0xe2>
 8005720:	08006093 	.word	0x08006093
 8005724:	08006104 	.word	0x08006104

08005728 <__d2b>:
 8005728:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800572c:	4689      	mov	r9, r1
 800572e:	2101      	movs	r1, #1
 8005730:	ec57 6b10 	vmov	r6, r7, d0
 8005734:	4690      	mov	r8, r2
 8005736:	f7ff fccf 	bl	80050d8 <_Balloc>
 800573a:	4604      	mov	r4, r0
 800573c:	b930      	cbnz	r0, 800574c <__d2b+0x24>
 800573e:	4602      	mov	r2, r0
 8005740:	4b25      	ldr	r3, [pc, #148]	; (80057d8 <__d2b+0xb0>)
 8005742:	4826      	ldr	r0, [pc, #152]	; (80057dc <__d2b+0xb4>)
 8005744:	f240 310a 	movw	r1, #778	; 0x30a
 8005748:	f000 fb00 	bl	8005d4c <__assert_func>
 800574c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005750:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005754:	bb35      	cbnz	r5, 80057a4 <__d2b+0x7c>
 8005756:	2e00      	cmp	r6, #0
 8005758:	9301      	str	r3, [sp, #4]
 800575a:	d028      	beq.n	80057ae <__d2b+0x86>
 800575c:	4668      	mov	r0, sp
 800575e:	9600      	str	r6, [sp, #0]
 8005760:	f7ff fd82 	bl	8005268 <__lo0bits>
 8005764:	9900      	ldr	r1, [sp, #0]
 8005766:	b300      	cbz	r0, 80057aa <__d2b+0x82>
 8005768:	9a01      	ldr	r2, [sp, #4]
 800576a:	f1c0 0320 	rsb	r3, r0, #32
 800576e:	fa02 f303 	lsl.w	r3, r2, r3
 8005772:	430b      	orrs	r3, r1
 8005774:	40c2      	lsrs	r2, r0
 8005776:	6163      	str	r3, [r4, #20]
 8005778:	9201      	str	r2, [sp, #4]
 800577a:	9b01      	ldr	r3, [sp, #4]
 800577c:	61a3      	str	r3, [r4, #24]
 800577e:	2b00      	cmp	r3, #0
 8005780:	bf14      	ite	ne
 8005782:	2202      	movne	r2, #2
 8005784:	2201      	moveq	r2, #1
 8005786:	6122      	str	r2, [r4, #16]
 8005788:	b1d5      	cbz	r5, 80057c0 <__d2b+0x98>
 800578a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800578e:	4405      	add	r5, r0
 8005790:	f8c9 5000 	str.w	r5, [r9]
 8005794:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005798:	f8c8 0000 	str.w	r0, [r8]
 800579c:	4620      	mov	r0, r4
 800579e:	b003      	add	sp, #12
 80057a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80057a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057a8:	e7d5      	b.n	8005756 <__d2b+0x2e>
 80057aa:	6161      	str	r1, [r4, #20]
 80057ac:	e7e5      	b.n	800577a <__d2b+0x52>
 80057ae:	a801      	add	r0, sp, #4
 80057b0:	f7ff fd5a 	bl	8005268 <__lo0bits>
 80057b4:	9b01      	ldr	r3, [sp, #4]
 80057b6:	6163      	str	r3, [r4, #20]
 80057b8:	2201      	movs	r2, #1
 80057ba:	6122      	str	r2, [r4, #16]
 80057bc:	3020      	adds	r0, #32
 80057be:	e7e3      	b.n	8005788 <__d2b+0x60>
 80057c0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80057c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80057c8:	f8c9 0000 	str.w	r0, [r9]
 80057cc:	6918      	ldr	r0, [r3, #16]
 80057ce:	f7ff fd2b 	bl	8005228 <__hi0bits>
 80057d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80057d6:	e7df      	b.n	8005798 <__d2b+0x70>
 80057d8:	08006093 	.word	0x08006093
 80057dc:	08006104 	.word	0x08006104

080057e0 <_calloc_r>:
 80057e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80057e2:	fba1 2402 	umull	r2, r4, r1, r2
 80057e6:	b94c      	cbnz	r4, 80057fc <_calloc_r+0x1c>
 80057e8:	4611      	mov	r1, r2
 80057ea:	9201      	str	r2, [sp, #4]
 80057ec:	f000 f87a 	bl	80058e4 <_malloc_r>
 80057f0:	9a01      	ldr	r2, [sp, #4]
 80057f2:	4605      	mov	r5, r0
 80057f4:	b930      	cbnz	r0, 8005804 <_calloc_r+0x24>
 80057f6:	4628      	mov	r0, r5
 80057f8:	b003      	add	sp, #12
 80057fa:	bd30      	pop	{r4, r5, pc}
 80057fc:	220c      	movs	r2, #12
 80057fe:	6002      	str	r2, [r0, #0]
 8005800:	2500      	movs	r5, #0
 8005802:	e7f8      	b.n	80057f6 <_calloc_r+0x16>
 8005804:	4621      	mov	r1, r4
 8005806:	f7fd fdf1 	bl	80033ec <memset>
 800580a:	e7f4      	b.n	80057f6 <_calloc_r+0x16>

0800580c <_free_r>:
 800580c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800580e:	2900      	cmp	r1, #0
 8005810:	d044      	beq.n	800589c <_free_r+0x90>
 8005812:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005816:	9001      	str	r0, [sp, #4]
 8005818:	2b00      	cmp	r3, #0
 800581a:	f1a1 0404 	sub.w	r4, r1, #4
 800581e:	bfb8      	it	lt
 8005820:	18e4      	addlt	r4, r4, r3
 8005822:	f000 fb19 	bl	8005e58 <__malloc_lock>
 8005826:	4a1e      	ldr	r2, [pc, #120]	; (80058a0 <_free_r+0x94>)
 8005828:	9801      	ldr	r0, [sp, #4]
 800582a:	6813      	ldr	r3, [r2, #0]
 800582c:	b933      	cbnz	r3, 800583c <_free_r+0x30>
 800582e:	6063      	str	r3, [r4, #4]
 8005830:	6014      	str	r4, [r2, #0]
 8005832:	b003      	add	sp, #12
 8005834:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005838:	f000 bb14 	b.w	8005e64 <__malloc_unlock>
 800583c:	42a3      	cmp	r3, r4
 800583e:	d908      	bls.n	8005852 <_free_r+0x46>
 8005840:	6825      	ldr	r5, [r4, #0]
 8005842:	1961      	adds	r1, r4, r5
 8005844:	428b      	cmp	r3, r1
 8005846:	bf01      	itttt	eq
 8005848:	6819      	ldreq	r1, [r3, #0]
 800584a:	685b      	ldreq	r3, [r3, #4]
 800584c:	1949      	addeq	r1, r1, r5
 800584e:	6021      	streq	r1, [r4, #0]
 8005850:	e7ed      	b.n	800582e <_free_r+0x22>
 8005852:	461a      	mov	r2, r3
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	b10b      	cbz	r3, 800585c <_free_r+0x50>
 8005858:	42a3      	cmp	r3, r4
 800585a:	d9fa      	bls.n	8005852 <_free_r+0x46>
 800585c:	6811      	ldr	r1, [r2, #0]
 800585e:	1855      	adds	r5, r2, r1
 8005860:	42a5      	cmp	r5, r4
 8005862:	d10b      	bne.n	800587c <_free_r+0x70>
 8005864:	6824      	ldr	r4, [r4, #0]
 8005866:	4421      	add	r1, r4
 8005868:	1854      	adds	r4, r2, r1
 800586a:	42a3      	cmp	r3, r4
 800586c:	6011      	str	r1, [r2, #0]
 800586e:	d1e0      	bne.n	8005832 <_free_r+0x26>
 8005870:	681c      	ldr	r4, [r3, #0]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	6053      	str	r3, [r2, #4]
 8005876:	4421      	add	r1, r4
 8005878:	6011      	str	r1, [r2, #0]
 800587a:	e7da      	b.n	8005832 <_free_r+0x26>
 800587c:	d902      	bls.n	8005884 <_free_r+0x78>
 800587e:	230c      	movs	r3, #12
 8005880:	6003      	str	r3, [r0, #0]
 8005882:	e7d6      	b.n	8005832 <_free_r+0x26>
 8005884:	6825      	ldr	r5, [r4, #0]
 8005886:	1961      	adds	r1, r4, r5
 8005888:	428b      	cmp	r3, r1
 800588a:	bf04      	itt	eq
 800588c:	6819      	ldreq	r1, [r3, #0]
 800588e:	685b      	ldreq	r3, [r3, #4]
 8005890:	6063      	str	r3, [r4, #4]
 8005892:	bf04      	itt	eq
 8005894:	1949      	addeq	r1, r1, r5
 8005896:	6021      	streq	r1, [r4, #0]
 8005898:	6054      	str	r4, [r2, #4]
 800589a:	e7ca      	b.n	8005832 <_free_r+0x26>
 800589c:	b003      	add	sp, #12
 800589e:	bd30      	pop	{r4, r5, pc}
 80058a0:	2000029c 	.word	0x2000029c

080058a4 <sbrk_aligned>:
 80058a4:	b570      	push	{r4, r5, r6, lr}
 80058a6:	4e0e      	ldr	r6, [pc, #56]	; (80058e0 <sbrk_aligned+0x3c>)
 80058a8:	460c      	mov	r4, r1
 80058aa:	6831      	ldr	r1, [r6, #0]
 80058ac:	4605      	mov	r5, r0
 80058ae:	b911      	cbnz	r1, 80058b6 <sbrk_aligned+0x12>
 80058b0:	f000 f9e6 	bl	8005c80 <_sbrk_r>
 80058b4:	6030      	str	r0, [r6, #0]
 80058b6:	4621      	mov	r1, r4
 80058b8:	4628      	mov	r0, r5
 80058ba:	f000 f9e1 	bl	8005c80 <_sbrk_r>
 80058be:	1c43      	adds	r3, r0, #1
 80058c0:	d00a      	beq.n	80058d8 <sbrk_aligned+0x34>
 80058c2:	1cc4      	adds	r4, r0, #3
 80058c4:	f024 0403 	bic.w	r4, r4, #3
 80058c8:	42a0      	cmp	r0, r4
 80058ca:	d007      	beq.n	80058dc <sbrk_aligned+0x38>
 80058cc:	1a21      	subs	r1, r4, r0
 80058ce:	4628      	mov	r0, r5
 80058d0:	f000 f9d6 	bl	8005c80 <_sbrk_r>
 80058d4:	3001      	adds	r0, #1
 80058d6:	d101      	bne.n	80058dc <sbrk_aligned+0x38>
 80058d8:	f04f 34ff 	mov.w	r4, #4294967295
 80058dc:	4620      	mov	r0, r4
 80058de:	bd70      	pop	{r4, r5, r6, pc}
 80058e0:	200002a0 	.word	0x200002a0

080058e4 <_malloc_r>:
 80058e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058e8:	1ccd      	adds	r5, r1, #3
 80058ea:	f025 0503 	bic.w	r5, r5, #3
 80058ee:	3508      	adds	r5, #8
 80058f0:	2d0c      	cmp	r5, #12
 80058f2:	bf38      	it	cc
 80058f4:	250c      	movcc	r5, #12
 80058f6:	2d00      	cmp	r5, #0
 80058f8:	4607      	mov	r7, r0
 80058fa:	db01      	blt.n	8005900 <_malloc_r+0x1c>
 80058fc:	42a9      	cmp	r1, r5
 80058fe:	d905      	bls.n	800590c <_malloc_r+0x28>
 8005900:	230c      	movs	r3, #12
 8005902:	603b      	str	r3, [r7, #0]
 8005904:	2600      	movs	r6, #0
 8005906:	4630      	mov	r0, r6
 8005908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800590c:	4e2e      	ldr	r6, [pc, #184]	; (80059c8 <_malloc_r+0xe4>)
 800590e:	f000 faa3 	bl	8005e58 <__malloc_lock>
 8005912:	6833      	ldr	r3, [r6, #0]
 8005914:	461c      	mov	r4, r3
 8005916:	bb34      	cbnz	r4, 8005966 <_malloc_r+0x82>
 8005918:	4629      	mov	r1, r5
 800591a:	4638      	mov	r0, r7
 800591c:	f7ff ffc2 	bl	80058a4 <sbrk_aligned>
 8005920:	1c43      	adds	r3, r0, #1
 8005922:	4604      	mov	r4, r0
 8005924:	d14d      	bne.n	80059c2 <_malloc_r+0xde>
 8005926:	6834      	ldr	r4, [r6, #0]
 8005928:	4626      	mov	r6, r4
 800592a:	2e00      	cmp	r6, #0
 800592c:	d140      	bne.n	80059b0 <_malloc_r+0xcc>
 800592e:	6823      	ldr	r3, [r4, #0]
 8005930:	4631      	mov	r1, r6
 8005932:	4638      	mov	r0, r7
 8005934:	eb04 0803 	add.w	r8, r4, r3
 8005938:	f000 f9a2 	bl	8005c80 <_sbrk_r>
 800593c:	4580      	cmp	r8, r0
 800593e:	d13a      	bne.n	80059b6 <_malloc_r+0xd2>
 8005940:	6821      	ldr	r1, [r4, #0]
 8005942:	3503      	adds	r5, #3
 8005944:	1a6d      	subs	r5, r5, r1
 8005946:	f025 0503 	bic.w	r5, r5, #3
 800594a:	3508      	adds	r5, #8
 800594c:	2d0c      	cmp	r5, #12
 800594e:	bf38      	it	cc
 8005950:	250c      	movcc	r5, #12
 8005952:	4629      	mov	r1, r5
 8005954:	4638      	mov	r0, r7
 8005956:	f7ff ffa5 	bl	80058a4 <sbrk_aligned>
 800595a:	3001      	adds	r0, #1
 800595c:	d02b      	beq.n	80059b6 <_malloc_r+0xd2>
 800595e:	6823      	ldr	r3, [r4, #0]
 8005960:	442b      	add	r3, r5
 8005962:	6023      	str	r3, [r4, #0]
 8005964:	e00e      	b.n	8005984 <_malloc_r+0xa0>
 8005966:	6822      	ldr	r2, [r4, #0]
 8005968:	1b52      	subs	r2, r2, r5
 800596a:	d41e      	bmi.n	80059aa <_malloc_r+0xc6>
 800596c:	2a0b      	cmp	r2, #11
 800596e:	d916      	bls.n	800599e <_malloc_r+0xba>
 8005970:	1961      	adds	r1, r4, r5
 8005972:	42a3      	cmp	r3, r4
 8005974:	6025      	str	r5, [r4, #0]
 8005976:	bf18      	it	ne
 8005978:	6059      	strne	r1, [r3, #4]
 800597a:	6863      	ldr	r3, [r4, #4]
 800597c:	bf08      	it	eq
 800597e:	6031      	streq	r1, [r6, #0]
 8005980:	5162      	str	r2, [r4, r5]
 8005982:	604b      	str	r3, [r1, #4]
 8005984:	4638      	mov	r0, r7
 8005986:	f104 060b 	add.w	r6, r4, #11
 800598a:	f000 fa6b 	bl	8005e64 <__malloc_unlock>
 800598e:	f026 0607 	bic.w	r6, r6, #7
 8005992:	1d23      	adds	r3, r4, #4
 8005994:	1af2      	subs	r2, r6, r3
 8005996:	d0b6      	beq.n	8005906 <_malloc_r+0x22>
 8005998:	1b9b      	subs	r3, r3, r6
 800599a:	50a3      	str	r3, [r4, r2]
 800599c:	e7b3      	b.n	8005906 <_malloc_r+0x22>
 800599e:	6862      	ldr	r2, [r4, #4]
 80059a0:	42a3      	cmp	r3, r4
 80059a2:	bf0c      	ite	eq
 80059a4:	6032      	streq	r2, [r6, #0]
 80059a6:	605a      	strne	r2, [r3, #4]
 80059a8:	e7ec      	b.n	8005984 <_malloc_r+0xa0>
 80059aa:	4623      	mov	r3, r4
 80059ac:	6864      	ldr	r4, [r4, #4]
 80059ae:	e7b2      	b.n	8005916 <_malloc_r+0x32>
 80059b0:	4634      	mov	r4, r6
 80059b2:	6876      	ldr	r6, [r6, #4]
 80059b4:	e7b9      	b.n	800592a <_malloc_r+0x46>
 80059b6:	230c      	movs	r3, #12
 80059b8:	603b      	str	r3, [r7, #0]
 80059ba:	4638      	mov	r0, r7
 80059bc:	f000 fa52 	bl	8005e64 <__malloc_unlock>
 80059c0:	e7a1      	b.n	8005906 <_malloc_r+0x22>
 80059c2:	6025      	str	r5, [r4, #0]
 80059c4:	e7de      	b.n	8005984 <_malloc_r+0xa0>
 80059c6:	bf00      	nop
 80059c8:	2000029c 	.word	0x2000029c

080059cc <__sfputc_r>:
 80059cc:	6893      	ldr	r3, [r2, #8]
 80059ce:	3b01      	subs	r3, #1
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	b410      	push	{r4}
 80059d4:	6093      	str	r3, [r2, #8]
 80059d6:	da08      	bge.n	80059ea <__sfputc_r+0x1e>
 80059d8:	6994      	ldr	r4, [r2, #24]
 80059da:	42a3      	cmp	r3, r4
 80059dc:	db01      	blt.n	80059e2 <__sfputc_r+0x16>
 80059de:	290a      	cmp	r1, #10
 80059e0:	d103      	bne.n	80059ea <__sfputc_r+0x1e>
 80059e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059e6:	f7fe ba01 	b.w	8003dec <__swbuf_r>
 80059ea:	6813      	ldr	r3, [r2, #0]
 80059ec:	1c58      	adds	r0, r3, #1
 80059ee:	6010      	str	r0, [r2, #0]
 80059f0:	7019      	strb	r1, [r3, #0]
 80059f2:	4608      	mov	r0, r1
 80059f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059f8:	4770      	bx	lr

080059fa <__sfputs_r>:
 80059fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059fc:	4606      	mov	r6, r0
 80059fe:	460f      	mov	r7, r1
 8005a00:	4614      	mov	r4, r2
 8005a02:	18d5      	adds	r5, r2, r3
 8005a04:	42ac      	cmp	r4, r5
 8005a06:	d101      	bne.n	8005a0c <__sfputs_r+0x12>
 8005a08:	2000      	movs	r0, #0
 8005a0a:	e007      	b.n	8005a1c <__sfputs_r+0x22>
 8005a0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a10:	463a      	mov	r2, r7
 8005a12:	4630      	mov	r0, r6
 8005a14:	f7ff ffda 	bl	80059cc <__sfputc_r>
 8005a18:	1c43      	adds	r3, r0, #1
 8005a1a:	d1f3      	bne.n	8005a04 <__sfputs_r+0xa>
 8005a1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005a20 <_vfiprintf_r>:
 8005a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a24:	460d      	mov	r5, r1
 8005a26:	b09d      	sub	sp, #116	; 0x74
 8005a28:	4614      	mov	r4, r2
 8005a2a:	4698      	mov	r8, r3
 8005a2c:	4606      	mov	r6, r0
 8005a2e:	b118      	cbz	r0, 8005a38 <_vfiprintf_r+0x18>
 8005a30:	6983      	ldr	r3, [r0, #24]
 8005a32:	b90b      	cbnz	r3, 8005a38 <_vfiprintf_r+0x18>
 8005a34:	f7ff fa30 	bl	8004e98 <__sinit>
 8005a38:	4b89      	ldr	r3, [pc, #548]	; (8005c60 <_vfiprintf_r+0x240>)
 8005a3a:	429d      	cmp	r5, r3
 8005a3c:	d11b      	bne.n	8005a76 <_vfiprintf_r+0x56>
 8005a3e:	6875      	ldr	r5, [r6, #4]
 8005a40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a42:	07d9      	lsls	r1, r3, #31
 8005a44:	d405      	bmi.n	8005a52 <_vfiprintf_r+0x32>
 8005a46:	89ab      	ldrh	r3, [r5, #12]
 8005a48:	059a      	lsls	r2, r3, #22
 8005a4a:	d402      	bmi.n	8005a52 <_vfiprintf_r+0x32>
 8005a4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a4e:	f7ff fac6 	bl	8004fde <__retarget_lock_acquire_recursive>
 8005a52:	89ab      	ldrh	r3, [r5, #12]
 8005a54:	071b      	lsls	r3, r3, #28
 8005a56:	d501      	bpl.n	8005a5c <_vfiprintf_r+0x3c>
 8005a58:	692b      	ldr	r3, [r5, #16]
 8005a5a:	b9eb      	cbnz	r3, 8005a98 <_vfiprintf_r+0x78>
 8005a5c:	4629      	mov	r1, r5
 8005a5e:	4630      	mov	r0, r6
 8005a60:	f7fe fa16 	bl	8003e90 <__swsetup_r>
 8005a64:	b1c0      	cbz	r0, 8005a98 <_vfiprintf_r+0x78>
 8005a66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a68:	07dc      	lsls	r4, r3, #31
 8005a6a:	d50e      	bpl.n	8005a8a <_vfiprintf_r+0x6a>
 8005a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a70:	b01d      	add	sp, #116	; 0x74
 8005a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a76:	4b7b      	ldr	r3, [pc, #492]	; (8005c64 <_vfiprintf_r+0x244>)
 8005a78:	429d      	cmp	r5, r3
 8005a7a:	d101      	bne.n	8005a80 <_vfiprintf_r+0x60>
 8005a7c:	68b5      	ldr	r5, [r6, #8]
 8005a7e:	e7df      	b.n	8005a40 <_vfiprintf_r+0x20>
 8005a80:	4b79      	ldr	r3, [pc, #484]	; (8005c68 <_vfiprintf_r+0x248>)
 8005a82:	429d      	cmp	r5, r3
 8005a84:	bf08      	it	eq
 8005a86:	68f5      	ldreq	r5, [r6, #12]
 8005a88:	e7da      	b.n	8005a40 <_vfiprintf_r+0x20>
 8005a8a:	89ab      	ldrh	r3, [r5, #12]
 8005a8c:	0598      	lsls	r0, r3, #22
 8005a8e:	d4ed      	bmi.n	8005a6c <_vfiprintf_r+0x4c>
 8005a90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a92:	f7ff faa5 	bl	8004fe0 <__retarget_lock_release_recursive>
 8005a96:	e7e9      	b.n	8005a6c <_vfiprintf_r+0x4c>
 8005a98:	2300      	movs	r3, #0
 8005a9a:	9309      	str	r3, [sp, #36]	; 0x24
 8005a9c:	2320      	movs	r3, #32
 8005a9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005aa2:	f8cd 800c 	str.w	r8, [sp, #12]
 8005aa6:	2330      	movs	r3, #48	; 0x30
 8005aa8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005c6c <_vfiprintf_r+0x24c>
 8005aac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005ab0:	f04f 0901 	mov.w	r9, #1
 8005ab4:	4623      	mov	r3, r4
 8005ab6:	469a      	mov	sl, r3
 8005ab8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005abc:	b10a      	cbz	r2, 8005ac2 <_vfiprintf_r+0xa2>
 8005abe:	2a25      	cmp	r2, #37	; 0x25
 8005ac0:	d1f9      	bne.n	8005ab6 <_vfiprintf_r+0x96>
 8005ac2:	ebba 0b04 	subs.w	fp, sl, r4
 8005ac6:	d00b      	beq.n	8005ae0 <_vfiprintf_r+0xc0>
 8005ac8:	465b      	mov	r3, fp
 8005aca:	4622      	mov	r2, r4
 8005acc:	4629      	mov	r1, r5
 8005ace:	4630      	mov	r0, r6
 8005ad0:	f7ff ff93 	bl	80059fa <__sfputs_r>
 8005ad4:	3001      	adds	r0, #1
 8005ad6:	f000 80aa 	beq.w	8005c2e <_vfiprintf_r+0x20e>
 8005ada:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005adc:	445a      	add	r2, fp
 8005ade:	9209      	str	r2, [sp, #36]	; 0x24
 8005ae0:	f89a 3000 	ldrb.w	r3, [sl]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	f000 80a2 	beq.w	8005c2e <_vfiprintf_r+0x20e>
 8005aea:	2300      	movs	r3, #0
 8005aec:	f04f 32ff 	mov.w	r2, #4294967295
 8005af0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005af4:	f10a 0a01 	add.w	sl, sl, #1
 8005af8:	9304      	str	r3, [sp, #16]
 8005afa:	9307      	str	r3, [sp, #28]
 8005afc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b00:	931a      	str	r3, [sp, #104]	; 0x68
 8005b02:	4654      	mov	r4, sl
 8005b04:	2205      	movs	r2, #5
 8005b06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b0a:	4858      	ldr	r0, [pc, #352]	; (8005c6c <_vfiprintf_r+0x24c>)
 8005b0c:	f7fa fb70 	bl	80001f0 <memchr>
 8005b10:	9a04      	ldr	r2, [sp, #16]
 8005b12:	b9d8      	cbnz	r0, 8005b4c <_vfiprintf_r+0x12c>
 8005b14:	06d1      	lsls	r1, r2, #27
 8005b16:	bf44      	itt	mi
 8005b18:	2320      	movmi	r3, #32
 8005b1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b1e:	0713      	lsls	r3, r2, #28
 8005b20:	bf44      	itt	mi
 8005b22:	232b      	movmi	r3, #43	; 0x2b
 8005b24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b28:	f89a 3000 	ldrb.w	r3, [sl]
 8005b2c:	2b2a      	cmp	r3, #42	; 0x2a
 8005b2e:	d015      	beq.n	8005b5c <_vfiprintf_r+0x13c>
 8005b30:	9a07      	ldr	r2, [sp, #28]
 8005b32:	4654      	mov	r4, sl
 8005b34:	2000      	movs	r0, #0
 8005b36:	f04f 0c0a 	mov.w	ip, #10
 8005b3a:	4621      	mov	r1, r4
 8005b3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b40:	3b30      	subs	r3, #48	; 0x30
 8005b42:	2b09      	cmp	r3, #9
 8005b44:	d94e      	bls.n	8005be4 <_vfiprintf_r+0x1c4>
 8005b46:	b1b0      	cbz	r0, 8005b76 <_vfiprintf_r+0x156>
 8005b48:	9207      	str	r2, [sp, #28]
 8005b4a:	e014      	b.n	8005b76 <_vfiprintf_r+0x156>
 8005b4c:	eba0 0308 	sub.w	r3, r0, r8
 8005b50:	fa09 f303 	lsl.w	r3, r9, r3
 8005b54:	4313      	orrs	r3, r2
 8005b56:	9304      	str	r3, [sp, #16]
 8005b58:	46a2      	mov	sl, r4
 8005b5a:	e7d2      	b.n	8005b02 <_vfiprintf_r+0xe2>
 8005b5c:	9b03      	ldr	r3, [sp, #12]
 8005b5e:	1d19      	adds	r1, r3, #4
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	9103      	str	r1, [sp, #12]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	bfbb      	ittet	lt
 8005b68:	425b      	neglt	r3, r3
 8005b6a:	f042 0202 	orrlt.w	r2, r2, #2
 8005b6e:	9307      	strge	r3, [sp, #28]
 8005b70:	9307      	strlt	r3, [sp, #28]
 8005b72:	bfb8      	it	lt
 8005b74:	9204      	strlt	r2, [sp, #16]
 8005b76:	7823      	ldrb	r3, [r4, #0]
 8005b78:	2b2e      	cmp	r3, #46	; 0x2e
 8005b7a:	d10c      	bne.n	8005b96 <_vfiprintf_r+0x176>
 8005b7c:	7863      	ldrb	r3, [r4, #1]
 8005b7e:	2b2a      	cmp	r3, #42	; 0x2a
 8005b80:	d135      	bne.n	8005bee <_vfiprintf_r+0x1ce>
 8005b82:	9b03      	ldr	r3, [sp, #12]
 8005b84:	1d1a      	adds	r2, r3, #4
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	9203      	str	r2, [sp, #12]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	bfb8      	it	lt
 8005b8e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005b92:	3402      	adds	r4, #2
 8005b94:	9305      	str	r3, [sp, #20]
 8005b96:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005c7c <_vfiprintf_r+0x25c>
 8005b9a:	7821      	ldrb	r1, [r4, #0]
 8005b9c:	2203      	movs	r2, #3
 8005b9e:	4650      	mov	r0, sl
 8005ba0:	f7fa fb26 	bl	80001f0 <memchr>
 8005ba4:	b140      	cbz	r0, 8005bb8 <_vfiprintf_r+0x198>
 8005ba6:	2340      	movs	r3, #64	; 0x40
 8005ba8:	eba0 000a 	sub.w	r0, r0, sl
 8005bac:	fa03 f000 	lsl.w	r0, r3, r0
 8005bb0:	9b04      	ldr	r3, [sp, #16]
 8005bb2:	4303      	orrs	r3, r0
 8005bb4:	3401      	adds	r4, #1
 8005bb6:	9304      	str	r3, [sp, #16]
 8005bb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bbc:	482c      	ldr	r0, [pc, #176]	; (8005c70 <_vfiprintf_r+0x250>)
 8005bbe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005bc2:	2206      	movs	r2, #6
 8005bc4:	f7fa fb14 	bl	80001f0 <memchr>
 8005bc8:	2800      	cmp	r0, #0
 8005bca:	d03f      	beq.n	8005c4c <_vfiprintf_r+0x22c>
 8005bcc:	4b29      	ldr	r3, [pc, #164]	; (8005c74 <_vfiprintf_r+0x254>)
 8005bce:	bb1b      	cbnz	r3, 8005c18 <_vfiprintf_r+0x1f8>
 8005bd0:	9b03      	ldr	r3, [sp, #12]
 8005bd2:	3307      	adds	r3, #7
 8005bd4:	f023 0307 	bic.w	r3, r3, #7
 8005bd8:	3308      	adds	r3, #8
 8005bda:	9303      	str	r3, [sp, #12]
 8005bdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bde:	443b      	add	r3, r7
 8005be0:	9309      	str	r3, [sp, #36]	; 0x24
 8005be2:	e767      	b.n	8005ab4 <_vfiprintf_r+0x94>
 8005be4:	fb0c 3202 	mla	r2, ip, r2, r3
 8005be8:	460c      	mov	r4, r1
 8005bea:	2001      	movs	r0, #1
 8005bec:	e7a5      	b.n	8005b3a <_vfiprintf_r+0x11a>
 8005bee:	2300      	movs	r3, #0
 8005bf0:	3401      	adds	r4, #1
 8005bf2:	9305      	str	r3, [sp, #20]
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	f04f 0c0a 	mov.w	ip, #10
 8005bfa:	4620      	mov	r0, r4
 8005bfc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c00:	3a30      	subs	r2, #48	; 0x30
 8005c02:	2a09      	cmp	r2, #9
 8005c04:	d903      	bls.n	8005c0e <_vfiprintf_r+0x1ee>
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d0c5      	beq.n	8005b96 <_vfiprintf_r+0x176>
 8005c0a:	9105      	str	r1, [sp, #20]
 8005c0c:	e7c3      	b.n	8005b96 <_vfiprintf_r+0x176>
 8005c0e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c12:	4604      	mov	r4, r0
 8005c14:	2301      	movs	r3, #1
 8005c16:	e7f0      	b.n	8005bfa <_vfiprintf_r+0x1da>
 8005c18:	ab03      	add	r3, sp, #12
 8005c1a:	9300      	str	r3, [sp, #0]
 8005c1c:	462a      	mov	r2, r5
 8005c1e:	4b16      	ldr	r3, [pc, #88]	; (8005c78 <_vfiprintf_r+0x258>)
 8005c20:	a904      	add	r1, sp, #16
 8005c22:	4630      	mov	r0, r6
 8005c24:	f7fd fc8a 	bl	800353c <_printf_float>
 8005c28:	4607      	mov	r7, r0
 8005c2a:	1c78      	adds	r0, r7, #1
 8005c2c:	d1d6      	bne.n	8005bdc <_vfiprintf_r+0x1bc>
 8005c2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c30:	07d9      	lsls	r1, r3, #31
 8005c32:	d405      	bmi.n	8005c40 <_vfiprintf_r+0x220>
 8005c34:	89ab      	ldrh	r3, [r5, #12]
 8005c36:	059a      	lsls	r2, r3, #22
 8005c38:	d402      	bmi.n	8005c40 <_vfiprintf_r+0x220>
 8005c3a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c3c:	f7ff f9d0 	bl	8004fe0 <__retarget_lock_release_recursive>
 8005c40:	89ab      	ldrh	r3, [r5, #12]
 8005c42:	065b      	lsls	r3, r3, #25
 8005c44:	f53f af12 	bmi.w	8005a6c <_vfiprintf_r+0x4c>
 8005c48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c4a:	e711      	b.n	8005a70 <_vfiprintf_r+0x50>
 8005c4c:	ab03      	add	r3, sp, #12
 8005c4e:	9300      	str	r3, [sp, #0]
 8005c50:	462a      	mov	r2, r5
 8005c52:	4b09      	ldr	r3, [pc, #36]	; (8005c78 <_vfiprintf_r+0x258>)
 8005c54:	a904      	add	r1, sp, #16
 8005c56:	4630      	mov	r0, r6
 8005c58:	f7fd ff14 	bl	8003a84 <_printf_i>
 8005c5c:	e7e4      	b.n	8005c28 <_vfiprintf_r+0x208>
 8005c5e:	bf00      	nop
 8005c60:	080060c4 	.word	0x080060c4
 8005c64:	080060e4 	.word	0x080060e4
 8005c68:	080060a4 	.word	0x080060a4
 8005c6c:	0800625c 	.word	0x0800625c
 8005c70:	08006266 	.word	0x08006266
 8005c74:	0800353d 	.word	0x0800353d
 8005c78:	080059fb 	.word	0x080059fb
 8005c7c:	08006262 	.word	0x08006262

08005c80 <_sbrk_r>:
 8005c80:	b538      	push	{r3, r4, r5, lr}
 8005c82:	4d06      	ldr	r5, [pc, #24]	; (8005c9c <_sbrk_r+0x1c>)
 8005c84:	2300      	movs	r3, #0
 8005c86:	4604      	mov	r4, r0
 8005c88:	4608      	mov	r0, r1
 8005c8a:	602b      	str	r3, [r5, #0]
 8005c8c:	f7fb fc4a 	bl	8001524 <_sbrk>
 8005c90:	1c43      	adds	r3, r0, #1
 8005c92:	d102      	bne.n	8005c9a <_sbrk_r+0x1a>
 8005c94:	682b      	ldr	r3, [r5, #0]
 8005c96:	b103      	cbz	r3, 8005c9a <_sbrk_r+0x1a>
 8005c98:	6023      	str	r3, [r4, #0]
 8005c9a:	bd38      	pop	{r3, r4, r5, pc}
 8005c9c:	200002a4 	.word	0x200002a4

08005ca0 <__sread>:
 8005ca0:	b510      	push	{r4, lr}
 8005ca2:	460c      	mov	r4, r1
 8005ca4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ca8:	f000 f8e2 	bl	8005e70 <_read_r>
 8005cac:	2800      	cmp	r0, #0
 8005cae:	bfab      	itete	ge
 8005cb0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005cb2:	89a3      	ldrhlt	r3, [r4, #12]
 8005cb4:	181b      	addge	r3, r3, r0
 8005cb6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005cba:	bfac      	ite	ge
 8005cbc:	6563      	strge	r3, [r4, #84]	; 0x54
 8005cbe:	81a3      	strhlt	r3, [r4, #12]
 8005cc0:	bd10      	pop	{r4, pc}

08005cc2 <__swrite>:
 8005cc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cc6:	461f      	mov	r7, r3
 8005cc8:	898b      	ldrh	r3, [r1, #12]
 8005cca:	05db      	lsls	r3, r3, #23
 8005ccc:	4605      	mov	r5, r0
 8005cce:	460c      	mov	r4, r1
 8005cd0:	4616      	mov	r6, r2
 8005cd2:	d505      	bpl.n	8005ce0 <__swrite+0x1e>
 8005cd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cd8:	2302      	movs	r3, #2
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f000 f898 	bl	8005e10 <_lseek_r>
 8005ce0:	89a3      	ldrh	r3, [r4, #12]
 8005ce2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ce6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005cea:	81a3      	strh	r3, [r4, #12]
 8005cec:	4632      	mov	r2, r6
 8005cee:	463b      	mov	r3, r7
 8005cf0:	4628      	mov	r0, r5
 8005cf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005cf6:	f000 b817 	b.w	8005d28 <_write_r>

08005cfa <__sseek>:
 8005cfa:	b510      	push	{r4, lr}
 8005cfc:	460c      	mov	r4, r1
 8005cfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d02:	f000 f885 	bl	8005e10 <_lseek_r>
 8005d06:	1c43      	adds	r3, r0, #1
 8005d08:	89a3      	ldrh	r3, [r4, #12]
 8005d0a:	bf15      	itete	ne
 8005d0c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005d0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005d12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005d16:	81a3      	strheq	r3, [r4, #12]
 8005d18:	bf18      	it	ne
 8005d1a:	81a3      	strhne	r3, [r4, #12]
 8005d1c:	bd10      	pop	{r4, pc}

08005d1e <__sclose>:
 8005d1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d22:	f000 b831 	b.w	8005d88 <_close_r>
	...

08005d28 <_write_r>:
 8005d28:	b538      	push	{r3, r4, r5, lr}
 8005d2a:	4d07      	ldr	r5, [pc, #28]	; (8005d48 <_write_r+0x20>)
 8005d2c:	4604      	mov	r4, r0
 8005d2e:	4608      	mov	r0, r1
 8005d30:	4611      	mov	r1, r2
 8005d32:	2200      	movs	r2, #0
 8005d34:	602a      	str	r2, [r5, #0]
 8005d36:	461a      	mov	r2, r3
 8005d38:	f7fb fba3 	bl	8001482 <_write>
 8005d3c:	1c43      	adds	r3, r0, #1
 8005d3e:	d102      	bne.n	8005d46 <_write_r+0x1e>
 8005d40:	682b      	ldr	r3, [r5, #0]
 8005d42:	b103      	cbz	r3, 8005d46 <_write_r+0x1e>
 8005d44:	6023      	str	r3, [r4, #0]
 8005d46:	bd38      	pop	{r3, r4, r5, pc}
 8005d48:	200002a4 	.word	0x200002a4

08005d4c <__assert_func>:
 8005d4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005d4e:	4614      	mov	r4, r2
 8005d50:	461a      	mov	r2, r3
 8005d52:	4b09      	ldr	r3, [pc, #36]	; (8005d78 <__assert_func+0x2c>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4605      	mov	r5, r0
 8005d58:	68d8      	ldr	r0, [r3, #12]
 8005d5a:	b14c      	cbz	r4, 8005d70 <__assert_func+0x24>
 8005d5c:	4b07      	ldr	r3, [pc, #28]	; (8005d7c <__assert_func+0x30>)
 8005d5e:	9100      	str	r1, [sp, #0]
 8005d60:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005d64:	4906      	ldr	r1, [pc, #24]	; (8005d80 <__assert_func+0x34>)
 8005d66:	462b      	mov	r3, r5
 8005d68:	f000 f81e 	bl	8005da8 <fiprintf>
 8005d6c:	f000 f89f 	bl	8005eae <abort>
 8005d70:	4b04      	ldr	r3, [pc, #16]	; (8005d84 <__assert_func+0x38>)
 8005d72:	461c      	mov	r4, r3
 8005d74:	e7f3      	b.n	8005d5e <__assert_func+0x12>
 8005d76:	bf00      	nop
 8005d78:	2000000c 	.word	0x2000000c
 8005d7c:	0800626d 	.word	0x0800626d
 8005d80:	0800627a 	.word	0x0800627a
 8005d84:	080062a8 	.word	0x080062a8

08005d88 <_close_r>:
 8005d88:	b538      	push	{r3, r4, r5, lr}
 8005d8a:	4d06      	ldr	r5, [pc, #24]	; (8005da4 <_close_r+0x1c>)
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	4604      	mov	r4, r0
 8005d90:	4608      	mov	r0, r1
 8005d92:	602b      	str	r3, [r5, #0]
 8005d94:	f7fb fb91 	bl	80014ba <_close>
 8005d98:	1c43      	adds	r3, r0, #1
 8005d9a:	d102      	bne.n	8005da2 <_close_r+0x1a>
 8005d9c:	682b      	ldr	r3, [r5, #0]
 8005d9e:	b103      	cbz	r3, 8005da2 <_close_r+0x1a>
 8005da0:	6023      	str	r3, [r4, #0]
 8005da2:	bd38      	pop	{r3, r4, r5, pc}
 8005da4:	200002a4 	.word	0x200002a4

08005da8 <fiprintf>:
 8005da8:	b40e      	push	{r1, r2, r3}
 8005daa:	b503      	push	{r0, r1, lr}
 8005dac:	4601      	mov	r1, r0
 8005dae:	ab03      	add	r3, sp, #12
 8005db0:	4805      	ldr	r0, [pc, #20]	; (8005dc8 <fiprintf+0x20>)
 8005db2:	f853 2b04 	ldr.w	r2, [r3], #4
 8005db6:	6800      	ldr	r0, [r0, #0]
 8005db8:	9301      	str	r3, [sp, #4]
 8005dba:	f7ff fe31 	bl	8005a20 <_vfiprintf_r>
 8005dbe:	b002      	add	sp, #8
 8005dc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005dc4:	b003      	add	sp, #12
 8005dc6:	4770      	bx	lr
 8005dc8:	2000000c 	.word	0x2000000c

08005dcc <_fstat_r>:
 8005dcc:	b538      	push	{r3, r4, r5, lr}
 8005dce:	4d07      	ldr	r5, [pc, #28]	; (8005dec <_fstat_r+0x20>)
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	4604      	mov	r4, r0
 8005dd4:	4608      	mov	r0, r1
 8005dd6:	4611      	mov	r1, r2
 8005dd8:	602b      	str	r3, [r5, #0]
 8005dda:	f7fb fb7a 	bl	80014d2 <_fstat>
 8005dde:	1c43      	adds	r3, r0, #1
 8005de0:	d102      	bne.n	8005de8 <_fstat_r+0x1c>
 8005de2:	682b      	ldr	r3, [r5, #0]
 8005de4:	b103      	cbz	r3, 8005de8 <_fstat_r+0x1c>
 8005de6:	6023      	str	r3, [r4, #0]
 8005de8:	bd38      	pop	{r3, r4, r5, pc}
 8005dea:	bf00      	nop
 8005dec:	200002a4 	.word	0x200002a4

08005df0 <_isatty_r>:
 8005df0:	b538      	push	{r3, r4, r5, lr}
 8005df2:	4d06      	ldr	r5, [pc, #24]	; (8005e0c <_isatty_r+0x1c>)
 8005df4:	2300      	movs	r3, #0
 8005df6:	4604      	mov	r4, r0
 8005df8:	4608      	mov	r0, r1
 8005dfa:	602b      	str	r3, [r5, #0]
 8005dfc:	f7fb fb79 	bl	80014f2 <_isatty>
 8005e00:	1c43      	adds	r3, r0, #1
 8005e02:	d102      	bne.n	8005e0a <_isatty_r+0x1a>
 8005e04:	682b      	ldr	r3, [r5, #0]
 8005e06:	b103      	cbz	r3, 8005e0a <_isatty_r+0x1a>
 8005e08:	6023      	str	r3, [r4, #0]
 8005e0a:	bd38      	pop	{r3, r4, r5, pc}
 8005e0c:	200002a4 	.word	0x200002a4

08005e10 <_lseek_r>:
 8005e10:	b538      	push	{r3, r4, r5, lr}
 8005e12:	4d07      	ldr	r5, [pc, #28]	; (8005e30 <_lseek_r+0x20>)
 8005e14:	4604      	mov	r4, r0
 8005e16:	4608      	mov	r0, r1
 8005e18:	4611      	mov	r1, r2
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	602a      	str	r2, [r5, #0]
 8005e1e:	461a      	mov	r2, r3
 8005e20:	f7fb fb72 	bl	8001508 <_lseek>
 8005e24:	1c43      	adds	r3, r0, #1
 8005e26:	d102      	bne.n	8005e2e <_lseek_r+0x1e>
 8005e28:	682b      	ldr	r3, [r5, #0]
 8005e2a:	b103      	cbz	r3, 8005e2e <_lseek_r+0x1e>
 8005e2c:	6023      	str	r3, [r4, #0]
 8005e2e:	bd38      	pop	{r3, r4, r5, pc}
 8005e30:	200002a4 	.word	0x200002a4

08005e34 <__ascii_mbtowc>:
 8005e34:	b082      	sub	sp, #8
 8005e36:	b901      	cbnz	r1, 8005e3a <__ascii_mbtowc+0x6>
 8005e38:	a901      	add	r1, sp, #4
 8005e3a:	b142      	cbz	r2, 8005e4e <__ascii_mbtowc+0x1a>
 8005e3c:	b14b      	cbz	r3, 8005e52 <__ascii_mbtowc+0x1e>
 8005e3e:	7813      	ldrb	r3, [r2, #0]
 8005e40:	600b      	str	r3, [r1, #0]
 8005e42:	7812      	ldrb	r2, [r2, #0]
 8005e44:	1e10      	subs	r0, r2, #0
 8005e46:	bf18      	it	ne
 8005e48:	2001      	movne	r0, #1
 8005e4a:	b002      	add	sp, #8
 8005e4c:	4770      	bx	lr
 8005e4e:	4610      	mov	r0, r2
 8005e50:	e7fb      	b.n	8005e4a <__ascii_mbtowc+0x16>
 8005e52:	f06f 0001 	mvn.w	r0, #1
 8005e56:	e7f8      	b.n	8005e4a <__ascii_mbtowc+0x16>

08005e58 <__malloc_lock>:
 8005e58:	4801      	ldr	r0, [pc, #4]	; (8005e60 <__malloc_lock+0x8>)
 8005e5a:	f7ff b8c0 	b.w	8004fde <__retarget_lock_acquire_recursive>
 8005e5e:	bf00      	nop
 8005e60:	20000298 	.word	0x20000298

08005e64 <__malloc_unlock>:
 8005e64:	4801      	ldr	r0, [pc, #4]	; (8005e6c <__malloc_unlock+0x8>)
 8005e66:	f7ff b8bb 	b.w	8004fe0 <__retarget_lock_release_recursive>
 8005e6a:	bf00      	nop
 8005e6c:	20000298 	.word	0x20000298

08005e70 <_read_r>:
 8005e70:	b538      	push	{r3, r4, r5, lr}
 8005e72:	4d07      	ldr	r5, [pc, #28]	; (8005e90 <_read_r+0x20>)
 8005e74:	4604      	mov	r4, r0
 8005e76:	4608      	mov	r0, r1
 8005e78:	4611      	mov	r1, r2
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	602a      	str	r2, [r5, #0]
 8005e7e:	461a      	mov	r2, r3
 8005e80:	f7fb fae2 	bl	8001448 <_read>
 8005e84:	1c43      	adds	r3, r0, #1
 8005e86:	d102      	bne.n	8005e8e <_read_r+0x1e>
 8005e88:	682b      	ldr	r3, [r5, #0]
 8005e8a:	b103      	cbz	r3, 8005e8e <_read_r+0x1e>
 8005e8c:	6023      	str	r3, [r4, #0]
 8005e8e:	bd38      	pop	{r3, r4, r5, pc}
 8005e90:	200002a4 	.word	0x200002a4

08005e94 <__ascii_wctomb>:
 8005e94:	b149      	cbz	r1, 8005eaa <__ascii_wctomb+0x16>
 8005e96:	2aff      	cmp	r2, #255	; 0xff
 8005e98:	bf85      	ittet	hi
 8005e9a:	238a      	movhi	r3, #138	; 0x8a
 8005e9c:	6003      	strhi	r3, [r0, #0]
 8005e9e:	700a      	strbls	r2, [r1, #0]
 8005ea0:	f04f 30ff 	movhi.w	r0, #4294967295
 8005ea4:	bf98      	it	ls
 8005ea6:	2001      	movls	r0, #1
 8005ea8:	4770      	bx	lr
 8005eaa:	4608      	mov	r0, r1
 8005eac:	4770      	bx	lr

08005eae <abort>:
 8005eae:	b508      	push	{r3, lr}
 8005eb0:	2006      	movs	r0, #6
 8005eb2:	f000 f82b 	bl	8005f0c <raise>
 8005eb6:	2001      	movs	r0, #1
 8005eb8:	f7fb fabc 	bl	8001434 <_exit>

08005ebc <_raise_r>:
 8005ebc:	291f      	cmp	r1, #31
 8005ebe:	b538      	push	{r3, r4, r5, lr}
 8005ec0:	4604      	mov	r4, r0
 8005ec2:	460d      	mov	r5, r1
 8005ec4:	d904      	bls.n	8005ed0 <_raise_r+0x14>
 8005ec6:	2316      	movs	r3, #22
 8005ec8:	6003      	str	r3, [r0, #0]
 8005eca:	f04f 30ff 	mov.w	r0, #4294967295
 8005ece:	bd38      	pop	{r3, r4, r5, pc}
 8005ed0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005ed2:	b112      	cbz	r2, 8005eda <_raise_r+0x1e>
 8005ed4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005ed8:	b94b      	cbnz	r3, 8005eee <_raise_r+0x32>
 8005eda:	4620      	mov	r0, r4
 8005edc:	f000 f830 	bl	8005f40 <_getpid_r>
 8005ee0:	462a      	mov	r2, r5
 8005ee2:	4601      	mov	r1, r0
 8005ee4:	4620      	mov	r0, r4
 8005ee6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005eea:	f000 b817 	b.w	8005f1c <_kill_r>
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d00a      	beq.n	8005f08 <_raise_r+0x4c>
 8005ef2:	1c59      	adds	r1, r3, #1
 8005ef4:	d103      	bne.n	8005efe <_raise_r+0x42>
 8005ef6:	2316      	movs	r3, #22
 8005ef8:	6003      	str	r3, [r0, #0]
 8005efa:	2001      	movs	r0, #1
 8005efc:	e7e7      	b.n	8005ece <_raise_r+0x12>
 8005efe:	2400      	movs	r4, #0
 8005f00:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005f04:	4628      	mov	r0, r5
 8005f06:	4798      	blx	r3
 8005f08:	2000      	movs	r0, #0
 8005f0a:	e7e0      	b.n	8005ece <_raise_r+0x12>

08005f0c <raise>:
 8005f0c:	4b02      	ldr	r3, [pc, #8]	; (8005f18 <raise+0xc>)
 8005f0e:	4601      	mov	r1, r0
 8005f10:	6818      	ldr	r0, [r3, #0]
 8005f12:	f7ff bfd3 	b.w	8005ebc <_raise_r>
 8005f16:	bf00      	nop
 8005f18:	2000000c 	.word	0x2000000c

08005f1c <_kill_r>:
 8005f1c:	b538      	push	{r3, r4, r5, lr}
 8005f1e:	4d07      	ldr	r5, [pc, #28]	; (8005f3c <_kill_r+0x20>)
 8005f20:	2300      	movs	r3, #0
 8005f22:	4604      	mov	r4, r0
 8005f24:	4608      	mov	r0, r1
 8005f26:	4611      	mov	r1, r2
 8005f28:	602b      	str	r3, [r5, #0]
 8005f2a:	f7fb fa73 	bl	8001414 <_kill>
 8005f2e:	1c43      	adds	r3, r0, #1
 8005f30:	d102      	bne.n	8005f38 <_kill_r+0x1c>
 8005f32:	682b      	ldr	r3, [r5, #0]
 8005f34:	b103      	cbz	r3, 8005f38 <_kill_r+0x1c>
 8005f36:	6023      	str	r3, [r4, #0]
 8005f38:	bd38      	pop	{r3, r4, r5, pc}
 8005f3a:	bf00      	nop
 8005f3c:	200002a4 	.word	0x200002a4

08005f40 <_getpid_r>:
 8005f40:	f7fb ba60 	b.w	8001404 <_getpid>

08005f44 <_init>:
 8005f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f46:	bf00      	nop
 8005f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f4a:	bc08      	pop	{r3}
 8005f4c:	469e      	mov	lr, r3
 8005f4e:	4770      	bx	lr

08005f50 <_fini>:
 8005f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f52:	bf00      	nop
 8005f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f56:	bc08      	pop	{r3}
 8005f58:	469e      	mov	lr, r3
 8005f5a:	4770      	bx	lr
