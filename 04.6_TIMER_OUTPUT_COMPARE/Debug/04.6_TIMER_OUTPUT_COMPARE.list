
04.6_TIMER_OUTPUT_COMPARE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080b0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  08008250  08008250  00018250  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008664  08008664  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008664  08008664  00018664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800866c  0800866c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800866c  0800866c  0001866c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008670  08008670  00018670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008674  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  200001dc  08008850  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003d4  08008850  000203d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e138  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e53  00000000  00000000  0002e344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf8  00000000  00000000  00030198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c40  00000000  00000000  00030e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016fdb  00000000  00000000  00031ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e573  00000000  00000000  00048aab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008eafc  00000000  00000000  0005701e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e5b1a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004838  00000000  00000000  000e5b6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008238 	.word	0x08008238

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08008238 	.word	0x08008238

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ec0:	f000 fdf2 	bl	8001aa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ec4:	f000 f8be 	bl	8001044 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ec8:	f000 fa88 	bl	80013dc <MX_GPIO_Init>
  MX_DMA_Init();
 8000ecc:	f000 fa66 	bl	800139c <MX_DMA_Init>
  MX_TIM2_Init();
 8000ed0:	f000 f918 	bl	8001104 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000ed4:	f000 f986 	bl	80011e4 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000ed8:	f000 fa36 	bl	8001348 <MX_USART2_UART_Init>
  MX_TIM11_Init();
 8000edc:	f000 fa10 	bl	8001300 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */

  //toggle timer como interrupcion GPIO PA5
  HAL_TIM_Base_Start_IT(&htim11);
 8000ee0:	484b      	ldr	r0, [pc, #300]	; (8001010 <main+0x154>)
 8000ee2:	f002 f9d5 	bl	8003290 <HAL_TIM_Base_Start_IT>

  //Configuracion INPUT CAPTURE
  HAL_TIM_Base_Start(&htim2);
 8000ee6:	484b      	ldr	r0, [pc, #300]	; (8001014 <main+0x158>)
 8000ee8:	f002 f978 	bl	80031dc <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1,(uint32_t *)captures, 2);
 8000eec:	2302      	movs	r3, #2
 8000eee:	4a4a      	ldr	r2, [pc, #296]	; (8001018 <main+0x15c>)
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	4848      	ldr	r0, [pc, #288]	; (8001014 <main+0x158>)
 8000ef4:	f002 fbe0 	bl	80036b8 <HAL_TIM_IC_Start_DMA>

  pulse = 16x10^6/20000
  pulse =  800

  */
  CH1_FREQ = 10667;
 8000ef8:	4b48      	ldr	r3, [pc, #288]	; (800101c <main+0x160>)
 8000efa:	f642 12ab 	movw	r2, #10667	; 0x29ab
 8000efe:	801a      	strh	r2, [r3, #0]
  CH2_FREQ = 800;
 8000f00:	4b47      	ldr	r3, [pc, #284]	; (8001020 <main+0x164>)
 8000f02:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000f06:	801a      	strh	r2, [r3, #0]

  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4846      	ldr	r0, [pc, #280]	; (8001024 <main+0x168>)
 8000f0c:	f002 fa7c 	bl	8003408 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_2);
 8000f10:	2104      	movs	r1, #4
 8000f12:	4844      	ldr	r0, [pc, #272]	; (8001024 <main+0x168>)
 8000f14:	f002 fa78 	bl	8003408 <HAL_TIM_OC_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(capture_done == 2){
 8000f18:	4b43      	ldr	r3, [pc, #268]	; (8001028 <main+0x16c>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	2b02      	cmp	r3, #2
 8000f20:	d1fa      	bne.n	8000f18 <main+0x5c>

		  HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_1);
 8000f22:	2100      	movs	r1, #0
 8000f24:	483b      	ldr	r0, [pc, #236]	; (8001014 <main+0x158>)
 8000f26:	f002 fd63 	bl	80039f0 <HAL_TIM_IC_Stop_DMA>

		  if(captures[1] >= captures[0])
 8000f2a:	4b3b      	ldr	r3, [pc, #236]	; (8001018 <main+0x15c>)
 8000f2c:	885a      	ldrh	r2, [r3, #2]
 8000f2e:	4b3a      	ldr	r3, [pc, #232]	; (8001018 <main+0x15c>)
 8000f30:	881b      	ldrh	r3, [r3, #0]
 8000f32:	429a      	cmp	r2, r3
 8000f34:	d308      	bcc.n	8000f48 <main+0x8c>
		  {
			  diff_captures = captures[1]-captures[0];
 8000f36:	4b38      	ldr	r3, [pc, #224]	; (8001018 <main+0x15c>)
 8000f38:	885a      	ldrh	r2, [r3, #2]
 8000f3a:	4b37      	ldr	r3, [pc, #220]	; (8001018 <main+0x15c>)
 8000f3c:	881b      	ldrh	r3, [r3, #0]
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	b29a      	uxth	r2, r3
 8000f42:	4b3a      	ldr	r3, [pc, #232]	; (800102c <main+0x170>)
 8000f44:	801a      	strh	r2, [r3, #0]
 8000f46:	e00d      	b.n	8000f64 <main+0xa8>
		  }
		  else
		  {
			 diff_captures = ( htim2.Instance->ARR - captures[0]) + captures[1];
 8000f48:	4b32      	ldr	r3, [pc, #200]	; (8001014 <main+0x158>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f4e:	b29a      	uxth	r2, r3
 8000f50:	4b31      	ldr	r3, [pc, #196]	; (8001018 <main+0x15c>)
 8000f52:	881b      	ldrh	r3, [r3, #0]
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	b29a      	uxth	r2, r3
 8000f58:	4b2f      	ldr	r3, [pc, #188]	; (8001018 <main+0x15c>)
 8000f5a:	885b      	ldrh	r3, [r3, #2]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	b29a      	uxth	r2, r3
 8000f60:	4b32      	ldr	r3, [pc, #200]	; (800102c <main+0x170>)
 8000f62:	801a      	strh	r2, [r3, #0]
		  }

		  frequency = HAL_RCC_GetPCLK1Freq() / ( htim2.Instance->PSC + 1);
 8000f64:	f002 f8c2 	bl	80030ec <HAL_RCC_GetPCLK1Freq>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	4b2a      	ldr	r3, [pc, #168]	; (8001014 <main+0x158>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f70:	3301      	adds	r3, #1
 8000f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f76:	ee07 3a90 	vmov	s15, r3
 8000f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f7e:	4b2c      	ldr	r3, [pc, #176]	; (8001030 <main+0x174>)
 8000f80:	edc3 7a00 	vstr	s15, [r3]
		  frequency = (float)frequency / diff_captures; //enviar solo cuando usamos  HAL_TIM_IC_CaptureCallback
 8000f84:	4b2a      	ldr	r3, [pc, #168]	; (8001030 <main+0x174>)
 8000f86:	edd3 6a00 	vldr	s13, [r3]
 8000f8a:	4b28      	ldr	r3, [pc, #160]	; (800102c <main+0x170>)
 8000f8c:	881b      	ldrh	r3, [r3, #0]
 8000f8e:	ee07 3a90 	vmov	s15, r3
 8000f92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f9a:	4b25      	ldr	r3, [pc, #148]	; (8001030 <main+0x174>)
 8000f9c:	edc3 7a00 	vstr	s15, [r3]
  		  frequency = frequency*2;//se multiplica por 2 ya que al hacer el toggle del pin estamos midiendo el doble del periodo
 8000fa0:	4b23      	ldr	r3, [pc, #140]	; (8001030 <main+0x174>)
 8000fa2:	edd3 7a00 	vldr	s15, [r3]
 8000fa6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000faa:	4b21      	ldr	r3, [pc, #132]	; (8001030 <main+0x174>)
 8000fac:	edc3 7a00 	vstr	s15, [r3]


		  sprintf(buff_str,"frequency: %4.2f Hz",frequency);
 8000fb0:	4b1f      	ldr	r3, [pc, #124]	; (8001030 <main+0x174>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff facf 	bl	8000558 <__aeabi_f2d>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	491d      	ldr	r1, [pc, #116]	; (8001034 <main+0x178>)
 8000fc0:	481d      	ldr	r0, [pc, #116]	; (8001038 <main+0x17c>)
 8000fc2:	f004 fec1 	bl	8005d48 <siprintf>

		  HAL_UART_Transmit(&huart2, (uint8_t *)buff_str, strlen(buff_str), HAL_MAX_DELAY);
 8000fc6:	481c      	ldr	r0, [pc, #112]	; (8001038 <main+0x17c>)
 8000fc8:	f7ff f90a 	bl	80001e0 <strlen>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	b29a      	uxth	r2, r3
 8000fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd4:	4918      	ldr	r1, [pc, #96]	; (8001038 <main+0x17c>)
 8000fd6:	4819      	ldr	r0, [pc, #100]	; (800103c <main+0x180>)
 8000fd8:	f003 fea5 	bl	8004d26 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart2, (uint8_t *)"\r\n", strlen("\r\n"), HAL_MAX_DELAY);
 8000fdc:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe0:	2202      	movs	r2, #2
 8000fe2:	4917      	ldr	r1, [pc, #92]	; (8001040 <main+0x184>)
 8000fe4:	4815      	ldr	r0, [pc, #84]	; (800103c <main+0x180>)
 8000fe6:	f003 fe9e 	bl	8004d26 <HAL_UART_Transmit>
		  capture_done=0;
 8000fea:	4b0f      	ldr	r3, [pc, #60]	; (8001028 <main+0x16c>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	701a      	strb	r2, [r3, #0]
		  __HAL_TIM_SET_COUNTER(&htim2, 0);
 8000ff0:	4b08      	ldr	r3, [pc, #32]	; (8001014 <main+0x158>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	625a      	str	r2, [r3, #36]	; 0x24
		  HAL_Delay(500);
 8000ff8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ffc:	f000 fdc6 	bl	8001b8c <HAL_Delay>

		  HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)captures, 2);
 8001000:	2302      	movs	r3, #2
 8001002:	4a05      	ldr	r2, [pc, #20]	; (8001018 <main+0x15c>)
 8001004:	2100      	movs	r1, #0
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <main+0x158>)
 8001008:	f002 fb56 	bl	80036b8 <HAL_TIM_IC_Start_DMA>
	  if(capture_done == 2){
 800100c:	e784      	b.n	8000f18 <main+0x5c>
 800100e:	bf00      	nop
 8001010:	20000288 	.word	0x20000288
 8001014:	200001f8 	.word	0x200001f8
 8001018:	20000374 	.word	0x20000374
 800101c:	20000382 	.word	0x20000382
 8001020:	20000384 	.word	0x20000384
 8001024:	20000240 	.word	0x20000240
 8001028:	20000380 	.word	0x20000380
 800102c:	20000378 	.word	0x20000378
 8001030:	2000037c 	.word	0x2000037c
 8001034:	08008250 	.word	0x08008250
 8001038:	20000388 	.word	0x20000388
 800103c:	20000330 	.word	0x20000330
 8001040:	08008264 	.word	0x08008264

08001044 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b094      	sub	sp, #80	; 0x50
 8001048:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800104a:	f107 0320 	add.w	r3, r7, #32
 800104e:	2230      	movs	r2, #48	; 0x30
 8001050:	2100      	movs	r1, #0
 8001052:	4618      	mov	r0, r3
 8001054:	f004 fa06 	bl	8005464 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001058:	f107 030c 	add.w	r3, r7, #12
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001068:	2300      	movs	r3, #0
 800106a:	60bb      	str	r3, [r7, #8]
 800106c:	4b23      	ldr	r3, [pc, #140]	; (80010fc <SystemClock_Config+0xb8>)
 800106e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001070:	4a22      	ldr	r2, [pc, #136]	; (80010fc <SystemClock_Config+0xb8>)
 8001072:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001076:	6413      	str	r3, [r2, #64]	; 0x40
 8001078:	4b20      	ldr	r3, [pc, #128]	; (80010fc <SystemClock_Config+0xb8>)
 800107a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001080:	60bb      	str	r3, [r7, #8]
 8001082:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001084:	2300      	movs	r3, #0
 8001086:	607b      	str	r3, [r7, #4]
 8001088:	4b1d      	ldr	r3, [pc, #116]	; (8001100 <SystemClock_Config+0xbc>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001090:	4a1b      	ldr	r2, [pc, #108]	; (8001100 <SystemClock_Config+0xbc>)
 8001092:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001096:	6013      	str	r3, [r2, #0]
 8001098:	4b19      	ldr	r3, [pc, #100]	; (8001100 <SystemClock_Config+0xbc>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010a0:	607b      	str	r3, [r7, #4]
 80010a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010a4:	2302      	movs	r3, #2
 80010a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010a8:	2301      	movs	r3, #1
 80010aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010ac:	2310      	movs	r3, #16
 80010ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010b0:	2300      	movs	r3, #0
 80010b2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b4:	f107 0320 	add.w	r3, r7, #32
 80010b8:	4618      	mov	r0, r3
 80010ba:	f001 fbe7 	bl	800288c <HAL_RCC_OscConfig>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80010c4:	f000 fa38 	bl	8001538 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010c8:	230f      	movs	r3, #15
 80010ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010cc:	2300      	movs	r3, #0
 80010ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010d4:	2300      	movs	r3, #0
 80010d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010d8:	2300      	movs	r3, #0
 80010da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010dc:	f107 030c 	add.w	r3, r7, #12
 80010e0:	2100      	movs	r1, #0
 80010e2:	4618      	mov	r0, r3
 80010e4:	f001 fe4a 	bl	8002d7c <HAL_RCC_ClockConfig>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80010ee:	f000 fa23 	bl	8001538 <Error_Handler>
  }
}
 80010f2:	bf00      	nop
 80010f4:	3750      	adds	r7, #80	; 0x50
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40023800 	.word	0x40023800
 8001100:	40007000 	.word	0x40007000

08001104 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08a      	sub	sp, #40	; 0x28
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800110a:	f107 0318 	add.w	r3, r7, #24
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]
 8001116:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001118:	f107 0310 	add.w	r3, r7, #16
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001122:	463b      	mov	r3, r7
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800112e:	4b2c      	ldr	r3, [pc, #176]	; (80011e0 <MX_TIM2_Init+0xdc>)
 8001130:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001134:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001136:	4b2a      	ldr	r3, [pc, #168]	; (80011e0 <MX_TIM2_Init+0xdc>)
 8001138:	2200      	movs	r2, #0
 800113a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800113c:	4b28      	ldr	r3, [pc, #160]	; (80011e0 <MX_TIM2_Init+0xdc>)
 800113e:	2200      	movs	r2, #0
 8001140:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001142:	4b27      	ldr	r3, [pc, #156]	; (80011e0 <MX_TIM2_Init+0xdc>)
 8001144:	f04f 32ff 	mov.w	r2, #4294967295
 8001148:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800114a:	4b25      	ldr	r3, [pc, #148]	; (80011e0 <MX_TIM2_Init+0xdc>)
 800114c:	2200      	movs	r2, #0
 800114e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001150:	4b23      	ldr	r3, [pc, #140]	; (80011e0 <MX_TIM2_Init+0xdc>)
 8001152:	2200      	movs	r2, #0
 8001154:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001156:	4822      	ldr	r0, [pc, #136]	; (80011e0 <MX_TIM2_Init+0xdc>)
 8001158:	f001 fff0 	bl	800313c <HAL_TIM_Base_Init>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8001162:	f000 f9e9 	bl	8001538 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001166:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800116a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800116c:	f107 0318 	add.w	r3, r7, #24
 8001170:	4619      	mov	r1, r3
 8001172:	481b      	ldr	r0, [pc, #108]	; (80011e0 <MX_TIM2_Init+0xdc>)
 8001174:	f002 fefe 	bl	8003f74 <HAL_TIM_ConfigClockSource>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800117e:	f000 f9db 	bl	8001538 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001182:	4817      	ldr	r0, [pc, #92]	; (80011e0 <MX_TIM2_Init+0xdc>)
 8001184:	f002 fa3e 	bl	8003604 <HAL_TIM_IC_Init>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800118e:	f000 f9d3 	bl	8001538 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001192:	2300      	movs	r3, #0
 8001194:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001196:	2300      	movs	r3, #0
 8001198:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800119a:	f107 0310 	add.w	r3, r7, #16
 800119e:	4619      	mov	r1, r3
 80011a0:	480f      	ldr	r0, [pc, #60]	; (80011e0 <MX_TIM2_Init+0xdc>)
 80011a2:	f003 fcf1 	bl	8004b88 <HAL_TIMEx_MasterConfigSynchronization>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80011ac:	f000 f9c4 	bl	8001538 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80011b0:	2300      	movs	r3, #0
 80011b2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80011b4:	2301      	movs	r3, #1
 80011b6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80011b8:	2300      	movs	r3, #0
 80011ba:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80011bc:	2300      	movs	r3, #0
 80011be:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80011c0:	463b      	mov	r3, r7
 80011c2:	2200      	movs	r2, #0
 80011c4:	4619      	mov	r1, r3
 80011c6:	4806      	ldr	r0, [pc, #24]	; (80011e0 <MX_TIM2_Init+0xdc>)
 80011c8:	f002 fe38 	bl	8003e3c <HAL_TIM_IC_ConfigChannel>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80011d2:	f000 f9b1 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011d6:	bf00      	nop
 80011d8:	3728      	adds	r7, #40	; 0x28
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	200001f8 	.word	0x200001f8

080011e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08e      	sub	sp, #56	; 0x38
 80011e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	605a      	str	r2, [r3, #4]
 80011f4:	609a      	str	r2, [r3, #8]
 80011f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011f8:	f107 0320 	add.w	r3, r7, #32
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001202:	1d3b      	adds	r3, r7, #4
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
 800120e:	611a      	str	r2, [r3, #16]
 8001210:	615a      	str	r2, [r3, #20]
 8001212:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001214:	4b38      	ldr	r3, [pc, #224]	; (80012f8 <MX_TIM3_Init+0x114>)
 8001216:	4a39      	ldr	r2, [pc, #228]	; (80012fc <MX_TIM3_Init+0x118>)
 8001218:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800121a:	4b37      	ldr	r3, [pc, #220]	; (80012f8 <MX_TIM3_Init+0x114>)
 800121c:	2200      	movs	r2, #0
 800121e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001220:	4b35      	ldr	r3, [pc, #212]	; (80012f8 <MX_TIM3_Init+0x114>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001226:	4b34      	ldr	r3, [pc, #208]	; (80012f8 <MX_TIM3_Init+0x114>)
 8001228:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800122c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800122e:	4b32      	ldr	r3, [pc, #200]	; (80012f8 <MX_TIM3_Init+0x114>)
 8001230:	2200      	movs	r2, #0
 8001232:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001234:	4b30      	ldr	r3, [pc, #192]	; (80012f8 <MX_TIM3_Init+0x114>)
 8001236:	2280      	movs	r2, #128	; 0x80
 8001238:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800123a:	482f      	ldr	r0, [pc, #188]	; (80012f8 <MX_TIM3_Init+0x114>)
 800123c:	f001 ff7e 	bl	800313c <HAL_TIM_Base_Init>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001246:	f000 f977 	bl	8001538 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800124a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800124e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001250:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001254:	4619      	mov	r1, r3
 8001256:	4828      	ldr	r0, [pc, #160]	; (80012f8 <MX_TIM3_Init+0x114>)
 8001258:	f002 fe8c 	bl	8003f74 <HAL_TIM_ConfigClockSource>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001262:	f000 f969 	bl	8001538 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001266:	4824      	ldr	r0, [pc, #144]	; (80012f8 <MX_TIM3_Init+0x114>)
 8001268:	f002 f874 	bl	8003354 <HAL_TIM_OC_Init>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001272:	f000 f961 	bl	8001538 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001276:	2300      	movs	r3, #0
 8001278:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800127a:	2300      	movs	r3, #0
 800127c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800127e:	f107 0320 	add.w	r3, r7, #32
 8001282:	4619      	mov	r1, r3
 8001284:	481c      	ldr	r0, [pc, #112]	; (80012f8 <MX_TIM3_Init+0x114>)
 8001286:	f003 fc7f 	bl	8004b88 <HAL_TIMEx_MasterConfigSynchronization>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001290:	f000 f952 	bl	8001538 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001294:	2330      	movs	r3, #48	; 0x30
 8001296:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10667;
 8001298:	f642 13ab 	movw	r3, #10667	; 0x29ab
 800129c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012a2:	2300      	movs	r3, #0
 80012a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012a6:	1d3b      	adds	r3, r7, #4
 80012a8:	2200      	movs	r2, #0
 80012aa:	4619      	mov	r1, r3
 80012ac:	4812      	ldr	r0, [pc, #72]	; (80012f8 <MX_TIM3_Init+0x114>)
 80012ae:	f002 fd69 	bl	8003d84 <HAL_TIM_OC_ConfigChannel>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80012b8:	f000 f93e 	bl	8001538 <Error_Handler>
  }
  sConfigOC.Pulse = 800;
 80012bc:	f44f 7348 	mov.w	r3, #800	; 0x320
 80012c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012c2:	1d3b      	adds	r3, r7, #4
 80012c4:	2204      	movs	r2, #4
 80012c6:	4619      	mov	r1, r3
 80012c8:	480b      	ldr	r0, [pc, #44]	; (80012f8 <MX_TIM3_Init+0x114>)
 80012ca:	f002 fd5b 	bl	8003d84 <HAL_TIM_OC_ConfigChannel>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_TIM3_Init+0xf4>
  {
    Error_Handler();
 80012d4:	f000 f930 	bl	8001538 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_2);
 80012d8:	4b07      	ldr	r3, [pc, #28]	; (80012f8 <MX_TIM3_Init+0x114>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	699a      	ldr	r2, [r3, #24]
 80012de:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <MX_TIM3_Init+0x114>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80012e6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80012e8:	4803      	ldr	r0, [pc, #12]	; (80012f8 <MX_TIM3_Init+0x114>)
 80012ea:	f000 fa0b 	bl	8001704 <HAL_TIM_MspPostInit>

}
 80012ee:	bf00      	nop
 80012f0:	3738      	adds	r7, #56	; 0x38
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000240 	.word	0x20000240
 80012fc:	40000400 	.word	0x40000400

08001300 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001304:	4b0e      	ldr	r3, [pc, #56]	; (8001340 <MX_TIM11_Init+0x40>)
 8001306:	4a0f      	ldr	r2, [pc, #60]	; (8001344 <MX_TIM11_Init+0x44>)
 8001308:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 800130a:	4b0d      	ldr	r3, [pc, #52]	; (8001340 <MX_TIM11_Init+0x40>)
 800130c:	2200      	movs	r2, #0
 800130e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001310:	4b0b      	ldr	r3, [pc, #44]	; (8001340 <MX_TIM11_Init+0x40>)
 8001312:	2200      	movs	r2, #0
 8001314:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 7999;
 8001316:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <MX_TIM11_Init+0x40>)
 8001318:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800131c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800131e:	4b08      	ldr	r3, [pc, #32]	; (8001340 <MX_TIM11_Init+0x40>)
 8001320:	2200      	movs	r2, #0
 8001322:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001324:	4b06      	ldr	r3, [pc, #24]	; (8001340 <MX_TIM11_Init+0x40>)
 8001326:	2200      	movs	r2, #0
 8001328:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800132a:	4805      	ldr	r0, [pc, #20]	; (8001340 <MX_TIM11_Init+0x40>)
 800132c:	f001 ff06 	bl	800313c <HAL_TIM_Base_Init>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001336:	f000 f8ff 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000288 	.word	0x20000288
 8001344:	40014800 	.word	0x40014800

08001348 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800134c:	4b11      	ldr	r3, [pc, #68]	; (8001394 <MX_USART2_UART_Init+0x4c>)
 800134e:	4a12      	ldr	r2, [pc, #72]	; (8001398 <MX_USART2_UART_Init+0x50>)
 8001350:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001352:	4b10      	ldr	r3, [pc, #64]	; (8001394 <MX_USART2_UART_Init+0x4c>)
 8001354:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001358:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800135a:	4b0e      	ldr	r3, [pc, #56]	; (8001394 <MX_USART2_UART_Init+0x4c>)
 800135c:	2200      	movs	r2, #0
 800135e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001360:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <MX_USART2_UART_Init+0x4c>)
 8001362:	2200      	movs	r2, #0
 8001364:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001366:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <MX_USART2_UART_Init+0x4c>)
 8001368:	2200      	movs	r2, #0
 800136a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800136c:	4b09      	ldr	r3, [pc, #36]	; (8001394 <MX_USART2_UART_Init+0x4c>)
 800136e:	220c      	movs	r2, #12
 8001370:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001372:	4b08      	ldr	r3, [pc, #32]	; (8001394 <MX_USART2_UART_Init+0x4c>)
 8001374:	2200      	movs	r2, #0
 8001376:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001378:	4b06      	ldr	r3, [pc, #24]	; (8001394 <MX_USART2_UART_Init+0x4c>)
 800137a:	2200      	movs	r2, #0
 800137c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800137e:	4805      	ldr	r0, [pc, #20]	; (8001394 <MX_USART2_UART_Init+0x4c>)
 8001380:	f003 fc84 	bl	8004c8c <HAL_UART_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800138a:	f000 f8d5 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20000330 	.word	0x20000330
 8001398:	40004400 	.word	0x40004400

0800139c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	607b      	str	r3, [r7, #4]
 80013a6:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <MX_DMA_Init+0x3c>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	4a0b      	ldr	r2, [pc, #44]	; (80013d8 <MX_DMA_Init+0x3c>)
 80013ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013b0:	6313      	str	r3, [r2, #48]	; 0x30
 80013b2:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <MX_DMA_Init+0x3c>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013ba:	607b      	str	r3, [r7, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80013be:	2200      	movs	r2, #0
 80013c0:	2100      	movs	r1, #0
 80013c2:	2010      	movs	r0, #16
 80013c4:	f000 fce1 	bl	8001d8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80013c8:	2010      	movs	r0, #16
 80013ca:	f000 fcfa 	bl	8001dc2 <HAL_NVIC_EnableIRQ>

}
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40023800 	.word	0x40023800

080013dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e2:	1d3b      	adds	r3, r7, #4
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f0:	2300      	movs	r3, #0
 80013f2:	603b      	str	r3, [r7, #0]
 80013f4:	4b10      	ldr	r3, [pc, #64]	; (8001438 <MX_GPIO_Init+0x5c>)
 80013f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f8:	4a0f      	ldr	r2, [pc, #60]	; (8001438 <MX_GPIO_Init+0x5c>)
 80013fa:	f043 0301 	orr.w	r3, r3, #1
 80013fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001400:	4b0d      	ldr	r3, [pc, #52]	; (8001438 <MX_GPIO_Init+0x5c>)
 8001402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001404:	f003 0301 	and.w	r3, r3, #1
 8001408:	603b      	str	r3, [r7, #0]
 800140a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800140c:	2200      	movs	r2, #0
 800140e:	2120      	movs	r1, #32
 8001410:	480a      	ldr	r0, [pc, #40]	; (800143c <MX_GPIO_Init+0x60>)
 8001412:	f001 fa07 	bl	8002824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001416:	2320      	movs	r3, #32
 8001418:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141a:	2301      	movs	r3, #1
 800141c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001422:	2300      	movs	r3, #0
 8001424:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001426:	1d3b      	adds	r3, r7, #4
 8001428:	4619      	mov	r1, r3
 800142a:	4804      	ldr	r0, [pc, #16]	; (800143c <MX_GPIO_Init+0x60>)
 800142c:	f001 f876 	bl	800251c <HAL_GPIO_Init>

}
 8001430:	bf00      	nop
 8001432:	3718      	adds	r7, #24
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40023800 	.word	0x40023800
 800143c:	40020000 	.word	0x40020000

08001440 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]

	capture_done++;
 8001448:	4b06      	ldr	r3, [pc, #24]	; (8001464 <HAL_TIM_IC_CaptureCallback+0x24>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	b2db      	uxtb	r3, r3
 800144e:	3301      	adds	r3, #1
 8001450:	b2da      	uxtb	r2, r3
 8001452:	4b04      	ldr	r3, [pc, #16]	; (8001464 <HAL_TIM_IC_CaptureCallback+0x24>)
 8001454:	701a      	strb	r2, [r3, #0]

}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	20000380 	.word	0x20000380

08001468 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim){
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
	volatile uint32_t pulse;
	volatile uint16_t arr = __HAL_TIM_GET_AUTORELOAD(htim);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001476:	b29b      	uxth	r3, r3
 8001478:	817b      	strh	r3, [r7, #10]

	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	7f1b      	ldrb	r3, [r3, #28]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d126      	bne.n	80014d0 <HAL_TIM_OC_DelayElapsedCallback+0x68>
	{
		pulse = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001482:	2100      	movs	r1, #0
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f002 fe3d 	bl	8004104 <HAL_TIM_ReadCapturedValue>
 800148a:	4603      	mov	r3, r0
 800148c:	60fb      	str	r3, [r7, #12]
		if((pulse + CH1_FREQ)<arr){
 800148e:	4b28      	ldr	r3, [pc, #160]	; (8001530 <HAL_TIM_OC_DelayElapsedCallback+0xc8>)
 8001490:	881b      	ldrh	r3, [r3, #0]
 8001492:	b29b      	uxth	r3, r3
 8001494:	461a      	mov	r2, r3
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	4413      	add	r3, r2
 800149a:	897a      	ldrh	r2, [r7, #10]
 800149c:	b292      	uxth	r2, r2
 800149e:	4293      	cmp	r3, r2
 80014a0:	d209      	bcs.n	80014b6 <HAL_TIM_OC_DelayElapsedCallback+0x4e>
			__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, (pulse + CH1_FREQ));
 80014a2:	4b23      	ldr	r3, [pc, #140]	; (8001530 <HAL_TIM_OC_DelayElapsedCallback+0xc8>)
 80014a4:	881b      	ldrh	r3, [r3, #0]
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	4619      	mov	r1, r3
 80014aa:	68fa      	ldr	r2, [r7, #12]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	440a      	add	r2, r1
 80014b2:	635a      	str	r2, [r3, #52]	; 0x34
 80014b4:	e00c      	b.n	80014d0 <HAL_TIM_OC_DelayElapsedCallback+0x68>
		}
		else
		{
			__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, (pulse + CH1_FREQ) - arr);
 80014b6:	4b1e      	ldr	r3, [pc, #120]	; (8001530 <HAL_TIM_OC_DelayElapsedCallback+0xc8>)
 80014b8:	881b      	ldrh	r3, [r3, #0]
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	461a      	mov	r2, r3
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	441a      	add	r2, r3
 80014c2:	897b      	ldrh	r3, [r7, #10]
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	4619      	mov	r1, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	1a52      	subs	r2, r2, r1
 80014ce:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}

	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	7f1b      	ldrb	r3, [r3, #28]
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d126      	bne.n	8001526 <HAL_TIM_OC_DelayElapsedCallback+0xbe>
		{
			pulse = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80014d8:	2104      	movs	r1, #4
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f002 fe12 	bl	8004104 <HAL_TIM_ReadCapturedValue>
 80014e0:	4603      	mov	r3, r0
 80014e2:	60fb      	str	r3, [r7, #12]
			if((pulse + CH2_FREQ)<arr){
 80014e4:	4b13      	ldr	r3, [pc, #76]	; (8001534 <HAL_TIM_OC_DelayElapsedCallback+0xcc>)
 80014e6:	881b      	ldrh	r3, [r3, #0]
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	461a      	mov	r2, r3
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	4413      	add	r3, r2
 80014f0:	897a      	ldrh	r2, [r7, #10]
 80014f2:	b292      	uxth	r2, r2
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d209      	bcs.n	800150c <HAL_TIM_OC_DelayElapsedCallback+0xa4>
				__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_2, (pulse + CH2_FREQ));
 80014f8:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <HAL_TIM_OC_DelayElapsedCallback+0xcc>)
 80014fa:	881b      	ldrh	r3, [r3, #0]
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	4619      	mov	r1, r3
 8001500:	68fa      	ldr	r2, [r7, #12]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	440a      	add	r2, r1
 8001508:	639a      	str	r2, [r3, #56]	; 0x38
		}




}
 800150a:	e00c      	b.n	8001526 <HAL_TIM_OC_DelayElapsedCallback+0xbe>
				__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_2, (pulse + CH2_FREQ) - arr);
 800150c:	4b09      	ldr	r3, [pc, #36]	; (8001534 <HAL_TIM_OC_DelayElapsedCallback+0xcc>)
 800150e:	881b      	ldrh	r3, [r3, #0]
 8001510:	b29b      	uxth	r3, r3
 8001512:	461a      	mov	r2, r3
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	441a      	add	r2, r3
 8001518:	897b      	ldrh	r3, [r7, #10]
 800151a:	b29b      	uxth	r3, r3
 800151c:	4619      	mov	r1, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	1a52      	subs	r2, r2, r1
 8001524:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001526:	bf00      	nop
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20000382 	.word	0x20000382
 8001534:	20000384 	.word	0x20000384

08001538 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800153c:	b672      	cpsid	i
}
 800153e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001540:	e7fe      	b.n	8001540 <Error_Handler+0x8>
	...

08001544 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	607b      	str	r3, [r7, #4]
 800154e:	4b10      	ldr	r3, [pc, #64]	; (8001590 <HAL_MspInit+0x4c>)
 8001550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001552:	4a0f      	ldr	r2, [pc, #60]	; (8001590 <HAL_MspInit+0x4c>)
 8001554:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001558:	6453      	str	r3, [r2, #68]	; 0x44
 800155a:	4b0d      	ldr	r3, [pc, #52]	; (8001590 <HAL_MspInit+0x4c>)
 800155c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001562:	607b      	str	r3, [r7, #4]
 8001564:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	603b      	str	r3, [r7, #0]
 800156a:	4b09      	ldr	r3, [pc, #36]	; (8001590 <HAL_MspInit+0x4c>)
 800156c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156e:	4a08      	ldr	r2, [pc, #32]	; (8001590 <HAL_MspInit+0x4c>)
 8001570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001574:	6413      	str	r3, [r2, #64]	; 0x40
 8001576:	4b06      	ldr	r3, [pc, #24]	; (8001590 <HAL_MspInit+0x4c>)
 8001578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800157e:	603b      	str	r3, [r7, #0]
 8001580:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001582:	bf00      	nop
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	40023800 	.word	0x40023800

08001594 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b08c      	sub	sp, #48	; 0x30
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159c:	f107 031c 	add.w	r3, r7, #28
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015b4:	d15e      	bne.n	8001674 <HAL_TIM_Base_MspInit+0xe0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	61bb      	str	r3, [r7, #24]
 80015ba:	4b4c      	ldr	r3, [pc, #304]	; (80016ec <HAL_TIM_Base_MspInit+0x158>)
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	4a4b      	ldr	r2, [pc, #300]	; (80016ec <HAL_TIM_Base_MspInit+0x158>)
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	6413      	str	r3, [r2, #64]	; 0x40
 80015c6:	4b49      	ldr	r3, [pc, #292]	; (80016ec <HAL_TIM_Base_MspInit+0x158>)
 80015c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	61bb      	str	r3, [r7, #24]
 80015d0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	617b      	str	r3, [r7, #20]
 80015d6:	4b45      	ldr	r3, [pc, #276]	; (80016ec <HAL_TIM_Base_MspInit+0x158>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	4a44      	ldr	r2, [pc, #272]	; (80016ec <HAL_TIM_Base_MspInit+0x158>)
 80015dc:	f043 0301 	orr.w	r3, r3, #1
 80015e0:	6313      	str	r3, [r2, #48]	; 0x30
 80015e2:	4b42      	ldr	r3, [pc, #264]	; (80016ec <HAL_TIM_Base_MspInit+0x158>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	617b      	str	r3, [r7, #20]
 80015ec:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015ee:	2301      	movs	r3, #1
 80015f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f2:	2302      	movs	r3, #2
 80015f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fa:	2300      	movs	r3, #0
 80015fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015fe:	2301      	movs	r3, #1
 8001600:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001602:	f107 031c 	add.w	r3, r7, #28
 8001606:	4619      	mov	r1, r3
 8001608:	4839      	ldr	r0, [pc, #228]	; (80016f0 <HAL_TIM_Base_MspInit+0x15c>)
 800160a:	f000 ff87 	bl	800251c <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 800160e:	4b39      	ldr	r3, [pc, #228]	; (80016f4 <HAL_TIM_Base_MspInit+0x160>)
 8001610:	4a39      	ldr	r2, [pc, #228]	; (80016f8 <HAL_TIM_Base_MspInit+0x164>)
 8001612:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 8001614:	4b37      	ldr	r3, [pc, #220]	; (80016f4 <HAL_TIM_Base_MspInit+0x160>)
 8001616:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800161a:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800161c:	4b35      	ldr	r3, [pc, #212]	; (80016f4 <HAL_TIM_Base_MspInit+0x160>)
 800161e:	2200      	movs	r2, #0
 8001620:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001622:	4b34      	ldr	r3, [pc, #208]	; (80016f4 <HAL_TIM_Base_MspInit+0x160>)
 8001624:	2200      	movs	r2, #0
 8001626:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001628:	4b32      	ldr	r3, [pc, #200]	; (80016f4 <HAL_TIM_Base_MspInit+0x160>)
 800162a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800162e:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001630:	4b30      	ldr	r3, [pc, #192]	; (80016f4 <HAL_TIM_Base_MspInit+0x160>)
 8001632:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001636:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001638:	4b2e      	ldr	r3, [pc, #184]	; (80016f4 <HAL_TIM_Base_MspInit+0x160>)
 800163a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800163e:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8001640:	4b2c      	ldr	r3, [pc, #176]	; (80016f4 <HAL_TIM_Base_MspInit+0x160>)
 8001642:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001646:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001648:	4b2a      	ldr	r3, [pc, #168]	; (80016f4 <HAL_TIM_Base_MspInit+0x160>)
 800164a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800164e:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001650:	4b28      	ldr	r3, [pc, #160]	; (80016f4 <HAL_TIM_Base_MspInit+0x160>)
 8001652:	2200      	movs	r2, #0
 8001654:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8001656:	4827      	ldr	r0, [pc, #156]	; (80016f4 <HAL_TIM_Base_MspInit+0x160>)
 8001658:	f000 fbce 	bl	8001df8 <HAL_DMA_Init>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <HAL_TIM_Base_MspInit+0xd2>
    {
      Error_Handler();
 8001662:	f7ff ff69 	bl	8001538 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4a22      	ldr	r2, [pc, #136]	; (80016f4 <HAL_TIM_Base_MspInit+0x160>)
 800166a:	625a      	str	r2, [r3, #36]	; 0x24
 800166c:	4a21      	ldr	r2, [pc, #132]	; (80016f4 <HAL_TIM_Base_MspInit+0x160>)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001672:	e036      	b.n	80016e2 <HAL_TIM_Base_MspInit+0x14e>
  else if(htim_base->Instance==TIM3)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a20      	ldr	r2, [pc, #128]	; (80016fc <HAL_TIM_Base_MspInit+0x168>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d116      	bne.n	80016ac <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	613b      	str	r3, [r7, #16]
 8001682:	4b1a      	ldr	r3, [pc, #104]	; (80016ec <HAL_TIM_Base_MspInit+0x158>)
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	4a19      	ldr	r2, [pc, #100]	; (80016ec <HAL_TIM_Base_MspInit+0x158>)
 8001688:	f043 0302 	orr.w	r3, r3, #2
 800168c:	6413      	str	r3, [r2, #64]	; 0x40
 800168e:	4b17      	ldr	r3, [pc, #92]	; (80016ec <HAL_TIM_Base_MspInit+0x158>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	613b      	str	r3, [r7, #16]
 8001698:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800169a:	2200      	movs	r2, #0
 800169c:	2100      	movs	r1, #0
 800169e:	201d      	movs	r0, #29
 80016a0:	f000 fb73 	bl	8001d8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80016a4:	201d      	movs	r0, #29
 80016a6:	f000 fb8c 	bl	8001dc2 <HAL_NVIC_EnableIRQ>
}
 80016aa:	e01a      	b.n	80016e2 <HAL_TIM_Base_MspInit+0x14e>
  else if(htim_base->Instance==TIM11)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a13      	ldr	r2, [pc, #76]	; (8001700 <HAL_TIM_Base_MspInit+0x16c>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d115      	bne.n	80016e2 <HAL_TIM_Base_MspInit+0x14e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	60fb      	str	r3, [r7, #12]
 80016ba:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <HAL_TIM_Base_MspInit+0x158>)
 80016bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016be:	4a0b      	ldr	r2, [pc, #44]	; (80016ec <HAL_TIM_Base_MspInit+0x158>)
 80016c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016c4:	6453      	str	r3, [r2, #68]	; 0x44
 80016c6:	4b09      	ldr	r3, [pc, #36]	; (80016ec <HAL_TIM_Base_MspInit+0x158>)
 80016c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80016d2:	2200      	movs	r2, #0
 80016d4:	2100      	movs	r1, #0
 80016d6:	201a      	movs	r0, #26
 80016d8:	f000 fb57 	bl	8001d8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80016dc:	201a      	movs	r0, #26
 80016de:	f000 fb70 	bl	8001dc2 <HAL_NVIC_EnableIRQ>
}
 80016e2:	bf00      	nop
 80016e4:	3730      	adds	r7, #48	; 0x30
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40023800 	.word	0x40023800
 80016f0:	40020000 	.word	0x40020000
 80016f4:	200002d0 	.word	0x200002d0
 80016f8:	40026088 	.word	0x40026088
 80016fc:	40000400 	.word	0x40000400
 8001700:	40014800 	.word	0x40014800

08001704 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b088      	sub	sp, #32
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170c:	f107 030c 	add.w	r3, r7, #12
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	60da      	str	r2, [r3, #12]
 800171a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a12      	ldr	r2, [pc, #72]	; (800176c <HAL_TIM_MspPostInit+0x68>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d11d      	bne.n	8001762 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	60bb      	str	r3, [r7, #8]
 800172a:	4b11      	ldr	r3, [pc, #68]	; (8001770 <HAL_TIM_MspPostInit+0x6c>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	4a10      	ldr	r2, [pc, #64]	; (8001770 <HAL_TIM_MspPostInit+0x6c>)
 8001730:	f043 0301 	orr.w	r3, r3, #1
 8001734:	6313      	str	r3, [r2, #48]	; 0x30
 8001736:	4b0e      	ldr	r3, [pc, #56]	; (8001770 <HAL_TIM_MspPostInit+0x6c>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	60bb      	str	r3, [r7, #8]
 8001740:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001742:	23c0      	movs	r3, #192	; 0xc0
 8001744:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001746:	2302      	movs	r3, #2
 8001748:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	2300      	movs	r3, #0
 800174c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174e:	2300      	movs	r3, #0
 8001750:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001752:	2302      	movs	r3, #2
 8001754:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001756:	f107 030c 	add.w	r3, r7, #12
 800175a:	4619      	mov	r1, r3
 800175c:	4805      	ldr	r0, [pc, #20]	; (8001774 <HAL_TIM_MspPostInit+0x70>)
 800175e:	f000 fedd 	bl	800251c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001762:	bf00      	nop
 8001764:	3720      	adds	r7, #32
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40000400 	.word	0x40000400
 8001770:	40023800 	.word	0x40023800
 8001774:	40020000 	.word	0x40020000

08001778 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b08a      	sub	sp, #40	; 0x28
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001780:	f107 0314 	add.w	r3, r7, #20
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	605a      	str	r2, [r3, #4]
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	60da      	str	r2, [r3, #12]
 800178e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a19      	ldr	r2, [pc, #100]	; (80017fc <HAL_UART_MspInit+0x84>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d12b      	bne.n	80017f2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	613b      	str	r3, [r7, #16]
 800179e:	4b18      	ldr	r3, [pc, #96]	; (8001800 <HAL_UART_MspInit+0x88>)
 80017a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a2:	4a17      	ldr	r2, [pc, #92]	; (8001800 <HAL_UART_MspInit+0x88>)
 80017a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017a8:	6413      	str	r3, [r2, #64]	; 0x40
 80017aa:	4b15      	ldr	r3, [pc, #84]	; (8001800 <HAL_UART_MspInit+0x88>)
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b2:	613b      	str	r3, [r7, #16]
 80017b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	4b11      	ldr	r3, [pc, #68]	; (8001800 <HAL_UART_MspInit+0x88>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	4a10      	ldr	r2, [pc, #64]	; (8001800 <HAL_UART_MspInit+0x88>)
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	6313      	str	r3, [r2, #48]	; 0x30
 80017c6:	4b0e      	ldr	r3, [pc, #56]	; (8001800 <HAL_UART_MspInit+0x88>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017d2:	230c      	movs	r3, #12
 80017d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d6:	2302      	movs	r3, #2
 80017d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017de:	2303      	movs	r3, #3
 80017e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017e2:	2307      	movs	r3, #7
 80017e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e6:	f107 0314 	add.w	r3, r7, #20
 80017ea:	4619      	mov	r1, r3
 80017ec:	4805      	ldr	r0, [pc, #20]	; (8001804 <HAL_UART_MspInit+0x8c>)
 80017ee:	f000 fe95 	bl	800251c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017f2:	bf00      	nop
 80017f4:	3728      	adds	r7, #40	; 0x28
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40004400 	.word	0x40004400
 8001800:	40023800 	.word	0x40023800
 8001804:	40020000 	.word	0x40020000

08001808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800180c:	e7fe      	b.n	800180c <NMI_Handler+0x4>

0800180e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800180e:	b480      	push	{r7}
 8001810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001812:	e7fe      	b.n	8001812 <HardFault_Handler+0x4>

08001814 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001818:	e7fe      	b.n	8001818 <MemManage_Handler+0x4>

0800181a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800181a:	b480      	push	{r7}
 800181c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800181e:	e7fe      	b.n	800181e <BusFault_Handler+0x4>

08001820 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001824:	e7fe      	b.n	8001824 <UsageFault_Handler+0x4>

08001826 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001826:	b480      	push	{r7}
 8001828:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001842:	b480      	push	{r7}
 8001844:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001854:	f000 f97a 	bl	8001b4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001858:	bf00      	nop
 800185a:	bd80      	pop	{r7, pc}

0800185c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8001860:	4802      	ldr	r0, [pc, #8]	; (800186c <DMA1_Stream5_IRQHandler+0x10>)
 8001862:	f000 fbf1 	bl	8002048 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	200002d0 	.word	0x200002d0

08001870 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */
 HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001874:	2120      	movs	r1, #32
 8001876:	4804      	ldr	r0, [pc, #16]	; (8001888 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8001878:	f000 ffed 	bl	8002856 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 800187c:	4803      	ldr	r0, [pc, #12]	; (800188c <TIM1_TRG_COM_TIM11_IRQHandler+0x1c>)
 800187e:	f002 f979 	bl	8003b74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40020000 	.word	0x40020000
 800188c:	20000288 	.word	0x20000288

08001890 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001894:	4802      	ldr	r0, [pc, #8]	; (80018a0 <TIM3_IRQHandler+0x10>)
 8001896:	f002 f96d 	bl	8003b74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	20000240 	.word	0x20000240

080018a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  return 1;
 80018a8:	2301      	movs	r3, #1
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <_kill>:

int _kill(int pid, int sig)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018be:	f003 fda7 	bl	8005410 <__errno>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2216      	movs	r2, #22
 80018c6:	601a      	str	r2, [r3, #0]
  return -1;
 80018c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <_exit>:

void _exit (int status)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018dc:	f04f 31ff 	mov.w	r1, #4294967295
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f7ff ffe7 	bl	80018b4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018e6:	e7fe      	b.n	80018e6 <_exit+0x12>

080018e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f4:	2300      	movs	r3, #0
 80018f6:	617b      	str	r3, [r7, #20]
 80018f8:	e00a      	b.n	8001910 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018fa:	f3af 8000 	nop.w
 80018fe:	4601      	mov	r1, r0
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	1c5a      	adds	r2, r3, #1
 8001904:	60ba      	str	r2, [r7, #8]
 8001906:	b2ca      	uxtb	r2, r1
 8001908:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	3301      	adds	r3, #1
 800190e:	617b      	str	r3, [r7, #20]
 8001910:	697a      	ldr	r2, [r7, #20]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	429a      	cmp	r2, r3
 8001916:	dbf0      	blt.n	80018fa <_read+0x12>
  }

  return len;
 8001918:	687b      	ldr	r3, [r7, #4]
}
 800191a:	4618      	mov	r0, r3
 800191c:	3718      	adds	r7, #24
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b086      	sub	sp, #24
 8001926:	af00      	add	r7, sp, #0
 8001928:	60f8      	str	r0, [r7, #12]
 800192a:	60b9      	str	r1, [r7, #8]
 800192c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800192e:	2300      	movs	r3, #0
 8001930:	617b      	str	r3, [r7, #20]
 8001932:	e009      	b.n	8001948 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	1c5a      	adds	r2, r3, #1
 8001938:	60ba      	str	r2, [r7, #8]
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	4618      	mov	r0, r3
 800193e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	3301      	adds	r3, #1
 8001946:	617b      	str	r3, [r7, #20]
 8001948:	697a      	ldr	r2, [r7, #20]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	429a      	cmp	r2, r3
 800194e:	dbf1      	blt.n	8001934 <_write+0x12>
  }
  return len;
 8001950:	687b      	ldr	r3, [r7, #4]
}
 8001952:	4618      	mov	r0, r3
 8001954:	3718      	adds	r7, #24
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <_close>:

int _close(int file)
{
 800195a:	b480      	push	{r7}
 800195c:	b083      	sub	sp, #12
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001962:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001966:	4618      	mov	r0, r3
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001972:	b480      	push	{r7}
 8001974:	b083      	sub	sp, #12
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
 800197a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001982:	605a      	str	r2, [r3, #4]
  return 0;
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr

08001992 <_isatty>:

int _isatty(int file)
{
 8001992:	b480      	push	{r7}
 8001994:	b083      	sub	sp, #12
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800199a:	2301      	movs	r3, #1
}
 800199c:	4618      	mov	r0, r3
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	60b9      	str	r1, [r7, #8]
 80019b2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3714      	adds	r7, #20
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
	...

080019c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b086      	sub	sp, #24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019cc:	4a14      	ldr	r2, [pc, #80]	; (8001a20 <_sbrk+0x5c>)
 80019ce:	4b15      	ldr	r3, [pc, #84]	; (8001a24 <_sbrk+0x60>)
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019d8:	4b13      	ldr	r3, [pc, #76]	; (8001a28 <_sbrk+0x64>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d102      	bne.n	80019e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019e0:	4b11      	ldr	r3, [pc, #68]	; (8001a28 <_sbrk+0x64>)
 80019e2:	4a12      	ldr	r2, [pc, #72]	; (8001a2c <_sbrk+0x68>)
 80019e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019e6:	4b10      	ldr	r3, [pc, #64]	; (8001a28 <_sbrk+0x64>)
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4413      	add	r3, r2
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d207      	bcs.n	8001a04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019f4:	f003 fd0c 	bl	8005410 <__errno>
 80019f8:	4603      	mov	r3, r0
 80019fa:	220c      	movs	r2, #12
 80019fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001a02:	e009      	b.n	8001a18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a04:	4b08      	ldr	r3, [pc, #32]	; (8001a28 <_sbrk+0x64>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a0a:	4b07      	ldr	r3, [pc, #28]	; (8001a28 <_sbrk+0x64>)
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4413      	add	r3, r2
 8001a12:	4a05      	ldr	r2, [pc, #20]	; (8001a28 <_sbrk+0x64>)
 8001a14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a16:	68fb      	ldr	r3, [r7, #12]
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3718      	adds	r7, #24
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	20018000 	.word	0x20018000
 8001a24:	00000400 	.word	0x00000400
 8001a28:	200003bc 	.word	0x200003bc
 8001a2c:	200003d8 	.word	0x200003d8

08001a30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a34:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <SystemInit+0x20>)
 8001a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a3a:	4a05      	ldr	r2, [pc, #20]	; (8001a50 <SystemInit+0x20>)
 8001a3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a44:	bf00      	nop
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	e000ed00 	.word	0xe000ed00

08001a54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a58:	480d      	ldr	r0, [pc, #52]	; (8001a90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a5a:	490e      	ldr	r1, [pc, #56]	; (8001a94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a5c:	4a0e      	ldr	r2, [pc, #56]	; (8001a98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a60:	e002      	b.n	8001a68 <LoopCopyDataInit>

08001a62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a66:	3304      	adds	r3, #4

08001a68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a6c:	d3f9      	bcc.n	8001a62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a6e:	4a0b      	ldr	r2, [pc, #44]	; (8001a9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a70:	4c0b      	ldr	r4, [pc, #44]	; (8001aa0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a74:	e001      	b.n	8001a7a <LoopFillZerobss>

08001a76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a78:	3204      	adds	r2, #4

08001a7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a7c:	d3fb      	bcc.n	8001a76 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a7e:	f7ff ffd7 	bl	8001a30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a82:	f003 fccb 	bl	800541c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a86:	f7ff fa19 	bl	8000ebc <main>
  bx  lr    
 8001a8a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a8c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001a90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a94:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001a98:	08008674 	.word	0x08008674
  ldr r2, =_sbss
 8001a9c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001aa0:	200003d4 	.word	0x200003d4

08001aa4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001aa4:	e7fe      	b.n	8001aa4 <ADC_IRQHandler>
	...

08001aa8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001aac:	4b0e      	ldr	r3, [pc, #56]	; (8001ae8 <HAL_Init+0x40>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a0d      	ldr	r2, [pc, #52]	; (8001ae8 <HAL_Init+0x40>)
 8001ab2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ab6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ab8:	4b0b      	ldr	r3, [pc, #44]	; (8001ae8 <HAL_Init+0x40>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a0a      	ldr	r2, [pc, #40]	; (8001ae8 <HAL_Init+0x40>)
 8001abe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ac2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ac4:	4b08      	ldr	r3, [pc, #32]	; (8001ae8 <HAL_Init+0x40>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a07      	ldr	r2, [pc, #28]	; (8001ae8 <HAL_Init+0x40>)
 8001aca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ace:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ad0:	2003      	movs	r0, #3
 8001ad2:	f000 f94f 	bl	8001d74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ad6:	200f      	movs	r0, #15
 8001ad8:	f000 f808 	bl	8001aec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001adc:	f7ff fd32 	bl	8001544 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40023c00 	.word	0x40023c00

08001aec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001af4:	4b12      	ldr	r3, [pc, #72]	; (8001b40 <HAL_InitTick+0x54>)
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	4b12      	ldr	r3, [pc, #72]	; (8001b44 <HAL_InitTick+0x58>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	4619      	mov	r1, r3
 8001afe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f000 f967 	bl	8001dde <HAL_SYSTICK_Config>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e00e      	b.n	8001b38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2b0f      	cmp	r3, #15
 8001b1e:	d80a      	bhi.n	8001b36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b20:	2200      	movs	r2, #0
 8001b22:	6879      	ldr	r1, [r7, #4]
 8001b24:	f04f 30ff 	mov.w	r0, #4294967295
 8001b28:	f000 f92f 	bl	8001d8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b2c:	4a06      	ldr	r2, [pc, #24]	; (8001b48 <HAL_InitTick+0x5c>)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b32:	2300      	movs	r3, #0
 8001b34:	e000      	b.n	8001b38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	20000000 	.word	0x20000000
 8001b44:	20000008 	.word	0x20000008
 8001b48:	20000004 	.word	0x20000004

08001b4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b50:	4b06      	ldr	r3, [pc, #24]	; (8001b6c <HAL_IncTick+0x20>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	461a      	mov	r2, r3
 8001b56:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <HAL_IncTick+0x24>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	4a04      	ldr	r2, [pc, #16]	; (8001b70 <HAL_IncTick+0x24>)
 8001b5e:	6013      	str	r3, [r2, #0]
}
 8001b60:	bf00      	nop
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	20000008 	.word	0x20000008
 8001b70:	200003c0 	.word	0x200003c0

08001b74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  return uwTick;
 8001b78:	4b03      	ldr	r3, [pc, #12]	; (8001b88 <HAL_GetTick+0x14>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	200003c0 	.word	0x200003c0

08001b8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b94:	f7ff ffee 	bl	8001b74 <HAL_GetTick>
 8001b98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ba4:	d005      	beq.n	8001bb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ba6:	4b0a      	ldr	r3, [pc, #40]	; (8001bd0 <HAL_Delay+0x44>)
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	461a      	mov	r2, r3
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	4413      	add	r3, r2
 8001bb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bb2:	bf00      	nop
 8001bb4:	f7ff ffde 	bl	8001b74 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	68fa      	ldr	r2, [r7, #12]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d8f7      	bhi.n	8001bb4 <HAL_Delay+0x28>
  {
  }
}
 8001bc4:	bf00      	nop
 8001bc6:	bf00      	nop
 8001bc8:	3710      	adds	r7, #16
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	20000008 	.word	0x20000008

08001bd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f003 0307 	and.w	r3, r3, #7
 8001be2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001be4:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <__NVIC_SetPriorityGrouping+0x44>)
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bea:	68ba      	ldr	r2, [r7, #8]
 8001bec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c06:	4a04      	ldr	r2, [pc, #16]	; (8001c18 <__NVIC_SetPriorityGrouping+0x44>)
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	60d3      	str	r3, [r2, #12]
}
 8001c0c:	bf00      	nop
 8001c0e:	3714      	adds	r7, #20
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr
 8001c18:	e000ed00 	.word	0xe000ed00

08001c1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c20:	4b04      	ldr	r3, [pc, #16]	; (8001c34 <__NVIC_GetPriorityGrouping+0x18>)
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	0a1b      	lsrs	r3, r3, #8
 8001c26:	f003 0307 	and.w	r3, r3, #7
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr
 8001c34:	e000ed00 	.word	0xe000ed00

08001c38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	db0b      	blt.n	8001c62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c4a:	79fb      	ldrb	r3, [r7, #7]
 8001c4c:	f003 021f 	and.w	r2, r3, #31
 8001c50:	4907      	ldr	r1, [pc, #28]	; (8001c70 <__NVIC_EnableIRQ+0x38>)
 8001c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c56:	095b      	lsrs	r3, r3, #5
 8001c58:	2001      	movs	r0, #1
 8001c5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	e000e100 	.word	0xe000e100

08001c74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	6039      	str	r1, [r7, #0]
 8001c7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	db0a      	blt.n	8001c9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	b2da      	uxtb	r2, r3
 8001c8c:	490c      	ldr	r1, [pc, #48]	; (8001cc0 <__NVIC_SetPriority+0x4c>)
 8001c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c92:	0112      	lsls	r2, r2, #4
 8001c94:	b2d2      	uxtb	r2, r2
 8001c96:	440b      	add	r3, r1
 8001c98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c9c:	e00a      	b.n	8001cb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	b2da      	uxtb	r2, r3
 8001ca2:	4908      	ldr	r1, [pc, #32]	; (8001cc4 <__NVIC_SetPriority+0x50>)
 8001ca4:	79fb      	ldrb	r3, [r7, #7]
 8001ca6:	f003 030f 	and.w	r3, r3, #15
 8001caa:	3b04      	subs	r3, #4
 8001cac:	0112      	lsls	r2, r2, #4
 8001cae:	b2d2      	uxtb	r2, r2
 8001cb0:	440b      	add	r3, r1
 8001cb2:	761a      	strb	r2, [r3, #24]
}
 8001cb4:	bf00      	nop
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	e000e100 	.word	0xe000e100
 8001cc4:	e000ed00 	.word	0xe000ed00

08001cc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b089      	sub	sp, #36	; 0x24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f003 0307 	and.w	r3, r3, #7
 8001cda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	f1c3 0307 	rsb	r3, r3, #7
 8001ce2:	2b04      	cmp	r3, #4
 8001ce4:	bf28      	it	cs
 8001ce6:	2304      	movcs	r3, #4
 8001ce8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	3304      	adds	r3, #4
 8001cee:	2b06      	cmp	r3, #6
 8001cf0:	d902      	bls.n	8001cf8 <NVIC_EncodePriority+0x30>
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	3b03      	subs	r3, #3
 8001cf6:	e000      	b.n	8001cfa <NVIC_EncodePriority+0x32>
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	43da      	mvns	r2, r3
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	401a      	ands	r2, r3
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d10:	f04f 31ff 	mov.w	r1, #4294967295
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	fa01 f303 	lsl.w	r3, r1, r3
 8001d1a:	43d9      	mvns	r1, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d20:	4313      	orrs	r3, r2
         );
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3724      	adds	r7, #36	; 0x24
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
	...

08001d30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d40:	d301      	bcc.n	8001d46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d42:	2301      	movs	r3, #1
 8001d44:	e00f      	b.n	8001d66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d46:	4a0a      	ldr	r2, [pc, #40]	; (8001d70 <SysTick_Config+0x40>)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d4e:	210f      	movs	r1, #15
 8001d50:	f04f 30ff 	mov.w	r0, #4294967295
 8001d54:	f7ff ff8e 	bl	8001c74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d58:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <SysTick_Config+0x40>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d5e:	4b04      	ldr	r3, [pc, #16]	; (8001d70 <SysTick_Config+0x40>)
 8001d60:	2207      	movs	r2, #7
 8001d62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	e000e010 	.word	0xe000e010

08001d74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f7ff ff29 	bl	8001bd4 <__NVIC_SetPriorityGrouping>
}
 8001d82:	bf00      	nop
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b086      	sub	sp, #24
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	4603      	mov	r3, r0
 8001d92:	60b9      	str	r1, [r7, #8]
 8001d94:	607a      	str	r2, [r7, #4]
 8001d96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d9c:	f7ff ff3e 	bl	8001c1c <__NVIC_GetPriorityGrouping>
 8001da0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	68b9      	ldr	r1, [r7, #8]
 8001da6:	6978      	ldr	r0, [r7, #20]
 8001da8:	f7ff ff8e 	bl	8001cc8 <NVIC_EncodePriority>
 8001dac:	4602      	mov	r2, r0
 8001dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001db2:	4611      	mov	r1, r2
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff ff5d 	bl	8001c74 <__NVIC_SetPriority>
}
 8001dba:	bf00      	nop
 8001dbc:	3718      	adds	r7, #24
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b082      	sub	sp, #8
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	4603      	mov	r3, r0
 8001dca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7ff ff31 	bl	8001c38 <__NVIC_EnableIRQ>
}
 8001dd6:	bf00      	nop
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b082      	sub	sp, #8
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f7ff ffa2 	bl	8001d30 <SysTick_Config>
 8001dec:	4603      	mov	r3, r0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
	...

08001df8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b086      	sub	sp, #24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e00:	2300      	movs	r3, #0
 8001e02:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e04:	f7ff feb6 	bl	8001b74 <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d101      	bne.n	8001e14 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e099      	b.n	8001f48 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2202      	movs	r2, #2
 8001e18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f022 0201 	bic.w	r2, r2, #1
 8001e32:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e34:	e00f      	b.n	8001e56 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e36:	f7ff fe9d 	bl	8001b74 <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b05      	cmp	r3, #5
 8001e42:	d908      	bls.n	8001e56 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2220      	movs	r2, #32
 8001e48:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2203      	movs	r2, #3
 8001e4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e078      	b.n	8001f48 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0301 	and.w	r3, r3, #1
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d1e8      	bne.n	8001e36 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e6c:	697a      	ldr	r2, [r7, #20]
 8001e6e:	4b38      	ldr	r3, [pc, #224]	; (8001f50 <HAL_DMA_Init+0x158>)
 8001e70:	4013      	ands	r3, r2
 8001e72:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685a      	ldr	r2, [r3, #4]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e82:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	691b      	ldr	r3, [r3, #16]
 8001e88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a1b      	ldr	r3, [r3, #32]
 8001ea0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eac:	2b04      	cmp	r3, #4
 8001eae:	d107      	bne.n	8001ec0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	697a      	ldr	r2, [r7, #20]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	697a      	ldr	r2, [r7, #20]
 8001ec6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	695b      	ldr	r3, [r3, #20]
 8001ece:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	f023 0307 	bic.w	r3, r3, #7
 8001ed6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001edc:	697a      	ldr	r2, [r7, #20]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee6:	2b04      	cmp	r3, #4
 8001ee8:	d117      	bne.n	8001f1a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eee:	697a      	ldr	r2, [r7, #20]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d00e      	beq.n	8001f1a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f000 fa91 	bl	8002424 <DMA_CheckFifoParam>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d008      	beq.n	8001f1a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2240      	movs	r2, #64	; 0x40
 8001f0c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2201      	movs	r2, #1
 8001f12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f16:	2301      	movs	r3, #1
 8001f18:	e016      	b.n	8001f48 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	697a      	ldr	r2, [r7, #20]
 8001f20:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 fa48 	bl	80023b8 <DMA_CalcBaseAndBitshift>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f30:	223f      	movs	r2, #63	; 0x3f
 8001f32:	409a      	lsls	r2, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2201      	movs	r2, #1
 8001f42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3718      	adds	r7, #24
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	f010803f 	.word	0xf010803f

08001f54 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]
 8001f60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f62:	2300      	movs	r3, #0
 8001f64:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f6a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d101      	bne.n	8001f7a <HAL_DMA_Start_IT+0x26>
 8001f76:	2302      	movs	r3, #2
 8001f78:	e040      	b.n	8001ffc <HAL_DMA_Start_IT+0xa8>
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d12f      	bne.n	8001fee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2202      	movs	r2, #2
 8001f92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	68b9      	ldr	r1, [r7, #8]
 8001fa2:	68f8      	ldr	r0, [r7, #12]
 8001fa4:	f000 f9da 	bl	800235c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fac:	223f      	movs	r2, #63	; 0x3f
 8001fae:	409a      	lsls	r2, r3
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f042 0216 	orr.w	r2, r2, #22
 8001fc2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d007      	beq.n	8001fdc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f042 0208 	orr.w	r2, r2, #8
 8001fda:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f042 0201 	orr.w	r2, r2, #1
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	e005      	b.n	8001ffa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001ffa:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3718      	adds	r7, #24
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002012:	b2db      	uxtb	r3, r3
 8002014:	2b02      	cmp	r3, #2
 8002016:	d004      	beq.n	8002022 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2280      	movs	r2, #128	; 0x80
 800201c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e00c      	b.n	800203c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2205      	movs	r2, #5
 8002026:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f022 0201 	bic.w	r2, r2, #1
 8002038:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800203a:	2300      	movs	r3, #0
}
 800203c:	4618      	mov	r0, r3
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002050:	2300      	movs	r3, #0
 8002052:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002054:	4b8e      	ldr	r3, [pc, #568]	; (8002290 <HAL_DMA_IRQHandler+0x248>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a8e      	ldr	r2, [pc, #568]	; (8002294 <HAL_DMA_IRQHandler+0x24c>)
 800205a:	fba2 2303 	umull	r2, r3, r2, r3
 800205e:	0a9b      	lsrs	r3, r3, #10
 8002060:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002066:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002072:	2208      	movs	r2, #8
 8002074:	409a      	lsls	r2, r3
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	4013      	ands	r3, r2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d01a      	beq.n	80020b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0304 	and.w	r3, r3, #4
 8002088:	2b00      	cmp	r3, #0
 800208a:	d013      	beq.n	80020b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f022 0204 	bic.w	r2, r2, #4
 800209a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a0:	2208      	movs	r2, #8
 80020a2:	409a      	lsls	r2, r3
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ac:	f043 0201 	orr.w	r2, r3, #1
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020b8:	2201      	movs	r2, #1
 80020ba:	409a      	lsls	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	4013      	ands	r3, r2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d012      	beq.n	80020ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	695b      	ldr	r3, [r3, #20]
 80020ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d00b      	beq.n	80020ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d6:	2201      	movs	r2, #1
 80020d8:	409a      	lsls	r2, r3
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e2:	f043 0202 	orr.w	r2, r3, #2
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ee:	2204      	movs	r2, #4
 80020f0:	409a      	lsls	r2, r3
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	4013      	ands	r3, r2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d012      	beq.n	8002120 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d00b      	beq.n	8002120 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800210c:	2204      	movs	r2, #4
 800210e:	409a      	lsls	r2, r3
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002118:	f043 0204 	orr.w	r2, r3, #4
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002124:	2210      	movs	r2, #16
 8002126:	409a      	lsls	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	4013      	ands	r3, r2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d043      	beq.n	80021b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0308 	and.w	r3, r3, #8
 800213a:	2b00      	cmp	r3, #0
 800213c:	d03c      	beq.n	80021b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002142:	2210      	movs	r2, #16
 8002144:	409a      	lsls	r2, r3
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d018      	beq.n	800218a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d108      	bne.n	8002178 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	2b00      	cmp	r3, #0
 800216c:	d024      	beq.n	80021b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	4798      	blx	r3
 8002176:	e01f      	b.n	80021b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800217c:	2b00      	cmp	r3, #0
 800217e:	d01b      	beq.n	80021b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	4798      	blx	r3
 8002188:	e016      	b.n	80021b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002194:	2b00      	cmp	r3, #0
 8002196:	d107      	bne.n	80021a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f022 0208 	bic.w	r2, r2, #8
 80021a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d003      	beq.n	80021b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021bc:	2220      	movs	r2, #32
 80021be:	409a      	lsls	r2, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	4013      	ands	r3, r2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f000 808f 	beq.w	80022e8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0310 	and.w	r3, r3, #16
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	f000 8087 	beq.w	80022e8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021de:	2220      	movs	r2, #32
 80021e0:	409a      	lsls	r2, r3
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	2b05      	cmp	r3, #5
 80021f0:	d136      	bne.n	8002260 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f022 0216 	bic.w	r2, r2, #22
 8002200:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	695a      	ldr	r2, [r3, #20]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002210:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002216:	2b00      	cmp	r3, #0
 8002218:	d103      	bne.n	8002222 <HAL_DMA_IRQHandler+0x1da>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800221e:	2b00      	cmp	r3, #0
 8002220:	d007      	beq.n	8002232 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f022 0208 	bic.w	r2, r2, #8
 8002230:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002236:	223f      	movs	r2, #63	; 0x3f
 8002238:	409a      	lsls	r2, r3
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2201      	movs	r2, #1
 8002242:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002252:	2b00      	cmp	r3, #0
 8002254:	d07e      	beq.n	8002354 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	4798      	blx	r3
        }
        return;
 800225e:	e079      	b.n	8002354 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d01d      	beq.n	80022aa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d10d      	bne.n	8002298 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002280:	2b00      	cmp	r3, #0
 8002282:	d031      	beq.n	80022e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	4798      	blx	r3
 800228c:	e02c      	b.n	80022e8 <HAL_DMA_IRQHandler+0x2a0>
 800228e:	bf00      	nop
 8002290:	20000000 	.word	0x20000000
 8002294:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800229c:	2b00      	cmp	r3, #0
 800229e:	d023      	beq.n	80022e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	4798      	blx	r3
 80022a8:	e01e      	b.n	80022e8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d10f      	bne.n	80022d8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f022 0210 	bic.w	r2, r2, #16
 80022c6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d003      	beq.n	80022e8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d032      	beq.n	8002356 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f4:	f003 0301 	and.w	r3, r3, #1
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d022      	beq.n	8002342 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2205      	movs	r2, #5
 8002300:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f022 0201 	bic.w	r2, r2, #1
 8002312:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	3301      	adds	r3, #1
 8002318:	60bb      	str	r3, [r7, #8]
 800231a:	697a      	ldr	r2, [r7, #20]
 800231c:	429a      	cmp	r2, r3
 800231e:	d307      	bcc.n	8002330 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1f2      	bne.n	8002314 <HAL_DMA_IRQHandler+0x2cc>
 800232e:	e000      	b.n	8002332 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002330:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2201      	movs	r2, #1
 8002336:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002346:	2b00      	cmp	r3, #0
 8002348:	d005      	beq.n	8002356 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	4798      	blx	r3
 8002352:	e000      	b.n	8002356 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002354:	bf00      	nop
    }
  }
}
 8002356:	3718      	adds	r7, #24
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800235c:	b480      	push	{r7}
 800235e:	b085      	sub	sp, #20
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
 8002368:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002378:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	683a      	ldr	r2, [r7, #0]
 8002380:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	2b40      	cmp	r3, #64	; 0x40
 8002388:	d108      	bne.n	800239c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	68ba      	ldr	r2, [r7, #8]
 8002398:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800239a:	e007      	b.n	80023ac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68ba      	ldr	r2, [r7, #8]
 80023a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	60da      	str	r2, [r3, #12]
}
 80023ac:	bf00      	nop
 80023ae:	3714      	adds	r7, #20
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	3b10      	subs	r3, #16
 80023c8:	4a14      	ldr	r2, [pc, #80]	; (800241c <DMA_CalcBaseAndBitshift+0x64>)
 80023ca:	fba2 2303 	umull	r2, r3, r2, r3
 80023ce:	091b      	lsrs	r3, r3, #4
 80023d0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80023d2:	4a13      	ldr	r2, [pc, #76]	; (8002420 <DMA_CalcBaseAndBitshift+0x68>)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	4413      	add	r3, r2
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	461a      	mov	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2b03      	cmp	r3, #3
 80023e4:	d909      	bls.n	80023fa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80023ee:	f023 0303 	bic.w	r3, r3, #3
 80023f2:	1d1a      	adds	r2, r3, #4
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	659a      	str	r2, [r3, #88]	; 0x58
 80023f8:	e007      	b.n	800240a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002402:	f023 0303 	bic.w	r3, r3, #3
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800240e:	4618      	mov	r0, r3
 8002410:	3714      	adds	r7, #20
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	aaaaaaab 	.word	0xaaaaaaab
 8002420:	08008280 	.word	0x08008280

08002424 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002424:	b480      	push	{r7}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800242c:	2300      	movs	r3, #0
 800242e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002434:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d11f      	bne.n	800247e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	2b03      	cmp	r3, #3
 8002442:	d856      	bhi.n	80024f2 <DMA_CheckFifoParam+0xce>
 8002444:	a201      	add	r2, pc, #4	; (adr r2, 800244c <DMA_CheckFifoParam+0x28>)
 8002446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800244a:	bf00      	nop
 800244c:	0800245d 	.word	0x0800245d
 8002450:	0800246f 	.word	0x0800246f
 8002454:	0800245d 	.word	0x0800245d
 8002458:	080024f3 	.word	0x080024f3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002460:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d046      	beq.n	80024f6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800246c:	e043      	b.n	80024f6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002472:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002476:	d140      	bne.n	80024fa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800247c:	e03d      	b.n	80024fa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002486:	d121      	bne.n	80024cc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	2b03      	cmp	r3, #3
 800248c:	d837      	bhi.n	80024fe <DMA_CheckFifoParam+0xda>
 800248e:	a201      	add	r2, pc, #4	; (adr r2, 8002494 <DMA_CheckFifoParam+0x70>)
 8002490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002494:	080024a5 	.word	0x080024a5
 8002498:	080024ab 	.word	0x080024ab
 800249c:	080024a5 	.word	0x080024a5
 80024a0:	080024bd 	.word	0x080024bd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	73fb      	strb	r3, [r7, #15]
      break;
 80024a8:	e030      	b.n	800250c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d025      	beq.n	8002502 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024ba:	e022      	b.n	8002502 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80024c4:	d11f      	bne.n	8002506 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80024ca:	e01c      	b.n	8002506 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d903      	bls.n	80024da <DMA_CheckFifoParam+0xb6>
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	2b03      	cmp	r3, #3
 80024d6:	d003      	beq.n	80024e0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80024d8:	e018      	b.n	800250c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	73fb      	strb	r3, [r7, #15]
      break;
 80024de:	e015      	b.n	800250c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d00e      	beq.n	800250a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	73fb      	strb	r3, [r7, #15]
      break;
 80024f0:	e00b      	b.n	800250a <DMA_CheckFifoParam+0xe6>
      break;
 80024f2:	bf00      	nop
 80024f4:	e00a      	b.n	800250c <DMA_CheckFifoParam+0xe8>
      break;
 80024f6:	bf00      	nop
 80024f8:	e008      	b.n	800250c <DMA_CheckFifoParam+0xe8>
      break;
 80024fa:	bf00      	nop
 80024fc:	e006      	b.n	800250c <DMA_CheckFifoParam+0xe8>
      break;
 80024fe:	bf00      	nop
 8002500:	e004      	b.n	800250c <DMA_CheckFifoParam+0xe8>
      break;
 8002502:	bf00      	nop
 8002504:	e002      	b.n	800250c <DMA_CheckFifoParam+0xe8>
      break;   
 8002506:	bf00      	nop
 8002508:	e000      	b.n	800250c <DMA_CheckFifoParam+0xe8>
      break;
 800250a:	bf00      	nop
    }
  } 
  
  return status; 
 800250c:	7bfb      	ldrb	r3, [r7, #15]
}
 800250e:	4618      	mov	r0, r3
 8002510:	3714      	adds	r7, #20
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop

0800251c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800251c:	b480      	push	{r7}
 800251e:	b089      	sub	sp, #36	; 0x24
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002526:	2300      	movs	r3, #0
 8002528:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800252a:	2300      	movs	r3, #0
 800252c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800252e:	2300      	movs	r3, #0
 8002530:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002532:	2300      	movs	r3, #0
 8002534:	61fb      	str	r3, [r7, #28]
 8002536:	e159      	b.n	80027ec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002538:	2201      	movs	r2, #1
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	697a      	ldr	r2, [r7, #20]
 8002548:	4013      	ands	r3, r2
 800254a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	429a      	cmp	r2, r3
 8002552:	f040 8148 	bne.w	80027e6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f003 0303 	and.w	r3, r3, #3
 800255e:	2b01      	cmp	r3, #1
 8002560:	d005      	beq.n	800256e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800256a:	2b02      	cmp	r3, #2
 800256c:	d130      	bne.n	80025d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	2203      	movs	r2, #3
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	43db      	mvns	r3, r3
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	4013      	ands	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	68da      	ldr	r2, [r3, #12]
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	fa02 f303 	lsl.w	r3, r2, r3
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	4313      	orrs	r3, r2
 8002596:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025a4:	2201      	movs	r2, #1
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	43db      	mvns	r3, r3
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	4013      	ands	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	091b      	lsrs	r3, r3, #4
 80025ba:	f003 0201 	and.w	r2, r3, #1
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f003 0303 	and.w	r3, r3, #3
 80025d8:	2b03      	cmp	r3, #3
 80025da:	d017      	beq.n	800260c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	2203      	movs	r2, #3
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	43db      	mvns	r3, r3
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	4013      	ands	r3, r2
 80025f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	689a      	ldr	r2, [r3, #8]
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	4313      	orrs	r3, r2
 8002604:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f003 0303 	and.w	r3, r3, #3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d123      	bne.n	8002660 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	08da      	lsrs	r2, r3, #3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	3208      	adds	r2, #8
 8002620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002624:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	f003 0307 	and.w	r3, r3, #7
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	220f      	movs	r2, #15
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	43db      	mvns	r3, r3
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	4013      	ands	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	691a      	ldr	r2, [r3, #16]
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	f003 0307 	and.w	r3, r3, #7
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	4313      	orrs	r3, r2
 8002650:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	08da      	lsrs	r2, r3, #3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	3208      	adds	r2, #8
 800265a:	69b9      	ldr	r1, [r7, #24]
 800265c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	2203      	movs	r2, #3
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	43db      	mvns	r3, r3
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	4013      	ands	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f003 0203 	and.w	r2, r3, #3
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	4313      	orrs	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800269c:	2b00      	cmp	r3, #0
 800269e:	f000 80a2 	beq.w	80027e6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026a2:	2300      	movs	r3, #0
 80026a4:	60fb      	str	r3, [r7, #12]
 80026a6:	4b57      	ldr	r3, [pc, #348]	; (8002804 <HAL_GPIO_Init+0x2e8>)
 80026a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026aa:	4a56      	ldr	r2, [pc, #344]	; (8002804 <HAL_GPIO_Init+0x2e8>)
 80026ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026b0:	6453      	str	r3, [r2, #68]	; 0x44
 80026b2:	4b54      	ldr	r3, [pc, #336]	; (8002804 <HAL_GPIO_Init+0x2e8>)
 80026b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ba:	60fb      	str	r3, [r7, #12]
 80026bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026be:	4a52      	ldr	r2, [pc, #328]	; (8002808 <HAL_GPIO_Init+0x2ec>)
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	089b      	lsrs	r3, r3, #2
 80026c4:	3302      	adds	r3, #2
 80026c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	f003 0303 	and.w	r3, r3, #3
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	220f      	movs	r2, #15
 80026d6:	fa02 f303 	lsl.w	r3, r2, r3
 80026da:	43db      	mvns	r3, r3
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	4013      	ands	r3, r2
 80026e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a49      	ldr	r2, [pc, #292]	; (800280c <HAL_GPIO_Init+0x2f0>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d019      	beq.n	800271e <HAL_GPIO_Init+0x202>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a48      	ldr	r2, [pc, #288]	; (8002810 <HAL_GPIO_Init+0x2f4>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d013      	beq.n	800271a <HAL_GPIO_Init+0x1fe>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a47      	ldr	r2, [pc, #284]	; (8002814 <HAL_GPIO_Init+0x2f8>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d00d      	beq.n	8002716 <HAL_GPIO_Init+0x1fa>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a46      	ldr	r2, [pc, #280]	; (8002818 <HAL_GPIO_Init+0x2fc>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d007      	beq.n	8002712 <HAL_GPIO_Init+0x1f6>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a45      	ldr	r2, [pc, #276]	; (800281c <HAL_GPIO_Init+0x300>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d101      	bne.n	800270e <HAL_GPIO_Init+0x1f2>
 800270a:	2304      	movs	r3, #4
 800270c:	e008      	b.n	8002720 <HAL_GPIO_Init+0x204>
 800270e:	2307      	movs	r3, #7
 8002710:	e006      	b.n	8002720 <HAL_GPIO_Init+0x204>
 8002712:	2303      	movs	r3, #3
 8002714:	e004      	b.n	8002720 <HAL_GPIO_Init+0x204>
 8002716:	2302      	movs	r3, #2
 8002718:	e002      	b.n	8002720 <HAL_GPIO_Init+0x204>
 800271a:	2301      	movs	r3, #1
 800271c:	e000      	b.n	8002720 <HAL_GPIO_Init+0x204>
 800271e:	2300      	movs	r3, #0
 8002720:	69fa      	ldr	r2, [r7, #28]
 8002722:	f002 0203 	and.w	r2, r2, #3
 8002726:	0092      	lsls	r2, r2, #2
 8002728:	4093      	lsls	r3, r2
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	4313      	orrs	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002730:	4935      	ldr	r1, [pc, #212]	; (8002808 <HAL_GPIO_Init+0x2ec>)
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	089b      	lsrs	r3, r3, #2
 8002736:	3302      	adds	r3, #2
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800273e:	4b38      	ldr	r3, [pc, #224]	; (8002820 <HAL_GPIO_Init+0x304>)
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	43db      	mvns	r3, r3
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	4013      	ands	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d003      	beq.n	8002762 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	4313      	orrs	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002762:	4a2f      	ldr	r2, [pc, #188]	; (8002820 <HAL_GPIO_Init+0x304>)
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002768:	4b2d      	ldr	r3, [pc, #180]	; (8002820 <HAL_GPIO_Init+0x304>)
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	43db      	mvns	r3, r3
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	4013      	ands	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d003      	beq.n	800278c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	4313      	orrs	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800278c:	4a24      	ldr	r2, [pc, #144]	; (8002820 <HAL_GPIO_Init+0x304>)
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002792:	4b23      	ldr	r3, [pc, #140]	; (8002820 <HAL_GPIO_Init+0x304>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	43db      	mvns	r3, r3
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	4013      	ands	r3, r2
 80027a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d003      	beq.n	80027b6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027b6:	4a1a      	ldr	r2, [pc, #104]	; (8002820 <HAL_GPIO_Init+0x304>)
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027bc:	4b18      	ldr	r3, [pc, #96]	; (8002820 <HAL_GPIO_Init+0x304>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	43db      	mvns	r3, r3
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	4013      	ands	r3, r2
 80027ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d003      	beq.n	80027e0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	4313      	orrs	r3, r2
 80027de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027e0:	4a0f      	ldr	r2, [pc, #60]	; (8002820 <HAL_GPIO_Init+0x304>)
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	3301      	adds	r3, #1
 80027ea:	61fb      	str	r3, [r7, #28]
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	2b0f      	cmp	r3, #15
 80027f0:	f67f aea2 	bls.w	8002538 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027f4:	bf00      	nop
 80027f6:	bf00      	nop
 80027f8:	3724      	adds	r7, #36	; 0x24
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	40023800 	.word	0x40023800
 8002808:	40013800 	.word	0x40013800
 800280c:	40020000 	.word	0x40020000
 8002810:	40020400 	.word	0x40020400
 8002814:	40020800 	.word	0x40020800
 8002818:	40020c00 	.word	0x40020c00
 800281c:	40021000 	.word	0x40021000
 8002820:	40013c00 	.word	0x40013c00

08002824 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	460b      	mov	r3, r1
 800282e:	807b      	strh	r3, [r7, #2]
 8002830:	4613      	mov	r3, r2
 8002832:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002834:	787b      	ldrb	r3, [r7, #1]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d003      	beq.n	8002842 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800283a:	887a      	ldrh	r2, [r7, #2]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002840:	e003      	b.n	800284a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002842:	887b      	ldrh	r3, [r7, #2]
 8002844:	041a      	lsls	r2, r3, #16
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	619a      	str	r2, [r3, #24]
}
 800284a:	bf00      	nop
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr

08002856 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002856:	b480      	push	{r7}
 8002858:	b085      	sub	sp, #20
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
 800285e:	460b      	mov	r3, r1
 8002860:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002868:	887a      	ldrh	r2, [r7, #2]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	4013      	ands	r3, r2
 800286e:	041a      	lsls	r2, r3, #16
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	43d9      	mvns	r1, r3
 8002874:	887b      	ldrh	r3, [r7, #2]
 8002876:	400b      	ands	r3, r1
 8002878:	431a      	orrs	r2, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	619a      	str	r2, [r3, #24]
}
 800287e:	bf00      	nop
 8002880:	3714      	adds	r7, #20
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
	...

0800288c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e267      	b.n	8002d6e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d075      	beq.n	8002996 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028aa:	4b88      	ldr	r3, [pc, #544]	; (8002acc <HAL_RCC_OscConfig+0x240>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f003 030c 	and.w	r3, r3, #12
 80028b2:	2b04      	cmp	r3, #4
 80028b4:	d00c      	beq.n	80028d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028b6:	4b85      	ldr	r3, [pc, #532]	; (8002acc <HAL_RCC_OscConfig+0x240>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028be:	2b08      	cmp	r3, #8
 80028c0:	d112      	bne.n	80028e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028c2:	4b82      	ldr	r3, [pc, #520]	; (8002acc <HAL_RCC_OscConfig+0x240>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028ce:	d10b      	bne.n	80028e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028d0:	4b7e      	ldr	r3, [pc, #504]	; (8002acc <HAL_RCC_OscConfig+0x240>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d05b      	beq.n	8002994 <HAL_RCC_OscConfig+0x108>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d157      	bne.n	8002994 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e242      	b.n	8002d6e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028f0:	d106      	bne.n	8002900 <HAL_RCC_OscConfig+0x74>
 80028f2:	4b76      	ldr	r3, [pc, #472]	; (8002acc <HAL_RCC_OscConfig+0x240>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a75      	ldr	r2, [pc, #468]	; (8002acc <HAL_RCC_OscConfig+0x240>)
 80028f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028fc:	6013      	str	r3, [r2, #0]
 80028fe:	e01d      	b.n	800293c <HAL_RCC_OscConfig+0xb0>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002908:	d10c      	bne.n	8002924 <HAL_RCC_OscConfig+0x98>
 800290a:	4b70      	ldr	r3, [pc, #448]	; (8002acc <HAL_RCC_OscConfig+0x240>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a6f      	ldr	r2, [pc, #444]	; (8002acc <HAL_RCC_OscConfig+0x240>)
 8002910:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002914:	6013      	str	r3, [r2, #0]
 8002916:	4b6d      	ldr	r3, [pc, #436]	; (8002acc <HAL_RCC_OscConfig+0x240>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a6c      	ldr	r2, [pc, #432]	; (8002acc <HAL_RCC_OscConfig+0x240>)
 800291c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002920:	6013      	str	r3, [r2, #0]
 8002922:	e00b      	b.n	800293c <HAL_RCC_OscConfig+0xb0>
 8002924:	4b69      	ldr	r3, [pc, #420]	; (8002acc <HAL_RCC_OscConfig+0x240>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a68      	ldr	r2, [pc, #416]	; (8002acc <HAL_RCC_OscConfig+0x240>)
 800292a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800292e:	6013      	str	r3, [r2, #0]
 8002930:	4b66      	ldr	r3, [pc, #408]	; (8002acc <HAL_RCC_OscConfig+0x240>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a65      	ldr	r2, [pc, #404]	; (8002acc <HAL_RCC_OscConfig+0x240>)
 8002936:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800293a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d013      	beq.n	800296c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002944:	f7ff f916 	bl	8001b74 <HAL_GetTick>
 8002948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800294a:	e008      	b.n	800295e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800294c:	f7ff f912 	bl	8001b74 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b64      	cmp	r3, #100	; 0x64
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e207      	b.n	8002d6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800295e:	4b5b      	ldr	r3, [pc, #364]	; (8002acc <HAL_RCC_OscConfig+0x240>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d0f0      	beq.n	800294c <HAL_RCC_OscConfig+0xc0>
 800296a:	e014      	b.n	8002996 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800296c:	f7ff f902 	bl	8001b74 <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002972:	e008      	b.n	8002986 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002974:	f7ff f8fe 	bl	8001b74 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b64      	cmp	r3, #100	; 0x64
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e1f3      	b.n	8002d6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002986:	4b51      	ldr	r3, [pc, #324]	; (8002acc <HAL_RCC_OscConfig+0x240>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1f0      	bne.n	8002974 <HAL_RCC_OscConfig+0xe8>
 8002992:	e000      	b.n	8002996 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002994:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d063      	beq.n	8002a6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029a2:	4b4a      	ldr	r3, [pc, #296]	; (8002acc <HAL_RCC_OscConfig+0x240>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f003 030c 	and.w	r3, r3, #12
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00b      	beq.n	80029c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029ae:	4b47      	ldr	r3, [pc, #284]	; (8002acc <HAL_RCC_OscConfig+0x240>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029b6:	2b08      	cmp	r3, #8
 80029b8:	d11c      	bne.n	80029f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029ba:	4b44      	ldr	r3, [pc, #272]	; (8002acc <HAL_RCC_OscConfig+0x240>)
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d116      	bne.n	80029f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029c6:	4b41      	ldr	r3, [pc, #260]	; (8002acc <HAL_RCC_OscConfig+0x240>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d005      	beq.n	80029de <HAL_RCC_OscConfig+0x152>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d001      	beq.n	80029de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e1c7      	b.n	8002d6e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029de:	4b3b      	ldr	r3, [pc, #236]	; (8002acc <HAL_RCC_OscConfig+0x240>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	4937      	ldr	r1, [pc, #220]	; (8002acc <HAL_RCC_OscConfig+0x240>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029f2:	e03a      	b.n	8002a6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d020      	beq.n	8002a3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029fc:	4b34      	ldr	r3, [pc, #208]	; (8002ad0 <HAL_RCC_OscConfig+0x244>)
 80029fe:	2201      	movs	r2, #1
 8002a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a02:	f7ff f8b7 	bl	8001b74 <HAL_GetTick>
 8002a06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a08:	e008      	b.n	8002a1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a0a:	f7ff f8b3 	bl	8001b74 <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d901      	bls.n	8002a1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e1a8      	b.n	8002d6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a1c:	4b2b      	ldr	r3, [pc, #172]	; (8002acc <HAL_RCC_OscConfig+0x240>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d0f0      	beq.n	8002a0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a28:	4b28      	ldr	r3, [pc, #160]	; (8002acc <HAL_RCC_OscConfig+0x240>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	00db      	lsls	r3, r3, #3
 8002a36:	4925      	ldr	r1, [pc, #148]	; (8002acc <HAL_RCC_OscConfig+0x240>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	600b      	str	r3, [r1, #0]
 8002a3c:	e015      	b.n	8002a6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a3e:	4b24      	ldr	r3, [pc, #144]	; (8002ad0 <HAL_RCC_OscConfig+0x244>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a44:	f7ff f896 	bl	8001b74 <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a4c:	f7ff f892 	bl	8001b74 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e187      	b.n	8002d6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a5e:	4b1b      	ldr	r3, [pc, #108]	; (8002acc <HAL_RCC_OscConfig+0x240>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1f0      	bne.n	8002a4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0308 	and.w	r3, r3, #8
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d036      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d016      	beq.n	8002aac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a7e:	4b15      	ldr	r3, [pc, #84]	; (8002ad4 <HAL_RCC_OscConfig+0x248>)
 8002a80:	2201      	movs	r2, #1
 8002a82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a84:	f7ff f876 	bl	8001b74 <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a8c:	f7ff f872 	bl	8001b74 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e167      	b.n	8002d6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a9e:	4b0b      	ldr	r3, [pc, #44]	; (8002acc <HAL_RCC_OscConfig+0x240>)
 8002aa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d0f0      	beq.n	8002a8c <HAL_RCC_OscConfig+0x200>
 8002aaa:	e01b      	b.n	8002ae4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002aac:	4b09      	ldr	r3, [pc, #36]	; (8002ad4 <HAL_RCC_OscConfig+0x248>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ab2:	f7ff f85f 	bl	8001b74 <HAL_GetTick>
 8002ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ab8:	e00e      	b.n	8002ad8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002aba:	f7ff f85b 	bl	8001b74 <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d907      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e150      	b.n	8002d6e <HAL_RCC_OscConfig+0x4e2>
 8002acc:	40023800 	.word	0x40023800
 8002ad0:	42470000 	.word	0x42470000
 8002ad4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ad8:	4b88      	ldr	r3, [pc, #544]	; (8002cfc <HAL_RCC_OscConfig+0x470>)
 8002ada:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d1ea      	bne.n	8002aba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0304 	and.w	r3, r3, #4
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	f000 8097 	beq.w	8002c20 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002af2:	2300      	movs	r3, #0
 8002af4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002af6:	4b81      	ldr	r3, [pc, #516]	; (8002cfc <HAL_RCC_OscConfig+0x470>)
 8002af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d10f      	bne.n	8002b22 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b02:	2300      	movs	r3, #0
 8002b04:	60bb      	str	r3, [r7, #8]
 8002b06:	4b7d      	ldr	r3, [pc, #500]	; (8002cfc <HAL_RCC_OscConfig+0x470>)
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	4a7c      	ldr	r2, [pc, #496]	; (8002cfc <HAL_RCC_OscConfig+0x470>)
 8002b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b10:	6413      	str	r3, [r2, #64]	; 0x40
 8002b12:	4b7a      	ldr	r3, [pc, #488]	; (8002cfc <HAL_RCC_OscConfig+0x470>)
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b1a:	60bb      	str	r3, [r7, #8]
 8002b1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b22:	4b77      	ldr	r3, [pc, #476]	; (8002d00 <HAL_RCC_OscConfig+0x474>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d118      	bne.n	8002b60 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b2e:	4b74      	ldr	r3, [pc, #464]	; (8002d00 <HAL_RCC_OscConfig+0x474>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a73      	ldr	r2, [pc, #460]	; (8002d00 <HAL_RCC_OscConfig+0x474>)
 8002b34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b3a:	f7ff f81b 	bl	8001b74 <HAL_GetTick>
 8002b3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b40:	e008      	b.n	8002b54 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b42:	f7ff f817 	bl	8001b74 <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d901      	bls.n	8002b54 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e10c      	b.n	8002d6e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b54:	4b6a      	ldr	r3, [pc, #424]	; (8002d00 <HAL_RCC_OscConfig+0x474>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d0f0      	beq.n	8002b42 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d106      	bne.n	8002b76 <HAL_RCC_OscConfig+0x2ea>
 8002b68:	4b64      	ldr	r3, [pc, #400]	; (8002cfc <HAL_RCC_OscConfig+0x470>)
 8002b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b6c:	4a63      	ldr	r2, [pc, #396]	; (8002cfc <HAL_RCC_OscConfig+0x470>)
 8002b6e:	f043 0301 	orr.w	r3, r3, #1
 8002b72:	6713      	str	r3, [r2, #112]	; 0x70
 8002b74:	e01c      	b.n	8002bb0 <HAL_RCC_OscConfig+0x324>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	2b05      	cmp	r3, #5
 8002b7c:	d10c      	bne.n	8002b98 <HAL_RCC_OscConfig+0x30c>
 8002b7e:	4b5f      	ldr	r3, [pc, #380]	; (8002cfc <HAL_RCC_OscConfig+0x470>)
 8002b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b82:	4a5e      	ldr	r2, [pc, #376]	; (8002cfc <HAL_RCC_OscConfig+0x470>)
 8002b84:	f043 0304 	orr.w	r3, r3, #4
 8002b88:	6713      	str	r3, [r2, #112]	; 0x70
 8002b8a:	4b5c      	ldr	r3, [pc, #368]	; (8002cfc <HAL_RCC_OscConfig+0x470>)
 8002b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b8e:	4a5b      	ldr	r2, [pc, #364]	; (8002cfc <HAL_RCC_OscConfig+0x470>)
 8002b90:	f043 0301 	orr.w	r3, r3, #1
 8002b94:	6713      	str	r3, [r2, #112]	; 0x70
 8002b96:	e00b      	b.n	8002bb0 <HAL_RCC_OscConfig+0x324>
 8002b98:	4b58      	ldr	r3, [pc, #352]	; (8002cfc <HAL_RCC_OscConfig+0x470>)
 8002b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b9c:	4a57      	ldr	r2, [pc, #348]	; (8002cfc <HAL_RCC_OscConfig+0x470>)
 8002b9e:	f023 0301 	bic.w	r3, r3, #1
 8002ba2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ba4:	4b55      	ldr	r3, [pc, #340]	; (8002cfc <HAL_RCC_OscConfig+0x470>)
 8002ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba8:	4a54      	ldr	r2, [pc, #336]	; (8002cfc <HAL_RCC_OscConfig+0x470>)
 8002baa:	f023 0304 	bic.w	r3, r3, #4
 8002bae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d015      	beq.n	8002be4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb8:	f7fe ffdc 	bl	8001b74 <HAL_GetTick>
 8002bbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bbe:	e00a      	b.n	8002bd6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bc0:	f7fe ffd8 	bl	8001b74 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e0cb      	b.n	8002d6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bd6:	4b49      	ldr	r3, [pc, #292]	; (8002cfc <HAL_RCC_OscConfig+0x470>)
 8002bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d0ee      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x334>
 8002be2:	e014      	b.n	8002c0e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002be4:	f7fe ffc6 	bl	8001b74 <HAL_GetTick>
 8002be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bea:	e00a      	b.n	8002c02 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bec:	f7fe ffc2 	bl	8001b74 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e0b5      	b.n	8002d6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c02:	4b3e      	ldr	r3, [pc, #248]	; (8002cfc <HAL_RCC_OscConfig+0x470>)
 8002c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d1ee      	bne.n	8002bec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c0e:	7dfb      	ldrb	r3, [r7, #23]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d105      	bne.n	8002c20 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c14:	4b39      	ldr	r3, [pc, #228]	; (8002cfc <HAL_RCC_OscConfig+0x470>)
 8002c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c18:	4a38      	ldr	r2, [pc, #224]	; (8002cfc <HAL_RCC_OscConfig+0x470>)
 8002c1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c1e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f000 80a1 	beq.w	8002d6c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c2a:	4b34      	ldr	r3, [pc, #208]	; (8002cfc <HAL_RCC_OscConfig+0x470>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f003 030c 	and.w	r3, r3, #12
 8002c32:	2b08      	cmp	r3, #8
 8002c34:	d05c      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d141      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c3e:	4b31      	ldr	r3, [pc, #196]	; (8002d04 <HAL_RCC_OscConfig+0x478>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c44:	f7fe ff96 	bl	8001b74 <HAL_GetTick>
 8002c48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c4c:	f7fe ff92 	bl	8001b74 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e087      	b.n	8002d6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c5e:	4b27      	ldr	r3, [pc, #156]	; (8002cfc <HAL_RCC_OscConfig+0x470>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1f0      	bne.n	8002c4c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	69da      	ldr	r2, [r3, #28]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	431a      	orrs	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c78:	019b      	lsls	r3, r3, #6
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c80:	085b      	lsrs	r3, r3, #1
 8002c82:	3b01      	subs	r3, #1
 8002c84:	041b      	lsls	r3, r3, #16
 8002c86:	431a      	orrs	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8c:	061b      	lsls	r3, r3, #24
 8002c8e:	491b      	ldr	r1, [pc, #108]	; (8002cfc <HAL_RCC_OscConfig+0x470>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c94:	4b1b      	ldr	r3, [pc, #108]	; (8002d04 <HAL_RCC_OscConfig+0x478>)
 8002c96:	2201      	movs	r2, #1
 8002c98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c9a:	f7fe ff6b 	bl	8001b74 <HAL_GetTick>
 8002c9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ca0:	e008      	b.n	8002cb4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ca2:	f7fe ff67 	bl	8001b74 <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d901      	bls.n	8002cb4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e05c      	b.n	8002d6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cb4:	4b11      	ldr	r3, [pc, #68]	; (8002cfc <HAL_RCC_OscConfig+0x470>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d0f0      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x416>
 8002cc0:	e054      	b.n	8002d6c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cc2:	4b10      	ldr	r3, [pc, #64]	; (8002d04 <HAL_RCC_OscConfig+0x478>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc8:	f7fe ff54 	bl	8001b74 <HAL_GetTick>
 8002ccc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cce:	e008      	b.n	8002ce2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cd0:	f7fe ff50 	bl	8001b74 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e045      	b.n	8002d6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ce2:	4b06      	ldr	r3, [pc, #24]	; (8002cfc <HAL_RCC_OscConfig+0x470>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d1f0      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x444>
 8002cee:	e03d      	b.n	8002d6c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d107      	bne.n	8002d08 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e038      	b.n	8002d6e <HAL_RCC_OscConfig+0x4e2>
 8002cfc:	40023800 	.word	0x40023800
 8002d00:	40007000 	.word	0x40007000
 8002d04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d08:	4b1b      	ldr	r3, [pc, #108]	; (8002d78 <HAL_RCC_OscConfig+0x4ec>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d028      	beq.n	8002d68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d121      	bne.n	8002d68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d11a      	bne.n	8002d68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d32:	68fa      	ldr	r2, [r7, #12]
 8002d34:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d38:	4013      	ands	r3, r2
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d111      	bne.n	8002d68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d4e:	085b      	lsrs	r3, r3, #1
 8002d50:	3b01      	subs	r3, #1
 8002d52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d107      	bne.n	8002d68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d001      	beq.n	8002d6c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e000      	b.n	8002d6e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3718      	adds	r7, #24
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	40023800 	.word	0x40023800

08002d7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d101      	bne.n	8002d90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e0cc      	b.n	8002f2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d90:	4b68      	ldr	r3, [pc, #416]	; (8002f34 <HAL_RCC_ClockConfig+0x1b8>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0307 	and.w	r3, r3, #7
 8002d98:	683a      	ldr	r2, [r7, #0]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d90c      	bls.n	8002db8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d9e:	4b65      	ldr	r3, [pc, #404]	; (8002f34 <HAL_RCC_ClockConfig+0x1b8>)
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	b2d2      	uxtb	r2, r2
 8002da4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002da6:	4b63      	ldr	r3, [pc, #396]	; (8002f34 <HAL_RCC_ClockConfig+0x1b8>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0307 	and.w	r3, r3, #7
 8002dae:	683a      	ldr	r2, [r7, #0]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d001      	beq.n	8002db8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e0b8      	b.n	8002f2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d020      	beq.n	8002e06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0304 	and.w	r3, r3, #4
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d005      	beq.n	8002ddc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dd0:	4b59      	ldr	r3, [pc, #356]	; (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	4a58      	ldr	r2, [pc, #352]	; (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002dda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0308 	and.w	r3, r3, #8
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d005      	beq.n	8002df4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002de8:	4b53      	ldr	r3, [pc, #332]	; (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	4a52      	ldr	r2, [pc, #328]	; (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002dee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002df2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002df4:	4b50      	ldr	r3, [pc, #320]	; (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	494d      	ldr	r1, [pc, #308]	; (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d044      	beq.n	8002e9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d107      	bne.n	8002e2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e1a:	4b47      	ldr	r3, [pc, #284]	; (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d119      	bne.n	8002e5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e07f      	b.n	8002f2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d003      	beq.n	8002e3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e36:	2b03      	cmp	r3, #3
 8002e38:	d107      	bne.n	8002e4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e3a:	4b3f      	ldr	r3, [pc, #252]	; (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d109      	bne.n	8002e5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e06f      	b.n	8002f2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e4a:	4b3b      	ldr	r3, [pc, #236]	; (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e067      	b.n	8002f2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e5a:	4b37      	ldr	r3, [pc, #220]	; (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f023 0203 	bic.w	r2, r3, #3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	4934      	ldr	r1, [pc, #208]	; (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e6c:	f7fe fe82 	bl	8001b74 <HAL_GetTick>
 8002e70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e72:	e00a      	b.n	8002e8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e74:	f7fe fe7e 	bl	8001b74 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e04f      	b.n	8002f2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e8a:	4b2b      	ldr	r3, [pc, #172]	; (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f003 020c 	and.w	r2, r3, #12
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d1eb      	bne.n	8002e74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e9c:	4b25      	ldr	r3, [pc, #148]	; (8002f34 <HAL_RCC_ClockConfig+0x1b8>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0307 	and.w	r3, r3, #7
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d20c      	bcs.n	8002ec4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eaa:	4b22      	ldr	r3, [pc, #136]	; (8002f34 <HAL_RCC_ClockConfig+0x1b8>)
 8002eac:	683a      	ldr	r2, [r7, #0]
 8002eae:	b2d2      	uxtb	r2, r2
 8002eb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eb2:	4b20      	ldr	r3, [pc, #128]	; (8002f34 <HAL_RCC_ClockConfig+0x1b8>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0307 	and.w	r3, r3, #7
 8002eba:	683a      	ldr	r2, [r7, #0]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d001      	beq.n	8002ec4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e032      	b.n	8002f2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0304 	and.w	r3, r3, #4
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d008      	beq.n	8002ee2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ed0:	4b19      	ldr	r3, [pc, #100]	; (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	4916      	ldr	r1, [pc, #88]	; (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0308 	and.w	r3, r3, #8
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d009      	beq.n	8002f02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002eee:	4b12      	ldr	r3, [pc, #72]	; (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	490e      	ldr	r1, [pc, #56]	; (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f02:	f000 f821 	bl	8002f48 <HAL_RCC_GetSysClockFreq>
 8002f06:	4602      	mov	r2, r0
 8002f08:	4b0b      	ldr	r3, [pc, #44]	; (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	091b      	lsrs	r3, r3, #4
 8002f0e:	f003 030f 	and.w	r3, r3, #15
 8002f12:	490a      	ldr	r1, [pc, #40]	; (8002f3c <HAL_RCC_ClockConfig+0x1c0>)
 8002f14:	5ccb      	ldrb	r3, [r1, r3]
 8002f16:	fa22 f303 	lsr.w	r3, r2, r3
 8002f1a:	4a09      	ldr	r2, [pc, #36]	; (8002f40 <HAL_RCC_ClockConfig+0x1c4>)
 8002f1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f1e:	4b09      	ldr	r3, [pc, #36]	; (8002f44 <HAL_RCC_ClockConfig+0x1c8>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7fe fde2 	bl	8001aec <HAL_InitTick>

  return HAL_OK;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	40023c00 	.word	0x40023c00
 8002f38:	40023800 	.word	0x40023800
 8002f3c:	08008268 	.word	0x08008268
 8002f40:	20000000 	.word	0x20000000
 8002f44:	20000004 	.word	0x20000004

08002f48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f4c:	b090      	sub	sp, #64	; 0x40
 8002f4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f50:	2300      	movs	r3, #0
 8002f52:	637b      	str	r3, [r7, #52]	; 0x34
 8002f54:	2300      	movs	r3, #0
 8002f56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f58:	2300      	movs	r3, #0
 8002f5a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f60:	4b59      	ldr	r3, [pc, #356]	; (80030c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f003 030c 	and.w	r3, r3, #12
 8002f68:	2b08      	cmp	r3, #8
 8002f6a:	d00d      	beq.n	8002f88 <HAL_RCC_GetSysClockFreq+0x40>
 8002f6c:	2b08      	cmp	r3, #8
 8002f6e:	f200 80a1 	bhi.w	80030b4 <HAL_RCC_GetSysClockFreq+0x16c>
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d002      	beq.n	8002f7c <HAL_RCC_GetSysClockFreq+0x34>
 8002f76:	2b04      	cmp	r3, #4
 8002f78:	d003      	beq.n	8002f82 <HAL_RCC_GetSysClockFreq+0x3a>
 8002f7a:	e09b      	b.n	80030b4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f7c:	4b53      	ldr	r3, [pc, #332]	; (80030cc <HAL_RCC_GetSysClockFreq+0x184>)
 8002f7e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002f80:	e09b      	b.n	80030ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f82:	4b53      	ldr	r3, [pc, #332]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f84:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002f86:	e098      	b.n	80030ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f88:	4b4f      	ldr	r3, [pc, #316]	; (80030c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f90:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f92:	4b4d      	ldr	r3, [pc, #308]	; (80030c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d028      	beq.n	8002ff0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f9e:	4b4a      	ldr	r3, [pc, #296]	; (80030c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	099b      	lsrs	r3, r3, #6
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	623b      	str	r3, [r7, #32]
 8002fa8:	627a      	str	r2, [r7, #36]	; 0x24
 8002faa:	6a3b      	ldr	r3, [r7, #32]
 8002fac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002fb0:	2100      	movs	r1, #0
 8002fb2:	4b47      	ldr	r3, [pc, #284]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002fb4:	fb03 f201 	mul.w	r2, r3, r1
 8002fb8:	2300      	movs	r3, #0
 8002fba:	fb00 f303 	mul.w	r3, r0, r3
 8002fbe:	4413      	add	r3, r2
 8002fc0:	4a43      	ldr	r2, [pc, #268]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002fc2:	fba0 1202 	umull	r1, r2, r0, r2
 8002fc6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002fc8:	460a      	mov	r2, r1
 8002fca:	62ba      	str	r2, [r7, #40]	; 0x28
 8002fcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fce:	4413      	add	r3, r2
 8002fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	61bb      	str	r3, [r7, #24]
 8002fd8:	61fa      	str	r2, [r7, #28]
 8002fda:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fde:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002fe2:	f7fd fde9 	bl	8000bb8 <__aeabi_uldivmod>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	460b      	mov	r3, r1
 8002fea:	4613      	mov	r3, r2
 8002fec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fee:	e053      	b.n	8003098 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ff0:	4b35      	ldr	r3, [pc, #212]	; (80030c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	099b      	lsrs	r3, r3, #6
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	613b      	str	r3, [r7, #16]
 8002ffa:	617a      	str	r2, [r7, #20]
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003002:	f04f 0b00 	mov.w	fp, #0
 8003006:	4652      	mov	r2, sl
 8003008:	465b      	mov	r3, fp
 800300a:	f04f 0000 	mov.w	r0, #0
 800300e:	f04f 0100 	mov.w	r1, #0
 8003012:	0159      	lsls	r1, r3, #5
 8003014:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003018:	0150      	lsls	r0, r2, #5
 800301a:	4602      	mov	r2, r0
 800301c:	460b      	mov	r3, r1
 800301e:	ebb2 080a 	subs.w	r8, r2, sl
 8003022:	eb63 090b 	sbc.w	r9, r3, fp
 8003026:	f04f 0200 	mov.w	r2, #0
 800302a:	f04f 0300 	mov.w	r3, #0
 800302e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003032:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003036:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800303a:	ebb2 0408 	subs.w	r4, r2, r8
 800303e:	eb63 0509 	sbc.w	r5, r3, r9
 8003042:	f04f 0200 	mov.w	r2, #0
 8003046:	f04f 0300 	mov.w	r3, #0
 800304a:	00eb      	lsls	r3, r5, #3
 800304c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003050:	00e2      	lsls	r2, r4, #3
 8003052:	4614      	mov	r4, r2
 8003054:	461d      	mov	r5, r3
 8003056:	eb14 030a 	adds.w	r3, r4, sl
 800305a:	603b      	str	r3, [r7, #0]
 800305c:	eb45 030b 	adc.w	r3, r5, fp
 8003060:	607b      	str	r3, [r7, #4]
 8003062:	f04f 0200 	mov.w	r2, #0
 8003066:	f04f 0300 	mov.w	r3, #0
 800306a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800306e:	4629      	mov	r1, r5
 8003070:	028b      	lsls	r3, r1, #10
 8003072:	4621      	mov	r1, r4
 8003074:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003078:	4621      	mov	r1, r4
 800307a:	028a      	lsls	r2, r1, #10
 800307c:	4610      	mov	r0, r2
 800307e:	4619      	mov	r1, r3
 8003080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003082:	2200      	movs	r2, #0
 8003084:	60bb      	str	r3, [r7, #8]
 8003086:	60fa      	str	r2, [r7, #12]
 8003088:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800308c:	f7fd fd94 	bl	8000bb8 <__aeabi_uldivmod>
 8003090:	4602      	mov	r2, r0
 8003092:	460b      	mov	r3, r1
 8003094:	4613      	mov	r3, r2
 8003096:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003098:	4b0b      	ldr	r3, [pc, #44]	; (80030c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	0c1b      	lsrs	r3, r3, #16
 800309e:	f003 0303 	and.w	r3, r3, #3
 80030a2:	3301      	adds	r3, #1
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80030a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80030b2:	e002      	b.n	80030ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030b4:	4b05      	ldr	r3, [pc, #20]	; (80030cc <HAL_RCC_GetSysClockFreq+0x184>)
 80030b6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80030b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3740      	adds	r7, #64	; 0x40
 80030c0:	46bd      	mov	sp, r7
 80030c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030c6:	bf00      	nop
 80030c8:	40023800 	.word	0x40023800
 80030cc:	00f42400 	.word	0x00f42400
 80030d0:	017d7840 	.word	0x017d7840

080030d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030d8:	4b03      	ldr	r3, [pc, #12]	; (80030e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80030da:	681b      	ldr	r3, [r3, #0]
}
 80030dc:	4618      	mov	r0, r3
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	20000000 	.word	0x20000000

080030ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80030f0:	f7ff fff0 	bl	80030d4 <HAL_RCC_GetHCLKFreq>
 80030f4:	4602      	mov	r2, r0
 80030f6:	4b05      	ldr	r3, [pc, #20]	; (800310c <HAL_RCC_GetPCLK1Freq+0x20>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	0a9b      	lsrs	r3, r3, #10
 80030fc:	f003 0307 	and.w	r3, r3, #7
 8003100:	4903      	ldr	r1, [pc, #12]	; (8003110 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003102:	5ccb      	ldrb	r3, [r1, r3]
 8003104:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003108:	4618      	mov	r0, r3
 800310a:	bd80      	pop	{r7, pc}
 800310c:	40023800 	.word	0x40023800
 8003110:	08008278 	.word	0x08008278

08003114 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003118:	f7ff ffdc 	bl	80030d4 <HAL_RCC_GetHCLKFreq>
 800311c:	4602      	mov	r2, r0
 800311e:	4b05      	ldr	r3, [pc, #20]	; (8003134 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	0b5b      	lsrs	r3, r3, #13
 8003124:	f003 0307 	and.w	r3, r3, #7
 8003128:	4903      	ldr	r1, [pc, #12]	; (8003138 <HAL_RCC_GetPCLK2Freq+0x24>)
 800312a:	5ccb      	ldrb	r3, [r1, r3]
 800312c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003130:	4618      	mov	r0, r3
 8003132:	bd80      	pop	{r7, pc}
 8003134:	40023800 	.word	0x40023800
 8003138:	08008278 	.word	0x08008278

0800313c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e041      	b.n	80031d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d106      	bne.n	8003168 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f7fe fa16 	bl	8001594 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2202      	movs	r2, #2
 800316c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	3304      	adds	r3, #4
 8003178:	4619      	mov	r1, r3
 800317a:	4610      	mov	r0, r2
 800317c:	f001 f91a 	bl	80043b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
	...

080031dc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d001      	beq.n	80031f4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e03c      	b.n	800326e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2202      	movs	r2, #2
 80031f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a1e      	ldr	r2, [pc, #120]	; (800327c <HAL_TIM_Base_Start+0xa0>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d018      	beq.n	8003238 <HAL_TIM_Base_Start+0x5c>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800320e:	d013      	beq.n	8003238 <HAL_TIM_Base_Start+0x5c>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a1a      	ldr	r2, [pc, #104]	; (8003280 <HAL_TIM_Base_Start+0xa4>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d00e      	beq.n	8003238 <HAL_TIM_Base_Start+0x5c>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a19      	ldr	r2, [pc, #100]	; (8003284 <HAL_TIM_Base_Start+0xa8>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d009      	beq.n	8003238 <HAL_TIM_Base_Start+0x5c>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a17      	ldr	r2, [pc, #92]	; (8003288 <HAL_TIM_Base_Start+0xac>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d004      	beq.n	8003238 <HAL_TIM_Base_Start+0x5c>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a16      	ldr	r2, [pc, #88]	; (800328c <HAL_TIM_Base_Start+0xb0>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d111      	bne.n	800325c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f003 0307 	and.w	r3, r3, #7
 8003242:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2b06      	cmp	r3, #6
 8003248:	d010      	beq.n	800326c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f042 0201 	orr.w	r2, r2, #1
 8003258:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800325a:	e007      	b.n	800326c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f042 0201 	orr.w	r2, r2, #1
 800326a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3714      	adds	r7, #20
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	40010000 	.word	0x40010000
 8003280:	40000400 	.word	0x40000400
 8003284:	40000800 	.word	0x40000800
 8003288:	40000c00 	.word	0x40000c00
 800328c:	40014000 	.word	0x40014000

08003290 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003290:	b480      	push	{r7}
 8003292:	b085      	sub	sp, #20
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d001      	beq.n	80032a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e044      	b.n	8003332 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2202      	movs	r2, #2
 80032ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68da      	ldr	r2, [r3, #12]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f042 0201 	orr.w	r2, r2, #1
 80032be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a1e      	ldr	r2, [pc, #120]	; (8003340 <HAL_TIM_Base_Start_IT+0xb0>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d018      	beq.n	80032fc <HAL_TIM_Base_Start_IT+0x6c>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032d2:	d013      	beq.n	80032fc <HAL_TIM_Base_Start_IT+0x6c>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a1a      	ldr	r2, [pc, #104]	; (8003344 <HAL_TIM_Base_Start_IT+0xb4>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d00e      	beq.n	80032fc <HAL_TIM_Base_Start_IT+0x6c>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a19      	ldr	r2, [pc, #100]	; (8003348 <HAL_TIM_Base_Start_IT+0xb8>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d009      	beq.n	80032fc <HAL_TIM_Base_Start_IT+0x6c>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a17      	ldr	r2, [pc, #92]	; (800334c <HAL_TIM_Base_Start_IT+0xbc>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d004      	beq.n	80032fc <HAL_TIM_Base_Start_IT+0x6c>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a16      	ldr	r2, [pc, #88]	; (8003350 <HAL_TIM_Base_Start_IT+0xc0>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d111      	bne.n	8003320 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f003 0307 	and.w	r3, r3, #7
 8003306:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2b06      	cmp	r3, #6
 800330c:	d010      	beq.n	8003330 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f042 0201 	orr.w	r2, r2, #1
 800331c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800331e:	e007      	b.n	8003330 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f042 0201 	orr.w	r2, r2, #1
 800332e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3714      	adds	r7, #20
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	40010000 	.word	0x40010000
 8003344:	40000400 	.word	0x40000400
 8003348:	40000800 	.word	0x40000800
 800334c:	40000c00 	.word	0x40000c00
 8003350:	40014000 	.word	0x40014000

08003354 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d101      	bne.n	8003366 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e041      	b.n	80033ea <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800336c:	b2db      	uxtb	r3, r3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d106      	bne.n	8003380 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 f839 	bl	80033f2 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2202      	movs	r2, #2
 8003384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	3304      	adds	r3, #4
 8003390:	4619      	mov	r1, r3
 8003392:	4610      	mov	r0, r2
 8003394:	f001 f80e 	bl	80043b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3708      	adds	r7, #8
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80033f2:	b480      	push	{r7}
 80033f4:	b083      	sub	sp, #12
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80033fa:	bf00      	nop
 80033fc:	370c      	adds	r7, #12
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
	...

08003408 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003412:	2300      	movs	r3, #0
 8003414:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d109      	bne.n	8003430 <HAL_TIM_OC_Start_IT+0x28>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003422:	b2db      	uxtb	r3, r3
 8003424:	2b01      	cmp	r3, #1
 8003426:	bf14      	ite	ne
 8003428:	2301      	movne	r3, #1
 800342a:	2300      	moveq	r3, #0
 800342c:	b2db      	uxtb	r3, r3
 800342e:	e022      	b.n	8003476 <HAL_TIM_OC_Start_IT+0x6e>
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	2b04      	cmp	r3, #4
 8003434:	d109      	bne.n	800344a <HAL_TIM_OC_Start_IT+0x42>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b01      	cmp	r3, #1
 8003440:	bf14      	ite	ne
 8003442:	2301      	movne	r3, #1
 8003444:	2300      	moveq	r3, #0
 8003446:	b2db      	uxtb	r3, r3
 8003448:	e015      	b.n	8003476 <HAL_TIM_OC_Start_IT+0x6e>
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	2b08      	cmp	r3, #8
 800344e:	d109      	bne.n	8003464 <HAL_TIM_OC_Start_IT+0x5c>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003456:	b2db      	uxtb	r3, r3
 8003458:	2b01      	cmp	r3, #1
 800345a:	bf14      	ite	ne
 800345c:	2301      	movne	r3, #1
 800345e:	2300      	moveq	r3, #0
 8003460:	b2db      	uxtb	r3, r3
 8003462:	e008      	b.n	8003476 <HAL_TIM_OC_Start_IT+0x6e>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800346a:	b2db      	uxtb	r3, r3
 800346c:	2b01      	cmp	r3, #1
 800346e:	bf14      	ite	ne
 8003470:	2301      	movne	r3, #1
 8003472:	2300      	moveq	r3, #0
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e0b3      	b.n	80035e6 <HAL_TIM_OC_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d104      	bne.n	800348e <HAL_TIM_OC_Start_IT+0x86>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2202      	movs	r2, #2
 8003488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800348c:	e013      	b.n	80034b6 <HAL_TIM_OC_Start_IT+0xae>
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	2b04      	cmp	r3, #4
 8003492:	d104      	bne.n	800349e <HAL_TIM_OC_Start_IT+0x96>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2202      	movs	r2, #2
 8003498:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800349c:	e00b      	b.n	80034b6 <HAL_TIM_OC_Start_IT+0xae>
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	2b08      	cmp	r3, #8
 80034a2:	d104      	bne.n	80034ae <HAL_TIM_OC_Start_IT+0xa6>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2202      	movs	r2, #2
 80034a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034ac:	e003      	b.n	80034b6 <HAL_TIM_OC_Start_IT+0xae>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2202      	movs	r2, #2
 80034b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	2b0c      	cmp	r3, #12
 80034ba:	d841      	bhi.n	8003540 <HAL_TIM_OC_Start_IT+0x138>
 80034bc:	a201      	add	r2, pc, #4	; (adr r2, 80034c4 <HAL_TIM_OC_Start_IT+0xbc>)
 80034be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034c2:	bf00      	nop
 80034c4:	080034f9 	.word	0x080034f9
 80034c8:	08003541 	.word	0x08003541
 80034cc:	08003541 	.word	0x08003541
 80034d0:	08003541 	.word	0x08003541
 80034d4:	0800350b 	.word	0x0800350b
 80034d8:	08003541 	.word	0x08003541
 80034dc:	08003541 	.word	0x08003541
 80034e0:	08003541 	.word	0x08003541
 80034e4:	0800351d 	.word	0x0800351d
 80034e8:	08003541 	.word	0x08003541
 80034ec:	08003541 	.word	0x08003541
 80034f0:	08003541 	.word	0x08003541
 80034f4:	0800352f 	.word	0x0800352f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68da      	ldr	r2, [r3, #12]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f042 0202 	orr.w	r2, r2, #2
 8003506:	60da      	str	r2, [r3, #12]
      break;
 8003508:	e01d      	b.n	8003546 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68da      	ldr	r2, [r3, #12]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f042 0204 	orr.w	r2, r2, #4
 8003518:	60da      	str	r2, [r3, #12]
      break;
 800351a:	e014      	b.n	8003546 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68da      	ldr	r2, [r3, #12]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f042 0208 	orr.w	r2, r2, #8
 800352a:	60da      	str	r2, [r3, #12]
      break;
 800352c:	e00b      	b.n	8003546 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68da      	ldr	r2, [r3, #12]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f042 0210 	orr.w	r2, r2, #16
 800353c:	60da      	str	r2, [r3, #12]
      break;
 800353e:	e002      	b.n	8003546 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	73fb      	strb	r3, [r7, #15]
      break;
 8003544:	bf00      	nop
  }

  if (status == HAL_OK)
 8003546:	7bfb      	ldrb	r3, [r7, #15]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d14b      	bne.n	80035e4 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2201      	movs	r2, #1
 8003552:	6839      	ldr	r1, [r7, #0]
 8003554:	4618      	mov	r0, r3
 8003556:	f001 faf1 	bl	8004b3c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a24      	ldr	r2, [pc, #144]	; (80035f0 <HAL_TIM_OC_Start_IT+0x1e8>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d107      	bne.n	8003574 <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003572:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a1d      	ldr	r2, [pc, #116]	; (80035f0 <HAL_TIM_OC_Start_IT+0x1e8>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d018      	beq.n	80035b0 <HAL_TIM_OC_Start_IT+0x1a8>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003586:	d013      	beq.n	80035b0 <HAL_TIM_OC_Start_IT+0x1a8>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a19      	ldr	r2, [pc, #100]	; (80035f4 <HAL_TIM_OC_Start_IT+0x1ec>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d00e      	beq.n	80035b0 <HAL_TIM_OC_Start_IT+0x1a8>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a18      	ldr	r2, [pc, #96]	; (80035f8 <HAL_TIM_OC_Start_IT+0x1f0>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d009      	beq.n	80035b0 <HAL_TIM_OC_Start_IT+0x1a8>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a16      	ldr	r2, [pc, #88]	; (80035fc <HAL_TIM_OC_Start_IT+0x1f4>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d004      	beq.n	80035b0 <HAL_TIM_OC_Start_IT+0x1a8>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a15      	ldr	r2, [pc, #84]	; (8003600 <HAL_TIM_OC_Start_IT+0x1f8>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d111      	bne.n	80035d4 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f003 0307 	and.w	r3, r3, #7
 80035ba:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	2b06      	cmp	r3, #6
 80035c0:	d010      	beq.n	80035e4 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f042 0201 	orr.w	r2, r2, #1
 80035d0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035d2:	e007      	b.n	80035e4 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f042 0201 	orr.w	r2, r2, #1
 80035e2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80035e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	40010000 	.word	0x40010000
 80035f4:	40000400 	.word	0x40000400
 80035f8:	40000800 	.word	0x40000800
 80035fc:	40000c00 	.word	0x40000c00
 8003600:	40014000 	.word	0x40014000

08003604 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d101      	bne.n	8003616 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e041      	b.n	800369a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800361c:	b2db      	uxtb	r3, r3
 800361e:	2b00      	cmp	r3, #0
 8003620:	d106      	bne.n	8003630 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 f839 	bl	80036a2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2202      	movs	r2, #2
 8003634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	3304      	adds	r3, #4
 8003640:	4619      	mov	r1, r3
 8003642:	4610      	mov	r0, r2
 8003644:	f000 feb6 	bl	80043b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3708      	adds	r7, #8
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80036a2:	b480      	push	{r7}
 80036a4:	b083      	sub	sp, #12
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80036aa:	bf00      	nop
 80036ac:	370c      	adds	r7, #12
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
	...

080036b8 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b086      	sub	sp, #24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
 80036c4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80036c6:	2300      	movs	r3, #0
 80036c8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d104      	bne.n	80036da <HAL_TIM_IC_Start_DMA+0x22>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	e013      	b.n	8003702 <HAL_TIM_IC_Start_DMA+0x4a>
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	2b04      	cmp	r3, #4
 80036de:	d104      	bne.n	80036ea <HAL_TIM_IC_Start_DMA+0x32>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	e00b      	b.n	8003702 <HAL_TIM_IC_Start_DMA+0x4a>
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	2b08      	cmp	r3, #8
 80036ee:	d104      	bne.n	80036fa <HAL_TIM_IC_Start_DMA+0x42>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	e003      	b.n	8003702 <HAL_TIM_IC_Start_DMA+0x4a>
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003700:	b2db      	uxtb	r3, r3
 8003702:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d104      	bne.n	8003714 <HAL_TIM_IC_Start_DMA+0x5c>
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003710:	b2db      	uxtb	r3, r3
 8003712:	e013      	b.n	800373c <HAL_TIM_IC_Start_DMA+0x84>
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	2b04      	cmp	r3, #4
 8003718:	d104      	bne.n	8003724 <HAL_TIM_IC_Start_DMA+0x6c>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003720:	b2db      	uxtb	r3, r3
 8003722:	e00b      	b.n	800373c <HAL_TIM_IC_Start_DMA+0x84>
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	2b08      	cmp	r3, #8
 8003728:	d104      	bne.n	8003734 <HAL_TIM_IC_Start_DMA+0x7c>
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003730:	b2db      	uxtb	r3, r3
 8003732:	e003      	b.n	800373c <HAL_TIM_IC_Start_DMA+0x84>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800373a:	b2db      	uxtb	r3, r3
 800373c:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 800373e:	7dbb      	ldrb	r3, [r7, #22]
 8003740:	2b02      	cmp	r3, #2
 8003742:	d002      	beq.n	800374a <HAL_TIM_IC_Start_DMA+0x92>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8003744:	7d7b      	ldrb	r3, [r7, #21]
 8003746:	2b02      	cmp	r3, #2
 8003748:	d101      	bne.n	800374e <HAL_TIM_IC_Start_DMA+0x96>
  {
    return HAL_BUSY;
 800374a:	2302      	movs	r3, #2
 800374c:	e13c      	b.n	80039c8 <HAL_TIM_IC_Start_DMA+0x310>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 800374e:	7dbb      	ldrb	r3, [r7, #22]
 8003750:	2b01      	cmp	r3, #1
 8003752:	d143      	bne.n	80037dc <HAL_TIM_IC_Start_DMA+0x124>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 8003754:	7d7b      	ldrb	r3, [r7, #21]
 8003756:	2b01      	cmp	r3, #1
 8003758:	d140      	bne.n	80037dc <HAL_TIM_IC_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d104      	bne.n	800376a <HAL_TIM_IC_Start_DMA+0xb2>
 8003760:	887b      	ldrh	r3, [r7, #2]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d001      	beq.n	800376a <HAL_TIM_IC_Start_DMA+0xb2>
    {
      return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e12e      	b.n	80039c8 <HAL_TIM_IC_Start_DMA+0x310>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d104      	bne.n	800377a <HAL_TIM_IC_Start_DMA+0xc2>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2202      	movs	r2, #2
 8003774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003778:	e013      	b.n	80037a2 <HAL_TIM_IC_Start_DMA+0xea>
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	2b04      	cmp	r3, #4
 800377e:	d104      	bne.n	800378a <HAL_TIM_IC_Start_DMA+0xd2>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2202      	movs	r2, #2
 8003784:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003788:	e00b      	b.n	80037a2 <HAL_TIM_IC_Start_DMA+0xea>
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	2b08      	cmp	r3, #8
 800378e:	d104      	bne.n	800379a <HAL_TIM_IC_Start_DMA+0xe2>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2202      	movs	r2, #2
 8003794:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003798:	e003      	b.n	80037a2 <HAL_TIM_IC_Start_DMA+0xea>
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2202      	movs	r2, #2
 800379e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d104      	bne.n	80037b2 <HAL_TIM_IC_Start_DMA+0xfa>
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2202      	movs	r2, #2
 80037ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ((pData == NULL) && (Length > 0U))
 80037b0:	e016      	b.n	80037e0 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	2b04      	cmp	r3, #4
 80037b6:	d104      	bne.n	80037c2 <HAL_TIM_IC_Start_DMA+0x10a>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2202      	movs	r2, #2
 80037bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ((pData == NULL) && (Length > 0U))
 80037c0:	e00e      	b.n	80037e0 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	2b08      	cmp	r3, #8
 80037c6:	d104      	bne.n	80037d2 <HAL_TIM_IC_Start_DMA+0x11a>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2202      	movs	r2, #2
 80037cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 80037d0:	e006      	b.n	80037e0 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2202      	movs	r2, #2
 80037d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 80037da:	e001      	b.n	80037e0 <HAL_TIM_IC_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e0f3      	b.n	80039c8 <HAL_TIM_IC_Start_DMA+0x310>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2201      	movs	r2, #1
 80037e6:	68b9      	ldr	r1, [r7, #8]
 80037e8:	4618      	mov	r0, r3
 80037ea:	f001 f9a7 	bl	8004b3c <TIM_CCxChannelCmd>

  switch (Channel)
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	2b0c      	cmp	r3, #12
 80037f2:	f200 80ad 	bhi.w	8003950 <HAL_TIM_IC_Start_DMA+0x298>
 80037f6:	a201      	add	r2, pc, #4	; (adr r2, 80037fc <HAL_TIM_IC_Start_DMA+0x144>)
 80037f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037fc:	08003831 	.word	0x08003831
 8003800:	08003951 	.word	0x08003951
 8003804:	08003951 	.word	0x08003951
 8003808:	08003951 	.word	0x08003951
 800380c:	08003879 	.word	0x08003879
 8003810:	08003951 	.word	0x08003951
 8003814:	08003951 	.word	0x08003951
 8003818:	08003951 	.word	0x08003951
 800381c:	080038c1 	.word	0x080038c1
 8003820:	08003951 	.word	0x08003951
 8003824:	08003951 	.word	0x08003951
 8003828:	08003951 	.word	0x08003951
 800382c:	08003909 	.word	0x08003909
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003834:	4a66      	ldr	r2, [pc, #408]	; (80039d0 <HAL_TIM_IC_Start_DMA+0x318>)
 8003836:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383c:	4a65      	ldr	r2, [pc, #404]	; (80039d4 <HAL_TIM_IC_Start_DMA+0x31c>)
 800383e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003844:	4a64      	ldr	r2, [pc, #400]	; (80039d8 <HAL_TIM_IC_Start_DMA+0x320>)
 8003846:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	3334      	adds	r3, #52	; 0x34
 8003852:	4619      	mov	r1, r3
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	887b      	ldrh	r3, [r7, #2]
 8003858:	f7fe fb7c 	bl	8001f54 <HAL_DMA_Start_IT>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d001      	beq.n	8003866 <HAL_TIM_IC_Start_DMA+0x1ae>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e0b0      	b.n	80039c8 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68da      	ldr	r2, [r3, #12]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003874:	60da      	str	r2, [r3, #12]
      break;
 8003876:	e06e      	b.n	8003956 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800387c:	4a54      	ldr	r2, [pc, #336]	; (80039d0 <HAL_TIM_IC_Start_DMA+0x318>)
 800387e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003884:	4a53      	ldr	r2, [pc, #332]	; (80039d4 <HAL_TIM_IC_Start_DMA+0x31c>)
 8003886:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800388c:	4a52      	ldr	r2, [pc, #328]	; (80039d8 <HAL_TIM_IC_Start_DMA+0x320>)
 800388e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	3338      	adds	r3, #56	; 0x38
 800389a:	4619      	mov	r1, r3
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	887b      	ldrh	r3, [r7, #2]
 80038a0:	f7fe fb58 	bl	8001f54 <HAL_DMA_Start_IT>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d001      	beq.n	80038ae <HAL_TIM_IC_Start_DMA+0x1f6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e08c      	b.n	80039c8 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68da      	ldr	r2, [r3, #12]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038bc:	60da      	str	r2, [r3, #12]
      break;
 80038be:	e04a      	b.n	8003956 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c4:	4a42      	ldr	r2, [pc, #264]	; (80039d0 <HAL_TIM_IC_Start_DMA+0x318>)
 80038c6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038cc:	4a41      	ldr	r2, [pc, #260]	; (80039d4 <HAL_TIM_IC_Start_DMA+0x31c>)
 80038ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d4:	4a40      	ldr	r2, [pc, #256]	; (80039d8 <HAL_TIM_IC_Start_DMA+0x320>)
 80038d6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	333c      	adds	r3, #60	; 0x3c
 80038e2:	4619      	mov	r1, r3
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	887b      	ldrh	r3, [r7, #2]
 80038e8:	f7fe fb34 	bl	8001f54 <HAL_DMA_Start_IT>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <HAL_TIM_IC_Start_DMA+0x23e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e068      	b.n	80039c8 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68da      	ldr	r2, [r3, #12]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003904:	60da      	str	r2, [r3, #12]
      break;
 8003906:	e026      	b.n	8003956 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390c:	4a30      	ldr	r2, [pc, #192]	; (80039d0 <HAL_TIM_IC_Start_DMA+0x318>)
 800390e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003914:	4a2f      	ldr	r2, [pc, #188]	; (80039d4 <HAL_TIM_IC_Start_DMA+0x31c>)
 8003916:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391c:	4a2e      	ldr	r2, [pc, #184]	; (80039d8 <HAL_TIM_IC_Start_DMA+0x320>)
 800391e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	3340      	adds	r3, #64	; 0x40
 800392a:	4619      	mov	r1, r3
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	887b      	ldrh	r3, [r7, #2]
 8003930:	f7fe fb10 	bl	8001f54 <HAL_DMA_Start_IT>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <HAL_TIM_IC_Start_DMA+0x286>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e044      	b.n	80039c8 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68da      	ldr	r2, [r3, #12]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800394c:	60da      	str	r2, [r3, #12]
      break;
 800394e:	e002      	b.n	8003956 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    default:
      status = HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	75fb      	strb	r3, [r7, #23]
      break;
 8003954:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a20      	ldr	r2, [pc, #128]	; (80039dc <HAL_TIM_IC_Start_DMA+0x324>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d018      	beq.n	8003992 <HAL_TIM_IC_Start_DMA+0x2da>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003968:	d013      	beq.n	8003992 <HAL_TIM_IC_Start_DMA+0x2da>
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a1c      	ldr	r2, [pc, #112]	; (80039e0 <HAL_TIM_IC_Start_DMA+0x328>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d00e      	beq.n	8003992 <HAL_TIM_IC_Start_DMA+0x2da>
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a1a      	ldr	r2, [pc, #104]	; (80039e4 <HAL_TIM_IC_Start_DMA+0x32c>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d009      	beq.n	8003992 <HAL_TIM_IC_Start_DMA+0x2da>
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a19      	ldr	r2, [pc, #100]	; (80039e8 <HAL_TIM_IC_Start_DMA+0x330>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d004      	beq.n	8003992 <HAL_TIM_IC_Start_DMA+0x2da>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a17      	ldr	r2, [pc, #92]	; (80039ec <HAL_TIM_IC_Start_DMA+0x334>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d111      	bne.n	80039b6 <HAL_TIM_IC_Start_DMA+0x2fe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f003 0307 	and.w	r3, r3, #7
 800399c:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	2b06      	cmp	r3, #6
 80039a2:	d010      	beq.n	80039c6 <HAL_TIM_IC_Start_DMA+0x30e>
    {
      __HAL_TIM_ENABLE(htim);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f042 0201 	orr.w	r2, r2, #1
 80039b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039b4:	e007      	b.n	80039c6 <HAL_TIM_IC_Start_DMA+0x30e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f042 0201 	orr.w	r2, r2, #1
 80039c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80039c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3718      	adds	r7, #24
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	08004283 	.word	0x08004283
 80039d4:	0800434b 	.word	0x0800434b
 80039d8:	080041f1 	.word	0x080041f1
 80039dc:	40010000 	.word	0x40010000
 80039e0:	40000400 	.word	0x40000400
 80039e4:	40000800 	.word	0x40000800
 80039e8:	40000c00 	.word	0x40000c00
 80039ec:	40014000 	.word	0x40014000

080039f0 <HAL_TIM_IC_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039fa:	2300      	movs	r3, #0
 80039fc:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2200      	movs	r2, #0
 8003a04:	6839      	ldr	r1, [r7, #0]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f001 f898 	bl	8004b3c <TIM_CCxChannelCmd>

  switch (Channel)
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	2b0c      	cmp	r3, #12
 8003a10:	d854      	bhi.n	8003abc <HAL_TIM_IC_Stop_DMA+0xcc>
 8003a12:	a201      	add	r2, pc, #4	; (adr r2, 8003a18 <HAL_TIM_IC_Stop_DMA+0x28>)
 8003a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a18:	08003a4d 	.word	0x08003a4d
 8003a1c:	08003abd 	.word	0x08003abd
 8003a20:	08003abd 	.word	0x08003abd
 8003a24:	08003abd 	.word	0x08003abd
 8003a28:	08003a69 	.word	0x08003a69
 8003a2c:	08003abd 	.word	0x08003abd
 8003a30:	08003abd 	.word	0x08003abd
 8003a34:	08003abd 	.word	0x08003abd
 8003a38:	08003a85 	.word	0x08003a85
 8003a3c:	08003abd 	.word	0x08003abd
 8003a40:	08003abd 	.word	0x08003abd
 8003a44:	08003abd 	.word	0x08003abd
 8003a48:	08003aa1 	.word	0x08003aa1
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68da      	ldr	r2, [r3, #12]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003a5a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7fe facf 	bl	8002004 <HAL_DMA_Abort_IT>
      break;
 8003a66:	e02c      	b.n	8003ac2 <HAL_TIM_IC_Stop_DMA+0xd2>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68da      	ldr	r2, [r3, #12]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a76:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f7fe fac1 	bl	8002004 <HAL_DMA_Abort_IT>
      break;
 8003a82:	e01e      	b.n	8003ac2 <HAL_TIM_IC_Stop_DMA+0xd2>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68da      	ldr	r2, [r3, #12]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a92:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7fe fab3 	bl	8002004 <HAL_DMA_Abort_IT>
      break;
 8003a9e:	e010      	b.n	8003ac2 <HAL_TIM_IC_Stop_DMA+0xd2>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	68da      	ldr	r2, [r3, #12]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003aae:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7fe faa5 	bl	8002004 <HAL_DMA_Abort_IT>
      break;
 8003aba:	e002      	b.n	8003ac2 <HAL_TIM_IC_Stop_DMA+0xd2>
    }

    default:
      status = HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	73fb      	strb	r3, [r7, #15]
      break;
 8003ac0:	bf00      	nop
  }

  if (status == HAL_OK)
 8003ac2:	7bfb      	ldrb	r3, [r7, #15]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d14f      	bne.n	8003b68 <HAL_TIM_IC_Stop_DMA+0x178>
  {
    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	6a1a      	ldr	r2, [r3, #32]
 8003ace:	f241 1311 	movw	r3, #4369	; 0x1111
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d10f      	bne.n	8003af8 <HAL_TIM_IC_Stop_DMA+0x108>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	6a1a      	ldr	r2, [r3, #32]
 8003ade:	f240 4344 	movw	r3, #1092	; 0x444
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d107      	bne.n	8003af8 <HAL_TIM_IC_Stop_DMA+0x108>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f022 0201 	bic.w	r2, r2, #1
 8003af6:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d104      	bne.n	8003b08 <HAL_TIM_IC_Stop_DMA+0x118>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2201      	movs	r2, #1
 8003b02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b06:	e013      	b.n	8003b30 <HAL_TIM_IC_Stop_DMA+0x140>
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	2b04      	cmp	r3, #4
 8003b0c:	d104      	bne.n	8003b18 <HAL_TIM_IC_Stop_DMA+0x128>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2201      	movs	r2, #1
 8003b12:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b16:	e00b      	b.n	8003b30 <HAL_TIM_IC_Stop_DMA+0x140>
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	2b08      	cmp	r3, #8
 8003b1c:	d104      	bne.n	8003b28 <HAL_TIM_IC_Stop_DMA+0x138>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2201      	movs	r2, #1
 8003b22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b26:	e003      	b.n	8003b30 <HAL_TIM_IC_Stop_DMA+0x140>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d104      	bne.n	8003b40 <HAL_TIM_IC_Stop_DMA+0x150>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b3e:	e013      	b.n	8003b68 <HAL_TIM_IC_Stop_DMA+0x178>
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	2b04      	cmp	r3, #4
 8003b44:	d104      	bne.n	8003b50 <HAL_TIM_IC_Stop_DMA+0x160>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2201      	movs	r2, #1
 8003b4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b4e:	e00b      	b.n	8003b68 <HAL_TIM_IC_Stop_DMA+0x178>
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	2b08      	cmp	r3, #8
 8003b54:	d104      	bne.n	8003b60 <HAL_TIM_IC_Stop_DMA+0x170>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2201      	movs	r2, #1
 8003b5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b5e:	e003      	b.n	8003b68 <HAL_TIM_IC_Stop_DMA+0x178>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return status;
 8003b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3710      	adds	r7, #16
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop

08003b74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d122      	bne.n	8003bd0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d11b      	bne.n	8003bd0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f06f 0202 	mvn.w	r2, #2
 8003ba0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	f003 0303 	and.w	r3, r3, #3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d003      	beq.n	8003bbe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f7fd fc42 	bl	8001440 <HAL_TIM_IC_CaptureCallback>
 8003bbc:	e005      	b.n	8003bca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f7fd fc52 	bl	8001468 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f000 faf5 	bl	80041b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	f003 0304 	and.w	r3, r3, #4
 8003bda:	2b04      	cmp	r3, #4
 8003bdc:	d122      	bne.n	8003c24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	f003 0304 	and.w	r3, r3, #4
 8003be8:	2b04      	cmp	r3, #4
 8003bea:	d11b      	bne.n	8003c24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f06f 0204 	mvn.w	r2, #4
 8003bf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2202      	movs	r2, #2
 8003bfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d003      	beq.n	8003c12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f7fd fc18 	bl	8001440 <HAL_TIM_IC_CaptureCallback>
 8003c10:	e005      	b.n	8003c1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f7fd fc28 	bl	8001468 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f000 facb 	bl	80041b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	f003 0308 	and.w	r3, r3, #8
 8003c2e:	2b08      	cmp	r3, #8
 8003c30:	d122      	bne.n	8003c78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	f003 0308 	and.w	r3, r3, #8
 8003c3c:	2b08      	cmp	r3, #8
 8003c3e:	d11b      	bne.n	8003c78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f06f 0208 	mvn.w	r2, #8
 8003c48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2204      	movs	r2, #4
 8003c4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	69db      	ldr	r3, [r3, #28]
 8003c56:	f003 0303 	and.w	r3, r3, #3
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d003      	beq.n	8003c66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f7fd fbee 	bl	8001440 <HAL_TIM_IC_CaptureCallback>
 8003c64:	e005      	b.n	8003c72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f7fd fbfe 	bl	8001468 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f000 faa1 	bl	80041b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	f003 0310 	and.w	r3, r3, #16
 8003c82:	2b10      	cmp	r3, #16
 8003c84:	d122      	bne.n	8003ccc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	f003 0310 	and.w	r3, r3, #16
 8003c90:	2b10      	cmp	r3, #16
 8003c92:	d11b      	bne.n	8003ccc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f06f 0210 	mvn.w	r2, #16
 8003c9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2208      	movs	r2, #8
 8003ca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	69db      	ldr	r3, [r3, #28]
 8003caa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d003      	beq.n	8003cba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f7fd fbc4 	bl	8001440 <HAL_TIM_IC_CaptureCallback>
 8003cb8:	e005      	b.n	8003cc6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f7fd fbd4 	bl	8001468 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f000 fa77 	bl	80041b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	f003 0301 	and.w	r3, r3, #1
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d10e      	bne.n	8003cf8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	f003 0301 	and.w	r3, r3, #1
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d107      	bne.n	8003cf8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f06f 0201 	mvn.w	r2, #1
 8003cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 fa4a 	bl	800418c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d02:	2b80      	cmp	r3, #128	; 0x80
 8003d04:	d10e      	bne.n	8003d24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d10:	2b80      	cmp	r3, #128	; 0x80
 8003d12:	d107      	bne.n	8003d24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 ffaa 	bl	8004c78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d2e:	2b40      	cmp	r3, #64	; 0x40
 8003d30:	d10e      	bne.n	8003d50 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d3c:	2b40      	cmp	r3, #64	; 0x40
 8003d3e:	d107      	bne.n	8003d50 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 fa3c 	bl	80041c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	f003 0320 	and.w	r3, r3, #32
 8003d5a:	2b20      	cmp	r3, #32
 8003d5c:	d10e      	bne.n	8003d7c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	f003 0320 	and.w	r3, r3, #32
 8003d68:	2b20      	cmp	r3, #32
 8003d6a:	d107      	bne.n	8003d7c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f06f 0220 	mvn.w	r2, #32
 8003d74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 ff74 	bl	8004c64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d7c:	bf00      	nop
 8003d7e:	3708      	adds	r7, #8
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b086      	sub	sp, #24
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d90:	2300      	movs	r3, #0
 8003d92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d101      	bne.n	8003da2 <HAL_TIM_OC_ConfigChannel+0x1e>
 8003d9e:	2302      	movs	r3, #2
 8003da0:	e048      	b.n	8003e34 <HAL_TIM_OC_ConfigChannel+0xb0>
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2b0c      	cmp	r3, #12
 8003dae:	d839      	bhi.n	8003e24 <HAL_TIM_OC_ConfigChannel+0xa0>
 8003db0:	a201      	add	r2, pc, #4	; (adr r2, 8003db8 <HAL_TIM_OC_ConfigChannel+0x34>)
 8003db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003db6:	bf00      	nop
 8003db8:	08003ded 	.word	0x08003ded
 8003dbc:	08003e25 	.word	0x08003e25
 8003dc0:	08003e25 	.word	0x08003e25
 8003dc4:	08003e25 	.word	0x08003e25
 8003dc8:	08003dfb 	.word	0x08003dfb
 8003dcc:	08003e25 	.word	0x08003e25
 8003dd0:	08003e25 	.word	0x08003e25
 8003dd4:	08003e25 	.word	0x08003e25
 8003dd8:	08003e09 	.word	0x08003e09
 8003ddc:	08003e25 	.word	0x08003e25
 8003de0:	08003e25 	.word	0x08003e25
 8003de4:	08003e25 	.word	0x08003e25
 8003de8:	08003e17 	.word	0x08003e17
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68b9      	ldr	r1, [r7, #8]
 8003df2:	4618      	mov	r0, r3
 8003df4:	f000 fb5e 	bl	80044b4 <TIM_OC1_SetConfig>
      break;
 8003df8:	e017      	b.n	8003e2a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68b9      	ldr	r1, [r7, #8]
 8003e00:	4618      	mov	r0, r3
 8003e02:	f000 fbbd 	bl	8004580 <TIM_OC2_SetConfig>
      break;
 8003e06:	e010      	b.n	8003e2a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68b9      	ldr	r1, [r7, #8]
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f000 fc22 	bl	8004658 <TIM_OC3_SetConfig>
      break;
 8003e14:	e009      	b.n	8003e2a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68b9      	ldr	r1, [r7, #8]
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f000 fc85 	bl	800472c <TIM_OC4_SetConfig>
      break;
 8003e22:	e002      	b.n	8003e2a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	75fb      	strb	r3, [r7, #23]
      break;
 8003e28:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e32:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3718      	adds	r7, #24
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b086      	sub	sp, #24
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d101      	bne.n	8003e5a <HAL_TIM_IC_ConfigChannel+0x1e>
 8003e56:	2302      	movs	r3, #2
 8003e58:	e088      	b.n	8003f6c <HAL_TIM_IC_ConfigChannel+0x130>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d11b      	bne.n	8003ea0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6818      	ldr	r0, [r3, #0]
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	6819      	ldr	r1, [r3, #0]
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	685a      	ldr	r2, [r3, #4]
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	f000 fca8 	bl	80047cc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	699a      	ldr	r2, [r3, #24]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f022 020c 	bic.w	r2, r2, #12
 8003e8a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	6999      	ldr	r1, [r3, #24]
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	689a      	ldr	r2, [r3, #8]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	430a      	orrs	r2, r1
 8003e9c:	619a      	str	r2, [r3, #24]
 8003e9e:	e060      	b.n	8003f62 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2b04      	cmp	r3, #4
 8003ea4:	d11c      	bne.n	8003ee0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6818      	ldr	r0, [r3, #0]
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	6819      	ldr	r1, [r3, #0]
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	685a      	ldr	r2, [r3, #4]
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	f000 fd20 	bl	80048fa <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	699a      	ldr	r2, [r3, #24]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003ec8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	6999      	ldr	r1, [r3, #24]
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	021a      	lsls	r2, r3, #8
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	430a      	orrs	r2, r1
 8003edc:	619a      	str	r2, [r3, #24]
 8003ede:	e040      	b.n	8003f62 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2b08      	cmp	r3, #8
 8003ee4:	d11b      	bne.n	8003f1e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6818      	ldr	r0, [r3, #0]
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	6819      	ldr	r1, [r3, #0]
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	685a      	ldr	r2, [r3, #4]
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	f000 fd6d 	bl	80049d4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	69da      	ldr	r2, [r3, #28]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f022 020c 	bic.w	r2, r2, #12
 8003f08:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	69d9      	ldr	r1, [r3, #28]
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	689a      	ldr	r2, [r3, #8]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	61da      	str	r2, [r3, #28]
 8003f1c:	e021      	b.n	8003f62 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2b0c      	cmp	r3, #12
 8003f22:	d11c      	bne.n	8003f5e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6818      	ldr	r0, [r3, #0]
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	6819      	ldr	r1, [r3, #0]
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	685a      	ldr	r2, [r3, #4]
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	f000 fd8a 	bl	8004a4c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	69da      	ldr	r2, [r3, #28]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003f46:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	69d9      	ldr	r1, [r3, #28]
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	021a      	lsls	r2, r3, #8
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	430a      	orrs	r2, r1
 8003f5a:	61da      	str	r2, [r3, #28]
 8003f5c:	e001      	b.n	8003f62 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3718      	adds	r7, #24
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d101      	bne.n	8003f90 <HAL_TIM_ConfigClockSource+0x1c>
 8003f8c:	2302      	movs	r3, #2
 8003f8e:	e0b4      	b.n	80040fa <HAL_TIM_ConfigClockSource+0x186>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2202      	movs	r2, #2
 8003f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003fae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fb6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68ba      	ldr	r2, [r7, #8]
 8003fbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fc8:	d03e      	beq.n	8004048 <HAL_TIM_ConfigClockSource+0xd4>
 8003fca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fce:	f200 8087 	bhi.w	80040e0 <HAL_TIM_ConfigClockSource+0x16c>
 8003fd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fd6:	f000 8086 	beq.w	80040e6 <HAL_TIM_ConfigClockSource+0x172>
 8003fda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fde:	d87f      	bhi.n	80040e0 <HAL_TIM_ConfigClockSource+0x16c>
 8003fe0:	2b70      	cmp	r3, #112	; 0x70
 8003fe2:	d01a      	beq.n	800401a <HAL_TIM_ConfigClockSource+0xa6>
 8003fe4:	2b70      	cmp	r3, #112	; 0x70
 8003fe6:	d87b      	bhi.n	80040e0 <HAL_TIM_ConfigClockSource+0x16c>
 8003fe8:	2b60      	cmp	r3, #96	; 0x60
 8003fea:	d050      	beq.n	800408e <HAL_TIM_ConfigClockSource+0x11a>
 8003fec:	2b60      	cmp	r3, #96	; 0x60
 8003fee:	d877      	bhi.n	80040e0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ff0:	2b50      	cmp	r3, #80	; 0x50
 8003ff2:	d03c      	beq.n	800406e <HAL_TIM_ConfigClockSource+0xfa>
 8003ff4:	2b50      	cmp	r3, #80	; 0x50
 8003ff6:	d873      	bhi.n	80040e0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ff8:	2b40      	cmp	r3, #64	; 0x40
 8003ffa:	d058      	beq.n	80040ae <HAL_TIM_ConfigClockSource+0x13a>
 8003ffc:	2b40      	cmp	r3, #64	; 0x40
 8003ffe:	d86f      	bhi.n	80040e0 <HAL_TIM_ConfigClockSource+0x16c>
 8004000:	2b30      	cmp	r3, #48	; 0x30
 8004002:	d064      	beq.n	80040ce <HAL_TIM_ConfigClockSource+0x15a>
 8004004:	2b30      	cmp	r3, #48	; 0x30
 8004006:	d86b      	bhi.n	80040e0 <HAL_TIM_ConfigClockSource+0x16c>
 8004008:	2b20      	cmp	r3, #32
 800400a:	d060      	beq.n	80040ce <HAL_TIM_ConfigClockSource+0x15a>
 800400c:	2b20      	cmp	r3, #32
 800400e:	d867      	bhi.n	80040e0 <HAL_TIM_ConfigClockSource+0x16c>
 8004010:	2b00      	cmp	r3, #0
 8004012:	d05c      	beq.n	80040ce <HAL_TIM_ConfigClockSource+0x15a>
 8004014:	2b10      	cmp	r3, #16
 8004016:	d05a      	beq.n	80040ce <HAL_TIM_ConfigClockSource+0x15a>
 8004018:	e062      	b.n	80040e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6818      	ldr	r0, [r3, #0]
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	6899      	ldr	r1, [r3, #8]
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	685a      	ldr	r2, [r3, #4]
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	f000 fd67 	bl	8004afc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800403c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68ba      	ldr	r2, [r7, #8]
 8004044:	609a      	str	r2, [r3, #8]
      break;
 8004046:	e04f      	b.n	80040e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6818      	ldr	r0, [r3, #0]
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	6899      	ldr	r1, [r3, #8]
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	685a      	ldr	r2, [r3, #4]
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	f000 fd50 	bl	8004afc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	689a      	ldr	r2, [r3, #8]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800406a:	609a      	str	r2, [r3, #8]
      break;
 800406c:	e03c      	b.n	80040e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6818      	ldr	r0, [r3, #0]
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	6859      	ldr	r1, [r3, #4]
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	461a      	mov	r2, r3
 800407c:	f000 fc0e 	bl	800489c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2150      	movs	r1, #80	; 0x50
 8004086:	4618      	mov	r0, r3
 8004088:	f000 fd1d 	bl	8004ac6 <TIM_ITRx_SetConfig>
      break;
 800408c:	e02c      	b.n	80040e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6818      	ldr	r0, [r3, #0]
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	6859      	ldr	r1, [r3, #4]
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	461a      	mov	r2, r3
 800409c:	f000 fc6a 	bl	8004974 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2160      	movs	r1, #96	; 0x60
 80040a6:	4618      	mov	r0, r3
 80040a8:	f000 fd0d 	bl	8004ac6 <TIM_ITRx_SetConfig>
      break;
 80040ac:	e01c      	b.n	80040e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6818      	ldr	r0, [r3, #0]
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	6859      	ldr	r1, [r3, #4]
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	461a      	mov	r2, r3
 80040bc:	f000 fbee 	bl	800489c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2140      	movs	r1, #64	; 0x40
 80040c6:	4618      	mov	r0, r3
 80040c8:	f000 fcfd 	bl	8004ac6 <TIM_ITRx_SetConfig>
      break;
 80040cc:	e00c      	b.n	80040e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4619      	mov	r1, r3
 80040d8:	4610      	mov	r0, r2
 80040da:	f000 fcf4 	bl	8004ac6 <TIM_ITRx_SetConfig>
      break;
 80040de:	e003      	b.n	80040e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	73fb      	strb	r3, [r7, #15]
      break;
 80040e4:	e000      	b.n	80040e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80040e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80040f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3710      	adds	r7, #16
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
	...

08004104 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004104:	b480      	push	{r7}
 8004106:	b085      	sub	sp, #20
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800410e:	2300      	movs	r3, #0
 8004110:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	2b0c      	cmp	r3, #12
 8004116:	d831      	bhi.n	800417c <HAL_TIM_ReadCapturedValue+0x78>
 8004118:	a201      	add	r2, pc, #4	; (adr r2, 8004120 <HAL_TIM_ReadCapturedValue+0x1c>)
 800411a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800411e:	bf00      	nop
 8004120:	08004155 	.word	0x08004155
 8004124:	0800417d 	.word	0x0800417d
 8004128:	0800417d 	.word	0x0800417d
 800412c:	0800417d 	.word	0x0800417d
 8004130:	0800415f 	.word	0x0800415f
 8004134:	0800417d 	.word	0x0800417d
 8004138:	0800417d 	.word	0x0800417d
 800413c:	0800417d 	.word	0x0800417d
 8004140:	08004169 	.word	0x08004169
 8004144:	0800417d 	.word	0x0800417d
 8004148:	0800417d 	.word	0x0800417d
 800414c:	0800417d 	.word	0x0800417d
 8004150:	08004173 	.word	0x08004173
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800415a:	60fb      	str	r3, [r7, #12]

      break;
 800415c:	e00f      	b.n	800417e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004164:	60fb      	str	r3, [r7, #12]

      break;
 8004166:	e00a      	b.n	800417e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800416e:	60fb      	str	r3, [r7, #12]

      break;
 8004170:	e005      	b.n	800417e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004178:	60fb      	str	r3, [r7, #12]

      break;
 800417a:	e000      	b.n	800417e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800417c:	bf00      	nop
  }

  return tmpreg;
 800417e:	68fb      	ldr	r3, [r7, #12]
}
 8004180:	4618      	mov	r0, r3
 8004182:	3714      	adds	r7, #20
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004194:	bf00      	nop
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041bc:	bf00      	nop
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041d0:	bf00      	nop
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80041e4:	bf00      	nop
 80041e6:	370c      	adds	r7, #12
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041fc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	429a      	cmp	r2, r3
 8004206:	d107      	bne.n	8004218 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2201      	movs	r2, #1
 800420c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004216:	e02a      	b.n	800426e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	429a      	cmp	r2, r3
 8004220:	d107      	bne.n	8004232 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2202      	movs	r2, #2
 8004226:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004230:	e01d      	b.n	800426e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	429a      	cmp	r2, r3
 800423a:	d107      	bne.n	800424c <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2204      	movs	r2, #4
 8004240:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2201      	movs	r2, #1
 8004246:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800424a:	e010      	b.n	800426e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	429a      	cmp	r2, r3
 8004254:	d107      	bne.n	8004266 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2208      	movs	r2, #8
 800425a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004264:	e003      	b.n	800426e <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2201      	movs	r2, #1
 800426a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	f7ff ffb4 	bl	80041dc <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2200      	movs	r2, #0
 8004278:	771a      	strb	r2, [r3, #28]
}
 800427a:	bf00      	nop
 800427c:	3710      	adds	r7, #16
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}

08004282 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8004282:	b580      	push	{r7, lr}
 8004284:	b084      	sub	sp, #16
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800428e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	429a      	cmp	r2, r3
 8004298:	d10f      	bne.n	80042ba <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2201      	movs	r2, #1
 800429e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	69db      	ldr	r3, [r3, #28]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d146      	bne.n	8004336 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042b8:	e03d      	b.n	8004336 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d10f      	bne.n	80042e4 <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2202      	movs	r2, #2
 80042c8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	69db      	ldr	r3, [r3, #28]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d131      	bne.n	8004336 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2201      	movs	r2, #1
 80042de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042e2:	e028      	b.n	8004336 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d10f      	bne.n	800430e <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2204      	movs	r2, #4
 80042f2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	69db      	ldr	r3, [r3, #28]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d11c      	bne.n	8004336 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800430c:	e013      	b.n	8004336 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	429a      	cmp	r2, r3
 8004316:	d10e      	bne.n	8004336 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2208      	movs	r2, #8
 800431c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	69db      	ldr	r3, [r3, #28]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d107      	bne.n	8004336 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2201      	movs	r2, #1
 800432a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2201      	movs	r2, #1
 8004332:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8004336:	68f8      	ldr	r0, [r7, #12]
 8004338:	f7fd f882 	bl	8001440 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	771a      	strb	r2, [r3, #28]
}
 8004342:	bf00      	nop
 8004344:	3710      	adds	r7, #16
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}

0800434a <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 800434a:	b580      	push	{r7, lr}
 800434c:	b084      	sub	sp, #16
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004356:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	429a      	cmp	r2, r3
 8004360:	d103      	bne.n	800436a <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2201      	movs	r2, #1
 8004366:	771a      	strb	r2, [r3, #28]
 8004368:	e019      	b.n	800439e <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	429a      	cmp	r2, r3
 8004372:	d103      	bne.n	800437c <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2202      	movs	r2, #2
 8004378:	771a      	strb	r2, [r3, #28]
 800437a:	e010      	b.n	800439e <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	429a      	cmp	r2, r3
 8004384:	d103      	bne.n	800438e <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2204      	movs	r2, #4
 800438a:	771a      	strb	r2, [r3, #28]
 800438c:	e007      	b.n	800439e <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	429a      	cmp	r2, r3
 8004396:	d102      	bne.n	800439e <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2208      	movs	r2, #8
 800439c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800439e:	68f8      	ldr	r0, [r7, #12]
 80043a0:	f7ff fefe 	bl	80041a0 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2200      	movs	r2, #0
 80043a8:	771a      	strb	r2, [r3, #28]
}
 80043aa:	bf00      	nop
 80043ac:	3710      	adds	r7, #16
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
	...

080043b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b085      	sub	sp, #20
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a34      	ldr	r2, [pc, #208]	; (8004498 <TIM_Base_SetConfig+0xe4>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d00f      	beq.n	80043ec <TIM_Base_SetConfig+0x38>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043d2:	d00b      	beq.n	80043ec <TIM_Base_SetConfig+0x38>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4a31      	ldr	r2, [pc, #196]	; (800449c <TIM_Base_SetConfig+0xe8>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d007      	beq.n	80043ec <TIM_Base_SetConfig+0x38>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4a30      	ldr	r2, [pc, #192]	; (80044a0 <TIM_Base_SetConfig+0xec>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d003      	beq.n	80043ec <TIM_Base_SetConfig+0x38>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a2f      	ldr	r2, [pc, #188]	; (80044a4 <TIM_Base_SetConfig+0xf0>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d108      	bne.n	80043fe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	68fa      	ldr	r2, [r7, #12]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a25      	ldr	r2, [pc, #148]	; (8004498 <TIM_Base_SetConfig+0xe4>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d01b      	beq.n	800443e <TIM_Base_SetConfig+0x8a>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800440c:	d017      	beq.n	800443e <TIM_Base_SetConfig+0x8a>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a22      	ldr	r2, [pc, #136]	; (800449c <TIM_Base_SetConfig+0xe8>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d013      	beq.n	800443e <TIM_Base_SetConfig+0x8a>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a21      	ldr	r2, [pc, #132]	; (80044a0 <TIM_Base_SetConfig+0xec>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d00f      	beq.n	800443e <TIM_Base_SetConfig+0x8a>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a20      	ldr	r2, [pc, #128]	; (80044a4 <TIM_Base_SetConfig+0xf0>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d00b      	beq.n	800443e <TIM_Base_SetConfig+0x8a>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a1f      	ldr	r2, [pc, #124]	; (80044a8 <TIM_Base_SetConfig+0xf4>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d007      	beq.n	800443e <TIM_Base_SetConfig+0x8a>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a1e      	ldr	r2, [pc, #120]	; (80044ac <TIM_Base_SetConfig+0xf8>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d003      	beq.n	800443e <TIM_Base_SetConfig+0x8a>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a1d      	ldr	r2, [pc, #116]	; (80044b0 <TIM_Base_SetConfig+0xfc>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d108      	bne.n	8004450 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004444:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	4313      	orrs	r3, r2
 800444e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	695b      	ldr	r3, [r3, #20]
 800445a:	4313      	orrs	r3, r2
 800445c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	689a      	ldr	r2, [r3, #8]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a08      	ldr	r2, [pc, #32]	; (8004498 <TIM_Base_SetConfig+0xe4>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d103      	bne.n	8004484 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	691a      	ldr	r2, [r3, #16]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	615a      	str	r2, [r3, #20]
}
 800448a:	bf00      	nop
 800448c:	3714      	adds	r7, #20
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	40010000 	.word	0x40010000
 800449c:	40000400 	.word	0x40000400
 80044a0:	40000800 	.word	0x40000800
 80044a4:	40000c00 	.word	0x40000c00
 80044a8:	40014000 	.word	0x40014000
 80044ac:	40014400 	.word	0x40014400
 80044b0:	40014800 	.word	0x40014800

080044b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b087      	sub	sp, #28
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a1b      	ldr	r3, [r3, #32]
 80044c2:	f023 0201 	bic.w	r2, r3, #1
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a1b      	ldr	r3, [r3, #32]
 80044ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	699b      	ldr	r3, [r3, #24]
 80044da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f023 0303 	bic.w	r3, r3, #3
 80044ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68fa      	ldr	r2, [r7, #12]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	f023 0302 	bic.w	r3, r3, #2
 80044fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	697a      	ldr	r2, [r7, #20]
 8004504:	4313      	orrs	r3, r2
 8004506:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a1c      	ldr	r2, [pc, #112]	; (800457c <TIM_OC1_SetConfig+0xc8>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d10c      	bne.n	800452a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	f023 0308 	bic.w	r3, r3, #8
 8004516:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	697a      	ldr	r2, [r7, #20]
 800451e:	4313      	orrs	r3, r2
 8004520:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	f023 0304 	bic.w	r3, r3, #4
 8004528:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a13      	ldr	r2, [pc, #76]	; (800457c <TIM_OC1_SetConfig+0xc8>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d111      	bne.n	8004556 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004538:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004540:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	693a      	ldr	r2, [r7, #16]
 8004548:	4313      	orrs	r3, r2
 800454a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	699b      	ldr	r3, [r3, #24]
 8004550:	693a      	ldr	r2, [r7, #16]
 8004552:	4313      	orrs	r3, r2
 8004554:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	693a      	ldr	r2, [r7, #16]
 800455a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	685a      	ldr	r2, [r3, #4]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	697a      	ldr	r2, [r7, #20]
 800456e:	621a      	str	r2, [r3, #32]
}
 8004570:	bf00      	nop
 8004572:	371c      	adds	r7, #28
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr
 800457c:	40010000 	.word	0x40010000

08004580 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004580:	b480      	push	{r7}
 8004582:	b087      	sub	sp, #28
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a1b      	ldr	r3, [r3, #32]
 800458e:	f023 0210 	bic.w	r2, r3, #16
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a1b      	ldr	r3, [r3, #32]
 800459a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	699b      	ldr	r3, [r3, #24]
 80045a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	021b      	lsls	r3, r3, #8
 80045be:	68fa      	ldr	r2, [r7, #12]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	f023 0320 	bic.w	r3, r3, #32
 80045ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	011b      	lsls	r3, r3, #4
 80045d2:	697a      	ldr	r2, [r7, #20]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	4a1e      	ldr	r2, [pc, #120]	; (8004654 <TIM_OC2_SetConfig+0xd4>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d10d      	bne.n	80045fc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	011b      	lsls	r3, r3, #4
 80045ee:	697a      	ldr	r2, [r7, #20]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4a15      	ldr	r2, [pc, #84]	; (8004654 <TIM_OC2_SetConfig+0xd4>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d113      	bne.n	800462c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800460a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004612:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	695b      	ldr	r3, [r3, #20]
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	693a      	ldr	r2, [r7, #16]
 800461c:	4313      	orrs	r3, r2
 800461e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	693a      	ldr	r2, [r7, #16]
 8004628:	4313      	orrs	r3, r2
 800462a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	693a      	ldr	r2, [r7, #16]
 8004630:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	68fa      	ldr	r2, [r7, #12]
 8004636:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	685a      	ldr	r2, [r3, #4]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	697a      	ldr	r2, [r7, #20]
 8004644:	621a      	str	r2, [r3, #32]
}
 8004646:	bf00      	nop
 8004648:	371c      	adds	r7, #28
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	40010000 	.word	0x40010000

08004658 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004658:	b480      	push	{r7}
 800465a:	b087      	sub	sp, #28
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a1b      	ldr	r3, [r3, #32]
 8004666:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a1b      	ldr	r3, [r3, #32]
 8004672:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	69db      	ldr	r3, [r3, #28]
 800467e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004686:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f023 0303 	bic.w	r3, r3, #3
 800468e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68fa      	ldr	r2, [r7, #12]
 8004696:	4313      	orrs	r3, r2
 8004698:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	021b      	lsls	r3, r3, #8
 80046a8:	697a      	ldr	r2, [r7, #20]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a1d      	ldr	r2, [pc, #116]	; (8004728 <TIM_OC3_SetConfig+0xd0>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d10d      	bne.n	80046d2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	021b      	lsls	r3, r3, #8
 80046c4:	697a      	ldr	r2, [r7, #20]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a14      	ldr	r2, [pc, #80]	; (8004728 <TIM_OC3_SetConfig+0xd0>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d113      	bne.n	8004702 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	695b      	ldr	r3, [r3, #20]
 80046ee:	011b      	lsls	r3, r3, #4
 80046f0:	693a      	ldr	r2, [r7, #16]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	699b      	ldr	r3, [r3, #24]
 80046fa:	011b      	lsls	r3, r3, #4
 80046fc:	693a      	ldr	r2, [r7, #16]
 80046fe:	4313      	orrs	r3, r2
 8004700:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	693a      	ldr	r2, [r7, #16]
 8004706:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	685a      	ldr	r2, [r3, #4]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	697a      	ldr	r2, [r7, #20]
 800471a:	621a      	str	r2, [r3, #32]
}
 800471c:	bf00      	nop
 800471e:	371c      	adds	r7, #28
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr
 8004728:	40010000 	.word	0x40010000

0800472c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800472c:	b480      	push	{r7}
 800472e:	b087      	sub	sp, #28
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a1b      	ldr	r3, [r3, #32]
 800473a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a1b      	ldr	r3, [r3, #32]
 8004746:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	69db      	ldr	r3, [r3, #28]
 8004752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800475a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004762:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	021b      	lsls	r3, r3, #8
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	4313      	orrs	r3, r2
 800476e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004776:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	031b      	lsls	r3, r3, #12
 800477e:	693a      	ldr	r2, [r7, #16]
 8004780:	4313      	orrs	r3, r2
 8004782:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a10      	ldr	r2, [pc, #64]	; (80047c8 <TIM_OC4_SetConfig+0x9c>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d109      	bne.n	80047a0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004792:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	695b      	ldr	r3, [r3, #20]
 8004798:	019b      	lsls	r3, r3, #6
 800479a:	697a      	ldr	r2, [r7, #20]
 800479c:	4313      	orrs	r3, r2
 800479e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	697a      	ldr	r2, [r7, #20]
 80047a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	68fa      	ldr	r2, [r7, #12]
 80047aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	685a      	ldr	r2, [r3, #4]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	693a      	ldr	r2, [r7, #16]
 80047b8:	621a      	str	r2, [r3, #32]
}
 80047ba:	bf00      	nop
 80047bc:	371c      	adds	r7, #28
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop
 80047c8:	40010000 	.word	0x40010000

080047cc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b087      	sub	sp, #28
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	60f8      	str	r0, [r7, #12]
 80047d4:	60b9      	str	r1, [r7, #8]
 80047d6:	607a      	str	r2, [r7, #4]
 80047d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6a1b      	ldr	r3, [r3, #32]
 80047de:	f023 0201 	bic.w	r2, r3, #1
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6a1b      	ldr	r3, [r3, #32]
 80047f0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	4a24      	ldr	r2, [pc, #144]	; (8004888 <TIM_TI1_SetConfig+0xbc>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d013      	beq.n	8004822 <TIM_TI1_SetConfig+0x56>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004800:	d00f      	beq.n	8004822 <TIM_TI1_SetConfig+0x56>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	4a21      	ldr	r2, [pc, #132]	; (800488c <TIM_TI1_SetConfig+0xc0>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d00b      	beq.n	8004822 <TIM_TI1_SetConfig+0x56>
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	4a20      	ldr	r2, [pc, #128]	; (8004890 <TIM_TI1_SetConfig+0xc4>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d007      	beq.n	8004822 <TIM_TI1_SetConfig+0x56>
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	4a1f      	ldr	r2, [pc, #124]	; (8004894 <TIM_TI1_SetConfig+0xc8>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d003      	beq.n	8004822 <TIM_TI1_SetConfig+0x56>
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	4a1e      	ldr	r2, [pc, #120]	; (8004898 <TIM_TI1_SetConfig+0xcc>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d101      	bne.n	8004826 <TIM_TI1_SetConfig+0x5a>
 8004822:	2301      	movs	r3, #1
 8004824:	e000      	b.n	8004828 <TIM_TI1_SetConfig+0x5c>
 8004826:	2300      	movs	r3, #0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d008      	beq.n	800483e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	f023 0303 	bic.w	r3, r3, #3
 8004832:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004834:	697a      	ldr	r2, [r7, #20]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4313      	orrs	r3, r2
 800483a:	617b      	str	r3, [r7, #20]
 800483c:	e003      	b.n	8004846 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	f043 0301 	orr.w	r3, r3, #1
 8004844:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800484c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	011b      	lsls	r3, r3, #4
 8004852:	b2db      	uxtb	r3, r3
 8004854:	697a      	ldr	r2, [r7, #20]
 8004856:	4313      	orrs	r3, r2
 8004858:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	f023 030a 	bic.w	r3, r3, #10
 8004860:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	f003 030a 	and.w	r3, r3, #10
 8004868:	693a      	ldr	r2, [r7, #16]
 800486a:	4313      	orrs	r3, r2
 800486c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	697a      	ldr	r2, [r7, #20]
 8004872:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	693a      	ldr	r2, [r7, #16]
 8004878:	621a      	str	r2, [r3, #32]
}
 800487a:	bf00      	nop
 800487c:	371c      	adds	r7, #28
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	40010000 	.word	0x40010000
 800488c:	40000400 	.word	0x40000400
 8004890:	40000800 	.word	0x40000800
 8004894:	40000c00 	.word	0x40000c00
 8004898:	40014000 	.word	0x40014000

0800489c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800489c:	b480      	push	{r7}
 800489e:	b087      	sub	sp, #28
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6a1b      	ldr	r3, [r3, #32]
 80048ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6a1b      	ldr	r3, [r3, #32]
 80048b2:	f023 0201 	bic.w	r2, r3, #1
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	011b      	lsls	r3, r3, #4
 80048cc:	693a      	ldr	r2, [r7, #16]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	f023 030a 	bic.w	r3, r3, #10
 80048d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048da:	697a      	ldr	r2, [r7, #20]
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	4313      	orrs	r3, r2
 80048e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	693a      	ldr	r2, [r7, #16]
 80048e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	697a      	ldr	r2, [r7, #20]
 80048ec:	621a      	str	r2, [r3, #32]
}
 80048ee:	bf00      	nop
 80048f0:	371c      	adds	r7, #28
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr

080048fa <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80048fa:	b480      	push	{r7}
 80048fc:	b087      	sub	sp, #28
 80048fe:	af00      	add	r7, sp, #0
 8004900:	60f8      	str	r0, [r7, #12]
 8004902:	60b9      	str	r1, [r7, #8]
 8004904:	607a      	str	r2, [r7, #4]
 8004906:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6a1b      	ldr	r3, [r3, #32]
 800490c:	f023 0210 	bic.w	r2, r3, #16
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	699b      	ldr	r3, [r3, #24]
 8004918:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6a1b      	ldr	r3, [r3, #32]
 800491e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004926:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	021b      	lsls	r3, r3, #8
 800492c:	697a      	ldr	r2, [r7, #20]
 800492e:	4313      	orrs	r3, r2
 8004930:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004938:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	031b      	lsls	r3, r3, #12
 800493e:	b29b      	uxth	r3, r3
 8004940:	697a      	ldr	r2, [r7, #20]
 8004942:	4313      	orrs	r3, r2
 8004944:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800494c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	011b      	lsls	r3, r3, #4
 8004952:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004956:	693a      	ldr	r2, [r7, #16]
 8004958:	4313      	orrs	r3, r2
 800495a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	697a      	ldr	r2, [r7, #20]
 8004960:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	693a      	ldr	r2, [r7, #16]
 8004966:	621a      	str	r2, [r3, #32]
}
 8004968:	bf00      	nop
 800496a:	371c      	adds	r7, #28
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004974:	b480      	push	{r7}
 8004976:	b087      	sub	sp, #28
 8004978:	af00      	add	r7, sp, #0
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6a1b      	ldr	r3, [r3, #32]
 8004984:	f023 0210 	bic.w	r2, r3, #16
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	699b      	ldr	r3, [r3, #24]
 8004990:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6a1b      	ldr	r3, [r3, #32]
 8004996:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800499e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	031b      	lsls	r3, r3, #12
 80049a4:	697a      	ldr	r2, [r7, #20]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80049b0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	011b      	lsls	r3, r3, #4
 80049b6:	693a      	ldr	r2, [r7, #16]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	697a      	ldr	r2, [r7, #20]
 80049c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	693a      	ldr	r2, [r7, #16]
 80049c6:	621a      	str	r2, [r3, #32]
}
 80049c8:	bf00      	nop
 80049ca:	371c      	adds	r7, #28
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b087      	sub	sp, #28
 80049d8:	af00      	add	r7, sp, #0
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	607a      	str	r2, [r7, #4]
 80049e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6a1b      	ldr	r3, [r3, #32]
 80049e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	69db      	ldr	r3, [r3, #28]
 80049f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6a1b      	ldr	r3, [r3, #32]
 80049f8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	f023 0303 	bic.w	r3, r3, #3
 8004a00:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004a02:	697a      	ldr	r2, [r7, #20]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a10:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	011b      	lsls	r3, r3, #4
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	697a      	ldr	r2, [r7, #20]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004a24:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	021b      	lsls	r3, r3, #8
 8004a2a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004a2e:	693a      	ldr	r2, [r7, #16]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	697a      	ldr	r2, [r7, #20]
 8004a38:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	693a      	ldr	r2, [r7, #16]
 8004a3e:	621a      	str	r2, [r3, #32]
}
 8004a40:	bf00      	nop
 8004a42:	371c      	adds	r7, #28
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b087      	sub	sp, #28
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	60b9      	str	r1, [r7, #8]
 8004a56:	607a      	str	r2, [r7, #4]
 8004a58:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6a1b      	ldr	r3, [r3, #32]
 8004a5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	69db      	ldr	r3, [r3, #28]
 8004a6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6a1b      	ldr	r3, [r3, #32]
 8004a70:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a78:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	021b      	lsls	r3, r3, #8
 8004a7e:	697a      	ldr	r2, [r7, #20]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a8a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	031b      	lsls	r3, r3, #12
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	697a      	ldr	r2, [r7, #20]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004a9e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	031b      	lsls	r3, r3, #12
 8004aa4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004aa8:	693a      	ldr	r2, [r7, #16]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	697a      	ldr	r2, [r7, #20]
 8004ab2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	693a      	ldr	r2, [r7, #16]
 8004ab8:	621a      	str	r2, [r3, #32]
}
 8004aba:	bf00      	nop
 8004abc:	371c      	adds	r7, #28
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr

08004ac6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ac6:	b480      	push	{r7}
 8004ac8:	b085      	sub	sp, #20
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
 8004ace:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004adc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ade:	683a      	ldr	r2, [r7, #0]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	f043 0307 	orr.w	r3, r3, #7
 8004ae8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	609a      	str	r2, [r3, #8]
}
 8004af0:	bf00      	nop
 8004af2:	3714      	adds	r7, #20
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b087      	sub	sp, #28
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	60b9      	str	r1, [r7, #8]
 8004b06:	607a      	str	r2, [r7, #4]
 8004b08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	021a      	lsls	r2, r3, #8
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	431a      	orrs	r2, r3
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	697a      	ldr	r2, [r7, #20]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	697a      	ldr	r2, [r7, #20]
 8004b2e:	609a      	str	r2, [r3, #8]
}
 8004b30:	bf00      	nop
 8004b32:	371c      	adds	r7, #28
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b087      	sub	sp, #28
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	60f8      	str	r0, [r7, #12]
 8004b44:	60b9      	str	r1, [r7, #8]
 8004b46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	f003 031f 	and.w	r3, r3, #31
 8004b4e:	2201      	movs	r2, #1
 8004b50:	fa02 f303 	lsl.w	r3, r2, r3
 8004b54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6a1a      	ldr	r2, [r3, #32]
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	43db      	mvns	r3, r3
 8004b5e:	401a      	ands	r2, r3
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6a1a      	ldr	r2, [r3, #32]
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	f003 031f 	and.w	r3, r3, #31
 8004b6e:	6879      	ldr	r1, [r7, #4]
 8004b70:	fa01 f303 	lsl.w	r3, r1, r3
 8004b74:	431a      	orrs	r2, r3
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	621a      	str	r2, [r3, #32]
}
 8004b7a:	bf00      	nop
 8004b7c:	371c      	adds	r7, #28
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
	...

08004b88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b085      	sub	sp, #20
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d101      	bne.n	8004ba0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b9c:	2302      	movs	r3, #2
 8004b9e:	e050      	b.n	8004c42 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2202      	movs	r2, #2
 8004bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a1c      	ldr	r2, [pc, #112]	; (8004c50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d018      	beq.n	8004c16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bec:	d013      	beq.n	8004c16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a18      	ldr	r2, [pc, #96]	; (8004c54 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d00e      	beq.n	8004c16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a16      	ldr	r2, [pc, #88]	; (8004c58 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d009      	beq.n	8004c16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a15      	ldr	r2, [pc, #84]	; (8004c5c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d004      	beq.n	8004c16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a13      	ldr	r2, [pc, #76]	; (8004c60 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d10c      	bne.n	8004c30 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	68ba      	ldr	r2, [r7, #8]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68ba      	ldr	r2, [r7, #8]
 8004c2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3714      	adds	r7, #20
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr
 8004c4e:	bf00      	nop
 8004c50:	40010000 	.word	0x40010000
 8004c54:	40000400 	.word	0x40000400
 8004c58:	40000800 	.word	0x40000800
 8004c5c:	40000c00 	.word	0x40000c00
 8004c60:	40014000 	.word	0x40014000

08004c64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c6c:	bf00      	nop
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c80:	bf00      	nop
 8004c82:	370c      	adds	r7, #12
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d101      	bne.n	8004c9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e03f      	b.n	8004d1e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d106      	bne.n	8004cb8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f7fc fd60 	bl	8001778 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2224      	movs	r2, #36	; 0x24
 8004cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	68da      	ldr	r2, [r3, #12]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004cce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f000 f929 	bl	8004f28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	691a      	ldr	r2, [r3, #16]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ce4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	695a      	ldr	r2, [r3, #20]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004cf4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	68da      	ldr	r2, [r3, #12]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2220      	movs	r2, #32
 8004d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2220      	movs	r2, #32
 8004d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3708      	adds	r7, #8
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}

08004d26 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d26:	b580      	push	{r7, lr}
 8004d28:	b08a      	sub	sp, #40	; 0x28
 8004d2a:	af02      	add	r7, sp, #8
 8004d2c:	60f8      	str	r0, [r7, #12]
 8004d2e:	60b9      	str	r1, [r7, #8]
 8004d30:	603b      	str	r3, [r7, #0]
 8004d32:	4613      	mov	r3, r2
 8004d34:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d36:	2300      	movs	r3, #0
 8004d38:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	2b20      	cmp	r3, #32
 8004d44:	d17c      	bne.n	8004e40 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d002      	beq.n	8004d52 <HAL_UART_Transmit+0x2c>
 8004d4c:	88fb      	ldrh	r3, [r7, #6]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d101      	bne.n	8004d56 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e075      	b.n	8004e42 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d101      	bne.n	8004d64 <HAL_UART_Transmit+0x3e>
 8004d60:	2302      	movs	r3, #2
 8004d62:	e06e      	b.n	8004e42 <HAL_UART_Transmit+0x11c>
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2221      	movs	r2, #33	; 0x21
 8004d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d7a:	f7fc fefb 	bl	8001b74 <HAL_GetTick>
 8004d7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	88fa      	ldrh	r2, [r7, #6]
 8004d84:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	88fa      	ldrh	r2, [r7, #6]
 8004d8a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d94:	d108      	bne.n	8004da8 <HAL_UART_Transmit+0x82>
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d104      	bne.n	8004da8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	61bb      	str	r3, [r7, #24]
 8004da6:	e003      	b.n	8004db0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004dac:	2300      	movs	r3, #0
 8004dae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004db8:	e02a      	b.n	8004e10 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	9300      	str	r3, [sp, #0]
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	2180      	movs	r1, #128	; 0x80
 8004dc4:	68f8      	ldr	r0, [r7, #12]
 8004dc6:	f000 f840 	bl	8004e4a <UART_WaitOnFlagUntilTimeout>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d001      	beq.n	8004dd4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	e036      	b.n	8004e42 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d10b      	bne.n	8004df2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	881b      	ldrh	r3, [r3, #0]
 8004dde:	461a      	mov	r2, r3
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004de8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	3302      	adds	r3, #2
 8004dee:	61bb      	str	r3, [r7, #24]
 8004df0:	e007      	b.n	8004e02 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	781a      	ldrb	r2, [r3, #0]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	3301      	adds	r3, #1
 8004e00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	3b01      	subs	r3, #1
 8004e0a:	b29a      	uxth	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d1cf      	bne.n	8004dba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	9300      	str	r3, [sp, #0]
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	2200      	movs	r2, #0
 8004e22:	2140      	movs	r1, #64	; 0x40
 8004e24:	68f8      	ldr	r0, [r7, #12]
 8004e26:	f000 f810 	bl	8004e4a <UART_WaitOnFlagUntilTimeout>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d001      	beq.n	8004e34 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	e006      	b.n	8004e42 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2220      	movs	r2, #32
 8004e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	e000      	b.n	8004e42 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004e40:	2302      	movs	r3, #2
  }
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3720      	adds	r7, #32
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}

08004e4a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004e4a:	b580      	push	{r7, lr}
 8004e4c:	b090      	sub	sp, #64	; 0x40
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	60f8      	str	r0, [r7, #12]
 8004e52:	60b9      	str	r1, [r7, #8]
 8004e54:	603b      	str	r3, [r7, #0]
 8004e56:	4613      	mov	r3, r2
 8004e58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e5a:	e050      	b.n	8004efe <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e62:	d04c      	beq.n	8004efe <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004e64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d007      	beq.n	8004e7a <UART_WaitOnFlagUntilTimeout+0x30>
 8004e6a:	f7fc fe83 	bl	8001b74 <HAL_GetTick>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d241      	bcs.n	8004efe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	330c      	adds	r3, #12
 8004e80:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e84:	e853 3f00 	ldrex	r3, [r3]
 8004e88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	330c      	adds	r3, #12
 8004e98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e9a:	637a      	str	r2, [r7, #52]	; 0x34
 8004e9c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ea0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ea2:	e841 2300 	strex	r3, r2, [r1]
 8004ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d1e5      	bne.n	8004e7a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	3314      	adds	r3, #20
 8004eb4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	e853 3f00 	ldrex	r3, [r3]
 8004ebc:	613b      	str	r3, [r7, #16]
   return(result);
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	f023 0301 	bic.w	r3, r3, #1
 8004ec4:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	3314      	adds	r3, #20
 8004ecc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ece:	623a      	str	r2, [r7, #32]
 8004ed0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed2:	69f9      	ldr	r1, [r7, #28]
 8004ed4:	6a3a      	ldr	r2, [r7, #32]
 8004ed6:	e841 2300 	strex	r3, r2, [r1]
 8004eda:	61bb      	str	r3, [r7, #24]
   return(result);
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d1e5      	bne.n	8004eae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2220      	movs	r2, #32
 8004ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2220      	movs	r2, #32
 8004eee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e00f      	b.n	8004f1e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	4013      	ands	r3, r2
 8004f08:	68ba      	ldr	r2, [r7, #8]
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	bf0c      	ite	eq
 8004f0e:	2301      	moveq	r3, #1
 8004f10:	2300      	movne	r3, #0
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	461a      	mov	r2, r3
 8004f16:	79fb      	ldrb	r3, [r7, #7]
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d09f      	beq.n	8004e5c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f1c:	2300      	movs	r3, #0
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3740      	adds	r7, #64	; 0x40
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
	...

08004f28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f2c:	b0c0      	sub	sp, #256	; 0x100
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	691b      	ldr	r3, [r3, #16]
 8004f3c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f44:	68d9      	ldr	r1, [r3, #12]
 8004f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	ea40 0301 	orr.w	r3, r0, r1
 8004f50:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f56:	689a      	ldr	r2, [r3, #8]
 8004f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	431a      	orrs	r2, r3
 8004f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	431a      	orrs	r2, r3
 8004f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f6c:	69db      	ldr	r3, [r3, #28]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004f80:	f021 010c 	bic.w	r1, r1, #12
 8004f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004f8e:	430b      	orrs	r3, r1
 8004f90:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	695b      	ldr	r3, [r3, #20]
 8004f9a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004f9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fa2:	6999      	ldr	r1, [r3, #24]
 8004fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	ea40 0301 	orr.w	r3, r0, r1
 8004fae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	4b8f      	ldr	r3, [pc, #572]	; (80051f4 <UART_SetConfig+0x2cc>)
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d005      	beq.n	8004fc8 <UART_SetConfig+0xa0>
 8004fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	4b8d      	ldr	r3, [pc, #564]	; (80051f8 <UART_SetConfig+0x2d0>)
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d104      	bne.n	8004fd2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004fc8:	f7fe f8a4 	bl	8003114 <HAL_RCC_GetPCLK2Freq>
 8004fcc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004fd0:	e003      	b.n	8004fda <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004fd2:	f7fe f88b 	bl	80030ec <HAL_RCC_GetPCLK1Freq>
 8004fd6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fde:	69db      	ldr	r3, [r3, #28]
 8004fe0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fe4:	f040 810c 	bne.w	8005200 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004fe8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fec:	2200      	movs	r2, #0
 8004fee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004ff2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004ff6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004ffa:	4622      	mov	r2, r4
 8004ffc:	462b      	mov	r3, r5
 8004ffe:	1891      	adds	r1, r2, r2
 8005000:	65b9      	str	r1, [r7, #88]	; 0x58
 8005002:	415b      	adcs	r3, r3
 8005004:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005006:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800500a:	4621      	mov	r1, r4
 800500c:	eb12 0801 	adds.w	r8, r2, r1
 8005010:	4629      	mov	r1, r5
 8005012:	eb43 0901 	adc.w	r9, r3, r1
 8005016:	f04f 0200 	mov.w	r2, #0
 800501a:	f04f 0300 	mov.w	r3, #0
 800501e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005022:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005026:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800502a:	4690      	mov	r8, r2
 800502c:	4699      	mov	r9, r3
 800502e:	4623      	mov	r3, r4
 8005030:	eb18 0303 	adds.w	r3, r8, r3
 8005034:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005038:	462b      	mov	r3, r5
 800503a:	eb49 0303 	adc.w	r3, r9, r3
 800503e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800504e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005052:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005056:	460b      	mov	r3, r1
 8005058:	18db      	adds	r3, r3, r3
 800505a:	653b      	str	r3, [r7, #80]	; 0x50
 800505c:	4613      	mov	r3, r2
 800505e:	eb42 0303 	adc.w	r3, r2, r3
 8005062:	657b      	str	r3, [r7, #84]	; 0x54
 8005064:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005068:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800506c:	f7fb fda4 	bl	8000bb8 <__aeabi_uldivmod>
 8005070:	4602      	mov	r2, r0
 8005072:	460b      	mov	r3, r1
 8005074:	4b61      	ldr	r3, [pc, #388]	; (80051fc <UART_SetConfig+0x2d4>)
 8005076:	fba3 2302 	umull	r2, r3, r3, r2
 800507a:	095b      	lsrs	r3, r3, #5
 800507c:	011c      	lsls	r4, r3, #4
 800507e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005082:	2200      	movs	r2, #0
 8005084:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005088:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800508c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005090:	4642      	mov	r2, r8
 8005092:	464b      	mov	r3, r9
 8005094:	1891      	adds	r1, r2, r2
 8005096:	64b9      	str	r1, [r7, #72]	; 0x48
 8005098:	415b      	adcs	r3, r3
 800509a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800509c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80050a0:	4641      	mov	r1, r8
 80050a2:	eb12 0a01 	adds.w	sl, r2, r1
 80050a6:	4649      	mov	r1, r9
 80050a8:	eb43 0b01 	adc.w	fp, r3, r1
 80050ac:	f04f 0200 	mov.w	r2, #0
 80050b0:	f04f 0300 	mov.w	r3, #0
 80050b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80050b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80050bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80050c0:	4692      	mov	sl, r2
 80050c2:	469b      	mov	fp, r3
 80050c4:	4643      	mov	r3, r8
 80050c6:	eb1a 0303 	adds.w	r3, sl, r3
 80050ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80050ce:	464b      	mov	r3, r9
 80050d0:	eb4b 0303 	adc.w	r3, fp, r3
 80050d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80050d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	2200      	movs	r2, #0
 80050e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80050e4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80050e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80050ec:	460b      	mov	r3, r1
 80050ee:	18db      	adds	r3, r3, r3
 80050f0:	643b      	str	r3, [r7, #64]	; 0x40
 80050f2:	4613      	mov	r3, r2
 80050f4:	eb42 0303 	adc.w	r3, r2, r3
 80050f8:	647b      	str	r3, [r7, #68]	; 0x44
 80050fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80050fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005102:	f7fb fd59 	bl	8000bb8 <__aeabi_uldivmod>
 8005106:	4602      	mov	r2, r0
 8005108:	460b      	mov	r3, r1
 800510a:	4611      	mov	r1, r2
 800510c:	4b3b      	ldr	r3, [pc, #236]	; (80051fc <UART_SetConfig+0x2d4>)
 800510e:	fba3 2301 	umull	r2, r3, r3, r1
 8005112:	095b      	lsrs	r3, r3, #5
 8005114:	2264      	movs	r2, #100	; 0x64
 8005116:	fb02 f303 	mul.w	r3, r2, r3
 800511a:	1acb      	subs	r3, r1, r3
 800511c:	00db      	lsls	r3, r3, #3
 800511e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005122:	4b36      	ldr	r3, [pc, #216]	; (80051fc <UART_SetConfig+0x2d4>)
 8005124:	fba3 2302 	umull	r2, r3, r3, r2
 8005128:	095b      	lsrs	r3, r3, #5
 800512a:	005b      	lsls	r3, r3, #1
 800512c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005130:	441c      	add	r4, r3
 8005132:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005136:	2200      	movs	r2, #0
 8005138:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800513c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005140:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005144:	4642      	mov	r2, r8
 8005146:	464b      	mov	r3, r9
 8005148:	1891      	adds	r1, r2, r2
 800514a:	63b9      	str	r1, [r7, #56]	; 0x38
 800514c:	415b      	adcs	r3, r3
 800514e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005150:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005154:	4641      	mov	r1, r8
 8005156:	1851      	adds	r1, r2, r1
 8005158:	6339      	str	r1, [r7, #48]	; 0x30
 800515a:	4649      	mov	r1, r9
 800515c:	414b      	adcs	r3, r1
 800515e:	637b      	str	r3, [r7, #52]	; 0x34
 8005160:	f04f 0200 	mov.w	r2, #0
 8005164:	f04f 0300 	mov.w	r3, #0
 8005168:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800516c:	4659      	mov	r1, fp
 800516e:	00cb      	lsls	r3, r1, #3
 8005170:	4651      	mov	r1, sl
 8005172:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005176:	4651      	mov	r1, sl
 8005178:	00ca      	lsls	r2, r1, #3
 800517a:	4610      	mov	r0, r2
 800517c:	4619      	mov	r1, r3
 800517e:	4603      	mov	r3, r0
 8005180:	4642      	mov	r2, r8
 8005182:	189b      	adds	r3, r3, r2
 8005184:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005188:	464b      	mov	r3, r9
 800518a:	460a      	mov	r2, r1
 800518c:	eb42 0303 	adc.w	r3, r2, r3
 8005190:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80051a0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80051a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80051a8:	460b      	mov	r3, r1
 80051aa:	18db      	adds	r3, r3, r3
 80051ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80051ae:	4613      	mov	r3, r2
 80051b0:	eb42 0303 	adc.w	r3, r2, r3
 80051b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80051ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80051be:	f7fb fcfb 	bl	8000bb8 <__aeabi_uldivmod>
 80051c2:	4602      	mov	r2, r0
 80051c4:	460b      	mov	r3, r1
 80051c6:	4b0d      	ldr	r3, [pc, #52]	; (80051fc <UART_SetConfig+0x2d4>)
 80051c8:	fba3 1302 	umull	r1, r3, r3, r2
 80051cc:	095b      	lsrs	r3, r3, #5
 80051ce:	2164      	movs	r1, #100	; 0x64
 80051d0:	fb01 f303 	mul.w	r3, r1, r3
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	00db      	lsls	r3, r3, #3
 80051d8:	3332      	adds	r3, #50	; 0x32
 80051da:	4a08      	ldr	r2, [pc, #32]	; (80051fc <UART_SetConfig+0x2d4>)
 80051dc:	fba2 2303 	umull	r2, r3, r2, r3
 80051e0:	095b      	lsrs	r3, r3, #5
 80051e2:	f003 0207 	and.w	r2, r3, #7
 80051e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4422      	add	r2, r4
 80051ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80051f0:	e105      	b.n	80053fe <UART_SetConfig+0x4d6>
 80051f2:	bf00      	nop
 80051f4:	40011000 	.word	0x40011000
 80051f8:	40011400 	.word	0x40011400
 80051fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005200:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005204:	2200      	movs	r2, #0
 8005206:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800520a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800520e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005212:	4642      	mov	r2, r8
 8005214:	464b      	mov	r3, r9
 8005216:	1891      	adds	r1, r2, r2
 8005218:	6239      	str	r1, [r7, #32]
 800521a:	415b      	adcs	r3, r3
 800521c:	627b      	str	r3, [r7, #36]	; 0x24
 800521e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005222:	4641      	mov	r1, r8
 8005224:	1854      	adds	r4, r2, r1
 8005226:	4649      	mov	r1, r9
 8005228:	eb43 0501 	adc.w	r5, r3, r1
 800522c:	f04f 0200 	mov.w	r2, #0
 8005230:	f04f 0300 	mov.w	r3, #0
 8005234:	00eb      	lsls	r3, r5, #3
 8005236:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800523a:	00e2      	lsls	r2, r4, #3
 800523c:	4614      	mov	r4, r2
 800523e:	461d      	mov	r5, r3
 8005240:	4643      	mov	r3, r8
 8005242:	18e3      	adds	r3, r4, r3
 8005244:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005248:	464b      	mov	r3, r9
 800524a:	eb45 0303 	adc.w	r3, r5, r3
 800524e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800525e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005262:	f04f 0200 	mov.w	r2, #0
 8005266:	f04f 0300 	mov.w	r3, #0
 800526a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800526e:	4629      	mov	r1, r5
 8005270:	008b      	lsls	r3, r1, #2
 8005272:	4621      	mov	r1, r4
 8005274:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005278:	4621      	mov	r1, r4
 800527a:	008a      	lsls	r2, r1, #2
 800527c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005280:	f7fb fc9a 	bl	8000bb8 <__aeabi_uldivmod>
 8005284:	4602      	mov	r2, r0
 8005286:	460b      	mov	r3, r1
 8005288:	4b60      	ldr	r3, [pc, #384]	; (800540c <UART_SetConfig+0x4e4>)
 800528a:	fba3 2302 	umull	r2, r3, r3, r2
 800528e:	095b      	lsrs	r3, r3, #5
 8005290:	011c      	lsls	r4, r3, #4
 8005292:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005296:	2200      	movs	r2, #0
 8005298:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800529c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80052a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80052a4:	4642      	mov	r2, r8
 80052a6:	464b      	mov	r3, r9
 80052a8:	1891      	adds	r1, r2, r2
 80052aa:	61b9      	str	r1, [r7, #24]
 80052ac:	415b      	adcs	r3, r3
 80052ae:	61fb      	str	r3, [r7, #28]
 80052b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052b4:	4641      	mov	r1, r8
 80052b6:	1851      	adds	r1, r2, r1
 80052b8:	6139      	str	r1, [r7, #16]
 80052ba:	4649      	mov	r1, r9
 80052bc:	414b      	adcs	r3, r1
 80052be:	617b      	str	r3, [r7, #20]
 80052c0:	f04f 0200 	mov.w	r2, #0
 80052c4:	f04f 0300 	mov.w	r3, #0
 80052c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80052cc:	4659      	mov	r1, fp
 80052ce:	00cb      	lsls	r3, r1, #3
 80052d0:	4651      	mov	r1, sl
 80052d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052d6:	4651      	mov	r1, sl
 80052d8:	00ca      	lsls	r2, r1, #3
 80052da:	4610      	mov	r0, r2
 80052dc:	4619      	mov	r1, r3
 80052de:	4603      	mov	r3, r0
 80052e0:	4642      	mov	r2, r8
 80052e2:	189b      	adds	r3, r3, r2
 80052e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80052e8:	464b      	mov	r3, r9
 80052ea:	460a      	mov	r2, r1
 80052ec:	eb42 0303 	adc.w	r3, r2, r3
 80052f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80052f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80052fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005300:	f04f 0200 	mov.w	r2, #0
 8005304:	f04f 0300 	mov.w	r3, #0
 8005308:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800530c:	4649      	mov	r1, r9
 800530e:	008b      	lsls	r3, r1, #2
 8005310:	4641      	mov	r1, r8
 8005312:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005316:	4641      	mov	r1, r8
 8005318:	008a      	lsls	r2, r1, #2
 800531a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800531e:	f7fb fc4b 	bl	8000bb8 <__aeabi_uldivmod>
 8005322:	4602      	mov	r2, r0
 8005324:	460b      	mov	r3, r1
 8005326:	4b39      	ldr	r3, [pc, #228]	; (800540c <UART_SetConfig+0x4e4>)
 8005328:	fba3 1302 	umull	r1, r3, r3, r2
 800532c:	095b      	lsrs	r3, r3, #5
 800532e:	2164      	movs	r1, #100	; 0x64
 8005330:	fb01 f303 	mul.w	r3, r1, r3
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	011b      	lsls	r3, r3, #4
 8005338:	3332      	adds	r3, #50	; 0x32
 800533a:	4a34      	ldr	r2, [pc, #208]	; (800540c <UART_SetConfig+0x4e4>)
 800533c:	fba2 2303 	umull	r2, r3, r2, r3
 8005340:	095b      	lsrs	r3, r3, #5
 8005342:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005346:	441c      	add	r4, r3
 8005348:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800534c:	2200      	movs	r2, #0
 800534e:	673b      	str	r3, [r7, #112]	; 0x70
 8005350:	677a      	str	r2, [r7, #116]	; 0x74
 8005352:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005356:	4642      	mov	r2, r8
 8005358:	464b      	mov	r3, r9
 800535a:	1891      	adds	r1, r2, r2
 800535c:	60b9      	str	r1, [r7, #8]
 800535e:	415b      	adcs	r3, r3
 8005360:	60fb      	str	r3, [r7, #12]
 8005362:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005366:	4641      	mov	r1, r8
 8005368:	1851      	adds	r1, r2, r1
 800536a:	6039      	str	r1, [r7, #0]
 800536c:	4649      	mov	r1, r9
 800536e:	414b      	adcs	r3, r1
 8005370:	607b      	str	r3, [r7, #4]
 8005372:	f04f 0200 	mov.w	r2, #0
 8005376:	f04f 0300 	mov.w	r3, #0
 800537a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800537e:	4659      	mov	r1, fp
 8005380:	00cb      	lsls	r3, r1, #3
 8005382:	4651      	mov	r1, sl
 8005384:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005388:	4651      	mov	r1, sl
 800538a:	00ca      	lsls	r2, r1, #3
 800538c:	4610      	mov	r0, r2
 800538e:	4619      	mov	r1, r3
 8005390:	4603      	mov	r3, r0
 8005392:	4642      	mov	r2, r8
 8005394:	189b      	adds	r3, r3, r2
 8005396:	66bb      	str	r3, [r7, #104]	; 0x68
 8005398:	464b      	mov	r3, r9
 800539a:	460a      	mov	r2, r1
 800539c:	eb42 0303 	adc.w	r3, r2, r3
 80053a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80053a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	663b      	str	r3, [r7, #96]	; 0x60
 80053ac:	667a      	str	r2, [r7, #100]	; 0x64
 80053ae:	f04f 0200 	mov.w	r2, #0
 80053b2:	f04f 0300 	mov.w	r3, #0
 80053b6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80053ba:	4649      	mov	r1, r9
 80053bc:	008b      	lsls	r3, r1, #2
 80053be:	4641      	mov	r1, r8
 80053c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053c4:	4641      	mov	r1, r8
 80053c6:	008a      	lsls	r2, r1, #2
 80053c8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80053cc:	f7fb fbf4 	bl	8000bb8 <__aeabi_uldivmod>
 80053d0:	4602      	mov	r2, r0
 80053d2:	460b      	mov	r3, r1
 80053d4:	4b0d      	ldr	r3, [pc, #52]	; (800540c <UART_SetConfig+0x4e4>)
 80053d6:	fba3 1302 	umull	r1, r3, r3, r2
 80053da:	095b      	lsrs	r3, r3, #5
 80053dc:	2164      	movs	r1, #100	; 0x64
 80053de:	fb01 f303 	mul.w	r3, r1, r3
 80053e2:	1ad3      	subs	r3, r2, r3
 80053e4:	011b      	lsls	r3, r3, #4
 80053e6:	3332      	adds	r3, #50	; 0x32
 80053e8:	4a08      	ldr	r2, [pc, #32]	; (800540c <UART_SetConfig+0x4e4>)
 80053ea:	fba2 2303 	umull	r2, r3, r2, r3
 80053ee:	095b      	lsrs	r3, r3, #5
 80053f0:	f003 020f 	and.w	r2, r3, #15
 80053f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4422      	add	r2, r4
 80053fc:	609a      	str	r2, [r3, #8]
}
 80053fe:	bf00      	nop
 8005400:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005404:	46bd      	mov	sp, r7
 8005406:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800540a:	bf00      	nop
 800540c:	51eb851f 	.word	0x51eb851f

08005410 <__errno>:
 8005410:	4b01      	ldr	r3, [pc, #4]	; (8005418 <__errno+0x8>)
 8005412:	6818      	ldr	r0, [r3, #0]
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop
 8005418:	2000000c 	.word	0x2000000c

0800541c <__libc_init_array>:
 800541c:	b570      	push	{r4, r5, r6, lr}
 800541e:	4d0d      	ldr	r5, [pc, #52]	; (8005454 <__libc_init_array+0x38>)
 8005420:	4c0d      	ldr	r4, [pc, #52]	; (8005458 <__libc_init_array+0x3c>)
 8005422:	1b64      	subs	r4, r4, r5
 8005424:	10a4      	asrs	r4, r4, #2
 8005426:	2600      	movs	r6, #0
 8005428:	42a6      	cmp	r6, r4
 800542a:	d109      	bne.n	8005440 <__libc_init_array+0x24>
 800542c:	4d0b      	ldr	r5, [pc, #44]	; (800545c <__libc_init_array+0x40>)
 800542e:	4c0c      	ldr	r4, [pc, #48]	; (8005460 <__libc_init_array+0x44>)
 8005430:	f002 ff02 	bl	8008238 <_init>
 8005434:	1b64      	subs	r4, r4, r5
 8005436:	10a4      	asrs	r4, r4, #2
 8005438:	2600      	movs	r6, #0
 800543a:	42a6      	cmp	r6, r4
 800543c:	d105      	bne.n	800544a <__libc_init_array+0x2e>
 800543e:	bd70      	pop	{r4, r5, r6, pc}
 8005440:	f855 3b04 	ldr.w	r3, [r5], #4
 8005444:	4798      	blx	r3
 8005446:	3601      	adds	r6, #1
 8005448:	e7ee      	b.n	8005428 <__libc_init_array+0xc>
 800544a:	f855 3b04 	ldr.w	r3, [r5], #4
 800544e:	4798      	blx	r3
 8005450:	3601      	adds	r6, #1
 8005452:	e7f2      	b.n	800543a <__libc_init_array+0x1e>
 8005454:	0800866c 	.word	0x0800866c
 8005458:	0800866c 	.word	0x0800866c
 800545c:	0800866c 	.word	0x0800866c
 8005460:	08008670 	.word	0x08008670

08005464 <memset>:
 8005464:	4402      	add	r2, r0
 8005466:	4603      	mov	r3, r0
 8005468:	4293      	cmp	r3, r2
 800546a:	d100      	bne.n	800546e <memset+0xa>
 800546c:	4770      	bx	lr
 800546e:	f803 1b01 	strb.w	r1, [r3], #1
 8005472:	e7f9      	b.n	8005468 <memset+0x4>

08005474 <__cvt>:
 8005474:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005478:	ec55 4b10 	vmov	r4, r5, d0
 800547c:	2d00      	cmp	r5, #0
 800547e:	460e      	mov	r6, r1
 8005480:	4619      	mov	r1, r3
 8005482:	462b      	mov	r3, r5
 8005484:	bfbb      	ittet	lt
 8005486:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800548a:	461d      	movlt	r5, r3
 800548c:	2300      	movge	r3, #0
 800548e:	232d      	movlt	r3, #45	; 0x2d
 8005490:	700b      	strb	r3, [r1, #0]
 8005492:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005494:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005498:	4691      	mov	r9, r2
 800549a:	f023 0820 	bic.w	r8, r3, #32
 800549e:	bfbc      	itt	lt
 80054a0:	4622      	movlt	r2, r4
 80054a2:	4614      	movlt	r4, r2
 80054a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80054a8:	d005      	beq.n	80054b6 <__cvt+0x42>
 80054aa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80054ae:	d100      	bne.n	80054b2 <__cvt+0x3e>
 80054b0:	3601      	adds	r6, #1
 80054b2:	2102      	movs	r1, #2
 80054b4:	e000      	b.n	80054b8 <__cvt+0x44>
 80054b6:	2103      	movs	r1, #3
 80054b8:	ab03      	add	r3, sp, #12
 80054ba:	9301      	str	r3, [sp, #4]
 80054bc:	ab02      	add	r3, sp, #8
 80054be:	9300      	str	r3, [sp, #0]
 80054c0:	ec45 4b10 	vmov	d0, r4, r5
 80054c4:	4653      	mov	r3, sl
 80054c6:	4632      	mov	r2, r6
 80054c8:	f000 fcea 	bl	8005ea0 <_dtoa_r>
 80054cc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80054d0:	4607      	mov	r7, r0
 80054d2:	d102      	bne.n	80054da <__cvt+0x66>
 80054d4:	f019 0f01 	tst.w	r9, #1
 80054d8:	d022      	beq.n	8005520 <__cvt+0xac>
 80054da:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80054de:	eb07 0906 	add.w	r9, r7, r6
 80054e2:	d110      	bne.n	8005506 <__cvt+0x92>
 80054e4:	783b      	ldrb	r3, [r7, #0]
 80054e6:	2b30      	cmp	r3, #48	; 0x30
 80054e8:	d10a      	bne.n	8005500 <__cvt+0x8c>
 80054ea:	2200      	movs	r2, #0
 80054ec:	2300      	movs	r3, #0
 80054ee:	4620      	mov	r0, r4
 80054f0:	4629      	mov	r1, r5
 80054f2:	f7fb faf1 	bl	8000ad8 <__aeabi_dcmpeq>
 80054f6:	b918      	cbnz	r0, 8005500 <__cvt+0x8c>
 80054f8:	f1c6 0601 	rsb	r6, r6, #1
 80054fc:	f8ca 6000 	str.w	r6, [sl]
 8005500:	f8da 3000 	ldr.w	r3, [sl]
 8005504:	4499      	add	r9, r3
 8005506:	2200      	movs	r2, #0
 8005508:	2300      	movs	r3, #0
 800550a:	4620      	mov	r0, r4
 800550c:	4629      	mov	r1, r5
 800550e:	f7fb fae3 	bl	8000ad8 <__aeabi_dcmpeq>
 8005512:	b108      	cbz	r0, 8005518 <__cvt+0xa4>
 8005514:	f8cd 900c 	str.w	r9, [sp, #12]
 8005518:	2230      	movs	r2, #48	; 0x30
 800551a:	9b03      	ldr	r3, [sp, #12]
 800551c:	454b      	cmp	r3, r9
 800551e:	d307      	bcc.n	8005530 <__cvt+0xbc>
 8005520:	9b03      	ldr	r3, [sp, #12]
 8005522:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005524:	1bdb      	subs	r3, r3, r7
 8005526:	4638      	mov	r0, r7
 8005528:	6013      	str	r3, [r2, #0]
 800552a:	b004      	add	sp, #16
 800552c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005530:	1c59      	adds	r1, r3, #1
 8005532:	9103      	str	r1, [sp, #12]
 8005534:	701a      	strb	r2, [r3, #0]
 8005536:	e7f0      	b.n	800551a <__cvt+0xa6>

08005538 <__exponent>:
 8005538:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800553a:	4603      	mov	r3, r0
 800553c:	2900      	cmp	r1, #0
 800553e:	bfb8      	it	lt
 8005540:	4249      	neglt	r1, r1
 8005542:	f803 2b02 	strb.w	r2, [r3], #2
 8005546:	bfb4      	ite	lt
 8005548:	222d      	movlt	r2, #45	; 0x2d
 800554a:	222b      	movge	r2, #43	; 0x2b
 800554c:	2909      	cmp	r1, #9
 800554e:	7042      	strb	r2, [r0, #1]
 8005550:	dd2a      	ble.n	80055a8 <__exponent+0x70>
 8005552:	f10d 0407 	add.w	r4, sp, #7
 8005556:	46a4      	mov	ip, r4
 8005558:	270a      	movs	r7, #10
 800555a:	46a6      	mov	lr, r4
 800555c:	460a      	mov	r2, r1
 800555e:	fb91 f6f7 	sdiv	r6, r1, r7
 8005562:	fb07 1516 	mls	r5, r7, r6, r1
 8005566:	3530      	adds	r5, #48	; 0x30
 8005568:	2a63      	cmp	r2, #99	; 0x63
 800556a:	f104 34ff 	add.w	r4, r4, #4294967295
 800556e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005572:	4631      	mov	r1, r6
 8005574:	dcf1      	bgt.n	800555a <__exponent+0x22>
 8005576:	3130      	adds	r1, #48	; 0x30
 8005578:	f1ae 0502 	sub.w	r5, lr, #2
 800557c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005580:	1c44      	adds	r4, r0, #1
 8005582:	4629      	mov	r1, r5
 8005584:	4561      	cmp	r1, ip
 8005586:	d30a      	bcc.n	800559e <__exponent+0x66>
 8005588:	f10d 0209 	add.w	r2, sp, #9
 800558c:	eba2 020e 	sub.w	r2, r2, lr
 8005590:	4565      	cmp	r5, ip
 8005592:	bf88      	it	hi
 8005594:	2200      	movhi	r2, #0
 8005596:	4413      	add	r3, r2
 8005598:	1a18      	subs	r0, r3, r0
 800559a:	b003      	add	sp, #12
 800559c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800559e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80055a2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80055a6:	e7ed      	b.n	8005584 <__exponent+0x4c>
 80055a8:	2330      	movs	r3, #48	; 0x30
 80055aa:	3130      	adds	r1, #48	; 0x30
 80055ac:	7083      	strb	r3, [r0, #2]
 80055ae:	70c1      	strb	r1, [r0, #3]
 80055b0:	1d03      	adds	r3, r0, #4
 80055b2:	e7f1      	b.n	8005598 <__exponent+0x60>

080055b4 <_printf_float>:
 80055b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055b8:	ed2d 8b02 	vpush	{d8}
 80055bc:	b08d      	sub	sp, #52	; 0x34
 80055be:	460c      	mov	r4, r1
 80055c0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80055c4:	4616      	mov	r6, r2
 80055c6:	461f      	mov	r7, r3
 80055c8:	4605      	mov	r5, r0
 80055ca:	f001 fa57 	bl	8006a7c <_localeconv_r>
 80055ce:	f8d0 a000 	ldr.w	sl, [r0]
 80055d2:	4650      	mov	r0, sl
 80055d4:	f7fa fe04 	bl	80001e0 <strlen>
 80055d8:	2300      	movs	r3, #0
 80055da:	930a      	str	r3, [sp, #40]	; 0x28
 80055dc:	6823      	ldr	r3, [r4, #0]
 80055de:	9305      	str	r3, [sp, #20]
 80055e0:	f8d8 3000 	ldr.w	r3, [r8]
 80055e4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80055e8:	3307      	adds	r3, #7
 80055ea:	f023 0307 	bic.w	r3, r3, #7
 80055ee:	f103 0208 	add.w	r2, r3, #8
 80055f2:	f8c8 2000 	str.w	r2, [r8]
 80055f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055fa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80055fe:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005602:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005606:	9307      	str	r3, [sp, #28]
 8005608:	f8cd 8018 	str.w	r8, [sp, #24]
 800560c:	ee08 0a10 	vmov	s16, r0
 8005610:	4b9f      	ldr	r3, [pc, #636]	; (8005890 <_printf_float+0x2dc>)
 8005612:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005616:	f04f 32ff 	mov.w	r2, #4294967295
 800561a:	f7fb fa8f 	bl	8000b3c <__aeabi_dcmpun>
 800561e:	bb88      	cbnz	r0, 8005684 <_printf_float+0xd0>
 8005620:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005624:	4b9a      	ldr	r3, [pc, #616]	; (8005890 <_printf_float+0x2dc>)
 8005626:	f04f 32ff 	mov.w	r2, #4294967295
 800562a:	f7fb fa69 	bl	8000b00 <__aeabi_dcmple>
 800562e:	bb48      	cbnz	r0, 8005684 <_printf_float+0xd0>
 8005630:	2200      	movs	r2, #0
 8005632:	2300      	movs	r3, #0
 8005634:	4640      	mov	r0, r8
 8005636:	4649      	mov	r1, r9
 8005638:	f7fb fa58 	bl	8000aec <__aeabi_dcmplt>
 800563c:	b110      	cbz	r0, 8005644 <_printf_float+0x90>
 800563e:	232d      	movs	r3, #45	; 0x2d
 8005640:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005644:	4b93      	ldr	r3, [pc, #588]	; (8005894 <_printf_float+0x2e0>)
 8005646:	4894      	ldr	r0, [pc, #592]	; (8005898 <_printf_float+0x2e4>)
 8005648:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800564c:	bf94      	ite	ls
 800564e:	4698      	movls	r8, r3
 8005650:	4680      	movhi	r8, r0
 8005652:	2303      	movs	r3, #3
 8005654:	6123      	str	r3, [r4, #16]
 8005656:	9b05      	ldr	r3, [sp, #20]
 8005658:	f023 0204 	bic.w	r2, r3, #4
 800565c:	6022      	str	r2, [r4, #0]
 800565e:	f04f 0900 	mov.w	r9, #0
 8005662:	9700      	str	r7, [sp, #0]
 8005664:	4633      	mov	r3, r6
 8005666:	aa0b      	add	r2, sp, #44	; 0x2c
 8005668:	4621      	mov	r1, r4
 800566a:	4628      	mov	r0, r5
 800566c:	f000 f9d8 	bl	8005a20 <_printf_common>
 8005670:	3001      	adds	r0, #1
 8005672:	f040 8090 	bne.w	8005796 <_printf_float+0x1e2>
 8005676:	f04f 30ff 	mov.w	r0, #4294967295
 800567a:	b00d      	add	sp, #52	; 0x34
 800567c:	ecbd 8b02 	vpop	{d8}
 8005680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005684:	4642      	mov	r2, r8
 8005686:	464b      	mov	r3, r9
 8005688:	4640      	mov	r0, r8
 800568a:	4649      	mov	r1, r9
 800568c:	f7fb fa56 	bl	8000b3c <__aeabi_dcmpun>
 8005690:	b140      	cbz	r0, 80056a4 <_printf_float+0xf0>
 8005692:	464b      	mov	r3, r9
 8005694:	2b00      	cmp	r3, #0
 8005696:	bfbc      	itt	lt
 8005698:	232d      	movlt	r3, #45	; 0x2d
 800569a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800569e:	487f      	ldr	r0, [pc, #508]	; (800589c <_printf_float+0x2e8>)
 80056a0:	4b7f      	ldr	r3, [pc, #508]	; (80058a0 <_printf_float+0x2ec>)
 80056a2:	e7d1      	b.n	8005648 <_printf_float+0x94>
 80056a4:	6863      	ldr	r3, [r4, #4]
 80056a6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80056aa:	9206      	str	r2, [sp, #24]
 80056ac:	1c5a      	adds	r2, r3, #1
 80056ae:	d13f      	bne.n	8005730 <_printf_float+0x17c>
 80056b0:	2306      	movs	r3, #6
 80056b2:	6063      	str	r3, [r4, #4]
 80056b4:	9b05      	ldr	r3, [sp, #20]
 80056b6:	6861      	ldr	r1, [r4, #4]
 80056b8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80056bc:	2300      	movs	r3, #0
 80056be:	9303      	str	r3, [sp, #12]
 80056c0:	ab0a      	add	r3, sp, #40	; 0x28
 80056c2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80056c6:	ab09      	add	r3, sp, #36	; 0x24
 80056c8:	ec49 8b10 	vmov	d0, r8, r9
 80056cc:	9300      	str	r3, [sp, #0]
 80056ce:	6022      	str	r2, [r4, #0]
 80056d0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80056d4:	4628      	mov	r0, r5
 80056d6:	f7ff fecd 	bl	8005474 <__cvt>
 80056da:	9b06      	ldr	r3, [sp, #24]
 80056dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80056de:	2b47      	cmp	r3, #71	; 0x47
 80056e0:	4680      	mov	r8, r0
 80056e2:	d108      	bne.n	80056f6 <_printf_float+0x142>
 80056e4:	1cc8      	adds	r0, r1, #3
 80056e6:	db02      	blt.n	80056ee <_printf_float+0x13a>
 80056e8:	6863      	ldr	r3, [r4, #4]
 80056ea:	4299      	cmp	r1, r3
 80056ec:	dd41      	ble.n	8005772 <_printf_float+0x1be>
 80056ee:	f1ab 0b02 	sub.w	fp, fp, #2
 80056f2:	fa5f fb8b 	uxtb.w	fp, fp
 80056f6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80056fa:	d820      	bhi.n	800573e <_printf_float+0x18a>
 80056fc:	3901      	subs	r1, #1
 80056fe:	465a      	mov	r2, fp
 8005700:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005704:	9109      	str	r1, [sp, #36]	; 0x24
 8005706:	f7ff ff17 	bl	8005538 <__exponent>
 800570a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800570c:	1813      	adds	r3, r2, r0
 800570e:	2a01      	cmp	r2, #1
 8005710:	4681      	mov	r9, r0
 8005712:	6123      	str	r3, [r4, #16]
 8005714:	dc02      	bgt.n	800571c <_printf_float+0x168>
 8005716:	6822      	ldr	r2, [r4, #0]
 8005718:	07d2      	lsls	r2, r2, #31
 800571a:	d501      	bpl.n	8005720 <_printf_float+0x16c>
 800571c:	3301      	adds	r3, #1
 800571e:	6123      	str	r3, [r4, #16]
 8005720:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005724:	2b00      	cmp	r3, #0
 8005726:	d09c      	beq.n	8005662 <_printf_float+0xae>
 8005728:	232d      	movs	r3, #45	; 0x2d
 800572a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800572e:	e798      	b.n	8005662 <_printf_float+0xae>
 8005730:	9a06      	ldr	r2, [sp, #24]
 8005732:	2a47      	cmp	r2, #71	; 0x47
 8005734:	d1be      	bne.n	80056b4 <_printf_float+0x100>
 8005736:	2b00      	cmp	r3, #0
 8005738:	d1bc      	bne.n	80056b4 <_printf_float+0x100>
 800573a:	2301      	movs	r3, #1
 800573c:	e7b9      	b.n	80056b2 <_printf_float+0xfe>
 800573e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005742:	d118      	bne.n	8005776 <_printf_float+0x1c2>
 8005744:	2900      	cmp	r1, #0
 8005746:	6863      	ldr	r3, [r4, #4]
 8005748:	dd0b      	ble.n	8005762 <_printf_float+0x1ae>
 800574a:	6121      	str	r1, [r4, #16]
 800574c:	b913      	cbnz	r3, 8005754 <_printf_float+0x1a0>
 800574e:	6822      	ldr	r2, [r4, #0]
 8005750:	07d0      	lsls	r0, r2, #31
 8005752:	d502      	bpl.n	800575a <_printf_float+0x1a6>
 8005754:	3301      	adds	r3, #1
 8005756:	440b      	add	r3, r1
 8005758:	6123      	str	r3, [r4, #16]
 800575a:	65a1      	str	r1, [r4, #88]	; 0x58
 800575c:	f04f 0900 	mov.w	r9, #0
 8005760:	e7de      	b.n	8005720 <_printf_float+0x16c>
 8005762:	b913      	cbnz	r3, 800576a <_printf_float+0x1b6>
 8005764:	6822      	ldr	r2, [r4, #0]
 8005766:	07d2      	lsls	r2, r2, #31
 8005768:	d501      	bpl.n	800576e <_printf_float+0x1ba>
 800576a:	3302      	adds	r3, #2
 800576c:	e7f4      	b.n	8005758 <_printf_float+0x1a4>
 800576e:	2301      	movs	r3, #1
 8005770:	e7f2      	b.n	8005758 <_printf_float+0x1a4>
 8005772:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005776:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005778:	4299      	cmp	r1, r3
 800577a:	db05      	blt.n	8005788 <_printf_float+0x1d4>
 800577c:	6823      	ldr	r3, [r4, #0]
 800577e:	6121      	str	r1, [r4, #16]
 8005780:	07d8      	lsls	r0, r3, #31
 8005782:	d5ea      	bpl.n	800575a <_printf_float+0x1a6>
 8005784:	1c4b      	adds	r3, r1, #1
 8005786:	e7e7      	b.n	8005758 <_printf_float+0x1a4>
 8005788:	2900      	cmp	r1, #0
 800578a:	bfd4      	ite	le
 800578c:	f1c1 0202 	rsble	r2, r1, #2
 8005790:	2201      	movgt	r2, #1
 8005792:	4413      	add	r3, r2
 8005794:	e7e0      	b.n	8005758 <_printf_float+0x1a4>
 8005796:	6823      	ldr	r3, [r4, #0]
 8005798:	055a      	lsls	r2, r3, #21
 800579a:	d407      	bmi.n	80057ac <_printf_float+0x1f8>
 800579c:	6923      	ldr	r3, [r4, #16]
 800579e:	4642      	mov	r2, r8
 80057a0:	4631      	mov	r1, r6
 80057a2:	4628      	mov	r0, r5
 80057a4:	47b8      	blx	r7
 80057a6:	3001      	adds	r0, #1
 80057a8:	d12c      	bne.n	8005804 <_printf_float+0x250>
 80057aa:	e764      	b.n	8005676 <_printf_float+0xc2>
 80057ac:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80057b0:	f240 80e0 	bls.w	8005974 <_printf_float+0x3c0>
 80057b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80057b8:	2200      	movs	r2, #0
 80057ba:	2300      	movs	r3, #0
 80057bc:	f7fb f98c 	bl	8000ad8 <__aeabi_dcmpeq>
 80057c0:	2800      	cmp	r0, #0
 80057c2:	d034      	beq.n	800582e <_printf_float+0x27a>
 80057c4:	4a37      	ldr	r2, [pc, #220]	; (80058a4 <_printf_float+0x2f0>)
 80057c6:	2301      	movs	r3, #1
 80057c8:	4631      	mov	r1, r6
 80057ca:	4628      	mov	r0, r5
 80057cc:	47b8      	blx	r7
 80057ce:	3001      	adds	r0, #1
 80057d0:	f43f af51 	beq.w	8005676 <_printf_float+0xc2>
 80057d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80057d8:	429a      	cmp	r2, r3
 80057da:	db02      	blt.n	80057e2 <_printf_float+0x22e>
 80057dc:	6823      	ldr	r3, [r4, #0]
 80057de:	07d8      	lsls	r0, r3, #31
 80057e0:	d510      	bpl.n	8005804 <_printf_float+0x250>
 80057e2:	ee18 3a10 	vmov	r3, s16
 80057e6:	4652      	mov	r2, sl
 80057e8:	4631      	mov	r1, r6
 80057ea:	4628      	mov	r0, r5
 80057ec:	47b8      	blx	r7
 80057ee:	3001      	adds	r0, #1
 80057f0:	f43f af41 	beq.w	8005676 <_printf_float+0xc2>
 80057f4:	f04f 0800 	mov.w	r8, #0
 80057f8:	f104 091a 	add.w	r9, r4, #26
 80057fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057fe:	3b01      	subs	r3, #1
 8005800:	4543      	cmp	r3, r8
 8005802:	dc09      	bgt.n	8005818 <_printf_float+0x264>
 8005804:	6823      	ldr	r3, [r4, #0]
 8005806:	079b      	lsls	r3, r3, #30
 8005808:	f100 8105 	bmi.w	8005a16 <_printf_float+0x462>
 800580c:	68e0      	ldr	r0, [r4, #12]
 800580e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005810:	4298      	cmp	r0, r3
 8005812:	bfb8      	it	lt
 8005814:	4618      	movlt	r0, r3
 8005816:	e730      	b.n	800567a <_printf_float+0xc6>
 8005818:	2301      	movs	r3, #1
 800581a:	464a      	mov	r2, r9
 800581c:	4631      	mov	r1, r6
 800581e:	4628      	mov	r0, r5
 8005820:	47b8      	blx	r7
 8005822:	3001      	adds	r0, #1
 8005824:	f43f af27 	beq.w	8005676 <_printf_float+0xc2>
 8005828:	f108 0801 	add.w	r8, r8, #1
 800582c:	e7e6      	b.n	80057fc <_printf_float+0x248>
 800582e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005830:	2b00      	cmp	r3, #0
 8005832:	dc39      	bgt.n	80058a8 <_printf_float+0x2f4>
 8005834:	4a1b      	ldr	r2, [pc, #108]	; (80058a4 <_printf_float+0x2f0>)
 8005836:	2301      	movs	r3, #1
 8005838:	4631      	mov	r1, r6
 800583a:	4628      	mov	r0, r5
 800583c:	47b8      	blx	r7
 800583e:	3001      	adds	r0, #1
 8005840:	f43f af19 	beq.w	8005676 <_printf_float+0xc2>
 8005844:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005848:	4313      	orrs	r3, r2
 800584a:	d102      	bne.n	8005852 <_printf_float+0x29e>
 800584c:	6823      	ldr	r3, [r4, #0]
 800584e:	07d9      	lsls	r1, r3, #31
 8005850:	d5d8      	bpl.n	8005804 <_printf_float+0x250>
 8005852:	ee18 3a10 	vmov	r3, s16
 8005856:	4652      	mov	r2, sl
 8005858:	4631      	mov	r1, r6
 800585a:	4628      	mov	r0, r5
 800585c:	47b8      	blx	r7
 800585e:	3001      	adds	r0, #1
 8005860:	f43f af09 	beq.w	8005676 <_printf_float+0xc2>
 8005864:	f04f 0900 	mov.w	r9, #0
 8005868:	f104 0a1a 	add.w	sl, r4, #26
 800586c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800586e:	425b      	negs	r3, r3
 8005870:	454b      	cmp	r3, r9
 8005872:	dc01      	bgt.n	8005878 <_printf_float+0x2c4>
 8005874:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005876:	e792      	b.n	800579e <_printf_float+0x1ea>
 8005878:	2301      	movs	r3, #1
 800587a:	4652      	mov	r2, sl
 800587c:	4631      	mov	r1, r6
 800587e:	4628      	mov	r0, r5
 8005880:	47b8      	blx	r7
 8005882:	3001      	adds	r0, #1
 8005884:	f43f aef7 	beq.w	8005676 <_printf_float+0xc2>
 8005888:	f109 0901 	add.w	r9, r9, #1
 800588c:	e7ee      	b.n	800586c <_printf_float+0x2b8>
 800588e:	bf00      	nop
 8005890:	7fefffff 	.word	0x7fefffff
 8005894:	0800828c 	.word	0x0800828c
 8005898:	08008290 	.word	0x08008290
 800589c:	08008298 	.word	0x08008298
 80058a0:	08008294 	.word	0x08008294
 80058a4:	0800829c 	.word	0x0800829c
 80058a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80058aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80058ac:	429a      	cmp	r2, r3
 80058ae:	bfa8      	it	ge
 80058b0:	461a      	movge	r2, r3
 80058b2:	2a00      	cmp	r2, #0
 80058b4:	4691      	mov	r9, r2
 80058b6:	dc37      	bgt.n	8005928 <_printf_float+0x374>
 80058b8:	f04f 0b00 	mov.w	fp, #0
 80058bc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80058c0:	f104 021a 	add.w	r2, r4, #26
 80058c4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80058c6:	9305      	str	r3, [sp, #20]
 80058c8:	eba3 0309 	sub.w	r3, r3, r9
 80058cc:	455b      	cmp	r3, fp
 80058ce:	dc33      	bgt.n	8005938 <_printf_float+0x384>
 80058d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80058d4:	429a      	cmp	r2, r3
 80058d6:	db3b      	blt.n	8005950 <_printf_float+0x39c>
 80058d8:	6823      	ldr	r3, [r4, #0]
 80058da:	07da      	lsls	r2, r3, #31
 80058dc:	d438      	bmi.n	8005950 <_printf_float+0x39c>
 80058de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058e0:	9a05      	ldr	r2, [sp, #20]
 80058e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80058e4:	1a9a      	subs	r2, r3, r2
 80058e6:	eba3 0901 	sub.w	r9, r3, r1
 80058ea:	4591      	cmp	r9, r2
 80058ec:	bfa8      	it	ge
 80058ee:	4691      	movge	r9, r2
 80058f0:	f1b9 0f00 	cmp.w	r9, #0
 80058f4:	dc35      	bgt.n	8005962 <_printf_float+0x3ae>
 80058f6:	f04f 0800 	mov.w	r8, #0
 80058fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80058fe:	f104 0a1a 	add.w	sl, r4, #26
 8005902:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005906:	1a9b      	subs	r3, r3, r2
 8005908:	eba3 0309 	sub.w	r3, r3, r9
 800590c:	4543      	cmp	r3, r8
 800590e:	f77f af79 	ble.w	8005804 <_printf_float+0x250>
 8005912:	2301      	movs	r3, #1
 8005914:	4652      	mov	r2, sl
 8005916:	4631      	mov	r1, r6
 8005918:	4628      	mov	r0, r5
 800591a:	47b8      	blx	r7
 800591c:	3001      	adds	r0, #1
 800591e:	f43f aeaa 	beq.w	8005676 <_printf_float+0xc2>
 8005922:	f108 0801 	add.w	r8, r8, #1
 8005926:	e7ec      	b.n	8005902 <_printf_float+0x34e>
 8005928:	4613      	mov	r3, r2
 800592a:	4631      	mov	r1, r6
 800592c:	4642      	mov	r2, r8
 800592e:	4628      	mov	r0, r5
 8005930:	47b8      	blx	r7
 8005932:	3001      	adds	r0, #1
 8005934:	d1c0      	bne.n	80058b8 <_printf_float+0x304>
 8005936:	e69e      	b.n	8005676 <_printf_float+0xc2>
 8005938:	2301      	movs	r3, #1
 800593a:	4631      	mov	r1, r6
 800593c:	4628      	mov	r0, r5
 800593e:	9205      	str	r2, [sp, #20]
 8005940:	47b8      	blx	r7
 8005942:	3001      	adds	r0, #1
 8005944:	f43f ae97 	beq.w	8005676 <_printf_float+0xc2>
 8005948:	9a05      	ldr	r2, [sp, #20]
 800594a:	f10b 0b01 	add.w	fp, fp, #1
 800594e:	e7b9      	b.n	80058c4 <_printf_float+0x310>
 8005950:	ee18 3a10 	vmov	r3, s16
 8005954:	4652      	mov	r2, sl
 8005956:	4631      	mov	r1, r6
 8005958:	4628      	mov	r0, r5
 800595a:	47b8      	blx	r7
 800595c:	3001      	adds	r0, #1
 800595e:	d1be      	bne.n	80058de <_printf_float+0x32a>
 8005960:	e689      	b.n	8005676 <_printf_float+0xc2>
 8005962:	9a05      	ldr	r2, [sp, #20]
 8005964:	464b      	mov	r3, r9
 8005966:	4442      	add	r2, r8
 8005968:	4631      	mov	r1, r6
 800596a:	4628      	mov	r0, r5
 800596c:	47b8      	blx	r7
 800596e:	3001      	adds	r0, #1
 8005970:	d1c1      	bne.n	80058f6 <_printf_float+0x342>
 8005972:	e680      	b.n	8005676 <_printf_float+0xc2>
 8005974:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005976:	2a01      	cmp	r2, #1
 8005978:	dc01      	bgt.n	800597e <_printf_float+0x3ca>
 800597a:	07db      	lsls	r3, r3, #31
 800597c:	d538      	bpl.n	80059f0 <_printf_float+0x43c>
 800597e:	2301      	movs	r3, #1
 8005980:	4642      	mov	r2, r8
 8005982:	4631      	mov	r1, r6
 8005984:	4628      	mov	r0, r5
 8005986:	47b8      	blx	r7
 8005988:	3001      	adds	r0, #1
 800598a:	f43f ae74 	beq.w	8005676 <_printf_float+0xc2>
 800598e:	ee18 3a10 	vmov	r3, s16
 8005992:	4652      	mov	r2, sl
 8005994:	4631      	mov	r1, r6
 8005996:	4628      	mov	r0, r5
 8005998:	47b8      	blx	r7
 800599a:	3001      	adds	r0, #1
 800599c:	f43f ae6b 	beq.w	8005676 <_printf_float+0xc2>
 80059a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80059a4:	2200      	movs	r2, #0
 80059a6:	2300      	movs	r3, #0
 80059a8:	f7fb f896 	bl	8000ad8 <__aeabi_dcmpeq>
 80059ac:	b9d8      	cbnz	r0, 80059e6 <_printf_float+0x432>
 80059ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059b0:	f108 0201 	add.w	r2, r8, #1
 80059b4:	3b01      	subs	r3, #1
 80059b6:	4631      	mov	r1, r6
 80059b8:	4628      	mov	r0, r5
 80059ba:	47b8      	blx	r7
 80059bc:	3001      	adds	r0, #1
 80059be:	d10e      	bne.n	80059de <_printf_float+0x42a>
 80059c0:	e659      	b.n	8005676 <_printf_float+0xc2>
 80059c2:	2301      	movs	r3, #1
 80059c4:	4652      	mov	r2, sl
 80059c6:	4631      	mov	r1, r6
 80059c8:	4628      	mov	r0, r5
 80059ca:	47b8      	blx	r7
 80059cc:	3001      	adds	r0, #1
 80059ce:	f43f ae52 	beq.w	8005676 <_printf_float+0xc2>
 80059d2:	f108 0801 	add.w	r8, r8, #1
 80059d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059d8:	3b01      	subs	r3, #1
 80059da:	4543      	cmp	r3, r8
 80059dc:	dcf1      	bgt.n	80059c2 <_printf_float+0x40e>
 80059de:	464b      	mov	r3, r9
 80059e0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80059e4:	e6dc      	b.n	80057a0 <_printf_float+0x1ec>
 80059e6:	f04f 0800 	mov.w	r8, #0
 80059ea:	f104 0a1a 	add.w	sl, r4, #26
 80059ee:	e7f2      	b.n	80059d6 <_printf_float+0x422>
 80059f0:	2301      	movs	r3, #1
 80059f2:	4642      	mov	r2, r8
 80059f4:	e7df      	b.n	80059b6 <_printf_float+0x402>
 80059f6:	2301      	movs	r3, #1
 80059f8:	464a      	mov	r2, r9
 80059fa:	4631      	mov	r1, r6
 80059fc:	4628      	mov	r0, r5
 80059fe:	47b8      	blx	r7
 8005a00:	3001      	adds	r0, #1
 8005a02:	f43f ae38 	beq.w	8005676 <_printf_float+0xc2>
 8005a06:	f108 0801 	add.w	r8, r8, #1
 8005a0a:	68e3      	ldr	r3, [r4, #12]
 8005a0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005a0e:	1a5b      	subs	r3, r3, r1
 8005a10:	4543      	cmp	r3, r8
 8005a12:	dcf0      	bgt.n	80059f6 <_printf_float+0x442>
 8005a14:	e6fa      	b.n	800580c <_printf_float+0x258>
 8005a16:	f04f 0800 	mov.w	r8, #0
 8005a1a:	f104 0919 	add.w	r9, r4, #25
 8005a1e:	e7f4      	b.n	8005a0a <_printf_float+0x456>

08005a20 <_printf_common>:
 8005a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a24:	4616      	mov	r6, r2
 8005a26:	4699      	mov	r9, r3
 8005a28:	688a      	ldr	r2, [r1, #8]
 8005a2a:	690b      	ldr	r3, [r1, #16]
 8005a2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a30:	4293      	cmp	r3, r2
 8005a32:	bfb8      	it	lt
 8005a34:	4613      	movlt	r3, r2
 8005a36:	6033      	str	r3, [r6, #0]
 8005a38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a3c:	4607      	mov	r7, r0
 8005a3e:	460c      	mov	r4, r1
 8005a40:	b10a      	cbz	r2, 8005a46 <_printf_common+0x26>
 8005a42:	3301      	adds	r3, #1
 8005a44:	6033      	str	r3, [r6, #0]
 8005a46:	6823      	ldr	r3, [r4, #0]
 8005a48:	0699      	lsls	r1, r3, #26
 8005a4a:	bf42      	ittt	mi
 8005a4c:	6833      	ldrmi	r3, [r6, #0]
 8005a4e:	3302      	addmi	r3, #2
 8005a50:	6033      	strmi	r3, [r6, #0]
 8005a52:	6825      	ldr	r5, [r4, #0]
 8005a54:	f015 0506 	ands.w	r5, r5, #6
 8005a58:	d106      	bne.n	8005a68 <_printf_common+0x48>
 8005a5a:	f104 0a19 	add.w	sl, r4, #25
 8005a5e:	68e3      	ldr	r3, [r4, #12]
 8005a60:	6832      	ldr	r2, [r6, #0]
 8005a62:	1a9b      	subs	r3, r3, r2
 8005a64:	42ab      	cmp	r3, r5
 8005a66:	dc26      	bgt.n	8005ab6 <_printf_common+0x96>
 8005a68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a6c:	1e13      	subs	r3, r2, #0
 8005a6e:	6822      	ldr	r2, [r4, #0]
 8005a70:	bf18      	it	ne
 8005a72:	2301      	movne	r3, #1
 8005a74:	0692      	lsls	r2, r2, #26
 8005a76:	d42b      	bmi.n	8005ad0 <_printf_common+0xb0>
 8005a78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a7c:	4649      	mov	r1, r9
 8005a7e:	4638      	mov	r0, r7
 8005a80:	47c0      	blx	r8
 8005a82:	3001      	adds	r0, #1
 8005a84:	d01e      	beq.n	8005ac4 <_printf_common+0xa4>
 8005a86:	6823      	ldr	r3, [r4, #0]
 8005a88:	68e5      	ldr	r5, [r4, #12]
 8005a8a:	6832      	ldr	r2, [r6, #0]
 8005a8c:	f003 0306 	and.w	r3, r3, #6
 8005a90:	2b04      	cmp	r3, #4
 8005a92:	bf08      	it	eq
 8005a94:	1aad      	subeq	r5, r5, r2
 8005a96:	68a3      	ldr	r3, [r4, #8]
 8005a98:	6922      	ldr	r2, [r4, #16]
 8005a9a:	bf0c      	ite	eq
 8005a9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005aa0:	2500      	movne	r5, #0
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	bfc4      	itt	gt
 8005aa6:	1a9b      	subgt	r3, r3, r2
 8005aa8:	18ed      	addgt	r5, r5, r3
 8005aaa:	2600      	movs	r6, #0
 8005aac:	341a      	adds	r4, #26
 8005aae:	42b5      	cmp	r5, r6
 8005ab0:	d11a      	bne.n	8005ae8 <_printf_common+0xc8>
 8005ab2:	2000      	movs	r0, #0
 8005ab4:	e008      	b.n	8005ac8 <_printf_common+0xa8>
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	4652      	mov	r2, sl
 8005aba:	4649      	mov	r1, r9
 8005abc:	4638      	mov	r0, r7
 8005abe:	47c0      	blx	r8
 8005ac0:	3001      	adds	r0, #1
 8005ac2:	d103      	bne.n	8005acc <_printf_common+0xac>
 8005ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005acc:	3501      	adds	r5, #1
 8005ace:	e7c6      	b.n	8005a5e <_printf_common+0x3e>
 8005ad0:	18e1      	adds	r1, r4, r3
 8005ad2:	1c5a      	adds	r2, r3, #1
 8005ad4:	2030      	movs	r0, #48	; 0x30
 8005ad6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005ada:	4422      	add	r2, r4
 8005adc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ae0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ae4:	3302      	adds	r3, #2
 8005ae6:	e7c7      	b.n	8005a78 <_printf_common+0x58>
 8005ae8:	2301      	movs	r3, #1
 8005aea:	4622      	mov	r2, r4
 8005aec:	4649      	mov	r1, r9
 8005aee:	4638      	mov	r0, r7
 8005af0:	47c0      	blx	r8
 8005af2:	3001      	adds	r0, #1
 8005af4:	d0e6      	beq.n	8005ac4 <_printf_common+0xa4>
 8005af6:	3601      	adds	r6, #1
 8005af8:	e7d9      	b.n	8005aae <_printf_common+0x8e>
	...

08005afc <_printf_i>:
 8005afc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b00:	7e0f      	ldrb	r7, [r1, #24]
 8005b02:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005b04:	2f78      	cmp	r7, #120	; 0x78
 8005b06:	4691      	mov	r9, r2
 8005b08:	4680      	mov	r8, r0
 8005b0a:	460c      	mov	r4, r1
 8005b0c:	469a      	mov	sl, r3
 8005b0e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005b12:	d807      	bhi.n	8005b24 <_printf_i+0x28>
 8005b14:	2f62      	cmp	r7, #98	; 0x62
 8005b16:	d80a      	bhi.n	8005b2e <_printf_i+0x32>
 8005b18:	2f00      	cmp	r7, #0
 8005b1a:	f000 80d8 	beq.w	8005cce <_printf_i+0x1d2>
 8005b1e:	2f58      	cmp	r7, #88	; 0x58
 8005b20:	f000 80a3 	beq.w	8005c6a <_printf_i+0x16e>
 8005b24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005b2c:	e03a      	b.n	8005ba4 <_printf_i+0xa8>
 8005b2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005b32:	2b15      	cmp	r3, #21
 8005b34:	d8f6      	bhi.n	8005b24 <_printf_i+0x28>
 8005b36:	a101      	add	r1, pc, #4	; (adr r1, 8005b3c <_printf_i+0x40>)
 8005b38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b3c:	08005b95 	.word	0x08005b95
 8005b40:	08005ba9 	.word	0x08005ba9
 8005b44:	08005b25 	.word	0x08005b25
 8005b48:	08005b25 	.word	0x08005b25
 8005b4c:	08005b25 	.word	0x08005b25
 8005b50:	08005b25 	.word	0x08005b25
 8005b54:	08005ba9 	.word	0x08005ba9
 8005b58:	08005b25 	.word	0x08005b25
 8005b5c:	08005b25 	.word	0x08005b25
 8005b60:	08005b25 	.word	0x08005b25
 8005b64:	08005b25 	.word	0x08005b25
 8005b68:	08005cb5 	.word	0x08005cb5
 8005b6c:	08005bd9 	.word	0x08005bd9
 8005b70:	08005c97 	.word	0x08005c97
 8005b74:	08005b25 	.word	0x08005b25
 8005b78:	08005b25 	.word	0x08005b25
 8005b7c:	08005cd7 	.word	0x08005cd7
 8005b80:	08005b25 	.word	0x08005b25
 8005b84:	08005bd9 	.word	0x08005bd9
 8005b88:	08005b25 	.word	0x08005b25
 8005b8c:	08005b25 	.word	0x08005b25
 8005b90:	08005c9f 	.word	0x08005c9f
 8005b94:	682b      	ldr	r3, [r5, #0]
 8005b96:	1d1a      	adds	r2, r3, #4
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	602a      	str	r2, [r5, #0]
 8005b9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ba0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e0a3      	b.n	8005cf0 <_printf_i+0x1f4>
 8005ba8:	6820      	ldr	r0, [r4, #0]
 8005baa:	6829      	ldr	r1, [r5, #0]
 8005bac:	0606      	lsls	r6, r0, #24
 8005bae:	f101 0304 	add.w	r3, r1, #4
 8005bb2:	d50a      	bpl.n	8005bca <_printf_i+0xce>
 8005bb4:	680e      	ldr	r6, [r1, #0]
 8005bb6:	602b      	str	r3, [r5, #0]
 8005bb8:	2e00      	cmp	r6, #0
 8005bba:	da03      	bge.n	8005bc4 <_printf_i+0xc8>
 8005bbc:	232d      	movs	r3, #45	; 0x2d
 8005bbe:	4276      	negs	r6, r6
 8005bc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bc4:	485e      	ldr	r0, [pc, #376]	; (8005d40 <_printf_i+0x244>)
 8005bc6:	230a      	movs	r3, #10
 8005bc8:	e019      	b.n	8005bfe <_printf_i+0x102>
 8005bca:	680e      	ldr	r6, [r1, #0]
 8005bcc:	602b      	str	r3, [r5, #0]
 8005bce:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005bd2:	bf18      	it	ne
 8005bd4:	b236      	sxthne	r6, r6
 8005bd6:	e7ef      	b.n	8005bb8 <_printf_i+0xbc>
 8005bd8:	682b      	ldr	r3, [r5, #0]
 8005bda:	6820      	ldr	r0, [r4, #0]
 8005bdc:	1d19      	adds	r1, r3, #4
 8005bde:	6029      	str	r1, [r5, #0]
 8005be0:	0601      	lsls	r1, r0, #24
 8005be2:	d501      	bpl.n	8005be8 <_printf_i+0xec>
 8005be4:	681e      	ldr	r6, [r3, #0]
 8005be6:	e002      	b.n	8005bee <_printf_i+0xf2>
 8005be8:	0646      	lsls	r6, r0, #25
 8005bea:	d5fb      	bpl.n	8005be4 <_printf_i+0xe8>
 8005bec:	881e      	ldrh	r6, [r3, #0]
 8005bee:	4854      	ldr	r0, [pc, #336]	; (8005d40 <_printf_i+0x244>)
 8005bf0:	2f6f      	cmp	r7, #111	; 0x6f
 8005bf2:	bf0c      	ite	eq
 8005bf4:	2308      	moveq	r3, #8
 8005bf6:	230a      	movne	r3, #10
 8005bf8:	2100      	movs	r1, #0
 8005bfa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005bfe:	6865      	ldr	r5, [r4, #4]
 8005c00:	60a5      	str	r5, [r4, #8]
 8005c02:	2d00      	cmp	r5, #0
 8005c04:	bfa2      	ittt	ge
 8005c06:	6821      	ldrge	r1, [r4, #0]
 8005c08:	f021 0104 	bicge.w	r1, r1, #4
 8005c0c:	6021      	strge	r1, [r4, #0]
 8005c0e:	b90e      	cbnz	r6, 8005c14 <_printf_i+0x118>
 8005c10:	2d00      	cmp	r5, #0
 8005c12:	d04d      	beq.n	8005cb0 <_printf_i+0x1b4>
 8005c14:	4615      	mov	r5, r2
 8005c16:	fbb6 f1f3 	udiv	r1, r6, r3
 8005c1a:	fb03 6711 	mls	r7, r3, r1, r6
 8005c1e:	5dc7      	ldrb	r7, [r0, r7]
 8005c20:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005c24:	4637      	mov	r7, r6
 8005c26:	42bb      	cmp	r3, r7
 8005c28:	460e      	mov	r6, r1
 8005c2a:	d9f4      	bls.n	8005c16 <_printf_i+0x11a>
 8005c2c:	2b08      	cmp	r3, #8
 8005c2e:	d10b      	bne.n	8005c48 <_printf_i+0x14c>
 8005c30:	6823      	ldr	r3, [r4, #0]
 8005c32:	07de      	lsls	r6, r3, #31
 8005c34:	d508      	bpl.n	8005c48 <_printf_i+0x14c>
 8005c36:	6923      	ldr	r3, [r4, #16]
 8005c38:	6861      	ldr	r1, [r4, #4]
 8005c3a:	4299      	cmp	r1, r3
 8005c3c:	bfde      	ittt	le
 8005c3e:	2330      	movle	r3, #48	; 0x30
 8005c40:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c44:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005c48:	1b52      	subs	r2, r2, r5
 8005c4a:	6122      	str	r2, [r4, #16]
 8005c4c:	f8cd a000 	str.w	sl, [sp]
 8005c50:	464b      	mov	r3, r9
 8005c52:	aa03      	add	r2, sp, #12
 8005c54:	4621      	mov	r1, r4
 8005c56:	4640      	mov	r0, r8
 8005c58:	f7ff fee2 	bl	8005a20 <_printf_common>
 8005c5c:	3001      	adds	r0, #1
 8005c5e:	d14c      	bne.n	8005cfa <_printf_i+0x1fe>
 8005c60:	f04f 30ff 	mov.w	r0, #4294967295
 8005c64:	b004      	add	sp, #16
 8005c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c6a:	4835      	ldr	r0, [pc, #212]	; (8005d40 <_printf_i+0x244>)
 8005c6c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005c70:	6829      	ldr	r1, [r5, #0]
 8005c72:	6823      	ldr	r3, [r4, #0]
 8005c74:	f851 6b04 	ldr.w	r6, [r1], #4
 8005c78:	6029      	str	r1, [r5, #0]
 8005c7a:	061d      	lsls	r5, r3, #24
 8005c7c:	d514      	bpl.n	8005ca8 <_printf_i+0x1ac>
 8005c7e:	07df      	lsls	r7, r3, #31
 8005c80:	bf44      	itt	mi
 8005c82:	f043 0320 	orrmi.w	r3, r3, #32
 8005c86:	6023      	strmi	r3, [r4, #0]
 8005c88:	b91e      	cbnz	r6, 8005c92 <_printf_i+0x196>
 8005c8a:	6823      	ldr	r3, [r4, #0]
 8005c8c:	f023 0320 	bic.w	r3, r3, #32
 8005c90:	6023      	str	r3, [r4, #0]
 8005c92:	2310      	movs	r3, #16
 8005c94:	e7b0      	b.n	8005bf8 <_printf_i+0xfc>
 8005c96:	6823      	ldr	r3, [r4, #0]
 8005c98:	f043 0320 	orr.w	r3, r3, #32
 8005c9c:	6023      	str	r3, [r4, #0]
 8005c9e:	2378      	movs	r3, #120	; 0x78
 8005ca0:	4828      	ldr	r0, [pc, #160]	; (8005d44 <_printf_i+0x248>)
 8005ca2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005ca6:	e7e3      	b.n	8005c70 <_printf_i+0x174>
 8005ca8:	0659      	lsls	r1, r3, #25
 8005caa:	bf48      	it	mi
 8005cac:	b2b6      	uxthmi	r6, r6
 8005cae:	e7e6      	b.n	8005c7e <_printf_i+0x182>
 8005cb0:	4615      	mov	r5, r2
 8005cb2:	e7bb      	b.n	8005c2c <_printf_i+0x130>
 8005cb4:	682b      	ldr	r3, [r5, #0]
 8005cb6:	6826      	ldr	r6, [r4, #0]
 8005cb8:	6961      	ldr	r1, [r4, #20]
 8005cba:	1d18      	adds	r0, r3, #4
 8005cbc:	6028      	str	r0, [r5, #0]
 8005cbe:	0635      	lsls	r5, r6, #24
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	d501      	bpl.n	8005cc8 <_printf_i+0x1cc>
 8005cc4:	6019      	str	r1, [r3, #0]
 8005cc6:	e002      	b.n	8005cce <_printf_i+0x1d2>
 8005cc8:	0670      	lsls	r0, r6, #25
 8005cca:	d5fb      	bpl.n	8005cc4 <_printf_i+0x1c8>
 8005ccc:	8019      	strh	r1, [r3, #0]
 8005cce:	2300      	movs	r3, #0
 8005cd0:	6123      	str	r3, [r4, #16]
 8005cd2:	4615      	mov	r5, r2
 8005cd4:	e7ba      	b.n	8005c4c <_printf_i+0x150>
 8005cd6:	682b      	ldr	r3, [r5, #0]
 8005cd8:	1d1a      	adds	r2, r3, #4
 8005cda:	602a      	str	r2, [r5, #0]
 8005cdc:	681d      	ldr	r5, [r3, #0]
 8005cde:	6862      	ldr	r2, [r4, #4]
 8005ce0:	2100      	movs	r1, #0
 8005ce2:	4628      	mov	r0, r5
 8005ce4:	f7fa fa84 	bl	80001f0 <memchr>
 8005ce8:	b108      	cbz	r0, 8005cee <_printf_i+0x1f2>
 8005cea:	1b40      	subs	r0, r0, r5
 8005cec:	6060      	str	r0, [r4, #4]
 8005cee:	6863      	ldr	r3, [r4, #4]
 8005cf0:	6123      	str	r3, [r4, #16]
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cf8:	e7a8      	b.n	8005c4c <_printf_i+0x150>
 8005cfa:	6923      	ldr	r3, [r4, #16]
 8005cfc:	462a      	mov	r2, r5
 8005cfe:	4649      	mov	r1, r9
 8005d00:	4640      	mov	r0, r8
 8005d02:	47d0      	blx	sl
 8005d04:	3001      	adds	r0, #1
 8005d06:	d0ab      	beq.n	8005c60 <_printf_i+0x164>
 8005d08:	6823      	ldr	r3, [r4, #0]
 8005d0a:	079b      	lsls	r3, r3, #30
 8005d0c:	d413      	bmi.n	8005d36 <_printf_i+0x23a>
 8005d0e:	68e0      	ldr	r0, [r4, #12]
 8005d10:	9b03      	ldr	r3, [sp, #12]
 8005d12:	4298      	cmp	r0, r3
 8005d14:	bfb8      	it	lt
 8005d16:	4618      	movlt	r0, r3
 8005d18:	e7a4      	b.n	8005c64 <_printf_i+0x168>
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	4632      	mov	r2, r6
 8005d1e:	4649      	mov	r1, r9
 8005d20:	4640      	mov	r0, r8
 8005d22:	47d0      	blx	sl
 8005d24:	3001      	adds	r0, #1
 8005d26:	d09b      	beq.n	8005c60 <_printf_i+0x164>
 8005d28:	3501      	adds	r5, #1
 8005d2a:	68e3      	ldr	r3, [r4, #12]
 8005d2c:	9903      	ldr	r1, [sp, #12]
 8005d2e:	1a5b      	subs	r3, r3, r1
 8005d30:	42ab      	cmp	r3, r5
 8005d32:	dcf2      	bgt.n	8005d1a <_printf_i+0x21e>
 8005d34:	e7eb      	b.n	8005d0e <_printf_i+0x212>
 8005d36:	2500      	movs	r5, #0
 8005d38:	f104 0619 	add.w	r6, r4, #25
 8005d3c:	e7f5      	b.n	8005d2a <_printf_i+0x22e>
 8005d3e:	bf00      	nop
 8005d40:	0800829e 	.word	0x0800829e
 8005d44:	080082af 	.word	0x080082af

08005d48 <siprintf>:
 8005d48:	b40e      	push	{r1, r2, r3}
 8005d4a:	b500      	push	{lr}
 8005d4c:	b09c      	sub	sp, #112	; 0x70
 8005d4e:	ab1d      	add	r3, sp, #116	; 0x74
 8005d50:	9002      	str	r0, [sp, #8]
 8005d52:	9006      	str	r0, [sp, #24]
 8005d54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005d58:	4809      	ldr	r0, [pc, #36]	; (8005d80 <siprintf+0x38>)
 8005d5a:	9107      	str	r1, [sp, #28]
 8005d5c:	9104      	str	r1, [sp, #16]
 8005d5e:	4909      	ldr	r1, [pc, #36]	; (8005d84 <siprintf+0x3c>)
 8005d60:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d64:	9105      	str	r1, [sp, #20]
 8005d66:	6800      	ldr	r0, [r0, #0]
 8005d68:	9301      	str	r3, [sp, #4]
 8005d6a:	a902      	add	r1, sp, #8
 8005d6c:	f001 fb76 	bl	800745c <_svfiprintf_r>
 8005d70:	9b02      	ldr	r3, [sp, #8]
 8005d72:	2200      	movs	r2, #0
 8005d74:	701a      	strb	r2, [r3, #0]
 8005d76:	b01c      	add	sp, #112	; 0x70
 8005d78:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d7c:	b003      	add	sp, #12
 8005d7e:	4770      	bx	lr
 8005d80:	2000000c 	.word	0x2000000c
 8005d84:	ffff0208 	.word	0xffff0208

08005d88 <quorem>:
 8005d88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d8c:	6903      	ldr	r3, [r0, #16]
 8005d8e:	690c      	ldr	r4, [r1, #16]
 8005d90:	42a3      	cmp	r3, r4
 8005d92:	4607      	mov	r7, r0
 8005d94:	f2c0 8081 	blt.w	8005e9a <quorem+0x112>
 8005d98:	3c01      	subs	r4, #1
 8005d9a:	f101 0814 	add.w	r8, r1, #20
 8005d9e:	f100 0514 	add.w	r5, r0, #20
 8005da2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005da6:	9301      	str	r3, [sp, #4]
 8005da8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005dac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005db0:	3301      	adds	r3, #1
 8005db2:	429a      	cmp	r2, r3
 8005db4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005db8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005dbc:	fbb2 f6f3 	udiv	r6, r2, r3
 8005dc0:	d331      	bcc.n	8005e26 <quorem+0x9e>
 8005dc2:	f04f 0e00 	mov.w	lr, #0
 8005dc6:	4640      	mov	r0, r8
 8005dc8:	46ac      	mov	ip, r5
 8005dca:	46f2      	mov	sl, lr
 8005dcc:	f850 2b04 	ldr.w	r2, [r0], #4
 8005dd0:	b293      	uxth	r3, r2
 8005dd2:	fb06 e303 	mla	r3, r6, r3, lr
 8005dd6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	ebaa 0303 	sub.w	r3, sl, r3
 8005de0:	f8dc a000 	ldr.w	sl, [ip]
 8005de4:	0c12      	lsrs	r2, r2, #16
 8005de6:	fa13 f38a 	uxtah	r3, r3, sl
 8005dea:	fb06 e202 	mla	r2, r6, r2, lr
 8005dee:	9300      	str	r3, [sp, #0]
 8005df0:	9b00      	ldr	r3, [sp, #0]
 8005df2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005df6:	b292      	uxth	r2, r2
 8005df8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005dfc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005e00:	f8bd 3000 	ldrh.w	r3, [sp]
 8005e04:	4581      	cmp	r9, r0
 8005e06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e0a:	f84c 3b04 	str.w	r3, [ip], #4
 8005e0e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005e12:	d2db      	bcs.n	8005dcc <quorem+0x44>
 8005e14:	f855 300b 	ldr.w	r3, [r5, fp]
 8005e18:	b92b      	cbnz	r3, 8005e26 <quorem+0x9e>
 8005e1a:	9b01      	ldr	r3, [sp, #4]
 8005e1c:	3b04      	subs	r3, #4
 8005e1e:	429d      	cmp	r5, r3
 8005e20:	461a      	mov	r2, r3
 8005e22:	d32e      	bcc.n	8005e82 <quorem+0xfa>
 8005e24:	613c      	str	r4, [r7, #16]
 8005e26:	4638      	mov	r0, r7
 8005e28:	f001 f8c4 	bl	8006fb4 <__mcmp>
 8005e2c:	2800      	cmp	r0, #0
 8005e2e:	db24      	blt.n	8005e7a <quorem+0xf2>
 8005e30:	3601      	adds	r6, #1
 8005e32:	4628      	mov	r0, r5
 8005e34:	f04f 0c00 	mov.w	ip, #0
 8005e38:	f858 2b04 	ldr.w	r2, [r8], #4
 8005e3c:	f8d0 e000 	ldr.w	lr, [r0]
 8005e40:	b293      	uxth	r3, r2
 8005e42:	ebac 0303 	sub.w	r3, ip, r3
 8005e46:	0c12      	lsrs	r2, r2, #16
 8005e48:	fa13 f38e 	uxtah	r3, r3, lr
 8005e4c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005e50:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e5a:	45c1      	cmp	r9, r8
 8005e5c:	f840 3b04 	str.w	r3, [r0], #4
 8005e60:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005e64:	d2e8      	bcs.n	8005e38 <quorem+0xb0>
 8005e66:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e6e:	b922      	cbnz	r2, 8005e7a <quorem+0xf2>
 8005e70:	3b04      	subs	r3, #4
 8005e72:	429d      	cmp	r5, r3
 8005e74:	461a      	mov	r2, r3
 8005e76:	d30a      	bcc.n	8005e8e <quorem+0x106>
 8005e78:	613c      	str	r4, [r7, #16]
 8005e7a:	4630      	mov	r0, r6
 8005e7c:	b003      	add	sp, #12
 8005e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e82:	6812      	ldr	r2, [r2, #0]
 8005e84:	3b04      	subs	r3, #4
 8005e86:	2a00      	cmp	r2, #0
 8005e88:	d1cc      	bne.n	8005e24 <quorem+0x9c>
 8005e8a:	3c01      	subs	r4, #1
 8005e8c:	e7c7      	b.n	8005e1e <quorem+0x96>
 8005e8e:	6812      	ldr	r2, [r2, #0]
 8005e90:	3b04      	subs	r3, #4
 8005e92:	2a00      	cmp	r2, #0
 8005e94:	d1f0      	bne.n	8005e78 <quorem+0xf0>
 8005e96:	3c01      	subs	r4, #1
 8005e98:	e7eb      	b.n	8005e72 <quorem+0xea>
 8005e9a:	2000      	movs	r0, #0
 8005e9c:	e7ee      	b.n	8005e7c <quorem+0xf4>
	...

08005ea0 <_dtoa_r>:
 8005ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ea4:	ed2d 8b04 	vpush	{d8-d9}
 8005ea8:	ec57 6b10 	vmov	r6, r7, d0
 8005eac:	b093      	sub	sp, #76	; 0x4c
 8005eae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005eb0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005eb4:	9106      	str	r1, [sp, #24]
 8005eb6:	ee10 aa10 	vmov	sl, s0
 8005eba:	4604      	mov	r4, r0
 8005ebc:	9209      	str	r2, [sp, #36]	; 0x24
 8005ebe:	930c      	str	r3, [sp, #48]	; 0x30
 8005ec0:	46bb      	mov	fp, r7
 8005ec2:	b975      	cbnz	r5, 8005ee2 <_dtoa_r+0x42>
 8005ec4:	2010      	movs	r0, #16
 8005ec6:	f000 fddd 	bl	8006a84 <malloc>
 8005eca:	4602      	mov	r2, r0
 8005ecc:	6260      	str	r0, [r4, #36]	; 0x24
 8005ece:	b920      	cbnz	r0, 8005eda <_dtoa_r+0x3a>
 8005ed0:	4ba7      	ldr	r3, [pc, #668]	; (8006170 <_dtoa_r+0x2d0>)
 8005ed2:	21ea      	movs	r1, #234	; 0xea
 8005ed4:	48a7      	ldr	r0, [pc, #668]	; (8006174 <_dtoa_r+0x2d4>)
 8005ed6:	f001 fbd1 	bl	800767c <__assert_func>
 8005eda:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005ede:	6005      	str	r5, [r0, #0]
 8005ee0:	60c5      	str	r5, [r0, #12]
 8005ee2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ee4:	6819      	ldr	r1, [r3, #0]
 8005ee6:	b151      	cbz	r1, 8005efe <_dtoa_r+0x5e>
 8005ee8:	685a      	ldr	r2, [r3, #4]
 8005eea:	604a      	str	r2, [r1, #4]
 8005eec:	2301      	movs	r3, #1
 8005eee:	4093      	lsls	r3, r2
 8005ef0:	608b      	str	r3, [r1, #8]
 8005ef2:	4620      	mov	r0, r4
 8005ef4:	f000 fe1c 	bl	8006b30 <_Bfree>
 8005ef8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005efa:	2200      	movs	r2, #0
 8005efc:	601a      	str	r2, [r3, #0]
 8005efe:	1e3b      	subs	r3, r7, #0
 8005f00:	bfaa      	itet	ge
 8005f02:	2300      	movge	r3, #0
 8005f04:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005f08:	f8c8 3000 	strge.w	r3, [r8]
 8005f0c:	4b9a      	ldr	r3, [pc, #616]	; (8006178 <_dtoa_r+0x2d8>)
 8005f0e:	bfbc      	itt	lt
 8005f10:	2201      	movlt	r2, #1
 8005f12:	f8c8 2000 	strlt.w	r2, [r8]
 8005f16:	ea33 030b 	bics.w	r3, r3, fp
 8005f1a:	d11b      	bne.n	8005f54 <_dtoa_r+0xb4>
 8005f1c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f1e:	f242 730f 	movw	r3, #9999	; 0x270f
 8005f22:	6013      	str	r3, [r2, #0]
 8005f24:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005f28:	4333      	orrs	r3, r6
 8005f2a:	f000 8592 	beq.w	8006a52 <_dtoa_r+0xbb2>
 8005f2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f30:	b963      	cbnz	r3, 8005f4c <_dtoa_r+0xac>
 8005f32:	4b92      	ldr	r3, [pc, #584]	; (800617c <_dtoa_r+0x2dc>)
 8005f34:	e022      	b.n	8005f7c <_dtoa_r+0xdc>
 8005f36:	4b92      	ldr	r3, [pc, #584]	; (8006180 <_dtoa_r+0x2e0>)
 8005f38:	9301      	str	r3, [sp, #4]
 8005f3a:	3308      	adds	r3, #8
 8005f3c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005f3e:	6013      	str	r3, [r2, #0]
 8005f40:	9801      	ldr	r0, [sp, #4]
 8005f42:	b013      	add	sp, #76	; 0x4c
 8005f44:	ecbd 8b04 	vpop	{d8-d9}
 8005f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f4c:	4b8b      	ldr	r3, [pc, #556]	; (800617c <_dtoa_r+0x2dc>)
 8005f4e:	9301      	str	r3, [sp, #4]
 8005f50:	3303      	adds	r3, #3
 8005f52:	e7f3      	b.n	8005f3c <_dtoa_r+0x9c>
 8005f54:	2200      	movs	r2, #0
 8005f56:	2300      	movs	r3, #0
 8005f58:	4650      	mov	r0, sl
 8005f5a:	4659      	mov	r1, fp
 8005f5c:	f7fa fdbc 	bl	8000ad8 <__aeabi_dcmpeq>
 8005f60:	ec4b ab19 	vmov	d9, sl, fp
 8005f64:	4680      	mov	r8, r0
 8005f66:	b158      	cbz	r0, 8005f80 <_dtoa_r+0xe0>
 8005f68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	6013      	str	r3, [r2, #0]
 8005f6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	f000 856b 	beq.w	8006a4c <_dtoa_r+0xbac>
 8005f76:	4883      	ldr	r0, [pc, #524]	; (8006184 <_dtoa_r+0x2e4>)
 8005f78:	6018      	str	r0, [r3, #0]
 8005f7a:	1e43      	subs	r3, r0, #1
 8005f7c:	9301      	str	r3, [sp, #4]
 8005f7e:	e7df      	b.n	8005f40 <_dtoa_r+0xa0>
 8005f80:	ec4b ab10 	vmov	d0, sl, fp
 8005f84:	aa10      	add	r2, sp, #64	; 0x40
 8005f86:	a911      	add	r1, sp, #68	; 0x44
 8005f88:	4620      	mov	r0, r4
 8005f8a:	f001 f8b9 	bl	8007100 <__d2b>
 8005f8e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005f92:	ee08 0a10 	vmov	s16, r0
 8005f96:	2d00      	cmp	r5, #0
 8005f98:	f000 8084 	beq.w	80060a4 <_dtoa_r+0x204>
 8005f9c:	ee19 3a90 	vmov	r3, s19
 8005fa0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005fa4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005fa8:	4656      	mov	r6, sl
 8005faa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005fae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005fb2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005fb6:	4b74      	ldr	r3, [pc, #464]	; (8006188 <_dtoa_r+0x2e8>)
 8005fb8:	2200      	movs	r2, #0
 8005fba:	4630      	mov	r0, r6
 8005fbc:	4639      	mov	r1, r7
 8005fbe:	f7fa f96b 	bl	8000298 <__aeabi_dsub>
 8005fc2:	a365      	add	r3, pc, #404	; (adr r3, 8006158 <_dtoa_r+0x2b8>)
 8005fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc8:	f7fa fb1e 	bl	8000608 <__aeabi_dmul>
 8005fcc:	a364      	add	r3, pc, #400	; (adr r3, 8006160 <_dtoa_r+0x2c0>)
 8005fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd2:	f7fa f963 	bl	800029c <__adddf3>
 8005fd6:	4606      	mov	r6, r0
 8005fd8:	4628      	mov	r0, r5
 8005fda:	460f      	mov	r7, r1
 8005fdc:	f7fa faaa 	bl	8000534 <__aeabi_i2d>
 8005fe0:	a361      	add	r3, pc, #388	; (adr r3, 8006168 <_dtoa_r+0x2c8>)
 8005fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe6:	f7fa fb0f 	bl	8000608 <__aeabi_dmul>
 8005fea:	4602      	mov	r2, r0
 8005fec:	460b      	mov	r3, r1
 8005fee:	4630      	mov	r0, r6
 8005ff0:	4639      	mov	r1, r7
 8005ff2:	f7fa f953 	bl	800029c <__adddf3>
 8005ff6:	4606      	mov	r6, r0
 8005ff8:	460f      	mov	r7, r1
 8005ffa:	f7fa fdb5 	bl	8000b68 <__aeabi_d2iz>
 8005ffe:	2200      	movs	r2, #0
 8006000:	9000      	str	r0, [sp, #0]
 8006002:	2300      	movs	r3, #0
 8006004:	4630      	mov	r0, r6
 8006006:	4639      	mov	r1, r7
 8006008:	f7fa fd70 	bl	8000aec <__aeabi_dcmplt>
 800600c:	b150      	cbz	r0, 8006024 <_dtoa_r+0x184>
 800600e:	9800      	ldr	r0, [sp, #0]
 8006010:	f7fa fa90 	bl	8000534 <__aeabi_i2d>
 8006014:	4632      	mov	r2, r6
 8006016:	463b      	mov	r3, r7
 8006018:	f7fa fd5e 	bl	8000ad8 <__aeabi_dcmpeq>
 800601c:	b910      	cbnz	r0, 8006024 <_dtoa_r+0x184>
 800601e:	9b00      	ldr	r3, [sp, #0]
 8006020:	3b01      	subs	r3, #1
 8006022:	9300      	str	r3, [sp, #0]
 8006024:	9b00      	ldr	r3, [sp, #0]
 8006026:	2b16      	cmp	r3, #22
 8006028:	d85a      	bhi.n	80060e0 <_dtoa_r+0x240>
 800602a:	9a00      	ldr	r2, [sp, #0]
 800602c:	4b57      	ldr	r3, [pc, #348]	; (800618c <_dtoa_r+0x2ec>)
 800602e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006036:	ec51 0b19 	vmov	r0, r1, d9
 800603a:	f7fa fd57 	bl	8000aec <__aeabi_dcmplt>
 800603e:	2800      	cmp	r0, #0
 8006040:	d050      	beq.n	80060e4 <_dtoa_r+0x244>
 8006042:	9b00      	ldr	r3, [sp, #0]
 8006044:	3b01      	subs	r3, #1
 8006046:	9300      	str	r3, [sp, #0]
 8006048:	2300      	movs	r3, #0
 800604a:	930b      	str	r3, [sp, #44]	; 0x2c
 800604c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800604e:	1b5d      	subs	r5, r3, r5
 8006050:	1e6b      	subs	r3, r5, #1
 8006052:	9305      	str	r3, [sp, #20]
 8006054:	bf45      	ittet	mi
 8006056:	f1c5 0301 	rsbmi	r3, r5, #1
 800605a:	9304      	strmi	r3, [sp, #16]
 800605c:	2300      	movpl	r3, #0
 800605e:	2300      	movmi	r3, #0
 8006060:	bf4c      	ite	mi
 8006062:	9305      	strmi	r3, [sp, #20]
 8006064:	9304      	strpl	r3, [sp, #16]
 8006066:	9b00      	ldr	r3, [sp, #0]
 8006068:	2b00      	cmp	r3, #0
 800606a:	db3d      	blt.n	80060e8 <_dtoa_r+0x248>
 800606c:	9b05      	ldr	r3, [sp, #20]
 800606e:	9a00      	ldr	r2, [sp, #0]
 8006070:	920a      	str	r2, [sp, #40]	; 0x28
 8006072:	4413      	add	r3, r2
 8006074:	9305      	str	r3, [sp, #20]
 8006076:	2300      	movs	r3, #0
 8006078:	9307      	str	r3, [sp, #28]
 800607a:	9b06      	ldr	r3, [sp, #24]
 800607c:	2b09      	cmp	r3, #9
 800607e:	f200 8089 	bhi.w	8006194 <_dtoa_r+0x2f4>
 8006082:	2b05      	cmp	r3, #5
 8006084:	bfc4      	itt	gt
 8006086:	3b04      	subgt	r3, #4
 8006088:	9306      	strgt	r3, [sp, #24]
 800608a:	9b06      	ldr	r3, [sp, #24]
 800608c:	f1a3 0302 	sub.w	r3, r3, #2
 8006090:	bfcc      	ite	gt
 8006092:	2500      	movgt	r5, #0
 8006094:	2501      	movle	r5, #1
 8006096:	2b03      	cmp	r3, #3
 8006098:	f200 8087 	bhi.w	80061aa <_dtoa_r+0x30a>
 800609c:	e8df f003 	tbb	[pc, r3]
 80060a0:	59383a2d 	.word	0x59383a2d
 80060a4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80060a8:	441d      	add	r5, r3
 80060aa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80060ae:	2b20      	cmp	r3, #32
 80060b0:	bfc1      	itttt	gt
 80060b2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80060b6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80060ba:	fa0b f303 	lslgt.w	r3, fp, r3
 80060be:	fa26 f000 	lsrgt.w	r0, r6, r0
 80060c2:	bfda      	itte	le
 80060c4:	f1c3 0320 	rsble	r3, r3, #32
 80060c8:	fa06 f003 	lslle.w	r0, r6, r3
 80060cc:	4318      	orrgt	r0, r3
 80060ce:	f7fa fa21 	bl	8000514 <__aeabi_ui2d>
 80060d2:	2301      	movs	r3, #1
 80060d4:	4606      	mov	r6, r0
 80060d6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80060da:	3d01      	subs	r5, #1
 80060dc:	930e      	str	r3, [sp, #56]	; 0x38
 80060de:	e76a      	b.n	8005fb6 <_dtoa_r+0x116>
 80060e0:	2301      	movs	r3, #1
 80060e2:	e7b2      	b.n	800604a <_dtoa_r+0x1aa>
 80060e4:	900b      	str	r0, [sp, #44]	; 0x2c
 80060e6:	e7b1      	b.n	800604c <_dtoa_r+0x1ac>
 80060e8:	9b04      	ldr	r3, [sp, #16]
 80060ea:	9a00      	ldr	r2, [sp, #0]
 80060ec:	1a9b      	subs	r3, r3, r2
 80060ee:	9304      	str	r3, [sp, #16]
 80060f0:	4253      	negs	r3, r2
 80060f2:	9307      	str	r3, [sp, #28]
 80060f4:	2300      	movs	r3, #0
 80060f6:	930a      	str	r3, [sp, #40]	; 0x28
 80060f8:	e7bf      	b.n	800607a <_dtoa_r+0x1da>
 80060fa:	2300      	movs	r3, #0
 80060fc:	9308      	str	r3, [sp, #32]
 80060fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006100:	2b00      	cmp	r3, #0
 8006102:	dc55      	bgt.n	80061b0 <_dtoa_r+0x310>
 8006104:	2301      	movs	r3, #1
 8006106:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800610a:	461a      	mov	r2, r3
 800610c:	9209      	str	r2, [sp, #36]	; 0x24
 800610e:	e00c      	b.n	800612a <_dtoa_r+0x28a>
 8006110:	2301      	movs	r3, #1
 8006112:	e7f3      	b.n	80060fc <_dtoa_r+0x25c>
 8006114:	2300      	movs	r3, #0
 8006116:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006118:	9308      	str	r3, [sp, #32]
 800611a:	9b00      	ldr	r3, [sp, #0]
 800611c:	4413      	add	r3, r2
 800611e:	9302      	str	r3, [sp, #8]
 8006120:	3301      	adds	r3, #1
 8006122:	2b01      	cmp	r3, #1
 8006124:	9303      	str	r3, [sp, #12]
 8006126:	bfb8      	it	lt
 8006128:	2301      	movlt	r3, #1
 800612a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800612c:	2200      	movs	r2, #0
 800612e:	6042      	str	r2, [r0, #4]
 8006130:	2204      	movs	r2, #4
 8006132:	f102 0614 	add.w	r6, r2, #20
 8006136:	429e      	cmp	r6, r3
 8006138:	6841      	ldr	r1, [r0, #4]
 800613a:	d93d      	bls.n	80061b8 <_dtoa_r+0x318>
 800613c:	4620      	mov	r0, r4
 800613e:	f000 fcb7 	bl	8006ab0 <_Balloc>
 8006142:	9001      	str	r0, [sp, #4]
 8006144:	2800      	cmp	r0, #0
 8006146:	d13b      	bne.n	80061c0 <_dtoa_r+0x320>
 8006148:	4b11      	ldr	r3, [pc, #68]	; (8006190 <_dtoa_r+0x2f0>)
 800614a:	4602      	mov	r2, r0
 800614c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006150:	e6c0      	b.n	8005ed4 <_dtoa_r+0x34>
 8006152:	2301      	movs	r3, #1
 8006154:	e7df      	b.n	8006116 <_dtoa_r+0x276>
 8006156:	bf00      	nop
 8006158:	636f4361 	.word	0x636f4361
 800615c:	3fd287a7 	.word	0x3fd287a7
 8006160:	8b60c8b3 	.word	0x8b60c8b3
 8006164:	3fc68a28 	.word	0x3fc68a28
 8006168:	509f79fb 	.word	0x509f79fb
 800616c:	3fd34413 	.word	0x3fd34413
 8006170:	080082cd 	.word	0x080082cd
 8006174:	080082e4 	.word	0x080082e4
 8006178:	7ff00000 	.word	0x7ff00000
 800617c:	080082c9 	.word	0x080082c9
 8006180:	080082c0 	.word	0x080082c0
 8006184:	0800829d 	.word	0x0800829d
 8006188:	3ff80000 	.word	0x3ff80000
 800618c:	080083d8 	.word	0x080083d8
 8006190:	0800833f 	.word	0x0800833f
 8006194:	2501      	movs	r5, #1
 8006196:	2300      	movs	r3, #0
 8006198:	9306      	str	r3, [sp, #24]
 800619a:	9508      	str	r5, [sp, #32]
 800619c:	f04f 33ff 	mov.w	r3, #4294967295
 80061a0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80061a4:	2200      	movs	r2, #0
 80061a6:	2312      	movs	r3, #18
 80061a8:	e7b0      	b.n	800610c <_dtoa_r+0x26c>
 80061aa:	2301      	movs	r3, #1
 80061ac:	9308      	str	r3, [sp, #32]
 80061ae:	e7f5      	b.n	800619c <_dtoa_r+0x2fc>
 80061b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061b2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80061b6:	e7b8      	b.n	800612a <_dtoa_r+0x28a>
 80061b8:	3101      	adds	r1, #1
 80061ba:	6041      	str	r1, [r0, #4]
 80061bc:	0052      	lsls	r2, r2, #1
 80061be:	e7b8      	b.n	8006132 <_dtoa_r+0x292>
 80061c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061c2:	9a01      	ldr	r2, [sp, #4]
 80061c4:	601a      	str	r2, [r3, #0]
 80061c6:	9b03      	ldr	r3, [sp, #12]
 80061c8:	2b0e      	cmp	r3, #14
 80061ca:	f200 809d 	bhi.w	8006308 <_dtoa_r+0x468>
 80061ce:	2d00      	cmp	r5, #0
 80061d0:	f000 809a 	beq.w	8006308 <_dtoa_r+0x468>
 80061d4:	9b00      	ldr	r3, [sp, #0]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	dd32      	ble.n	8006240 <_dtoa_r+0x3a0>
 80061da:	4ab7      	ldr	r2, [pc, #732]	; (80064b8 <_dtoa_r+0x618>)
 80061dc:	f003 030f 	and.w	r3, r3, #15
 80061e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80061e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80061e8:	9b00      	ldr	r3, [sp, #0]
 80061ea:	05d8      	lsls	r0, r3, #23
 80061ec:	ea4f 1723 	mov.w	r7, r3, asr #4
 80061f0:	d516      	bpl.n	8006220 <_dtoa_r+0x380>
 80061f2:	4bb2      	ldr	r3, [pc, #712]	; (80064bc <_dtoa_r+0x61c>)
 80061f4:	ec51 0b19 	vmov	r0, r1, d9
 80061f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80061fc:	f7fa fb2e 	bl	800085c <__aeabi_ddiv>
 8006200:	f007 070f 	and.w	r7, r7, #15
 8006204:	4682      	mov	sl, r0
 8006206:	468b      	mov	fp, r1
 8006208:	2503      	movs	r5, #3
 800620a:	4eac      	ldr	r6, [pc, #688]	; (80064bc <_dtoa_r+0x61c>)
 800620c:	b957      	cbnz	r7, 8006224 <_dtoa_r+0x384>
 800620e:	4642      	mov	r2, r8
 8006210:	464b      	mov	r3, r9
 8006212:	4650      	mov	r0, sl
 8006214:	4659      	mov	r1, fp
 8006216:	f7fa fb21 	bl	800085c <__aeabi_ddiv>
 800621a:	4682      	mov	sl, r0
 800621c:	468b      	mov	fp, r1
 800621e:	e028      	b.n	8006272 <_dtoa_r+0x3d2>
 8006220:	2502      	movs	r5, #2
 8006222:	e7f2      	b.n	800620a <_dtoa_r+0x36a>
 8006224:	07f9      	lsls	r1, r7, #31
 8006226:	d508      	bpl.n	800623a <_dtoa_r+0x39a>
 8006228:	4640      	mov	r0, r8
 800622a:	4649      	mov	r1, r9
 800622c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006230:	f7fa f9ea 	bl	8000608 <__aeabi_dmul>
 8006234:	3501      	adds	r5, #1
 8006236:	4680      	mov	r8, r0
 8006238:	4689      	mov	r9, r1
 800623a:	107f      	asrs	r7, r7, #1
 800623c:	3608      	adds	r6, #8
 800623e:	e7e5      	b.n	800620c <_dtoa_r+0x36c>
 8006240:	f000 809b 	beq.w	800637a <_dtoa_r+0x4da>
 8006244:	9b00      	ldr	r3, [sp, #0]
 8006246:	4f9d      	ldr	r7, [pc, #628]	; (80064bc <_dtoa_r+0x61c>)
 8006248:	425e      	negs	r6, r3
 800624a:	4b9b      	ldr	r3, [pc, #620]	; (80064b8 <_dtoa_r+0x618>)
 800624c:	f006 020f 	and.w	r2, r6, #15
 8006250:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006258:	ec51 0b19 	vmov	r0, r1, d9
 800625c:	f7fa f9d4 	bl	8000608 <__aeabi_dmul>
 8006260:	1136      	asrs	r6, r6, #4
 8006262:	4682      	mov	sl, r0
 8006264:	468b      	mov	fp, r1
 8006266:	2300      	movs	r3, #0
 8006268:	2502      	movs	r5, #2
 800626a:	2e00      	cmp	r6, #0
 800626c:	d17a      	bne.n	8006364 <_dtoa_r+0x4c4>
 800626e:	2b00      	cmp	r3, #0
 8006270:	d1d3      	bne.n	800621a <_dtoa_r+0x37a>
 8006272:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006274:	2b00      	cmp	r3, #0
 8006276:	f000 8082 	beq.w	800637e <_dtoa_r+0x4de>
 800627a:	4b91      	ldr	r3, [pc, #580]	; (80064c0 <_dtoa_r+0x620>)
 800627c:	2200      	movs	r2, #0
 800627e:	4650      	mov	r0, sl
 8006280:	4659      	mov	r1, fp
 8006282:	f7fa fc33 	bl	8000aec <__aeabi_dcmplt>
 8006286:	2800      	cmp	r0, #0
 8006288:	d079      	beq.n	800637e <_dtoa_r+0x4de>
 800628a:	9b03      	ldr	r3, [sp, #12]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d076      	beq.n	800637e <_dtoa_r+0x4de>
 8006290:	9b02      	ldr	r3, [sp, #8]
 8006292:	2b00      	cmp	r3, #0
 8006294:	dd36      	ble.n	8006304 <_dtoa_r+0x464>
 8006296:	9b00      	ldr	r3, [sp, #0]
 8006298:	4650      	mov	r0, sl
 800629a:	4659      	mov	r1, fp
 800629c:	1e5f      	subs	r7, r3, #1
 800629e:	2200      	movs	r2, #0
 80062a0:	4b88      	ldr	r3, [pc, #544]	; (80064c4 <_dtoa_r+0x624>)
 80062a2:	f7fa f9b1 	bl	8000608 <__aeabi_dmul>
 80062a6:	9e02      	ldr	r6, [sp, #8]
 80062a8:	4682      	mov	sl, r0
 80062aa:	468b      	mov	fp, r1
 80062ac:	3501      	adds	r5, #1
 80062ae:	4628      	mov	r0, r5
 80062b0:	f7fa f940 	bl	8000534 <__aeabi_i2d>
 80062b4:	4652      	mov	r2, sl
 80062b6:	465b      	mov	r3, fp
 80062b8:	f7fa f9a6 	bl	8000608 <__aeabi_dmul>
 80062bc:	4b82      	ldr	r3, [pc, #520]	; (80064c8 <_dtoa_r+0x628>)
 80062be:	2200      	movs	r2, #0
 80062c0:	f7f9 ffec 	bl	800029c <__adddf3>
 80062c4:	46d0      	mov	r8, sl
 80062c6:	46d9      	mov	r9, fp
 80062c8:	4682      	mov	sl, r0
 80062ca:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80062ce:	2e00      	cmp	r6, #0
 80062d0:	d158      	bne.n	8006384 <_dtoa_r+0x4e4>
 80062d2:	4b7e      	ldr	r3, [pc, #504]	; (80064cc <_dtoa_r+0x62c>)
 80062d4:	2200      	movs	r2, #0
 80062d6:	4640      	mov	r0, r8
 80062d8:	4649      	mov	r1, r9
 80062da:	f7f9 ffdd 	bl	8000298 <__aeabi_dsub>
 80062de:	4652      	mov	r2, sl
 80062e0:	465b      	mov	r3, fp
 80062e2:	4680      	mov	r8, r0
 80062e4:	4689      	mov	r9, r1
 80062e6:	f7fa fc1f 	bl	8000b28 <__aeabi_dcmpgt>
 80062ea:	2800      	cmp	r0, #0
 80062ec:	f040 8295 	bne.w	800681a <_dtoa_r+0x97a>
 80062f0:	4652      	mov	r2, sl
 80062f2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80062f6:	4640      	mov	r0, r8
 80062f8:	4649      	mov	r1, r9
 80062fa:	f7fa fbf7 	bl	8000aec <__aeabi_dcmplt>
 80062fe:	2800      	cmp	r0, #0
 8006300:	f040 8289 	bne.w	8006816 <_dtoa_r+0x976>
 8006304:	ec5b ab19 	vmov	sl, fp, d9
 8006308:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800630a:	2b00      	cmp	r3, #0
 800630c:	f2c0 8148 	blt.w	80065a0 <_dtoa_r+0x700>
 8006310:	9a00      	ldr	r2, [sp, #0]
 8006312:	2a0e      	cmp	r2, #14
 8006314:	f300 8144 	bgt.w	80065a0 <_dtoa_r+0x700>
 8006318:	4b67      	ldr	r3, [pc, #412]	; (80064b8 <_dtoa_r+0x618>)
 800631a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800631e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006322:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006324:	2b00      	cmp	r3, #0
 8006326:	f280 80d5 	bge.w	80064d4 <_dtoa_r+0x634>
 800632a:	9b03      	ldr	r3, [sp, #12]
 800632c:	2b00      	cmp	r3, #0
 800632e:	f300 80d1 	bgt.w	80064d4 <_dtoa_r+0x634>
 8006332:	f040 826f 	bne.w	8006814 <_dtoa_r+0x974>
 8006336:	4b65      	ldr	r3, [pc, #404]	; (80064cc <_dtoa_r+0x62c>)
 8006338:	2200      	movs	r2, #0
 800633a:	4640      	mov	r0, r8
 800633c:	4649      	mov	r1, r9
 800633e:	f7fa f963 	bl	8000608 <__aeabi_dmul>
 8006342:	4652      	mov	r2, sl
 8006344:	465b      	mov	r3, fp
 8006346:	f7fa fbe5 	bl	8000b14 <__aeabi_dcmpge>
 800634a:	9e03      	ldr	r6, [sp, #12]
 800634c:	4637      	mov	r7, r6
 800634e:	2800      	cmp	r0, #0
 8006350:	f040 8245 	bne.w	80067de <_dtoa_r+0x93e>
 8006354:	9d01      	ldr	r5, [sp, #4]
 8006356:	2331      	movs	r3, #49	; 0x31
 8006358:	f805 3b01 	strb.w	r3, [r5], #1
 800635c:	9b00      	ldr	r3, [sp, #0]
 800635e:	3301      	adds	r3, #1
 8006360:	9300      	str	r3, [sp, #0]
 8006362:	e240      	b.n	80067e6 <_dtoa_r+0x946>
 8006364:	07f2      	lsls	r2, r6, #31
 8006366:	d505      	bpl.n	8006374 <_dtoa_r+0x4d4>
 8006368:	e9d7 2300 	ldrd	r2, r3, [r7]
 800636c:	f7fa f94c 	bl	8000608 <__aeabi_dmul>
 8006370:	3501      	adds	r5, #1
 8006372:	2301      	movs	r3, #1
 8006374:	1076      	asrs	r6, r6, #1
 8006376:	3708      	adds	r7, #8
 8006378:	e777      	b.n	800626a <_dtoa_r+0x3ca>
 800637a:	2502      	movs	r5, #2
 800637c:	e779      	b.n	8006272 <_dtoa_r+0x3d2>
 800637e:	9f00      	ldr	r7, [sp, #0]
 8006380:	9e03      	ldr	r6, [sp, #12]
 8006382:	e794      	b.n	80062ae <_dtoa_r+0x40e>
 8006384:	9901      	ldr	r1, [sp, #4]
 8006386:	4b4c      	ldr	r3, [pc, #304]	; (80064b8 <_dtoa_r+0x618>)
 8006388:	4431      	add	r1, r6
 800638a:	910d      	str	r1, [sp, #52]	; 0x34
 800638c:	9908      	ldr	r1, [sp, #32]
 800638e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006392:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006396:	2900      	cmp	r1, #0
 8006398:	d043      	beq.n	8006422 <_dtoa_r+0x582>
 800639a:	494d      	ldr	r1, [pc, #308]	; (80064d0 <_dtoa_r+0x630>)
 800639c:	2000      	movs	r0, #0
 800639e:	f7fa fa5d 	bl	800085c <__aeabi_ddiv>
 80063a2:	4652      	mov	r2, sl
 80063a4:	465b      	mov	r3, fp
 80063a6:	f7f9 ff77 	bl	8000298 <__aeabi_dsub>
 80063aa:	9d01      	ldr	r5, [sp, #4]
 80063ac:	4682      	mov	sl, r0
 80063ae:	468b      	mov	fp, r1
 80063b0:	4649      	mov	r1, r9
 80063b2:	4640      	mov	r0, r8
 80063b4:	f7fa fbd8 	bl	8000b68 <__aeabi_d2iz>
 80063b8:	4606      	mov	r6, r0
 80063ba:	f7fa f8bb 	bl	8000534 <__aeabi_i2d>
 80063be:	4602      	mov	r2, r0
 80063c0:	460b      	mov	r3, r1
 80063c2:	4640      	mov	r0, r8
 80063c4:	4649      	mov	r1, r9
 80063c6:	f7f9 ff67 	bl	8000298 <__aeabi_dsub>
 80063ca:	3630      	adds	r6, #48	; 0x30
 80063cc:	f805 6b01 	strb.w	r6, [r5], #1
 80063d0:	4652      	mov	r2, sl
 80063d2:	465b      	mov	r3, fp
 80063d4:	4680      	mov	r8, r0
 80063d6:	4689      	mov	r9, r1
 80063d8:	f7fa fb88 	bl	8000aec <__aeabi_dcmplt>
 80063dc:	2800      	cmp	r0, #0
 80063de:	d163      	bne.n	80064a8 <_dtoa_r+0x608>
 80063e0:	4642      	mov	r2, r8
 80063e2:	464b      	mov	r3, r9
 80063e4:	4936      	ldr	r1, [pc, #216]	; (80064c0 <_dtoa_r+0x620>)
 80063e6:	2000      	movs	r0, #0
 80063e8:	f7f9 ff56 	bl	8000298 <__aeabi_dsub>
 80063ec:	4652      	mov	r2, sl
 80063ee:	465b      	mov	r3, fp
 80063f0:	f7fa fb7c 	bl	8000aec <__aeabi_dcmplt>
 80063f4:	2800      	cmp	r0, #0
 80063f6:	f040 80b5 	bne.w	8006564 <_dtoa_r+0x6c4>
 80063fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063fc:	429d      	cmp	r5, r3
 80063fe:	d081      	beq.n	8006304 <_dtoa_r+0x464>
 8006400:	4b30      	ldr	r3, [pc, #192]	; (80064c4 <_dtoa_r+0x624>)
 8006402:	2200      	movs	r2, #0
 8006404:	4650      	mov	r0, sl
 8006406:	4659      	mov	r1, fp
 8006408:	f7fa f8fe 	bl	8000608 <__aeabi_dmul>
 800640c:	4b2d      	ldr	r3, [pc, #180]	; (80064c4 <_dtoa_r+0x624>)
 800640e:	4682      	mov	sl, r0
 8006410:	468b      	mov	fp, r1
 8006412:	4640      	mov	r0, r8
 8006414:	4649      	mov	r1, r9
 8006416:	2200      	movs	r2, #0
 8006418:	f7fa f8f6 	bl	8000608 <__aeabi_dmul>
 800641c:	4680      	mov	r8, r0
 800641e:	4689      	mov	r9, r1
 8006420:	e7c6      	b.n	80063b0 <_dtoa_r+0x510>
 8006422:	4650      	mov	r0, sl
 8006424:	4659      	mov	r1, fp
 8006426:	f7fa f8ef 	bl	8000608 <__aeabi_dmul>
 800642a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800642c:	9d01      	ldr	r5, [sp, #4]
 800642e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006430:	4682      	mov	sl, r0
 8006432:	468b      	mov	fp, r1
 8006434:	4649      	mov	r1, r9
 8006436:	4640      	mov	r0, r8
 8006438:	f7fa fb96 	bl	8000b68 <__aeabi_d2iz>
 800643c:	4606      	mov	r6, r0
 800643e:	f7fa f879 	bl	8000534 <__aeabi_i2d>
 8006442:	3630      	adds	r6, #48	; 0x30
 8006444:	4602      	mov	r2, r0
 8006446:	460b      	mov	r3, r1
 8006448:	4640      	mov	r0, r8
 800644a:	4649      	mov	r1, r9
 800644c:	f7f9 ff24 	bl	8000298 <__aeabi_dsub>
 8006450:	f805 6b01 	strb.w	r6, [r5], #1
 8006454:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006456:	429d      	cmp	r5, r3
 8006458:	4680      	mov	r8, r0
 800645a:	4689      	mov	r9, r1
 800645c:	f04f 0200 	mov.w	r2, #0
 8006460:	d124      	bne.n	80064ac <_dtoa_r+0x60c>
 8006462:	4b1b      	ldr	r3, [pc, #108]	; (80064d0 <_dtoa_r+0x630>)
 8006464:	4650      	mov	r0, sl
 8006466:	4659      	mov	r1, fp
 8006468:	f7f9 ff18 	bl	800029c <__adddf3>
 800646c:	4602      	mov	r2, r0
 800646e:	460b      	mov	r3, r1
 8006470:	4640      	mov	r0, r8
 8006472:	4649      	mov	r1, r9
 8006474:	f7fa fb58 	bl	8000b28 <__aeabi_dcmpgt>
 8006478:	2800      	cmp	r0, #0
 800647a:	d173      	bne.n	8006564 <_dtoa_r+0x6c4>
 800647c:	4652      	mov	r2, sl
 800647e:	465b      	mov	r3, fp
 8006480:	4913      	ldr	r1, [pc, #76]	; (80064d0 <_dtoa_r+0x630>)
 8006482:	2000      	movs	r0, #0
 8006484:	f7f9 ff08 	bl	8000298 <__aeabi_dsub>
 8006488:	4602      	mov	r2, r0
 800648a:	460b      	mov	r3, r1
 800648c:	4640      	mov	r0, r8
 800648e:	4649      	mov	r1, r9
 8006490:	f7fa fb2c 	bl	8000aec <__aeabi_dcmplt>
 8006494:	2800      	cmp	r0, #0
 8006496:	f43f af35 	beq.w	8006304 <_dtoa_r+0x464>
 800649a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800649c:	1e6b      	subs	r3, r5, #1
 800649e:	930f      	str	r3, [sp, #60]	; 0x3c
 80064a0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80064a4:	2b30      	cmp	r3, #48	; 0x30
 80064a6:	d0f8      	beq.n	800649a <_dtoa_r+0x5fa>
 80064a8:	9700      	str	r7, [sp, #0]
 80064aa:	e049      	b.n	8006540 <_dtoa_r+0x6a0>
 80064ac:	4b05      	ldr	r3, [pc, #20]	; (80064c4 <_dtoa_r+0x624>)
 80064ae:	f7fa f8ab 	bl	8000608 <__aeabi_dmul>
 80064b2:	4680      	mov	r8, r0
 80064b4:	4689      	mov	r9, r1
 80064b6:	e7bd      	b.n	8006434 <_dtoa_r+0x594>
 80064b8:	080083d8 	.word	0x080083d8
 80064bc:	080083b0 	.word	0x080083b0
 80064c0:	3ff00000 	.word	0x3ff00000
 80064c4:	40240000 	.word	0x40240000
 80064c8:	401c0000 	.word	0x401c0000
 80064cc:	40140000 	.word	0x40140000
 80064d0:	3fe00000 	.word	0x3fe00000
 80064d4:	9d01      	ldr	r5, [sp, #4]
 80064d6:	4656      	mov	r6, sl
 80064d8:	465f      	mov	r7, fp
 80064da:	4642      	mov	r2, r8
 80064dc:	464b      	mov	r3, r9
 80064de:	4630      	mov	r0, r6
 80064e0:	4639      	mov	r1, r7
 80064e2:	f7fa f9bb 	bl	800085c <__aeabi_ddiv>
 80064e6:	f7fa fb3f 	bl	8000b68 <__aeabi_d2iz>
 80064ea:	4682      	mov	sl, r0
 80064ec:	f7fa f822 	bl	8000534 <__aeabi_i2d>
 80064f0:	4642      	mov	r2, r8
 80064f2:	464b      	mov	r3, r9
 80064f4:	f7fa f888 	bl	8000608 <__aeabi_dmul>
 80064f8:	4602      	mov	r2, r0
 80064fa:	460b      	mov	r3, r1
 80064fc:	4630      	mov	r0, r6
 80064fe:	4639      	mov	r1, r7
 8006500:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006504:	f7f9 fec8 	bl	8000298 <__aeabi_dsub>
 8006508:	f805 6b01 	strb.w	r6, [r5], #1
 800650c:	9e01      	ldr	r6, [sp, #4]
 800650e:	9f03      	ldr	r7, [sp, #12]
 8006510:	1bae      	subs	r6, r5, r6
 8006512:	42b7      	cmp	r7, r6
 8006514:	4602      	mov	r2, r0
 8006516:	460b      	mov	r3, r1
 8006518:	d135      	bne.n	8006586 <_dtoa_r+0x6e6>
 800651a:	f7f9 febf 	bl	800029c <__adddf3>
 800651e:	4642      	mov	r2, r8
 8006520:	464b      	mov	r3, r9
 8006522:	4606      	mov	r6, r0
 8006524:	460f      	mov	r7, r1
 8006526:	f7fa faff 	bl	8000b28 <__aeabi_dcmpgt>
 800652a:	b9d0      	cbnz	r0, 8006562 <_dtoa_r+0x6c2>
 800652c:	4642      	mov	r2, r8
 800652e:	464b      	mov	r3, r9
 8006530:	4630      	mov	r0, r6
 8006532:	4639      	mov	r1, r7
 8006534:	f7fa fad0 	bl	8000ad8 <__aeabi_dcmpeq>
 8006538:	b110      	cbz	r0, 8006540 <_dtoa_r+0x6a0>
 800653a:	f01a 0f01 	tst.w	sl, #1
 800653e:	d110      	bne.n	8006562 <_dtoa_r+0x6c2>
 8006540:	4620      	mov	r0, r4
 8006542:	ee18 1a10 	vmov	r1, s16
 8006546:	f000 faf3 	bl	8006b30 <_Bfree>
 800654a:	2300      	movs	r3, #0
 800654c:	9800      	ldr	r0, [sp, #0]
 800654e:	702b      	strb	r3, [r5, #0]
 8006550:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006552:	3001      	adds	r0, #1
 8006554:	6018      	str	r0, [r3, #0]
 8006556:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006558:	2b00      	cmp	r3, #0
 800655a:	f43f acf1 	beq.w	8005f40 <_dtoa_r+0xa0>
 800655e:	601d      	str	r5, [r3, #0]
 8006560:	e4ee      	b.n	8005f40 <_dtoa_r+0xa0>
 8006562:	9f00      	ldr	r7, [sp, #0]
 8006564:	462b      	mov	r3, r5
 8006566:	461d      	mov	r5, r3
 8006568:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800656c:	2a39      	cmp	r2, #57	; 0x39
 800656e:	d106      	bne.n	800657e <_dtoa_r+0x6de>
 8006570:	9a01      	ldr	r2, [sp, #4]
 8006572:	429a      	cmp	r2, r3
 8006574:	d1f7      	bne.n	8006566 <_dtoa_r+0x6c6>
 8006576:	9901      	ldr	r1, [sp, #4]
 8006578:	2230      	movs	r2, #48	; 0x30
 800657a:	3701      	adds	r7, #1
 800657c:	700a      	strb	r2, [r1, #0]
 800657e:	781a      	ldrb	r2, [r3, #0]
 8006580:	3201      	adds	r2, #1
 8006582:	701a      	strb	r2, [r3, #0]
 8006584:	e790      	b.n	80064a8 <_dtoa_r+0x608>
 8006586:	4ba6      	ldr	r3, [pc, #664]	; (8006820 <_dtoa_r+0x980>)
 8006588:	2200      	movs	r2, #0
 800658a:	f7fa f83d 	bl	8000608 <__aeabi_dmul>
 800658e:	2200      	movs	r2, #0
 8006590:	2300      	movs	r3, #0
 8006592:	4606      	mov	r6, r0
 8006594:	460f      	mov	r7, r1
 8006596:	f7fa fa9f 	bl	8000ad8 <__aeabi_dcmpeq>
 800659a:	2800      	cmp	r0, #0
 800659c:	d09d      	beq.n	80064da <_dtoa_r+0x63a>
 800659e:	e7cf      	b.n	8006540 <_dtoa_r+0x6a0>
 80065a0:	9a08      	ldr	r2, [sp, #32]
 80065a2:	2a00      	cmp	r2, #0
 80065a4:	f000 80d7 	beq.w	8006756 <_dtoa_r+0x8b6>
 80065a8:	9a06      	ldr	r2, [sp, #24]
 80065aa:	2a01      	cmp	r2, #1
 80065ac:	f300 80ba 	bgt.w	8006724 <_dtoa_r+0x884>
 80065b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80065b2:	2a00      	cmp	r2, #0
 80065b4:	f000 80b2 	beq.w	800671c <_dtoa_r+0x87c>
 80065b8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80065bc:	9e07      	ldr	r6, [sp, #28]
 80065be:	9d04      	ldr	r5, [sp, #16]
 80065c0:	9a04      	ldr	r2, [sp, #16]
 80065c2:	441a      	add	r2, r3
 80065c4:	9204      	str	r2, [sp, #16]
 80065c6:	9a05      	ldr	r2, [sp, #20]
 80065c8:	2101      	movs	r1, #1
 80065ca:	441a      	add	r2, r3
 80065cc:	4620      	mov	r0, r4
 80065ce:	9205      	str	r2, [sp, #20]
 80065d0:	f000 fb66 	bl	8006ca0 <__i2b>
 80065d4:	4607      	mov	r7, r0
 80065d6:	2d00      	cmp	r5, #0
 80065d8:	dd0c      	ble.n	80065f4 <_dtoa_r+0x754>
 80065da:	9b05      	ldr	r3, [sp, #20]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	dd09      	ble.n	80065f4 <_dtoa_r+0x754>
 80065e0:	42ab      	cmp	r3, r5
 80065e2:	9a04      	ldr	r2, [sp, #16]
 80065e4:	bfa8      	it	ge
 80065e6:	462b      	movge	r3, r5
 80065e8:	1ad2      	subs	r2, r2, r3
 80065ea:	9204      	str	r2, [sp, #16]
 80065ec:	9a05      	ldr	r2, [sp, #20]
 80065ee:	1aed      	subs	r5, r5, r3
 80065f0:	1ad3      	subs	r3, r2, r3
 80065f2:	9305      	str	r3, [sp, #20]
 80065f4:	9b07      	ldr	r3, [sp, #28]
 80065f6:	b31b      	cbz	r3, 8006640 <_dtoa_r+0x7a0>
 80065f8:	9b08      	ldr	r3, [sp, #32]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	f000 80af 	beq.w	800675e <_dtoa_r+0x8be>
 8006600:	2e00      	cmp	r6, #0
 8006602:	dd13      	ble.n	800662c <_dtoa_r+0x78c>
 8006604:	4639      	mov	r1, r7
 8006606:	4632      	mov	r2, r6
 8006608:	4620      	mov	r0, r4
 800660a:	f000 fc09 	bl	8006e20 <__pow5mult>
 800660e:	ee18 2a10 	vmov	r2, s16
 8006612:	4601      	mov	r1, r0
 8006614:	4607      	mov	r7, r0
 8006616:	4620      	mov	r0, r4
 8006618:	f000 fb58 	bl	8006ccc <__multiply>
 800661c:	ee18 1a10 	vmov	r1, s16
 8006620:	4680      	mov	r8, r0
 8006622:	4620      	mov	r0, r4
 8006624:	f000 fa84 	bl	8006b30 <_Bfree>
 8006628:	ee08 8a10 	vmov	s16, r8
 800662c:	9b07      	ldr	r3, [sp, #28]
 800662e:	1b9a      	subs	r2, r3, r6
 8006630:	d006      	beq.n	8006640 <_dtoa_r+0x7a0>
 8006632:	ee18 1a10 	vmov	r1, s16
 8006636:	4620      	mov	r0, r4
 8006638:	f000 fbf2 	bl	8006e20 <__pow5mult>
 800663c:	ee08 0a10 	vmov	s16, r0
 8006640:	2101      	movs	r1, #1
 8006642:	4620      	mov	r0, r4
 8006644:	f000 fb2c 	bl	8006ca0 <__i2b>
 8006648:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800664a:	2b00      	cmp	r3, #0
 800664c:	4606      	mov	r6, r0
 800664e:	f340 8088 	ble.w	8006762 <_dtoa_r+0x8c2>
 8006652:	461a      	mov	r2, r3
 8006654:	4601      	mov	r1, r0
 8006656:	4620      	mov	r0, r4
 8006658:	f000 fbe2 	bl	8006e20 <__pow5mult>
 800665c:	9b06      	ldr	r3, [sp, #24]
 800665e:	2b01      	cmp	r3, #1
 8006660:	4606      	mov	r6, r0
 8006662:	f340 8081 	ble.w	8006768 <_dtoa_r+0x8c8>
 8006666:	f04f 0800 	mov.w	r8, #0
 800666a:	6933      	ldr	r3, [r6, #16]
 800666c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006670:	6918      	ldr	r0, [r3, #16]
 8006672:	f000 fac5 	bl	8006c00 <__hi0bits>
 8006676:	f1c0 0020 	rsb	r0, r0, #32
 800667a:	9b05      	ldr	r3, [sp, #20]
 800667c:	4418      	add	r0, r3
 800667e:	f010 001f 	ands.w	r0, r0, #31
 8006682:	f000 8092 	beq.w	80067aa <_dtoa_r+0x90a>
 8006686:	f1c0 0320 	rsb	r3, r0, #32
 800668a:	2b04      	cmp	r3, #4
 800668c:	f340 808a 	ble.w	80067a4 <_dtoa_r+0x904>
 8006690:	f1c0 001c 	rsb	r0, r0, #28
 8006694:	9b04      	ldr	r3, [sp, #16]
 8006696:	4403      	add	r3, r0
 8006698:	9304      	str	r3, [sp, #16]
 800669a:	9b05      	ldr	r3, [sp, #20]
 800669c:	4403      	add	r3, r0
 800669e:	4405      	add	r5, r0
 80066a0:	9305      	str	r3, [sp, #20]
 80066a2:	9b04      	ldr	r3, [sp, #16]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	dd07      	ble.n	80066b8 <_dtoa_r+0x818>
 80066a8:	ee18 1a10 	vmov	r1, s16
 80066ac:	461a      	mov	r2, r3
 80066ae:	4620      	mov	r0, r4
 80066b0:	f000 fc10 	bl	8006ed4 <__lshift>
 80066b4:	ee08 0a10 	vmov	s16, r0
 80066b8:	9b05      	ldr	r3, [sp, #20]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	dd05      	ble.n	80066ca <_dtoa_r+0x82a>
 80066be:	4631      	mov	r1, r6
 80066c0:	461a      	mov	r2, r3
 80066c2:	4620      	mov	r0, r4
 80066c4:	f000 fc06 	bl	8006ed4 <__lshift>
 80066c8:	4606      	mov	r6, r0
 80066ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d06e      	beq.n	80067ae <_dtoa_r+0x90e>
 80066d0:	ee18 0a10 	vmov	r0, s16
 80066d4:	4631      	mov	r1, r6
 80066d6:	f000 fc6d 	bl	8006fb4 <__mcmp>
 80066da:	2800      	cmp	r0, #0
 80066dc:	da67      	bge.n	80067ae <_dtoa_r+0x90e>
 80066de:	9b00      	ldr	r3, [sp, #0]
 80066e0:	3b01      	subs	r3, #1
 80066e2:	ee18 1a10 	vmov	r1, s16
 80066e6:	9300      	str	r3, [sp, #0]
 80066e8:	220a      	movs	r2, #10
 80066ea:	2300      	movs	r3, #0
 80066ec:	4620      	mov	r0, r4
 80066ee:	f000 fa41 	bl	8006b74 <__multadd>
 80066f2:	9b08      	ldr	r3, [sp, #32]
 80066f4:	ee08 0a10 	vmov	s16, r0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	f000 81b1 	beq.w	8006a60 <_dtoa_r+0xbc0>
 80066fe:	2300      	movs	r3, #0
 8006700:	4639      	mov	r1, r7
 8006702:	220a      	movs	r2, #10
 8006704:	4620      	mov	r0, r4
 8006706:	f000 fa35 	bl	8006b74 <__multadd>
 800670a:	9b02      	ldr	r3, [sp, #8]
 800670c:	2b00      	cmp	r3, #0
 800670e:	4607      	mov	r7, r0
 8006710:	f300 808e 	bgt.w	8006830 <_dtoa_r+0x990>
 8006714:	9b06      	ldr	r3, [sp, #24]
 8006716:	2b02      	cmp	r3, #2
 8006718:	dc51      	bgt.n	80067be <_dtoa_r+0x91e>
 800671a:	e089      	b.n	8006830 <_dtoa_r+0x990>
 800671c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800671e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006722:	e74b      	b.n	80065bc <_dtoa_r+0x71c>
 8006724:	9b03      	ldr	r3, [sp, #12]
 8006726:	1e5e      	subs	r6, r3, #1
 8006728:	9b07      	ldr	r3, [sp, #28]
 800672a:	42b3      	cmp	r3, r6
 800672c:	bfbf      	itttt	lt
 800672e:	9b07      	ldrlt	r3, [sp, #28]
 8006730:	9607      	strlt	r6, [sp, #28]
 8006732:	1af2      	sublt	r2, r6, r3
 8006734:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006736:	bfb6      	itet	lt
 8006738:	189b      	addlt	r3, r3, r2
 800673a:	1b9e      	subge	r6, r3, r6
 800673c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800673e:	9b03      	ldr	r3, [sp, #12]
 8006740:	bfb8      	it	lt
 8006742:	2600      	movlt	r6, #0
 8006744:	2b00      	cmp	r3, #0
 8006746:	bfb7      	itett	lt
 8006748:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800674c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006750:	1a9d      	sublt	r5, r3, r2
 8006752:	2300      	movlt	r3, #0
 8006754:	e734      	b.n	80065c0 <_dtoa_r+0x720>
 8006756:	9e07      	ldr	r6, [sp, #28]
 8006758:	9d04      	ldr	r5, [sp, #16]
 800675a:	9f08      	ldr	r7, [sp, #32]
 800675c:	e73b      	b.n	80065d6 <_dtoa_r+0x736>
 800675e:	9a07      	ldr	r2, [sp, #28]
 8006760:	e767      	b.n	8006632 <_dtoa_r+0x792>
 8006762:	9b06      	ldr	r3, [sp, #24]
 8006764:	2b01      	cmp	r3, #1
 8006766:	dc18      	bgt.n	800679a <_dtoa_r+0x8fa>
 8006768:	f1ba 0f00 	cmp.w	sl, #0
 800676c:	d115      	bne.n	800679a <_dtoa_r+0x8fa>
 800676e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006772:	b993      	cbnz	r3, 800679a <_dtoa_r+0x8fa>
 8006774:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006778:	0d1b      	lsrs	r3, r3, #20
 800677a:	051b      	lsls	r3, r3, #20
 800677c:	b183      	cbz	r3, 80067a0 <_dtoa_r+0x900>
 800677e:	9b04      	ldr	r3, [sp, #16]
 8006780:	3301      	adds	r3, #1
 8006782:	9304      	str	r3, [sp, #16]
 8006784:	9b05      	ldr	r3, [sp, #20]
 8006786:	3301      	adds	r3, #1
 8006788:	9305      	str	r3, [sp, #20]
 800678a:	f04f 0801 	mov.w	r8, #1
 800678e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006790:	2b00      	cmp	r3, #0
 8006792:	f47f af6a 	bne.w	800666a <_dtoa_r+0x7ca>
 8006796:	2001      	movs	r0, #1
 8006798:	e76f      	b.n	800667a <_dtoa_r+0x7da>
 800679a:	f04f 0800 	mov.w	r8, #0
 800679e:	e7f6      	b.n	800678e <_dtoa_r+0x8ee>
 80067a0:	4698      	mov	r8, r3
 80067a2:	e7f4      	b.n	800678e <_dtoa_r+0x8ee>
 80067a4:	f43f af7d 	beq.w	80066a2 <_dtoa_r+0x802>
 80067a8:	4618      	mov	r0, r3
 80067aa:	301c      	adds	r0, #28
 80067ac:	e772      	b.n	8006694 <_dtoa_r+0x7f4>
 80067ae:	9b03      	ldr	r3, [sp, #12]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	dc37      	bgt.n	8006824 <_dtoa_r+0x984>
 80067b4:	9b06      	ldr	r3, [sp, #24]
 80067b6:	2b02      	cmp	r3, #2
 80067b8:	dd34      	ble.n	8006824 <_dtoa_r+0x984>
 80067ba:	9b03      	ldr	r3, [sp, #12]
 80067bc:	9302      	str	r3, [sp, #8]
 80067be:	9b02      	ldr	r3, [sp, #8]
 80067c0:	b96b      	cbnz	r3, 80067de <_dtoa_r+0x93e>
 80067c2:	4631      	mov	r1, r6
 80067c4:	2205      	movs	r2, #5
 80067c6:	4620      	mov	r0, r4
 80067c8:	f000 f9d4 	bl	8006b74 <__multadd>
 80067cc:	4601      	mov	r1, r0
 80067ce:	4606      	mov	r6, r0
 80067d0:	ee18 0a10 	vmov	r0, s16
 80067d4:	f000 fbee 	bl	8006fb4 <__mcmp>
 80067d8:	2800      	cmp	r0, #0
 80067da:	f73f adbb 	bgt.w	8006354 <_dtoa_r+0x4b4>
 80067de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067e0:	9d01      	ldr	r5, [sp, #4]
 80067e2:	43db      	mvns	r3, r3
 80067e4:	9300      	str	r3, [sp, #0]
 80067e6:	f04f 0800 	mov.w	r8, #0
 80067ea:	4631      	mov	r1, r6
 80067ec:	4620      	mov	r0, r4
 80067ee:	f000 f99f 	bl	8006b30 <_Bfree>
 80067f2:	2f00      	cmp	r7, #0
 80067f4:	f43f aea4 	beq.w	8006540 <_dtoa_r+0x6a0>
 80067f8:	f1b8 0f00 	cmp.w	r8, #0
 80067fc:	d005      	beq.n	800680a <_dtoa_r+0x96a>
 80067fe:	45b8      	cmp	r8, r7
 8006800:	d003      	beq.n	800680a <_dtoa_r+0x96a>
 8006802:	4641      	mov	r1, r8
 8006804:	4620      	mov	r0, r4
 8006806:	f000 f993 	bl	8006b30 <_Bfree>
 800680a:	4639      	mov	r1, r7
 800680c:	4620      	mov	r0, r4
 800680e:	f000 f98f 	bl	8006b30 <_Bfree>
 8006812:	e695      	b.n	8006540 <_dtoa_r+0x6a0>
 8006814:	2600      	movs	r6, #0
 8006816:	4637      	mov	r7, r6
 8006818:	e7e1      	b.n	80067de <_dtoa_r+0x93e>
 800681a:	9700      	str	r7, [sp, #0]
 800681c:	4637      	mov	r7, r6
 800681e:	e599      	b.n	8006354 <_dtoa_r+0x4b4>
 8006820:	40240000 	.word	0x40240000
 8006824:	9b08      	ldr	r3, [sp, #32]
 8006826:	2b00      	cmp	r3, #0
 8006828:	f000 80ca 	beq.w	80069c0 <_dtoa_r+0xb20>
 800682c:	9b03      	ldr	r3, [sp, #12]
 800682e:	9302      	str	r3, [sp, #8]
 8006830:	2d00      	cmp	r5, #0
 8006832:	dd05      	ble.n	8006840 <_dtoa_r+0x9a0>
 8006834:	4639      	mov	r1, r7
 8006836:	462a      	mov	r2, r5
 8006838:	4620      	mov	r0, r4
 800683a:	f000 fb4b 	bl	8006ed4 <__lshift>
 800683e:	4607      	mov	r7, r0
 8006840:	f1b8 0f00 	cmp.w	r8, #0
 8006844:	d05b      	beq.n	80068fe <_dtoa_r+0xa5e>
 8006846:	6879      	ldr	r1, [r7, #4]
 8006848:	4620      	mov	r0, r4
 800684a:	f000 f931 	bl	8006ab0 <_Balloc>
 800684e:	4605      	mov	r5, r0
 8006850:	b928      	cbnz	r0, 800685e <_dtoa_r+0x9be>
 8006852:	4b87      	ldr	r3, [pc, #540]	; (8006a70 <_dtoa_r+0xbd0>)
 8006854:	4602      	mov	r2, r0
 8006856:	f240 21ea 	movw	r1, #746	; 0x2ea
 800685a:	f7ff bb3b 	b.w	8005ed4 <_dtoa_r+0x34>
 800685e:	693a      	ldr	r2, [r7, #16]
 8006860:	3202      	adds	r2, #2
 8006862:	0092      	lsls	r2, r2, #2
 8006864:	f107 010c 	add.w	r1, r7, #12
 8006868:	300c      	adds	r0, #12
 800686a:	f000 f913 	bl	8006a94 <memcpy>
 800686e:	2201      	movs	r2, #1
 8006870:	4629      	mov	r1, r5
 8006872:	4620      	mov	r0, r4
 8006874:	f000 fb2e 	bl	8006ed4 <__lshift>
 8006878:	9b01      	ldr	r3, [sp, #4]
 800687a:	f103 0901 	add.w	r9, r3, #1
 800687e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006882:	4413      	add	r3, r2
 8006884:	9305      	str	r3, [sp, #20]
 8006886:	f00a 0301 	and.w	r3, sl, #1
 800688a:	46b8      	mov	r8, r7
 800688c:	9304      	str	r3, [sp, #16]
 800688e:	4607      	mov	r7, r0
 8006890:	4631      	mov	r1, r6
 8006892:	ee18 0a10 	vmov	r0, s16
 8006896:	f7ff fa77 	bl	8005d88 <quorem>
 800689a:	4641      	mov	r1, r8
 800689c:	9002      	str	r0, [sp, #8]
 800689e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80068a2:	ee18 0a10 	vmov	r0, s16
 80068a6:	f000 fb85 	bl	8006fb4 <__mcmp>
 80068aa:	463a      	mov	r2, r7
 80068ac:	9003      	str	r0, [sp, #12]
 80068ae:	4631      	mov	r1, r6
 80068b0:	4620      	mov	r0, r4
 80068b2:	f000 fb9b 	bl	8006fec <__mdiff>
 80068b6:	68c2      	ldr	r2, [r0, #12]
 80068b8:	f109 3bff 	add.w	fp, r9, #4294967295
 80068bc:	4605      	mov	r5, r0
 80068be:	bb02      	cbnz	r2, 8006902 <_dtoa_r+0xa62>
 80068c0:	4601      	mov	r1, r0
 80068c2:	ee18 0a10 	vmov	r0, s16
 80068c6:	f000 fb75 	bl	8006fb4 <__mcmp>
 80068ca:	4602      	mov	r2, r0
 80068cc:	4629      	mov	r1, r5
 80068ce:	4620      	mov	r0, r4
 80068d0:	9207      	str	r2, [sp, #28]
 80068d2:	f000 f92d 	bl	8006b30 <_Bfree>
 80068d6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80068da:	ea43 0102 	orr.w	r1, r3, r2
 80068de:	9b04      	ldr	r3, [sp, #16]
 80068e0:	430b      	orrs	r3, r1
 80068e2:	464d      	mov	r5, r9
 80068e4:	d10f      	bne.n	8006906 <_dtoa_r+0xa66>
 80068e6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80068ea:	d02a      	beq.n	8006942 <_dtoa_r+0xaa2>
 80068ec:	9b03      	ldr	r3, [sp, #12]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	dd02      	ble.n	80068f8 <_dtoa_r+0xa58>
 80068f2:	9b02      	ldr	r3, [sp, #8]
 80068f4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80068f8:	f88b a000 	strb.w	sl, [fp]
 80068fc:	e775      	b.n	80067ea <_dtoa_r+0x94a>
 80068fe:	4638      	mov	r0, r7
 8006900:	e7ba      	b.n	8006878 <_dtoa_r+0x9d8>
 8006902:	2201      	movs	r2, #1
 8006904:	e7e2      	b.n	80068cc <_dtoa_r+0xa2c>
 8006906:	9b03      	ldr	r3, [sp, #12]
 8006908:	2b00      	cmp	r3, #0
 800690a:	db04      	blt.n	8006916 <_dtoa_r+0xa76>
 800690c:	9906      	ldr	r1, [sp, #24]
 800690e:	430b      	orrs	r3, r1
 8006910:	9904      	ldr	r1, [sp, #16]
 8006912:	430b      	orrs	r3, r1
 8006914:	d122      	bne.n	800695c <_dtoa_r+0xabc>
 8006916:	2a00      	cmp	r2, #0
 8006918:	ddee      	ble.n	80068f8 <_dtoa_r+0xa58>
 800691a:	ee18 1a10 	vmov	r1, s16
 800691e:	2201      	movs	r2, #1
 8006920:	4620      	mov	r0, r4
 8006922:	f000 fad7 	bl	8006ed4 <__lshift>
 8006926:	4631      	mov	r1, r6
 8006928:	ee08 0a10 	vmov	s16, r0
 800692c:	f000 fb42 	bl	8006fb4 <__mcmp>
 8006930:	2800      	cmp	r0, #0
 8006932:	dc03      	bgt.n	800693c <_dtoa_r+0xa9c>
 8006934:	d1e0      	bne.n	80068f8 <_dtoa_r+0xa58>
 8006936:	f01a 0f01 	tst.w	sl, #1
 800693a:	d0dd      	beq.n	80068f8 <_dtoa_r+0xa58>
 800693c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006940:	d1d7      	bne.n	80068f2 <_dtoa_r+0xa52>
 8006942:	2339      	movs	r3, #57	; 0x39
 8006944:	f88b 3000 	strb.w	r3, [fp]
 8006948:	462b      	mov	r3, r5
 800694a:	461d      	mov	r5, r3
 800694c:	3b01      	subs	r3, #1
 800694e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006952:	2a39      	cmp	r2, #57	; 0x39
 8006954:	d071      	beq.n	8006a3a <_dtoa_r+0xb9a>
 8006956:	3201      	adds	r2, #1
 8006958:	701a      	strb	r2, [r3, #0]
 800695a:	e746      	b.n	80067ea <_dtoa_r+0x94a>
 800695c:	2a00      	cmp	r2, #0
 800695e:	dd07      	ble.n	8006970 <_dtoa_r+0xad0>
 8006960:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006964:	d0ed      	beq.n	8006942 <_dtoa_r+0xaa2>
 8006966:	f10a 0301 	add.w	r3, sl, #1
 800696a:	f88b 3000 	strb.w	r3, [fp]
 800696e:	e73c      	b.n	80067ea <_dtoa_r+0x94a>
 8006970:	9b05      	ldr	r3, [sp, #20]
 8006972:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006976:	4599      	cmp	r9, r3
 8006978:	d047      	beq.n	8006a0a <_dtoa_r+0xb6a>
 800697a:	ee18 1a10 	vmov	r1, s16
 800697e:	2300      	movs	r3, #0
 8006980:	220a      	movs	r2, #10
 8006982:	4620      	mov	r0, r4
 8006984:	f000 f8f6 	bl	8006b74 <__multadd>
 8006988:	45b8      	cmp	r8, r7
 800698a:	ee08 0a10 	vmov	s16, r0
 800698e:	f04f 0300 	mov.w	r3, #0
 8006992:	f04f 020a 	mov.w	r2, #10
 8006996:	4641      	mov	r1, r8
 8006998:	4620      	mov	r0, r4
 800699a:	d106      	bne.n	80069aa <_dtoa_r+0xb0a>
 800699c:	f000 f8ea 	bl	8006b74 <__multadd>
 80069a0:	4680      	mov	r8, r0
 80069a2:	4607      	mov	r7, r0
 80069a4:	f109 0901 	add.w	r9, r9, #1
 80069a8:	e772      	b.n	8006890 <_dtoa_r+0x9f0>
 80069aa:	f000 f8e3 	bl	8006b74 <__multadd>
 80069ae:	4639      	mov	r1, r7
 80069b0:	4680      	mov	r8, r0
 80069b2:	2300      	movs	r3, #0
 80069b4:	220a      	movs	r2, #10
 80069b6:	4620      	mov	r0, r4
 80069b8:	f000 f8dc 	bl	8006b74 <__multadd>
 80069bc:	4607      	mov	r7, r0
 80069be:	e7f1      	b.n	80069a4 <_dtoa_r+0xb04>
 80069c0:	9b03      	ldr	r3, [sp, #12]
 80069c2:	9302      	str	r3, [sp, #8]
 80069c4:	9d01      	ldr	r5, [sp, #4]
 80069c6:	ee18 0a10 	vmov	r0, s16
 80069ca:	4631      	mov	r1, r6
 80069cc:	f7ff f9dc 	bl	8005d88 <quorem>
 80069d0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80069d4:	9b01      	ldr	r3, [sp, #4]
 80069d6:	f805 ab01 	strb.w	sl, [r5], #1
 80069da:	1aea      	subs	r2, r5, r3
 80069dc:	9b02      	ldr	r3, [sp, #8]
 80069de:	4293      	cmp	r3, r2
 80069e0:	dd09      	ble.n	80069f6 <_dtoa_r+0xb56>
 80069e2:	ee18 1a10 	vmov	r1, s16
 80069e6:	2300      	movs	r3, #0
 80069e8:	220a      	movs	r2, #10
 80069ea:	4620      	mov	r0, r4
 80069ec:	f000 f8c2 	bl	8006b74 <__multadd>
 80069f0:	ee08 0a10 	vmov	s16, r0
 80069f4:	e7e7      	b.n	80069c6 <_dtoa_r+0xb26>
 80069f6:	9b02      	ldr	r3, [sp, #8]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	bfc8      	it	gt
 80069fc:	461d      	movgt	r5, r3
 80069fe:	9b01      	ldr	r3, [sp, #4]
 8006a00:	bfd8      	it	le
 8006a02:	2501      	movle	r5, #1
 8006a04:	441d      	add	r5, r3
 8006a06:	f04f 0800 	mov.w	r8, #0
 8006a0a:	ee18 1a10 	vmov	r1, s16
 8006a0e:	2201      	movs	r2, #1
 8006a10:	4620      	mov	r0, r4
 8006a12:	f000 fa5f 	bl	8006ed4 <__lshift>
 8006a16:	4631      	mov	r1, r6
 8006a18:	ee08 0a10 	vmov	s16, r0
 8006a1c:	f000 faca 	bl	8006fb4 <__mcmp>
 8006a20:	2800      	cmp	r0, #0
 8006a22:	dc91      	bgt.n	8006948 <_dtoa_r+0xaa8>
 8006a24:	d102      	bne.n	8006a2c <_dtoa_r+0xb8c>
 8006a26:	f01a 0f01 	tst.w	sl, #1
 8006a2a:	d18d      	bne.n	8006948 <_dtoa_r+0xaa8>
 8006a2c:	462b      	mov	r3, r5
 8006a2e:	461d      	mov	r5, r3
 8006a30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a34:	2a30      	cmp	r2, #48	; 0x30
 8006a36:	d0fa      	beq.n	8006a2e <_dtoa_r+0xb8e>
 8006a38:	e6d7      	b.n	80067ea <_dtoa_r+0x94a>
 8006a3a:	9a01      	ldr	r2, [sp, #4]
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d184      	bne.n	800694a <_dtoa_r+0xaaa>
 8006a40:	9b00      	ldr	r3, [sp, #0]
 8006a42:	3301      	adds	r3, #1
 8006a44:	9300      	str	r3, [sp, #0]
 8006a46:	2331      	movs	r3, #49	; 0x31
 8006a48:	7013      	strb	r3, [r2, #0]
 8006a4a:	e6ce      	b.n	80067ea <_dtoa_r+0x94a>
 8006a4c:	4b09      	ldr	r3, [pc, #36]	; (8006a74 <_dtoa_r+0xbd4>)
 8006a4e:	f7ff ba95 	b.w	8005f7c <_dtoa_r+0xdc>
 8006a52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	f47f aa6e 	bne.w	8005f36 <_dtoa_r+0x96>
 8006a5a:	4b07      	ldr	r3, [pc, #28]	; (8006a78 <_dtoa_r+0xbd8>)
 8006a5c:	f7ff ba8e 	b.w	8005f7c <_dtoa_r+0xdc>
 8006a60:	9b02      	ldr	r3, [sp, #8]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	dcae      	bgt.n	80069c4 <_dtoa_r+0xb24>
 8006a66:	9b06      	ldr	r3, [sp, #24]
 8006a68:	2b02      	cmp	r3, #2
 8006a6a:	f73f aea8 	bgt.w	80067be <_dtoa_r+0x91e>
 8006a6e:	e7a9      	b.n	80069c4 <_dtoa_r+0xb24>
 8006a70:	0800833f 	.word	0x0800833f
 8006a74:	0800829c 	.word	0x0800829c
 8006a78:	080082c0 	.word	0x080082c0

08006a7c <_localeconv_r>:
 8006a7c:	4800      	ldr	r0, [pc, #0]	; (8006a80 <_localeconv_r+0x4>)
 8006a7e:	4770      	bx	lr
 8006a80:	20000160 	.word	0x20000160

08006a84 <malloc>:
 8006a84:	4b02      	ldr	r3, [pc, #8]	; (8006a90 <malloc+0xc>)
 8006a86:	4601      	mov	r1, r0
 8006a88:	6818      	ldr	r0, [r3, #0]
 8006a8a:	f000 bc17 	b.w	80072bc <_malloc_r>
 8006a8e:	bf00      	nop
 8006a90:	2000000c 	.word	0x2000000c

08006a94 <memcpy>:
 8006a94:	440a      	add	r2, r1
 8006a96:	4291      	cmp	r1, r2
 8006a98:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a9c:	d100      	bne.n	8006aa0 <memcpy+0xc>
 8006a9e:	4770      	bx	lr
 8006aa0:	b510      	push	{r4, lr}
 8006aa2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006aa6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006aaa:	4291      	cmp	r1, r2
 8006aac:	d1f9      	bne.n	8006aa2 <memcpy+0xe>
 8006aae:	bd10      	pop	{r4, pc}

08006ab0 <_Balloc>:
 8006ab0:	b570      	push	{r4, r5, r6, lr}
 8006ab2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006ab4:	4604      	mov	r4, r0
 8006ab6:	460d      	mov	r5, r1
 8006ab8:	b976      	cbnz	r6, 8006ad8 <_Balloc+0x28>
 8006aba:	2010      	movs	r0, #16
 8006abc:	f7ff ffe2 	bl	8006a84 <malloc>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	6260      	str	r0, [r4, #36]	; 0x24
 8006ac4:	b920      	cbnz	r0, 8006ad0 <_Balloc+0x20>
 8006ac6:	4b18      	ldr	r3, [pc, #96]	; (8006b28 <_Balloc+0x78>)
 8006ac8:	4818      	ldr	r0, [pc, #96]	; (8006b2c <_Balloc+0x7c>)
 8006aca:	2166      	movs	r1, #102	; 0x66
 8006acc:	f000 fdd6 	bl	800767c <__assert_func>
 8006ad0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ad4:	6006      	str	r6, [r0, #0]
 8006ad6:	60c6      	str	r6, [r0, #12]
 8006ad8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006ada:	68f3      	ldr	r3, [r6, #12]
 8006adc:	b183      	cbz	r3, 8006b00 <_Balloc+0x50>
 8006ade:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ae0:	68db      	ldr	r3, [r3, #12]
 8006ae2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006ae6:	b9b8      	cbnz	r0, 8006b18 <_Balloc+0x68>
 8006ae8:	2101      	movs	r1, #1
 8006aea:	fa01 f605 	lsl.w	r6, r1, r5
 8006aee:	1d72      	adds	r2, r6, #5
 8006af0:	0092      	lsls	r2, r2, #2
 8006af2:	4620      	mov	r0, r4
 8006af4:	f000 fb60 	bl	80071b8 <_calloc_r>
 8006af8:	b160      	cbz	r0, 8006b14 <_Balloc+0x64>
 8006afa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006afe:	e00e      	b.n	8006b1e <_Balloc+0x6e>
 8006b00:	2221      	movs	r2, #33	; 0x21
 8006b02:	2104      	movs	r1, #4
 8006b04:	4620      	mov	r0, r4
 8006b06:	f000 fb57 	bl	80071b8 <_calloc_r>
 8006b0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b0c:	60f0      	str	r0, [r6, #12]
 8006b0e:	68db      	ldr	r3, [r3, #12]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d1e4      	bne.n	8006ade <_Balloc+0x2e>
 8006b14:	2000      	movs	r0, #0
 8006b16:	bd70      	pop	{r4, r5, r6, pc}
 8006b18:	6802      	ldr	r2, [r0, #0]
 8006b1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006b1e:	2300      	movs	r3, #0
 8006b20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006b24:	e7f7      	b.n	8006b16 <_Balloc+0x66>
 8006b26:	bf00      	nop
 8006b28:	080082cd 	.word	0x080082cd
 8006b2c:	08008350 	.word	0x08008350

08006b30 <_Bfree>:
 8006b30:	b570      	push	{r4, r5, r6, lr}
 8006b32:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006b34:	4605      	mov	r5, r0
 8006b36:	460c      	mov	r4, r1
 8006b38:	b976      	cbnz	r6, 8006b58 <_Bfree+0x28>
 8006b3a:	2010      	movs	r0, #16
 8006b3c:	f7ff ffa2 	bl	8006a84 <malloc>
 8006b40:	4602      	mov	r2, r0
 8006b42:	6268      	str	r0, [r5, #36]	; 0x24
 8006b44:	b920      	cbnz	r0, 8006b50 <_Bfree+0x20>
 8006b46:	4b09      	ldr	r3, [pc, #36]	; (8006b6c <_Bfree+0x3c>)
 8006b48:	4809      	ldr	r0, [pc, #36]	; (8006b70 <_Bfree+0x40>)
 8006b4a:	218a      	movs	r1, #138	; 0x8a
 8006b4c:	f000 fd96 	bl	800767c <__assert_func>
 8006b50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006b54:	6006      	str	r6, [r0, #0]
 8006b56:	60c6      	str	r6, [r0, #12]
 8006b58:	b13c      	cbz	r4, 8006b6a <_Bfree+0x3a>
 8006b5a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006b5c:	6862      	ldr	r2, [r4, #4]
 8006b5e:	68db      	ldr	r3, [r3, #12]
 8006b60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006b64:	6021      	str	r1, [r4, #0]
 8006b66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006b6a:	bd70      	pop	{r4, r5, r6, pc}
 8006b6c:	080082cd 	.word	0x080082cd
 8006b70:	08008350 	.word	0x08008350

08006b74 <__multadd>:
 8006b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b78:	690d      	ldr	r5, [r1, #16]
 8006b7a:	4607      	mov	r7, r0
 8006b7c:	460c      	mov	r4, r1
 8006b7e:	461e      	mov	r6, r3
 8006b80:	f101 0c14 	add.w	ip, r1, #20
 8006b84:	2000      	movs	r0, #0
 8006b86:	f8dc 3000 	ldr.w	r3, [ip]
 8006b8a:	b299      	uxth	r1, r3
 8006b8c:	fb02 6101 	mla	r1, r2, r1, r6
 8006b90:	0c1e      	lsrs	r6, r3, #16
 8006b92:	0c0b      	lsrs	r3, r1, #16
 8006b94:	fb02 3306 	mla	r3, r2, r6, r3
 8006b98:	b289      	uxth	r1, r1
 8006b9a:	3001      	adds	r0, #1
 8006b9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006ba0:	4285      	cmp	r5, r0
 8006ba2:	f84c 1b04 	str.w	r1, [ip], #4
 8006ba6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006baa:	dcec      	bgt.n	8006b86 <__multadd+0x12>
 8006bac:	b30e      	cbz	r6, 8006bf2 <__multadd+0x7e>
 8006bae:	68a3      	ldr	r3, [r4, #8]
 8006bb0:	42ab      	cmp	r3, r5
 8006bb2:	dc19      	bgt.n	8006be8 <__multadd+0x74>
 8006bb4:	6861      	ldr	r1, [r4, #4]
 8006bb6:	4638      	mov	r0, r7
 8006bb8:	3101      	adds	r1, #1
 8006bba:	f7ff ff79 	bl	8006ab0 <_Balloc>
 8006bbe:	4680      	mov	r8, r0
 8006bc0:	b928      	cbnz	r0, 8006bce <__multadd+0x5a>
 8006bc2:	4602      	mov	r2, r0
 8006bc4:	4b0c      	ldr	r3, [pc, #48]	; (8006bf8 <__multadd+0x84>)
 8006bc6:	480d      	ldr	r0, [pc, #52]	; (8006bfc <__multadd+0x88>)
 8006bc8:	21b5      	movs	r1, #181	; 0xb5
 8006bca:	f000 fd57 	bl	800767c <__assert_func>
 8006bce:	6922      	ldr	r2, [r4, #16]
 8006bd0:	3202      	adds	r2, #2
 8006bd2:	f104 010c 	add.w	r1, r4, #12
 8006bd6:	0092      	lsls	r2, r2, #2
 8006bd8:	300c      	adds	r0, #12
 8006bda:	f7ff ff5b 	bl	8006a94 <memcpy>
 8006bde:	4621      	mov	r1, r4
 8006be0:	4638      	mov	r0, r7
 8006be2:	f7ff ffa5 	bl	8006b30 <_Bfree>
 8006be6:	4644      	mov	r4, r8
 8006be8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006bec:	3501      	adds	r5, #1
 8006bee:	615e      	str	r6, [r3, #20]
 8006bf0:	6125      	str	r5, [r4, #16]
 8006bf2:	4620      	mov	r0, r4
 8006bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bf8:	0800833f 	.word	0x0800833f
 8006bfc:	08008350 	.word	0x08008350

08006c00 <__hi0bits>:
 8006c00:	0c03      	lsrs	r3, r0, #16
 8006c02:	041b      	lsls	r3, r3, #16
 8006c04:	b9d3      	cbnz	r3, 8006c3c <__hi0bits+0x3c>
 8006c06:	0400      	lsls	r0, r0, #16
 8006c08:	2310      	movs	r3, #16
 8006c0a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006c0e:	bf04      	itt	eq
 8006c10:	0200      	lsleq	r0, r0, #8
 8006c12:	3308      	addeq	r3, #8
 8006c14:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006c18:	bf04      	itt	eq
 8006c1a:	0100      	lsleq	r0, r0, #4
 8006c1c:	3304      	addeq	r3, #4
 8006c1e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006c22:	bf04      	itt	eq
 8006c24:	0080      	lsleq	r0, r0, #2
 8006c26:	3302      	addeq	r3, #2
 8006c28:	2800      	cmp	r0, #0
 8006c2a:	db05      	blt.n	8006c38 <__hi0bits+0x38>
 8006c2c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006c30:	f103 0301 	add.w	r3, r3, #1
 8006c34:	bf08      	it	eq
 8006c36:	2320      	moveq	r3, #32
 8006c38:	4618      	mov	r0, r3
 8006c3a:	4770      	bx	lr
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	e7e4      	b.n	8006c0a <__hi0bits+0xa>

08006c40 <__lo0bits>:
 8006c40:	6803      	ldr	r3, [r0, #0]
 8006c42:	f013 0207 	ands.w	r2, r3, #7
 8006c46:	4601      	mov	r1, r0
 8006c48:	d00b      	beq.n	8006c62 <__lo0bits+0x22>
 8006c4a:	07da      	lsls	r2, r3, #31
 8006c4c:	d423      	bmi.n	8006c96 <__lo0bits+0x56>
 8006c4e:	0798      	lsls	r0, r3, #30
 8006c50:	bf49      	itett	mi
 8006c52:	085b      	lsrmi	r3, r3, #1
 8006c54:	089b      	lsrpl	r3, r3, #2
 8006c56:	2001      	movmi	r0, #1
 8006c58:	600b      	strmi	r3, [r1, #0]
 8006c5a:	bf5c      	itt	pl
 8006c5c:	600b      	strpl	r3, [r1, #0]
 8006c5e:	2002      	movpl	r0, #2
 8006c60:	4770      	bx	lr
 8006c62:	b298      	uxth	r0, r3
 8006c64:	b9a8      	cbnz	r0, 8006c92 <__lo0bits+0x52>
 8006c66:	0c1b      	lsrs	r3, r3, #16
 8006c68:	2010      	movs	r0, #16
 8006c6a:	b2da      	uxtb	r2, r3
 8006c6c:	b90a      	cbnz	r2, 8006c72 <__lo0bits+0x32>
 8006c6e:	3008      	adds	r0, #8
 8006c70:	0a1b      	lsrs	r3, r3, #8
 8006c72:	071a      	lsls	r2, r3, #28
 8006c74:	bf04      	itt	eq
 8006c76:	091b      	lsreq	r3, r3, #4
 8006c78:	3004      	addeq	r0, #4
 8006c7a:	079a      	lsls	r2, r3, #30
 8006c7c:	bf04      	itt	eq
 8006c7e:	089b      	lsreq	r3, r3, #2
 8006c80:	3002      	addeq	r0, #2
 8006c82:	07da      	lsls	r2, r3, #31
 8006c84:	d403      	bmi.n	8006c8e <__lo0bits+0x4e>
 8006c86:	085b      	lsrs	r3, r3, #1
 8006c88:	f100 0001 	add.w	r0, r0, #1
 8006c8c:	d005      	beq.n	8006c9a <__lo0bits+0x5a>
 8006c8e:	600b      	str	r3, [r1, #0]
 8006c90:	4770      	bx	lr
 8006c92:	4610      	mov	r0, r2
 8006c94:	e7e9      	b.n	8006c6a <__lo0bits+0x2a>
 8006c96:	2000      	movs	r0, #0
 8006c98:	4770      	bx	lr
 8006c9a:	2020      	movs	r0, #32
 8006c9c:	4770      	bx	lr
	...

08006ca0 <__i2b>:
 8006ca0:	b510      	push	{r4, lr}
 8006ca2:	460c      	mov	r4, r1
 8006ca4:	2101      	movs	r1, #1
 8006ca6:	f7ff ff03 	bl	8006ab0 <_Balloc>
 8006caa:	4602      	mov	r2, r0
 8006cac:	b928      	cbnz	r0, 8006cba <__i2b+0x1a>
 8006cae:	4b05      	ldr	r3, [pc, #20]	; (8006cc4 <__i2b+0x24>)
 8006cb0:	4805      	ldr	r0, [pc, #20]	; (8006cc8 <__i2b+0x28>)
 8006cb2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006cb6:	f000 fce1 	bl	800767c <__assert_func>
 8006cba:	2301      	movs	r3, #1
 8006cbc:	6144      	str	r4, [r0, #20]
 8006cbe:	6103      	str	r3, [r0, #16]
 8006cc0:	bd10      	pop	{r4, pc}
 8006cc2:	bf00      	nop
 8006cc4:	0800833f 	.word	0x0800833f
 8006cc8:	08008350 	.word	0x08008350

08006ccc <__multiply>:
 8006ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cd0:	4691      	mov	r9, r2
 8006cd2:	690a      	ldr	r2, [r1, #16]
 8006cd4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	bfb8      	it	lt
 8006cdc:	460b      	movlt	r3, r1
 8006cde:	460c      	mov	r4, r1
 8006ce0:	bfbc      	itt	lt
 8006ce2:	464c      	movlt	r4, r9
 8006ce4:	4699      	movlt	r9, r3
 8006ce6:	6927      	ldr	r7, [r4, #16]
 8006ce8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006cec:	68a3      	ldr	r3, [r4, #8]
 8006cee:	6861      	ldr	r1, [r4, #4]
 8006cf0:	eb07 060a 	add.w	r6, r7, sl
 8006cf4:	42b3      	cmp	r3, r6
 8006cf6:	b085      	sub	sp, #20
 8006cf8:	bfb8      	it	lt
 8006cfa:	3101      	addlt	r1, #1
 8006cfc:	f7ff fed8 	bl	8006ab0 <_Balloc>
 8006d00:	b930      	cbnz	r0, 8006d10 <__multiply+0x44>
 8006d02:	4602      	mov	r2, r0
 8006d04:	4b44      	ldr	r3, [pc, #272]	; (8006e18 <__multiply+0x14c>)
 8006d06:	4845      	ldr	r0, [pc, #276]	; (8006e1c <__multiply+0x150>)
 8006d08:	f240 115d 	movw	r1, #349	; 0x15d
 8006d0c:	f000 fcb6 	bl	800767c <__assert_func>
 8006d10:	f100 0514 	add.w	r5, r0, #20
 8006d14:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006d18:	462b      	mov	r3, r5
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	4543      	cmp	r3, r8
 8006d1e:	d321      	bcc.n	8006d64 <__multiply+0x98>
 8006d20:	f104 0314 	add.w	r3, r4, #20
 8006d24:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006d28:	f109 0314 	add.w	r3, r9, #20
 8006d2c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006d30:	9202      	str	r2, [sp, #8]
 8006d32:	1b3a      	subs	r2, r7, r4
 8006d34:	3a15      	subs	r2, #21
 8006d36:	f022 0203 	bic.w	r2, r2, #3
 8006d3a:	3204      	adds	r2, #4
 8006d3c:	f104 0115 	add.w	r1, r4, #21
 8006d40:	428f      	cmp	r7, r1
 8006d42:	bf38      	it	cc
 8006d44:	2204      	movcc	r2, #4
 8006d46:	9201      	str	r2, [sp, #4]
 8006d48:	9a02      	ldr	r2, [sp, #8]
 8006d4a:	9303      	str	r3, [sp, #12]
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d80c      	bhi.n	8006d6a <__multiply+0x9e>
 8006d50:	2e00      	cmp	r6, #0
 8006d52:	dd03      	ble.n	8006d5c <__multiply+0x90>
 8006d54:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d05a      	beq.n	8006e12 <__multiply+0x146>
 8006d5c:	6106      	str	r6, [r0, #16]
 8006d5e:	b005      	add	sp, #20
 8006d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d64:	f843 2b04 	str.w	r2, [r3], #4
 8006d68:	e7d8      	b.n	8006d1c <__multiply+0x50>
 8006d6a:	f8b3 a000 	ldrh.w	sl, [r3]
 8006d6e:	f1ba 0f00 	cmp.w	sl, #0
 8006d72:	d024      	beq.n	8006dbe <__multiply+0xf2>
 8006d74:	f104 0e14 	add.w	lr, r4, #20
 8006d78:	46a9      	mov	r9, r5
 8006d7a:	f04f 0c00 	mov.w	ip, #0
 8006d7e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006d82:	f8d9 1000 	ldr.w	r1, [r9]
 8006d86:	fa1f fb82 	uxth.w	fp, r2
 8006d8a:	b289      	uxth	r1, r1
 8006d8c:	fb0a 110b 	mla	r1, sl, fp, r1
 8006d90:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006d94:	f8d9 2000 	ldr.w	r2, [r9]
 8006d98:	4461      	add	r1, ip
 8006d9a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006d9e:	fb0a c20b 	mla	r2, sl, fp, ip
 8006da2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006da6:	b289      	uxth	r1, r1
 8006da8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006dac:	4577      	cmp	r7, lr
 8006dae:	f849 1b04 	str.w	r1, [r9], #4
 8006db2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006db6:	d8e2      	bhi.n	8006d7e <__multiply+0xb2>
 8006db8:	9a01      	ldr	r2, [sp, #4]
 8006dba:	f845 c002 	str.w	ip, [r5, r2]
 8006dbe:	9a03      	ldr	r2, [sp, #12]
 8006dc0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006dc4:	3304      	adds	r3, #4
 8006dc6:	f1b9 0f00 	cmp.w	r9, #0
 8006dca:	d020      	beq.n	8006e0e <__multiply+0x142>
 8006dcc:	6829      	ldr	r1, [r5, #0]
 8006dce:	f104 0c14 	add.w	ip, r4, #20
 8006dd2:	46ae      	mov	lr, r5
 8006dd4:	f04f 0a00 	mov.w	sl, #0
 8006dd8:	f8bc b000 	ldrh.w	fp, [ip]
 8006ddc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006de0:	fb09 220b 	mla	r2, r9, fp, r2
 8006de4:	4492      	add	sl, r2
 8006de6:	b289      	uxth	r1, r1
 8006de8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006dec:	f84e 1b04 	str.w	r1, [lr], #4
 8006df0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006df4:	f8be 1000 	ldrh.w	r1, [lr]
 8006df8:	0c12      	lsrs	r2, r2, #16
 8006dfa:	fb09 1102 	mla	r1, r9, r2, r1
 8006dfe:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006e02:	4567      	cmp	r7, ip
 8006e04:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006e08:	d8e6      	bhi.n	8006dd8 <__multiply+0x10c>
 8006e0a:	9a01      	ldr	r2, [sp, #4]
 8006e0c:	50a9      	str	r1, [r5, r2]
 8006e0e:	3504      	adds	r5, #4
 8006e10:	e79a      	b.n	8006d48 <__multiply+0x7c>
 8006e12:	3e01      	subs	r6, #1
 8006e14:	e79c      	b.n	8006d50 <__multiply+0x84>
 8006e16:	bf00      	nop
 8006e18:	0800833f 	.word	0x0800833f
 8006e1c:	08008350 	.word	0x08008350

08006e20 <__pow5mult>:
 8006e20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e24:	4615      	mov	r5, r2
 8006e26:	f012 0203 	ands.w	r2, r2, #3
 8006e2a:	4606      	mov	r6, r0
 8006e2c:	460f      	mov	r7, r1
 8006e2e:	d007      	beq.n	8006e40 <__pow5mult+0x20>
 8006e30:	4c25      	ldr	r4, [pc, #148]	; (8006ec8 <__pow5mult+0xa8>)
 8006e32:	3a01      	subs	r2, #1
 8006e34:	2300      	movs	r3, #0
 8006e36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006e3a:	f7ff fe9b 	bl	8006b74 <__multadd>
 8006e3e:	4607      	mov	r7, r0
 8006e40:	10ad      	asrs	r5, r5, #2
 8006e42:	d03d      	beq.n	8006ec0 <__pow5mult+0xa0>
 8006e44:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006e46:	b97c      	cbnz	r4, 8006e68 <__pow5mult+0x48>
 8006e48:	2010      	movs	r0, #16
 8006e4a:	f7ff fe1b 	bl	8006a84 <malloc>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	6270      	str	r0, [r6, #36]	; 0x24
 8006e52:	b928      	cbnz	r0, 8006e60 <__pow5mult+0x40>
 8006e54:	4b1d      	ldr	r3, [pc, #116]	; (8006ecc <__pow5mult+0xac>)
 8006e56:	481e      	ldr	r0, [pc, #120]	; (8006ed0 <__pow5mult+0xb0>)
 8006e58:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006e5c:	f000 fc0e 	bl	800767c <__assert_func>
 8006e60:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006e64:	6004      	str	r4, [r0, #0]
 8006e66:	60c4      	str	r4, [r0, #12]
 8006e68:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006e6c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006e70:	b94c      	cbnz	r4, 8006e86 <__pow5mult+0x66>
 8006e72:	f240 2171 	movw	r1, #625	; 0x271
 8006e76:	4630      	mov	r0, r6
 8006e78:	f7ff ff12 	bl	8006ca0 <__i2b>
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006e82:	4604      	mov	r4, r0
 8006e84:	6003      	str	r3, [r0, #0]
 8006e86:	f04f 0900 	mov.w	r9, #0
 8006e8a:	07eb      	lsls	r3, r5, #31
 8006e8c:	d50a      	bpl.n	8006ea4 <__pow5mult+0x84>
 8006e8e:	4639      	mov	r1, r7
 8006e90:	4622      	mov	r2, r4
 8006e92:	4630      	mov	r0, r6
 8006e94:	f7ff ff1a 	bl	8006ccc <__multiply>
 8006e98:	4639      	mov	r1, r7
 8006e9a:	4680      	mov	r8, r0
 8006e9c:	4630      	mov	r0, r6
 8006e9e:	f7ff fe47 	bl	8006b30 <_Bfree>
 8006ea2:	4647      	mov	r7, r8
 8006ea4:	106d      	asrs	r5, r5, #1
 8006ea6:	d00b      	beq.n	8006ec0 <__pow5mult+0xa0>
 8006ea8:	6820      	ldr	r0, [r4, #0]
 8006eaa:	b938      	cbnz	r0, 8006ebc <__pow5mult+0x9c>
 8006eac:	4622      	mov	r2, r4
 8006eae:	4621      	mov	r1, r4
 8006eb0:	4630      	mov	r0, r6
 8006eb2:	f7ff ff0b 	bl	8006ccc <__multiply>
 8006eb6:	6020      	str	r0, [r4, #0]
 8006eb8:	f8c0 9000 	str.w	r9, [r0]
 8006ebc:	4604      	mov	r4, r0
 8006ebe:	e7e4      	b.n	8006e8a <__pow5mult+0x6a>
 8006ec0:	4638      	mov	r0, r7
 8006ec2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ec6:	bf00      	nop
 8006ec8:	080084a0 	.word	0x080084a0
 8006ecc:	080082cd 	.word	0x080082cd
 8006ed0:	08008350 	.word	0x08008350

08006ed4 <__lshift>:
 8006ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ed8:	460c      	mov	r4, r1
 8006eda:	6849      	ldr	r1, [r1, #4]
 8006edc:	6923      	ldr	r3, [r4, #16]
 8006ede:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006ee2:	68a3      	ldr	r3, [r4, #8]
 8006ee4:	4607      	mov	r7, r0
 8006ee6:	4691      	mov	r9, r2
 8006ee8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006eec:	f108 0601 	add.w	r6, r8, #1
 8006ef0:	42b3      	cmp	r3, r6
 8006ef2:	db0b      	blt.n	8006f0c <__lshift+0x38>
 8006ef4:	4638      	mov	r0, r7
 8006ef6:	f7ff fddb 	bl	8006ab0 <_Balloc>
 8006efa:	4605      	mov	r5, r0
 8006efc:	b948      	cbnz	r0, 8006f12 <__lshift+0x3e>
 8006efe:	4602      	mov	r2, r0
 8006f00:	4b2a      	ldr	r3, [pc, #168]	; (8006fac <__lshift+0xd8>)
 8006f02:	482b      	ldr	r0, [pc, #172]	; (8006fb0 <__lshift+0xdc>)
 8006f04:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006f08:	f000 fbb8 	bl	800767c <__assert_func>
 8006f0c:	3101      	adds	r1, #1
 8006f0e:	005b      	lsls	r3, r3, #1
 8006f10:	e7ee      	b.n	8006ef0 <__lshift+0x1c>
 8006f12:	2300      	movs	r3, #0
 8006f14:	f100 0114 	add.w	r1, r0, #20
 8006f18:	f100 0210 	add.w	r2, r0, #16
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	4553      	cmp	r3, sl
 8006f20:	db37      	blt.n	8006f92 <__lshift+0xbe>
 8006f22:	6920      	ldr	r0, [r4, #16]
 8006f24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006f28:	f104 0314 	add.w	r3, r4, #20
 8006f2c:	f019 091f 	ands.w	r9, r9, #31
 8006f30:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006f34:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006f38:	d02f      	beq.n	8006f9a <__lshift+0xc6>
 8006f3a:	f1c9 0e20 	rsb	lr, r9, #32
 8006f3e:	468a      	mov	sl, r1
 8006f40:	f04f 0c00 	mov.w	ip, #0
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	fa02 f209 	lsl.w	r2, r2, r9
 8006f4a:	ea42 020c 	orr.w	r2, r2, ip
 8006f4e:	f84a 2b04 	str.w	r2, [sl], #4
 8006f52:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f56:	4298      	cmp	r0, r3
 8006f58:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006f5c:	d8f2      	bhi.n	8006f44 <__lshift+0x70>
 8006f5e:	1b03      	subs	r3, r0, r4
 8006f60:	3b15      	subs	r3, #21
 8006f62:	f023 0303 	bic.w	r3, r3, #3
 8006f66:	3304      	adds	r3, #4
 8006f68:	f104 0215 	add.w	r2, r4, #21
 8006f6c:	4290      	cmp	r0, r2
 8006f6e:	bf38      	it	cc
 8006f70:	2304      	movcc	r3, #4
 8006f72:	f841 c003 	str.w	ip, [r1, r3]
 8006f76:	f1bc 0f00 	cmp.w	ip, #0
 8006f7a:	d001      	beq.n	8006f80 <__lshift+0xac>
 8006f7c:	f108 0602 	add.w	r6, r8, #2
 8006f80:	3e01      	subs	r6, #1
 8006f82:	4638      	mov	r0, r7
 8006f84:	612e      	str	r6, [r5, #16]
 8006f86:	4621      	mov	r1, r4
 8006f88:	f7ff fdd2 	bl	8006b30 <_Bfree>
 8006f8c:	4628      	mov	r0, r5
 8006f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f92:	f842 0f04 	str.w	r0, [r2, #4]!
 8006f96:	3301      	adds	r3, #1
 8006f98:	e7c1      	b.n	8006f1e <__lshift+0x4a>
 8006f9a:	3904      	subs	r1, #4
 8006f9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fa0:	f841 2f04 	str.w	r2, [r1, #4]!
 8006fa4:	4298      	cmp	r0, r3
 8006fa6:	d8f9      	bhi.n	8006f9c <__lshift+0xc8>
 8006fa8:	e7ea      	b.n	8006f80 <__lshift+0xac>
 8006faa:	bf00      	nop
 8006fac:	0800833f 	.word	0x0800833f
 8006fb0:	08008350 	.word	0x08008350

08006fb4 <__mcmp>:
 8006fb4:	b530      	push	{r4, r5, lr}
 8006fb6:	6902      	ldr	r2, [r0, #16]
 8006fb8:	690c      	ldr	r4, [r1, #16]
 8006fba:	1b12      	subs	r2, r2, r4
 8006fbc:	d10e      	bne.n	8006fdc <__mcmp+0x28>
 8006fbe:	f100 0314 	add.w	r3, r0, #20
 8006fc2:	3114      	adds	r1, #20
 8006fc4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006fc8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006fcc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006fd0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006fd4:	42a5      	cmp	r5, r4
 8006fd6:	d003      	beq.n	8006fe0 <__mcmp+0x2c>
 8006fd8:	d305      	bcc.n	8006fe6 <__mcmp+0x32>
 8006fda:	2201      	movs	r2, #1
 8006fdc:	4610      	mov	r0, r2
 8006fde:	bd30      	pop	{r4, r5, pc}
 8006fe0:	4283      	cmp	r3, r0
 8006fe2:	d3f3      	bcc.n	8006fcc <__mcmp+0x18>
 8006fe4:	e7fa      	b.n	8006fdc <__mcmp+0x28>
 8006fe6:	f04f 32ff 	mov.w	r2, #4294967295
 8006fea:	e7f7      	b.n	8006fdc <__mcmp+0x28>

08006fec <__mdiff>:
 8006fec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ff0:	460c      	mov	r4, r1
 8006ff2:	4606      	mov	r6, r0
 8006ff4:	4611      	mov	r1, r2
 8006ff6:	4620      	mov	r0, r4
 8006ff8:	4690      	mov	r8, r2
 8006ffa:	f7ff ffdb 	bl	8006fb4 <__mcmp>
 8006ffe:	1e05      	subs	r5, r0, #0
 8007000:	d110      	bne.n	8007024 <__mdiff+0x38>
 8007002:	4629      	mov	r1, r5
 8007004:	4630      	mov	r0, r6
 8007006:	f7ff fd53 	bl	8006ab0 <_Balloc>
 800700a:	b930      	cbnz	r0, 800701a <__mdiff+0x2e>
 800700c:	4b3a      	ldr	r3, [pc, #232]	; (80070f8 <__mdiff+0x10c>)
 800700e:	4602      	mov	r2, r0
 8007010:	f240 2132 	movw	r1, #562	; 0x232
 8007014:	4839      	ldr	r0, [pc, #228]	; (80070fc <__mdiff+0x110>)
 8007016:	f000 fb31 	bl	800767c <__assert_func>
 800701a:	2301      	movs	r3, #1
 800701c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007020:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007024:	bfa4      	itt	ge
 8007026:	4643      	movge	r3, r8
 8007028:	46a0      	movge	r8, r4
 800702a:	4630      	mov	r0, r6
 800702c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007030:	bfa6      	itte	ge
 8007032:	461c      	movge	r4, r3
 8007034:	2500      	movge	r5, #0
 8007036:	2501      	movlt	r5, #1
 8007038:	f7ff fd3a 	bl	8006ab0 <_Balloc>
 800703c:	b920      	cbnz	r0, 8007048 <__mdiff+0x5c>
 800703e:	4b2e      	ldr	r3, [pc, #184]	; (80070f8 <__mdiff+0x10c>)
 8007040:	4602      	mov	r2, r0
 8007042:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007046:	e7e5      	b.n	8007014 <__mdiff+0x28>
 8007048:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800704c:	6926      	ldr	r6, [r4, #16]
 800704e:	60c5      	str	r5, [r0, #12]
 8007050:	f104 0914 	add.w	r9, r4, #20
 8007054:	f108 0514 	add.w	r5, r8, #20
 8007058:	f100 0e14 	add.w	lr, r0, #20
 800705c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007060:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007064:	f108 0210 	add.w	r2, r8, #16
 8007068:	46f2      	mov	sl, lr
 800706a:	2100      	movs	r1, #0
 800706c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007070:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007074:	fa1f f883 	uxth.w	r8, r3
 8007078:	fa11 f18b 	uxtah	r1, r1, fp
 800707c:	0c1b      	lsrs	r3, r3, #16
 800707e:	eba1 0808 	sub.w	r8, r1, r8
 8007082:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007086:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800708a:	fa1f f888 	uxth.w	r8, r8
 800708e:	1419      	asrs	r1, r3, #16
 8007090:	454e      	cmp	r6, r9
 8007092:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007096:	f84a 3b04 	str.w	r3, [sl], #4
 800709a:	d8e7      	bhi.n	800706c <__mdiff+0x80>
 800709c:	1b33      	subs	r3, r6, r4
 800709e:	3b15      	subs	r3, #21
 80070a0:	f023 0303 	bic.w	r3, r3, #3
 80070a4:	3304      	adds	r3, #4
 80070a6:	3415      	adds	r4, #21
 80070a8:	42a6      	cmp	r6, r4
 80070aa:	bf38      	it	cc
 80070ac:	2304      	movcc	r3, #4
 80070ae:	441d      	add	r5, r3
 80070b0:	4473      	add	r3, lr
 80070b2:	469e      	mov	lr, r3
 80070b4:	462e      	mov	r6, r5
 80070b6:	4566      	cmp	r6, ip
 80070b8:	d30e      	bcc.n	80070d8 <__mdiff+0xec>
 80070ba:	f10c 0203 	add.w	r2, ip, #3
 80070be:	1b52      	subs	r2, r2, r5
 80070c0:	f022 0203 	bic.w	r2, r2, #3
 80070c4:	3d03      	subs	r5, #3
 80070c6:	45ac      	cmp	ip, r5
 80070c8:	bf38      	it	cc
 80070ca:	2200      	movcc	r2, #0
 80070cc:	441a      	add	r2, r3
 80070ce:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80070d2:	b17b      	cbz	r3, 80070f4 <__mdiff+0x108>
 80070d4:	6107      	str	r7, [r0, #16]
 80070d6:	e7a3      	b.n	8007020 <__mdiff+0x34>
 80070d8:	f856 8b04 	ldr.w	r8, [r6], #4
 80070dc:	fa11 f288 	uxtah	r2, r1, r8
 80070e0:	1414      	asrs	r4, r2, #16
 80070e2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80070e6:	b292      	uxth	r2, r2
 80070e8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80070ec:	f84e 2b04 	str.w	r2, [lr], #4
 80070f0:	1421      	asrs	r1, r4, #16
 80070f2:	e7e0      	b.n	80070b6 <__mdiff+0xca>
 80070f4:	3f01      	subs	r7, #1
 80070f6:	e7ea      	b.n	80070ce <__mdiff+0xe2>
 80070f8:	0800833f 	.word	0x0800833f
 80070fc:	08008350 	.word	0x08008350

08007100 <__d2b>:
 8007100:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007104:	4689      	mov	r9, r1
 8007106:	2101      	movs	r1, #1
 8007108:	ec57 6b10 	vmov	r6, r7, d0
 800710c:	4690      	mov	r8, r2
 800710e:	f7ff fccf 	bl	8006ab0 <_Balloc>
 8007112:	4604      	mov	r4, r0
 8007114:	b930      	cbnz	r0, 8007124 <__d2b+0x24>
 8007116:	4602      	mov	r2, r0
 8007118:	4b25      	ldr	r3, [pc, #148]	; (80071b0 <__d2b+0xb0>)
 800711a:	4826      	ldr	r0, [pc, #152]	; (80071b4 <__d2b+0xb4>)
 800711c:	f240 310a 	movw	r1, #778	; 0x30a
 8007120:	f000 faac 	bl	800767c <__assert_func>
 8007124:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007128:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800712c:	bb35      	cbnz	r5, 800717c <__d2b+0x7c>
 800712e:	2e00      	cmp	r6, #0
 8007130:	9301      	str	r3, [sp, #4]
 8007132:	d028      	beq.n	8007186 <__d2b+0x86>
 8007134:	4668      	mov	r0, sp
 8007136:	9600      	str	r6, [sp, #0]
 8007138:	f7ff fd82 	bl	8006c40 <__lo0bits>
 800713c:	9900      	ldr	r1, [sp, #0]
 800713e:	b300      	cbz	r0, 8007182 <__d2b+0x82>
 8007140:	9a01      	ldr	r2, [sp, #4]
 8007142:	f1c0 0320 	rsb	r3, r0, #32
 8007146:	fa02 f303 	lsl.w	r3, r2, r3
 800714a:	430b      	orrs	r3, r1
 800714c:	40c2      	lsrs	r2, r0
 800714e:	6163      	str	r3, [r4, #20]
 8007150:	9201      	str	r2, [sp, #4]
 8007152:	9b01      	ldr	r3, [sp, #4]
 8007154:	61a3      	str	r3, [r4, #24]
 8007156:	2b00      	cmp	r3, #0
 8007158:	bf14      	ite	ne
 800715a:	2202      	movne	r2, #2
 800715c:	2201      	moveq	r2, #1
 800715e:	6122      	str	r2, [r4, #16]
 8007160:	b1d5      	cbz	r5, 8007198 <__d2b+0x98>
 8007162:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007166:	4405      	add	r5, r0
 8007168:	f8c9 5000 	str.w	r5, [r9]
 800716c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007170:	f8c8 0000 	str.w	r0, [r8]
 8007174:	4620      	mov	r0, r4
 8007176:	b003      	add	sp, #12
 8007178:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800717c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007180:	e7d5      	b.n	800712e <__d2b+0x2e>
 8007182:	6161      	str	r1, [r4, #20]
 8007184:	e7e5      	b.n	8007152 <__d2b+0x52>
 8007186:	a801      	add	r0, sp, #4
 8007188:	f7ff fd5a 	bl	8006c40 <__lo0bits>
 800718c:	9b01      	ldr	r3, [sp, #4]
 800718e:	6163      	str	r3, [r4, #20]
 8007190:	2201      	movs	r2, #1
 8007192:	6122      	str	r2, [r4, #16]
 8007194:	3020      	adds	r0, #32
 8007196:	e7e3      	b.n	8007160 <__d2b+0x60>
 8007198:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800719c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80071a0:	f8c9 0000 	str.w	r0, [r9]
 80071a4:	6918      	ldr	r0, [r3, #16]
 80071a6:	f7ff fd2b 	bl	8006c00 <__hi0bits>
 80071aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80071ae:	e7df      	b.n	8007170 <__d2b+0x70>
 80071b0:	0800833f 	.word	0x0800833f
 80071b4:	08008350 	.word	0x08008350

080071b8 <_calloc_r>:
 80071b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80071ba:	fba1 2402 	umull	r2, r4, r1, r2
 80071be:	b94c      	cbnz	r4, 80071d4 <_calloc_r+0x1c>
 80071c0:	4611      	mov	r1, r2
 80071c2:	9201      	str	r2, [sp, #4]
 80071c4:	f000 f87a 	bl	80072bc <_malloc_r>
 80071c8:	9a01      	ldr	r2, [sp, #4]
 80071ca:	4605      	mov	r5, r0
 80071cc:	b930      	cbnz	r0, 80071dc <_calloc_r+0x24>
 80071ce:	4628      	mov	r0, r5
 80071d0:	b003      	add	sp, #12
 80071d2:	bd30      	pop	{r4, r5, pc}
 80071d4:	220c      	movs	r2, #12
 80071d6:	6002      	str	r2, [r0, #0]
 80071d8:	2500      	movs	r5, #0
 80071da:	e7f8      	b.n	80071ce <_calloc_r+0x16>
 80071dc:	4621      	mov	r1, r4
 80071de:	f7fe f941 	bl	8005464 <memset>
 80071e2:	e7f4      	b.n	80071ce <_calloc_r+0x16>

080071e4 <_free_r>:
 80071e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80071e6:	2900      	cmp	r1, #0
 80071e8:	d044      	beq.n	8007274 <_free_r+0x90>
 80071ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071ee:	9001      	str	r0, [sp, #4]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	f1a1 0404 	sub.w	r4, r1, #4
 80071f6:	bfb8      	it	lt
 80071f8:	18e4      	addlt	r4, r4, r3
 80071fa:	f000 fa9b 	bl	8007734 <__malloc_lock>
 80071fe:	4a1e      	ldr	r2, [pc, #120]	; (8007278 <_free_r+0x94>)
 8007200:	9801      	ldr	r0, [sp, #4]
 8007202:	6813      	ldr	r3, [r2, #0]
 8007204:	b933      	cbnz	r3, 8007214 <_free_r+0x30>
 8007206:	6063      	str	r3, [r4, #4]
 8007208:	6014      	str	r4, [r2, #0]
 800720a:	b003      	add	sp, #12
 800720c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007210:	f000 ba96 	b.w	8007740 <__malloc_unlock>
 8007214:	42a3      	cmp	r3, r4
 8007216:	d908      	bls.n	800722a <_free_r+0x46>
 8007218:	6825      	ldr	r5, [r4, #0]
 800721a:	1961      	adds	r1, r4, r5
 800721c:	428b      	cmp	r3, r1
 800721e:	bf01      	itttt	eq
 8007220:	6819      	ldreq	r1, [r3, #0]
 8007222:	685b      	ldreq	r3, [r3, #4]
 8007224:	1949      	addeq	r1, r1, r5
 8007226:	6021      	streq	r1, [r4, #0]
 8007228:	e7ed      	b.n	8007206 <_free_r+0x22>
 800722a:	461a      	mov	r2, r3
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	b10b      	cbz	r3, 8007234 <_free_r+0x50>
 8007230:	42a3      	cmp	r3, r4
 8007232:	d9fa      	bls.n	800722a <_free_r+0x46>
 8007234:	6811      	ldr	r1, [r2, #0]
 8007236:	1855      	adds	r5, r2, r1
 8007238:	42a5      	cmp	r5, r4
 800723a:	d10b      	bne.n	8007254 <_free_r+0x70>
 800723c:	6824      	ldr	r4, [r4, #0]
 800723e:	4421      	add	r1, r4
 8007240:	1854      	adds	r4, r2, r1
 8007242:	42a3      	cmp	r3, r4
 8007244:	6011      	str	r1, [r2, #0]
 8007246:	d1e0      	bne.n	800720a <_free_r+0x26>
 8007248:	681c      	ldr	r4, [r3, #0]
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	6053      	str	r3, [r2, #4]
 800724e:	4421      	add	r1, r4
 8007250:	6011      	str	r1, [r2, #0]
 8007252:	e7da      	b.n	800720a <_free_r+0x26>
 8007254:	d902      	bls.n	800725c <_free_r+0x78>
 8007256:	230c      	movs	r3, #12
 8007258:	6003      	str	r3, [r0, #0]
 800725a:	e7d6      	b.n	800720a <_free_r+0x26>
 800725c:	6825      	ldr	r5, [r4, #0]
 800725e:	1961      	adds	r1, r4, r5
 8007260:	428b      	cmp	r3, r1
 8007262:	bf04      	itt	eq
 8007264:	6819      	ldreq	r1, [r3, #0]
 8007266:	685b      	ldreq	r3, [r3, #4]
 8007268:	6063      	str	r3, [r4, #4]
 800726a:	bf04      	itt	eq
 800726c:	1949      	addeq	r1, r1, r5
 800726e:	6021      	streq	r1, [r4, #0]
 8007270:	6054      	str	r4, [r2, #4]
 8007272:	e7ca      	b.n	800720a <_free_r+0x26>
 8007274:	b003      	add	sp, #12
 8007276:	bd30      	pop	{r4, r5, pc}
 8007278:	200003c4 	.word	0x200003c4

0800727c <sbrk_aligned>:
 800727c:	b570      	push	{r4, r5, r6, lr}
 800727e:	4e0e      	ldr	r6, [pc, #56]	; (80072b8 <sbrk_aligned+0x3c>)
 8007280:	460c      	mov	r4, r1
 8007282:	6831      	ldr	r1, [r6, #0]
 8007284:	4605      	mov	r5, r0
 8007286:	b911      	cbnz	r1, 800728e <sbrk_aligned+0x12>
 8007288:	f000 f9e8 	bl	800765c <_sbrk_r>
 800728c:	6030      	str	r0, [r6, #0]
 800728e:	4621      	mov	r1, r4
 8007290:	4628      	mov	r0, r5
 8007292:	f000 f9e3 	bl	800765c <_sbrk_r>
 8007296:	1c43      	adds	r3, r0, #1
 8007298:	d00a      	beq.n	80072b0 <sbrk_aligned+0x34>
 800729a:	1cc4      	adds	r4, r0, #3
 800729c:	f024 0403 	bic.w	r4, r4, #3
 80072a0:	42a0      	cmp	r0, r4
 80072a2:	d007      	beq.n	80072b4 <sbrk_aligned+0x38>
 80072a4:	1a21      	subs	r1, r4, r0
 80072a6:	4628      	mov	r0, r5
 80072a8:	f000 f9d8 	bl	800765c <_sbrk_r>
 80072ac:	3001      	adds	r0, #1
 80072ae:	d101      	bne.n	80072b4 <sbrk_aligned+0x38>
 80072b0:	f04f 34ff 	mov.w	r4, #4294967295
 80072b4:	4620      	mov	r0, r4
 80072b6:	bd70      	pop	{r4, r5, r6, pc}
 80072b8:	200003c8 	.word	0x200003c8

080072bc <_malloc_r>:
 80072bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072c0:	1ccd      	adds	r5, r1, #3
 80072c2:	f025 0503 	bic.w	r5, r5, #3
 80072c6:	3508      	adds	r5, #8
 80072c8:	2d0c      	cmp	r5, #12
 80072ca:	bf38      	it	cc
 80072cc:	250c      	movcc	r5, #12
 80072ce:	2d00      	cmp	r5, #0
 80072d0:	4607      	mov	r7, r0
 80072d2:	db01      	blt.n	80072d8 <_malloc_r+0x1c>
 80072d4:	42a9      	cmp	r1, r5
 80072d6:	d905      	bls.n	80072e4 <_malloc_r+0x28>
 80072d8:	230c      	movs	r3, #12
 80072da:	603b      	str	r3, [r7, #0]
 80072dc:	2600      	movs	r6, #0
 80072de:	4630      	mov	r0, r6
 80072e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072e4:	4e2e      	ldr	r6, [pc, #184]	; (80073a0 <_malloc_r+0xe4>)
 80072e6:	f000 fa25 	bl	8007734 <__malloc_lock>
 80072ea:	6833      	ldr	r3, [r6, #0]
 80072ec:	461c      	mov	r4, r3
 80072ee:	bb34      	cbnz	r4, 800733e <_malloc_r+0x82>
 80072f0:	4629      	mov	r1, r5
 80072f2:	4638      	mov	r0, r7
 80072f4:	f7ff ffc2 	bl	800727c <sbrk_aligned>
 80072f8:	1c43      	adds	r3, r0, #1
 80072fa:	4604      	mov	r4, r0
 80072fc:	d14d      	bne.n	800739a <_malloc_r+0xde>
 80072fe:	6834      	ldr	r4, [r6, #0]
 8007300:	4626      	mov	r6, r4
 8007302:	2e00      	cmp	r6, #0
 8007304:	d140      	bne.n	8007388 <_malloc_r+0xcc>
 8007306:	6823      	ldr	r3, [r4, #0]
 8007308:	4631      	mov	r1, r6
 800730a:	4638      	mov	r0, r7
 800730c:	eb04 0803 	add.w	r8, r4, r3
 8007310:	f000 f9a4 	bl	800765c <_sbrk_r>
 8007314:	4580      	cmp	r8, r0
 8007316:	d13a      	bne.n	800738e <_malloc_r+0xd2>
 8007318:	6821      	ldr	r1, [r4, #0]
 800731a:	3503      	adds	r5, #3
 800731c:	1a6d      	subs	r5, r5, r1
 800731e:	f025 0503 	bic.w	r5, r5, #3
 8007322:	3508      	adds	r5, #8
 8007324:	2d0c      	cmp	r5, #12
 8007326:	bf38      	it	cc
 8007328:	250c      	movcc	r5, #12
 800732a:	4629      	mov	r1, r5
 800732c:	4638      	mov	r0, r7
 800732e:	f7ff ffa5 	bl	800727c <sbrk_aligned>
 8007332:	3001      	adds	r0, #1
 8007334:	d02b      	beq.n	800738e <_malloc_r+0xd2>
 8007336:	6823      	ldr	r3, [r4, #0]
 8007338:	442b      	add	r3, r5
 800733a:	6023      	str	r3, [r4, #0]
 800733c:	e00e      	b.n	800735c <_malloc_r+0xa0>
 800733e:	6822      	ldr	r2, [r4, #0]
 8007340:	1b52      	subs	r2, r2, r5
 8007342:	d41e      	bmi.n	8007382 <_malloc_r+0xc6>
 8007344:	2a0b      	cmp	r2, #11
 8007346:	d916      	bls.n	8007376 <_malloc_r+0xba>
 8007348:	1961      	adds	r1, r4, r5
 800734a:	42a3      	cmp	r3, r4
 800734c:	6025      	str	r5, [r4, #0]
 800734e:	bf18      	it	ne
 8007350:	6059      	strne	r1, [r3, #4]
 8007352:	6863      	ldr	r3, [r4, #4]
 8007354:	bf08      	it	eq
 8007356:	6031      	streq	r1, [r6, #0]
 8007358:	5162      	str	r2, [r4, r5]
 800735a:	604b      	str	r3, [r1, #4]
 800735c:	4638      	mov	r0, r7
 800735e:	f104 060b 	add.w	r6, r4, #11
 8007362:	f000 f9ed 	bl	8007740 <__malloc_unlock>
 8007366:	f026 0607 	bic.w	r6, r6, #7
 800736a:	1d23      	adds	r3, r4, #4
 800736c:	1af2      	subs	r2, r6, r3
 800736e:	d0b6      	beq.n	80072de <_malloc_r+0x22>
 8007370:	1b9b      	subs	r3, r3, r6
 8007372:	50a3      	str	r3, [r4, r2]
 8007374:	e7b3      	b.n	80072de <_malloc_r+0x22>
 8007376:	6862      	ldr	r2, [r4, #4]
 8007378:	42a3      	cmp	r3, r4
 800737a:	bf0c      	ite	eq
 800737c:	6032      	streq	r2, [r6, #0]
 800737e:	605a      	strne	r2, [r3, #4]
 8007380:	e7ec      	b.n	800735c <_malloc_r+0xa0>
 8007382:	4623      	mov	r3, r4
 8007384:	6864      	ldr	r4, [r4, #4]
 8007386:	e7b2      	b.n	80072ee <_malloc_r+0x32>
 8007388:	4634      	mov	r4, r6
 800738a:	6876      	ldr	r6, [r6, #4]
 800738c:	e7b9      	b.n	8007302 <_malloc_r+0x46>
 800738e:	230c      	movs	r3, #12
 8007390:	603b      	str	r3, [r7, #0]
 8007392:	4638      	mov	r0, r7
 8007394:	f000 f9d4 	bl	8007740 <__malloc_unlock>
 8007398:	e7a1      	b.n	80072de <_malloc_r+0x22>
 800739a:	6025      	str	r5, [r4, #0]
 800739c:	e7de      	b.n	800735c <_malloc_r+0xa0>
 800739e:	bf00      	nop
 80073a0:	200003c4 	.word	0x200003c4

080073a4 <__ssputs_r>:
 80073a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073a8:	688e      	ldr	r6, [r1, #8]
 80073aa:	429e      	cmp	r6, r3
 80073ac:	4682      	mov	sl, r0
 80073ae:	460c      	mov	r4, r1
 80073b0:	4690      	mov	r8, r2
 80073b2:	461f      	mov	r7, r3
 80073b4:	d838      	bhi.n	8007428 <__ssputs_r+0x84>
 80073b6:	898a      	ldrh	r2, [r1, #12]
 80073b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80073bc:	d032      	beq.n	8007424 <__ssputs_r+0x80>
 80073be:	6825      	ldr	r5, [r4, #0]
 80073c0:	6909      	ldr	r1, [r1, #16]
 80073c2:	eba5 0901 	sub.w	r9, r5, r1
 80073c6:	6965      	ldr	r5, [r4, #20]
 80073c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80073cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80073d0:	3301      	adds	r3, #1
 80073d2:	444b      	add	r3, r9
 80073d4:	106d      	asrs	r5, r5, #1
 80073d6:	429d      	cmp	r5, r3
 80073d8:	bf38      	it	cc
 80073da:	461d      	movcc	r5, r3
 80073dc:	0553      	lsls	r3, r2, #21
 80073de:	d531      	bpl.n	8007444 <__ssputs_r+0xa0>
 80073e0:	4629      	mov	r1, r5
 80073e2:	f7ff ff6b 	bl	80072bc <_malloc_r>
 80073e6:	4606      	mov	r6, r0
 80073e8:	b950      	cbnz	r0, 8007400 <__ssputs_r+0x5c>
 80073ea:	230c      	movs	r3, #12
 80073ec:	f8ca 3000 	str.w	r3, [sl]
 80073f0:	89a3      	ldrh	r3, [r4, #12]
 80073f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073f6:	81a3      	strh	r3, [r4, #12]
 80073f8:	f04f 30ff 	mov.w	r0, #4294967295
 80073fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007400:	6921      	ldr	r1, [r4, #16]
 8007402:	464a      	mov	r2, r9
 8007404:	f7ff fb46 	bl	8006a94 <memcpy>
 8007408:	89a3      	ldrh	r3, [r4, #12]
 800740a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800740e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007412:	81a3      	strh	r3, [r4, #12]
 8007414:	6126      	str	r6, [r4, #16]
 8007416:	6165      	str	r5, [r4, #20]
 8007418:	444e      	add	r6, r9
 800741a:	eba5 0509 	sub.w	r5, r5, r9
 800741e:	6026      	str	r6, [r4, #0]
 8007420:	60a5      	str	r5, [r4, #8]
 8007422:	463e      	mov	r6, r7
 8007424:	42be      	cmp	r6, r7
 8007426:	d900      	bls.n	800742a <__ssputs_r+0x86>
 8007428:	463e      	mov	r6, r7
 800742a:	6820      	ldr	r0, [r4, #0]
 800742c:	4632      	mov	r2, r6
 800742e:	4641      	mov	r1, r8
 8007430:	f000 f966 	bl	8007700 <memmove>
 8007434:	68a3      	ldr	r3, [r4, #8]
 8007436:	1b9b      	subs	r3, r3, r6
 8007438:	60a3      	str	r3, [r4, #8]
 800743a:	6823      	ldr	r3, [r4, #0]
 800743c:	4433      	add	r3, r6
 800743e:	6023      	str	r3, [r4, #0]
 8007440:	2000      	movs	r0, #0
 8007442:	e7db      	b.n	80073fc <__ssputs_r+0x58>
 8007444:	462a      	mov	r2, r5
 8007446:	f000 f981 	bl	800774c <_realloc_r>
 800744a:	4606      	mov	r6, r0
 800744c:	2800      	cmp	r0, #0
 800744e:	d1e1      	bne.n	8007414 <__ssputs_r+0x70>
 8007450:	6921      	ldr	r1, [r4, #16]
 8007452:	4650      	mov	r0, sl
 8007454:	f7ff fec6 	bl	80071e4 <_free_r>
 8007458:	e7c7      	b.n	80073ea <__ssputs_r+0x46>
	...

0800745c <_svfiprintf_r>:
 800745c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007460:	4698      	mov	r8, r3
 8007462:	898b      	ldrh	r3, [r1, #12]
 8007464:	061b      	lsls	r3, r3, #24
 8007466:	b09d      	sub	sp, #116	; 0x74
 8007468:	4607      	mov	r7, r0
 800746a:	460d      	mov	r5, r1
 800746c:	4614      	mov	r4, r2
 800746e:	d50e      	bpl.n	800748e <_svfiprintf_r+0x32>
 8007470:	690b      	ldr	r3, [r1, #16]
 8007472:	b963      	cbnz	r3, 800748e <_svfiprintf_r+0x32>
 8007474:	2140      	movs	r1, #64	; 0x40
 8007476:	f7ff ff21 	bl	80072bc <_malloc_r>
 800747a:	6028      	str	r0, [r5, #0]
 800747c:	6128      	str	r0, [r5, #16]
 800747e:	b920      	cbnz	r0, 800748a <_svfiprintf_r+0x2e>
 8007480:	230c      	movs	r3, #12
 8007482:	603b      	str	r3, [r7, #0]
 8007484:	f04f 30ff 	mov.w	r0, #4294967295
 8007488:	e0d1      	b.n	800762e <_svfiprintf_r+0x1d2>
 800748a:	2340      	movs	r3, #64	; 0x40
 800748c:	616b      	str	r3, [r5, #20]
 800748e:	2300      	movs	r3, #0
 8007490:	9309      	str	r3, [sp, #36]	; 0x24
 8007492:	2320      	movs	r3, #32
 8007494:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007498:	f8cd 800c 	str.w	r8, [sp, #12]
 800749c:	2330      	movs	r3, #48	; 0x30
 800749e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007648 <_svfiprintf_r+0x1ec>
 80074a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80074a6:	f04f 0901 	mov.w	r9, #1
 80074aa:	4623      	mov	r3, r4
 80074ac:	469a      	mov	sl, r3
 80074ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074b2:	b10a      	cbz	r2, 80074b8 <_svfiprintf_r+0x5c>
 80074b4:	2a25      	cmp	r2, #37	; 0x25
 80074b6:	d1f9      	bne.n	80074ac <_svfiprintf_r+0x50>
 80074b8:	ebba 0b04 	subs.w	fp, sl, r4
 80074bc:	d00b      	beq.n	80074d6 <_svfiprintf_r+0x7a>
 80074be:	465b      	mov	r3, fp
 80074c0:	4622      	mov	r2, r4
 80074c2:	4629      	mov	r1, r5
 80074c4:	4638      	mov	r0, r7
 80074c6:	f7ff ff6d 	bl	80073a4 <__ssputs_r>
 80074ca:	3001      	adds	r0, #1
 80074cc:	f000 80aa 	beq.w	8007624 <_svfiprintf_r+0x1c8>
 80074d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80074d2:	445a      	add	r2, fp
 80074d4:	9209      	str	r2, [sp, #36]	; 0x24
 80074d6:	f89a 3000 	ldrb.w	r3, [sl]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	f000 80a2 	beq.w	8007624 <_svfiprintf_r+0x1c8>
 80074e0:	2300      	movs	r3, #0
 80074e2:	f04f 32ff 	mov.w	r2, #4294967295
 80074e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074ea:	f10a 0a01 	add.w	sl, sl, #1
 80074ee:	9304      	str	r3, [sp, #16]
 80074f0:	9307      	str	r3, [sp, #28]
 80074f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80074f6:	931a      	str	r3, [sp, #104]	; 0x68
 80074f8:	4654      	mov	r4, sl
 80074fa:	2205      	movs	r2, #5
 80074fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007500:	4851      	ldr	r0, [pc, #324]	; (8007648 <_svfiprintf_r+0x1ec>)
 8007502:	f7f8 fe75 	bl	80001f0 <memchr>
 8007506:	9a04      	ldr	r2, [sp, #16]
 8007508:	b9d8      	cbnz	r0, 8007542 <_svfiprintf_r+0xe6>
 800750a:	06d0      	lsls	r0, r2, #27
 800750c:	bf44      	itt	mi
 800750e:	2320      	movmi	r3, #32
 8007510:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007514:	0711      	lsls	r1, r2, #28
 8007516:	bf44      	itt	mi
 8007518:	232b      	movmi	r3, #43	; 0x2b
 800751a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800751e:	f89a 3000 	ldrb.w	r3, [sl]
 8007522:	2b2a      	cmp	r3, #42	; 0x2a
 8007524:	d015      	beq.n	8007552 <_svfiprintf_r+0xf6>
 8007526:	9a07      	ldr	r2, [sp, #28]
 8007528:	4654      	mov	r4, sl
 800752a:	2000      	movs	r0, #0
 800752c:	f04f 0c0a 	mov.w	ip, #10
 8007530:	4621      	mov	r1, r4
 8007532:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007536:	3b30      	subs	r3, #48	; 0x30
 8007538:	2b09      	cmp	r3, #9
 800753a:	d94e      	bls.n	80075da <_svfiprintf_r+0x17e>
 800753c:	b1b0      	cbz	r0, 800756c <_svfiprintf_r+0x110>
 800753e:	9207      	str	r2, [sp, #28]
 8007540:	e014      	b.n	800756c <_svfiprintf_r+0x110>
 8007542:	eba0 0308 	sub.w	r3, r0, r8
 8007546:	fa09 f303 	lsl.w	r3, r9, r3
 800754a:	4313      	orrs	r3, r2
 800754c:	9304      	str	r3, [sp, #16]
 800754e:	46a2      	mov	sl, r4
 8007550:	e7d2      	b.n	80074f8 <_svfiprintf_r+0x9c>
 8007552:	9b03      	ldr	r3, [sp, #12]
 8007554:	1d19      	adds	r1, r3, #4
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	9103      	str	r1, [sp, #12]
 800755a:	2b00      	cmp	r3, #0
 800755c:	bfbb      	ittet	lt
 800755e:	425b      	neglt	r3, r3
 8007560:	f042 0202 	orrlt.w	r2, r2, #2
 8007564:	9307      	strge	r3, [sp, #28]
 8007566:	9307      	strlt	r3, [sp, #28]
 8007568:	bfb8      	it	lt
 800756a:	9204      	strlt	r2, [sp, #16]
 800756c:	7823      	ldrb	r3, [r4, #0]
 800756e:	2b2e      	cmp	r3, #46	; 0x2e
 8007570:	d10c      	bne.n	800758c <_svfiprintf_r+0x130>
 8007572:	7863      	ldrb	r3, [r4, #1]
 8007574:	2b2a      	cmp	r3, #42	; 0x2a
 8007576:	d135      	bne.n	80075e4 <_svfiprintf_r+0x188>
 8007578:	9b03      	ldr	r3, [sp, #12]
 800757a:	1d1a      	adds	r2, r3, #4
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	9203      	str	r2, [sp, #12]
 8007580:	2b00      	cmp	r3, #0
 8007582:	bfb8      	it	lt
 8007584:	f04f 33ff 	movlt.w	r3, #4294967295
 8007588:	3402      	adds	r4, #2
 800758a:	9305      	str	r3, [sp, #20]
 800758c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007658 <_svfiprintf_r+0x1fc>
 8007590:	7821      	ldrb	r1, [r4, #0]
 8007592:	2203      	movs	r2, #3
 8007594:	4650      	mov	r0, sl
 8007596:	f7f8 fe2b 	bl	80001f0 <memchr>
 800759a:	b140      	cbz	r0, 80075ae <_svfiprintf_r+0x152>
 800759c:	2340      	movs	r3, #64	; 0x40
 800759e:	eba0 000a 	sub.w	r0, r0, sl
 80075a2:	fa03 f000 	lsl.w	r0, r3, r0
 80075a6:	9b04      	ldr	r3, [sp, #16]
 80075a8:	4303      	orrs	r3, r0
 80075aa:	3401      	adds	r4, #1
 80075ac:	9304      	str	r3, [sp, #16]
 80075ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075b2:	4826      	ldr	r0, [pc, #152]	; (800764c <_svfiprintf_r+0x1f0>)
 80075b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80075b8:	2206      	movs	r2, #6
 80075ba:	f7f8 fe19 	bl	80001f0 <memchr>
 80075be:	2800      	cmp	r0, #0
 80075c0:	d038      	beq.n	8007634 <_svfiprintf_r+0x1d8>
 80075c2:	4b23      	ldr	r3, [pc, #140]	; (8007650 <_svfiprintf_r+0x1f4>)
 80075c4:	bb1b      	cbnz	r3, 800760e <_svfiprintf_r+0x1b2>
 80075c6:	9b03      	ldr	r3, [sp, #12]
 80075c8:	3307      	adds	r3, #7
 80075ca:	f023 0307 	bic.w	r3, r3, #7
 80075ce:	3308      	adds	r3, #8
 80075d0:	9303      	str	r3, [sp, #12]
 80075d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075d4:	4433      	add	r3, r6
 80075d6:	9309      	str	r3, [sp, #36]	; 0x24
 80075d8:	e767      	b.n	80074aa <_svfiprintf_r+0x4e>
 80075da:	fb0c 3202 	mla	r2, ip, r2, r3
 80075de:	460c      	mov	r4, r1
 80075e0:	2001      	movs	r0, #1
 80075e2:	e7a5      	b.n	8007530 <_svfiprintf_r+0xd4>
 80075e4:	2300      	movs	r3, #0
 80075e6:	3401      	adds	r4, #1
 80075e8:	9305      	str	r3, [sp, #20]
 80075ea:	4619      	mov	r1, r3
 80075ec:	f04f 0c0a 	mov.w	ip, #10
 80075f0:	4620      	mov	r0, r4
 80075f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075f6:	3a30      	subs	r2, #48	; 0x30
 80075f8:	2a09      	cmp	r2, #9
 80075fa:	d903      	bls.n	8007604 <_svfiprintf_r+0x1a8>
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d0c5      	beq.n	800758c <_svfiprintf_r+0x130>
 8007600:	9105      	str	r1, [sp, #20]
 8007602:	e7c3      	b.n	800758c <_svfiprintf_r+0x130>
 8007604:	fb0c 2101 	mla	r1, ip, r1, r2
 8007608:	4604      	mov	r4, r0
 800760a:	2301      	movs	r3, #1
 800760c:	e7f0      	b.n	80075f0 <_svfiprintf_r+0x194>
 800760e:	ab03      	add	r3, sp, #12
 8007610:	9300      	str	r3, [sp, #0]
 8007612:	462a      	mov	r2, r5
 8007614:	4b0f      	ldr	r3, [pc, #60]	; (8007654 <_svfiprintf_r+0x1f8>)
 8007616:	a904      	add	r1, sp, #16
 8007618:	4638      	mov	r0, r7
 800761a:	f7fd ffcb 	bl	80055b4 <_printf_float>
 800761e:	1c42      	adds	r2, r0, #1
 8007620:	4606      	mov	r6, r0
 8007622:	d1d6      	bne.n	80075d2 <_svfiprintf_r+0x176>
 8007624:	89ab      	ldrh	r3, [r5, #12]
 8007626:	065b      	lsls	r3, r3, #25
 8007628:	f53f af2c 	bmi.w	8007484 <_svfiprintf_r+0x28>
 800762c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800762e:	b01d      	add	sp, #116	; 0x74
 8007630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007634:	ab03      	add	r3, sp, #12
 8007636:	9300      	str	r3, [sp, #0]
 8007638:	462a      	mov	r2, r5
 800763a:	4b06      	ldr	r3, [pc, #24]	; (8007654 <_svfiprintf_r+0x1f8>)
 800763c:	a904      	add	r1, sp, #16
 800763e:	4638      	mov	r0, r7
 8007640:	f7fe fa5c 	bl	8005afc <_printf_i>
 8007644:	e7eb      	b.n	800761e <_svfiprintf_r+0x1c2>
 8007646:	bf00      	nop
 8007648:	080084ac 	.word	0x080084ac
 800764c:	080084b6 	.word	0x080084b6
 8007650:	080055b5 	.word	0x080055b5
 8007654:	080073a5 	.word	0x080073a5
 8007658:	080084b2 	.word	0x080084b2

0800765c <_sbrk_r>:
 800765c:	b538      	push	{r3, r4, r5, lr}
 800765e:	4d06      	ldr	r5, [pc, #24]	; (8007678 <_sbrk_r+0x1c>)
 8007660:	2300      	movs	r3, #0
 8007662:	4604      	mov	r4, r0
 8007664:	4608      	mov	r0, r1
 8007666:	602b      	str	r3, [r5, #0]
 8007668:	f7fa f9ac 	bl	80019c4 <_sbrk>
 800766c:	1c43      	adds	r3, r0, #1
 800766e:	d102      	bne.n	8007676 <_sbrk_r+0x1a>
 8007670:	682b      	ldr	r3, [r5, #0]
 8007672:	b103      	cbz	r3, 8007676 <_sbrk_r+0x1a>
 8007674:	6023      	str	r3, [r4, #0]
 8007676:	bd38      	pop	{r3, r4, r5, pc}
 8007678:	200003cc 	.word	0x200003cc

0800767c <__assert_func>:
 800767c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800767e:	4614      	mov	r4, r2
 8007680:	461a      	mov	r2, r3
 8007682:	4b09      	ldr	r3, [pc, #36]	; (80076a8 <__assert_func+0x2c>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4605      	mov	r5, r0
 8007688:	68d8      	ldr	r0, [r3, #12]
 800768a:	b14c      	cbz	r4, 80076a0 <__assert_func+0x24>
 800768c:	4b07      	ldr	r3, [pc, #28]	; (80076ac <__assert_func+0x30>)
 800768e:	9100      	str	r1, [sp, #0]
 8007690:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007694:	4906      	ldr	r1, [pc, #24]	; (80076b0 <__assert_func+0x34>)
 8007696:	462b      	mov	r3, r5
 8007698:	f000 f80e 	bl	80076b8 <fiprintf>
 800769c:	f000 faac 	bl	8007bf8 <abort>
 80076a0:	4b04      	ldr	r3, [pc, #16]	; (80076b4 <__assert_func+0x38>)
 80076a2:	461c      	mov	r4, r3
 80076a4:	e7f3      	b.n	800768e <__assert_func+0x12>
 80076a6:	bf00      	nop
 80076a8:	2000000c 	.word	0x2000000c
 80076ac:	080084bd 	.word	0x080084bd
 80076b0:	080084ca 	.word	0x080084ca
 80076b4:	080084f8 	.word	0x080084f8

080076b8 <fiprintf>:
 80076b8:	b40e      	push	{r1, r2, r3}
 80076ba:	b503      	push	{r0, r1, lr}
 80076bc:	4601      	mov	r1, r0
 80076be:	ab03      	add	r3, sp, #12
 80076c0:	4805      	ldr	r0, [pc, #20]	; (80076d8 <fiprintf+0x20>)
 80076c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80076c6:	6800      	ldr	r0, [r0, #0]
 80076c8:	9301      	str	r3, [sp, #4]
 80076ca:	f000 f897 	bl	80077fc <_vfiprintf_r>
 80076ce:	b002      	add	sp, #8
 80076d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80076d4:	b003      	add	sp, #12
 80076d6:	4770      	bx	lr
 80076d8:	2000000c 	.word	0x2000000c

080076dc <__ascii_mbtowc>:
 80076dc:	b082      	sub	sp, #8
 80076de:	b901      	cbnz	r1, 80076e2 <__ascii_mbtowc+0x6>
 80076e0:	a901      	add	r1, sp, #4
 80076e2:	b142      	cbz	r2, 80076f6 <__ascii_mbtowc+0x1a>
 80076e4:	b14b      	cbz	r3, 80076fa <__ascii_mbtowc+0x1e>
 80076e6:	7813      	ldrb	r3, [r2, #0]
 80076e8:	600b      	str	r3, [r1, #0]
 80076ea:	7812      	ldrb	r2, [r2, #0]
 80076ec:	1e10      	subs	r0, r2, #0
 80076ee:	bf18      	it	ne
 80076f0:	2001      	movne	r0, #1
 80076f2:	b002      	add	sp, #8
 80076f4:	4770      	bx	lr
 80076f6:	4610      	mov	r0, r2
 80076f8:	e7fb      	b.n	80076f2 <__ascii_mbtowc+0x16>
 80076fa:	f06f 0001 	mvn.w	r0, #1
 80076fe:	e7f8      	b.n	80076f2 <__ascii_mbtowc+0x16>

08007700 <memmove>:
 8007700:	4288      	cmp	r0, r1
 8007702:	b510      	push	{r4, lr}
 8007704:	eb01 0402 	add.w	r4, r1, r2
 8007708:	d902      	bls.n	8007710 <memmove+0x10>
 800770a:	4284      	cmp	r4, r0
 800770c:	4623      	mov	r3, r4
 800770e:	d807      	bhi.n	8007720 <memmove+0x20>
 8007710:	1e43      	subs	r3, r0, #1
 8007712:	42a1      	cmp	r1, r4
 8007714:	d008      	beq.n	8007728 <memmove+0x28>
 8007716:	f811 2b01 	ldrb.w	r2, [r1], #1
 800771a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800771e:	e7f8      	b.n	8007712 <memmove+0x12>
 8007720:	4402      	add	r2, r0
 8007722:	4601      	mov	r1, r0
 8007724:	428a      	cmp	r2, r1
 8007726:	d100      	bne.n	800772a <memmove+0x2a>
 8007728:	bd10      	pop	{r4, pc}
 800772a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800772e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007732:	e7f7      	b.n	8007724 <memmove+0x24>

08007734 <__malloc_lock>:
 8007734:	4801      	ldr	r0, [pc, #4]	; (800773c <__malloc_lock+0x8>)
 8007736:	f000 bc1f 	b.w	8007f78 <__retarget_lock_acquire_recursive>
 800773a:	bf00      	nop
 800773c:	200003d0 	.word	0x200003d0

08007740 <__malloc_unlock>:
 8007740:	4801      	ldr	r0, [pc, #4]	; (8007748 <__malloc_unlock+0x8>)
 8007742:	f000 bc1a 	b.w	8007f7a <__retarget_lock_release_recursive>
 8007746:	bf00      	nop
 8007748:	200003d0 	.word	0x200003d0

0800774c <_realloc_r>:
 800774c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007750:	4680      	mov	r8, r0
 8007752:	4614      	mov	r4, r2
 8007754:	460e      	mov	r6, r1
 8007756:	b921      	cbnz	r1, 8007762 <_realloc_r+0x16>
 8007758:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800775c:	4611      	mov	r1, r2
 800775e:	f7ff bdad 	b.w	80072bc <_malloc_r>
 8007762:	b92a      	cbnz	r2, 8007770 <_realloc_r+0x24>
 8007764:	f7ff fd3e 	bl	80071e4 <_free_r>
 8007768:	4625      	mov	r5, r4
 800776a:	4628      	mov	r0, r5
 800776c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007770:	f000 fc6a 	bl	8008048 <_malloc_usable_size_r>
 8007774:	4284      	cmp	r4, r0
 8007776:	4607      	mov	r7, r0
 8007778:	d802      	bhi.n	8007780 <_realloc_r+0x34>
 800777a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800777e:	d812      	bhi.n	80077a6 <_realloc_r+0x5a>
 8007780:	4621      	mov	r1, r4
 8007782:	4640      	mov	r0, r8
 8007784:	f7ff fd9a 	bl	80072bc <_malloc_r>
 8007788:	4605      	mov	r5, r0
 800778a:	2800      	cmp	r0, #0
 800778c:	d0ed      	beq.n	800776a <_realloc_r+0x1e>
 800778e:	42bc      	cmp	r4, r7
 8007790:	4622      	mov	r2, r4
 8007792:	4631      	mov	r1, r6
 8007794:	bf28      	it	cs
 8007796:	463a      	movcs	r2, r7
 8007798:	f7ff f97c 	bl	8006a94 <memcpy>
 800779c:	4631      	mov	r1, r6
 800779e:	4640      	mov	r0, r8
 80077a0:	f7ff fd20 	bl	80071e4 <_free_r>
 80077a4:	e7e1      	b.n	800776a <_realloc_r+0x1e>
 80077a6:	4635      	mov	r5, r6
 80077a8:	e7df      	b.n	800776a <_realloc_r+0x1e>

080077aa <__sfputc_r>:
 80077aa:	6893      	ldr	r3, [r2, #8]
 80077ac:	3b01      	subs	r3, #1
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	b410      	push	{r4}
 80077b2:	6093      	str	r3, [r2, #8]
 80077b4:	da08      	bge.n	80077c8 <__sfputc_r+0x1e>
 80077b6:	6994      	ldr	r4, [r2, #24]
 80077b8:	42a3      	cmp	r3, r4
 80077ba:	db01      	blt.n	80077c0 <__sfputc_r+0x16>
 80077bc:	290a      	cmp	r1, #10
 80077be:	d103      	bne.n	80077c8 <__sfputc_r+0x1e>
 80077c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80077c4:	f000 b94a 	b.w	8007a5c <__swbuf_r>
 80077c8:	6813      	ldr	r3, [r2, #0]
 80077ca:	1c58      	adds	r0, r3, #1
 80077cc:	6010      	str	r0, [r2, #0]
 80077ce:	7019      	strb	r1, [r3, #0]
 80077d0:	4608      	mov	r0, r1
 80077d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80077d6:	4770      	bx	lr

080077d8 <__sfputs_r>:
 80077d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077da:	4606      	mov	r6, r0
 80077dc:	460f      	mov	r7, r1
 80077de:	4614      	mov	r4, r2
 80077e0:	18d5      	adds	r5, r2, r3
 80077e2:	42ac      	cmp	r4, r5
 80077e4:	d101      	bne.n	80077ea <__sfputs_r+0x12>
 80077e6:	2000      	movs	r0, #0
 80077e8:	e007      	b.n	80077fa <__sfputs_r+0x22>
 80077ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077ee:	463a      	mov	r2, r7
 80077f0:	4630      	mov	r0, r6
 80077f2:	f7ff ffda 	bl	80077aa <__sfputc_r>
 80077f6:	1c43      	adds	r3, r0, #1
 80077f8:	d1f3      	bne.n	80077e2 <__sfputs_r+0xa>
 80077fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080077fc <_vfiprintf_r>:
 80077fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007800:	460d      	mov	r5, r1
 8007802:	b09d      	sub	sp, #116	; 0x74
 8007804:	4614      	mov	r4, r2
 8007806:	4698      	mov	r8, r3
 8007808:	4606      	mov	r6, r0
 800780a:	b118      	cbz	r0, 8007814 <_vfiprintf_r+0x18>
 800780c:	6983      	ldr	r3, [r0, #24]
 800780e:	b90b      	cbnz	r3, 8007814 <_vfiprintf_r+0x18>
 8007810:	f000 fb14 	bl	8007e3c <__sinit>
 8007814:	4b89      	ldr	r3, [pc, #548]	; (8007a3c <_vfiprintf_r+0x240>)
 8007816:	429d      	cmp	r5, r3
 8007818:	d11b      	bne.n	8007852 <_vfiprintf_r+0x56>
 800781a:	6875      	ldr	r5, [r6, #4]
 800781c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800781e:	07d9      	lsls	r1, r3, #31
 8007820:	d405      	bmi.n	800782e <_vfiprintf_r+0x32>
 8007822:	89ab      	ldrh	r3, [r5, #12]
 8007824:	059a      	lsls	r2, r3, #22
 8007826:	d402      	bmi.n	800782e <_vfiprintf_r+0x32>
 8007828:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800782a:	f000 fba5 	bl	8007f78 <__retarget_lock_acquire_recursive>
 800782e:	89ab      	ldrh	r3, [r5, #12]
 8007830:	071b      	lsls	r3, r3, #28
 8007832:	d501      	bpl.n	8007838 <_vfiprintf_r+0x3c>
 8007834:	692b      	ldr	r3, [r5, #16]
 8007836:	b9eb      	cbnz	r3, 8007874 <_vfiprintf_r+0x78>
 8007838:	4629      	mov	r1, r5
 800783a:	4630      	mov	r0, r6
 800783c:	f000 f96e 	bl	8007b1c <__swsetup_r>
 8007840:	b1c0      	cbz	r0, 8007874 <_vfiprintf_r+0x78>
 8007842:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007844:	07dc      	lsls	r4, r3, #31
 8007846:	d50e      	bpl.n	8007866 <_vfiprintf_r+0x6a>
 8007848:	f04f 30ff 	mov.w	r0, #4294967295
 800784c:	b01d      	add	sp, #116	; 0x74
 800784e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007852:	4b7b      	ldr	r3, [pc, #492]	; (8007a40 <_vfiprintf_r+0x244>)
 8007854:	429d      	cmp	r5, r3
 8007856:	d101      	bne.n	800785c <_vfiprintf_r+0x60>
 8007858:	68b5      	ldr	r5, [r6, #8]
 800785a:	e7df      	b.n	800781c <_vfiprintf_r+0x20>
 800785c:	4b79      	ldr	r3, [pc, #484]	; (8007a44 <_vfiprintf_r+0x248>)
 800785e:	429d      	cmp	r5, r3
 8007860:	bf08      	it	eq
 8007862:	68f5      	ldreq	r5, [r6, #12]
 8007864:	e7da      	b.n	800781c <_vfiprintf_r+0x20>
 8007866:	89ab      	ldrh	r3, [r5, #12]
 8007868:	0598      	lsls	r0, r3, #22
 800786a:	d4ed      	bmi.n	8007848 <_vfiprintf_r+0x4c>
 800786c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800786e:	f000 fb84 	bl	8007f7a <__retarget_lock_release_recursive>
 8007872:	e7e9      	b.n	8007848 <_vfiprintf_r+0x4c>
 8007874:	2300      	movs	r3, #0
 8007876:	9309      	str	r3, [sp, #36]	; 0x24
 8007878:	2320      	movs	r3, #32
 800787a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800787e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007882:	2330      	movs	r3, #48	; 0x30
 8007884:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007a48 <_vfiprintf_r+0x24c>
 8007888:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800788c:	f04f 0901 	mov.w	r9, #1
 8007890:	4623      	mov	r3, r4
 8007892:	469a      	mov	sl, r3
 8007894:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007898:	b10a      	cbz	r2, 800789e <_vfiprintf_r+0xa2>
 800789a:	2a25      	cmp	r2, #37	; 0x25
 800789c:	d1f9      	bne.n	8007892 <_vfiprintf_r+0x96>
 800789e:	ebba 0b04 	subs.w	fp, sl, r4
 80078a2:	d00b      	beq.n	80078bc <_vfiprintf_r+0xc0>
 80078a4:	465b      	mov	r3, fp
 80078a6:	4622      	mov	r2, r4
 80078a8:	4629      	mov	r1, r5
 80078aa:	4630      	mov	r0, r6
 80078ac:	f7ff ff94 	bl	80077d8 <__sfputs_r>
 80078b0:	3001      	adds	r0, #1
 80078b2:	f000 80aa 	beq.w	8007a0a <_vfiprintf_r+0x20e>
 80078b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078b8:	445a      	add	r2, fp
 80078ba:	9209      	str	r2, [sp, #36]	; 0x24
 80078bc:	f89a 3000 	ldrb.w	r3, [sl]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	f000 80a2 	beq.w	8007a0a <_vfiprintf_r+0x20e>
 80078c6:	2300      	movs	r3, #0
 80078c8:	f04f 32ff 	mov.w	r2, #4294967295
 80078cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078d0:	f10a 0a01 	add.w	sl, sl, #1
 80078d4:	9304      	str	r3, [sp, #16]
 80078d6:	9307      	str	r3, [sp, #28]
 80078d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80078dc:	931a      	str	r3, [sp, #104]	; 0x68
 80078de:	4654      	mov	r4, sl
 80078e0:	2205      	movs	r2, #5
 80078e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078e6:	4858      	ldr	r0, [pc, #352]	; (8007a48 <_vfiprintf_r+0x24c>)
 80078e8:	f7f8 fc82 	bl	80001f0 <memchr>
 80078ec:	9a04      	ldr	r2, [sp, #16]
 80078ee:	b9d8      	cbnz	r0, 8007928 <_vfiprintf_r+0x12c>
 80078f0:	06d1      	lsls	r1, r2, #27
 80078f2:	bf44      	itt	mi
 80078f4:	2320      	movmi	r3, #32
 80078f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078fa:	0713      	lsls	r3, r2, #28
 80078fc:	bf44      	itt	mi
 80078fe:	232b      	movmi	r3, #43	; 0x2b
 8007900:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007904:	f89a 3000 	ldrb.w	r3, [sl]
 8007908:	2b2a      	cmp	r3, #42	; 0x2a
 800790a:	d015      	beq.n	8007938 <_vfiprintf_r+0x13c>
 800790c:	9a07      	ldr	r2, [sp, #28]
 800790e:	4654      	mov	r4, sl
 8007910:	2000      	movs	r0, #0
 8007912:	f04f 0c0a 	mov.w	ip, #10
 8007916:	4621      	mov	r1, r4
 8007918:	f811 3b01 	ldrb.w	r3, [r1], #1
 800791c:	3b30      	subs	r3, #48	; 0x30
 800791e:	2b09      	cmp	r3, #9
 8007920:	d94e      	bls.n	80079c0 <_vfiprintf_r+0x1c4>
 8007922:	b1b0      	cbz	r0, 8007952 <_vfiprintf_r+0x156>
 8007924:	9207      	str	r2, [sp, #28]
 8007926:	e014      	b.n	8007952 <_vfiprintf_r+0x156>
 8007928:	eba0 0308 	sub.w	r3, r0, r8
 800792c:	fa09 f303 	lsl.w	r3, r9, r3
 8007930:	4313      	orrs	r3, r2
 8007932:	9304      	str	r3, [sp, #16]
 8007934:	46a2      	mov	sl, r4
 8007936:	e7d2      	b.n	80078de <_vfiprintf_r+0xe2>
 8007938:	9b03      	ldr	r3, [sp, #12]
 800793a:	1d19      	adds	r1, r3, #4
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	9103      	str	r1, [sp, #12]
 8007940:	2b00      	cmp	r3, #0
 8007942:	bfbb      	ittet	lt
 8007944:	425b      	neglt	r3, r3
 8007946:	f042 0202 	orrlt.w	r2, r2, #2
 800794a:	9307      	strge	r3, [sp, #28]
 800794c:	9307      	strlt	r3, [sp, #28]
 800794e:	bfb8      	it	lt
 8007950:	9204      	strlt	r2, [sp, #16]
 8007952:	7823      	ldrb	r3, [r4, #0]
 8007954:	2b2e      	cmp	r3, #46	; 0x2e
 8007956:	d10c      	bne.n	8007972 <_vfiprintf_r+0x176>
 8007958:	7863      	ldrb	r3, [r4, #1]
 800795a:	2b2a      	cmp	r3, #42	; 0x2a
 800795c:	d135      	bne.n	80079ca <_vfiprintf_r+0x1ce>
 800795e:	9b03      	ldr	r3, [sp, #12]
 8007960:	1d1a      	adds	r2, r3, #4
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	9203      	str	r2, [sp, #12]
 8007966:	2b00      	cmp	r3, #0
 8007968:	bfb8      	it	lt
 800796a:	f04f 33ff 	movlt.w	r3, #4294967295
 800796e:	3402      	adds	r4, #2
 8007970:	9305      	str	r3, [sp, #20]
 8007972:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007a58 <_vfiprintf_r+0x25c>
 8007976:	7821      	ldrb	r1, [r4, #0]
 8007978:	2203      	movs	r2, #3
 800797a:	4650      	mov	r0, sl
 800797c:	f7f8 fc38 	bl	80001f0 <memchr>
 8007980:	b140      	cbz	r0, 8007994 <_vfiprintf_r+0x198>
 8007982:	2340      	movs	r3, #64	; 0x40
 8007984:	eba0 000a 	sub.w	r0, r0, sl
 8007988:	fa03 f000 	lsl.w	r0, r3, r0
 800798c:	9b04      	ldr	r3, [sp, #16]
 800798e:	4303      	orrs	r3, r0
 8007990:	3401      	adds	r4, #1
 8007992:	9304      	str	r3, [sp, #16]
 8007994:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007998:	482c      	ldr	r0, [pc, #176]	; (8007a4c <_vfiprintf_r+0x250>)
 800799a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800799e:	2206      	movs	r2, #6
 80079a0:	f7f8 fc26 	bl	80001f0 <memchr>
 80079a4:	2800      	cmp	r0, #0
 80079a6:	d03f      	beq.n	8007a28 <_vfiprintf_r+0x22c>
 80079a8:	4b29      	ldr	r3, [pc, #164]	; (8007a50 <_vfiprintf_r+0x254>)
 80079aa:	bb1b      	cbnz	r3, 80079f4 <_vfiprintf_r+0x1f8>
 80079ac:	9b03      	ldr	r3, [sp, #12]
 80079ae:	3307      	adds	r3, #7
 80079b0:	f023 0307 	bic.w	r3, r3, #7
 80079b4:	3308      	adds	r3, #8
 80079b6:	9303      	str	r3, [sp, #12]
 80079b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079ba:	443b      	add	r3, r7
 80079bc:	9309      	str	r3, [sp, #36]	; 0x24
 80079be:	e767      	b.n	8007890 <_vfiprintf_r+0x94>
 80079c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80079c4:	460c      	mov	r4, r1
 80079c6:	2001      	movs	r0, #1
 80079c8:	e7a5      	b.n	8007916 <_vfiprintf_r+0x11a>
 80079ca:	2300      	movs	r3, #0
 80079cc:	3401      	adds	r4, #1
 80079ce:	9305      	str	r3, [sp, #20]
 80079d0:	4619      	mov	r1, r3
 80079d2:	f04f 0c0a 	mov.w	ip, #10
 80079d6:	4620      	mov	r0, r4
 80079d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079dc:	3a30      	subs	r2, #48	; 0x30
 80079de:	2a09      	cmp	r2, #9
 80079e0:	d903      	bls.n	80079ea <_vfiprintf_r+0x1ee>
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d0c5      	beq.n	8007972 <_vfiprintf_r+0x176>
 80079e6:	9105      	str	r1, [sp, #20]
 80079e8:	e7c3      	b.n	8007972 <_vfiprintf_r+0x176>
 80079ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80079ee:	4604      	mov	r4, r0
 80079f0:	2301      	movs	r3, #1
 80079f2:	e7f0      	b.n	80079d6 <_vfiprintf_r+0x1da>
 80079f4:	ab03      	add	r3, sp, #12
 80079f6:	9300      	str	r3, [sp, #0]
 80079f8:	462a      	mov	r2, r5
 80079fa:	4b16      	ldr	r3, [pc, #88]	; (8007a54 <_vfiprintf_r+0x258>)
 80079fc:	a904      	add	r1, sp, #16
 80079fe:	4630      	mov	r0, r6
 8007a00:	f7fd fdd8 	bl	80055b4 <_printf_float>
 8007a04:	4607      	mov	r7, r0
 8007a06:	1c78      	adds	r0, r7, #1
 8007a08:	d1d6      	bne.n	80079b8 <_vfiprintf_r+0x1bc>
 8007a0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a0c:	07d9      	lsls	r1, r3, #31
 8007a0e:	d405      	bmi.n	8007a1c <_vfiprintf_r+0x220>
 8007a10:	89ab      	ldrh	r3, [r5, #12]
 8007a12:	059a      	lsls	r2, r3, #22
 8007a14:	d402      	bmi.n	8007a1c <_vfiprintf_r+0x220>
 8007a16:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a18:	f000 faaf 	bl	8007f7a <__retarget_lock_release_recursive>
 8007a1c:	89ab      	ldrh	r3, [r5, #12]
 8007a1e:	065b      	lsls	r3, r3, #25
 8007a20:	f53f af12 	bmi.w	8007848 <_vfiprintf_r+0x4c>
 8007a24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a26:	e711      	b.n	800784c <_vfiprintf_r+0x50>
 8007a28:	ab03      	add	r3, sp, #12
 8007a2a:	9300      	str	r3, [sp, #0]
 8007a2c:	462a      	mov	r2, r5
 8007a2e:	4b09      	ldr	r3, [pc, #36]	; (8007a54 <_vfiprintf_r+0x258>)
 8007a30:	a904      	add	r1, sp, #16
 8007a32:	4630      	mov	r0, r6
 8007a34:	f7fe f862 	bl	8005afc <_printf_i>
 8007a38:	e7e4      	b.n	8007a04 <_vfiprintf_r+0x208>
 8007a3a:	bf00      	nop
 8007a3c:	08008624 	.word	0x08008624
 8007a40:	08008644 	.word	0x08008644
 8007a44:	08008604 	.word	0x08008604
 8007a48:	080084ac 	.word	0x080084ac
 8007a4c:	080084b6 	.word	0x080084b6
 8007a50:	080055b5 	.word	0x080055b5
 8007a54:	080077d9 	.word	0x080077d9
 8007a58:	080084b2 	.word	0x080084b2

08007a5c <__swbuf_r>:
 8007a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a5e:	460e      	mov	r6, r1
 8007a60:	4614      	mov	r4, r2
 8007a62:	4605      	mov	r5, r0
 8007a64:	b118      	cbz	r0, 8007a6e <__swbuf_r+0x12>
 8007a66:	6983      	ldr	r3, [r0, #24]
 8007a68:	b90b      	cbnz	r3, 8007a6e <__swbuf_r+0x12>
 8007a6a:	f000 f9e7 	bl	8007e3c <__sinit>
 8007a6e:	4b21      	ldr	r3, [pc, #132]	; (8007af4 <__swbuf_r+0x98>)
 8007a70:	429c      	cmp	r4, r3
 8007a72:	d12b      	bne.n	8007acc <__swbuf_r+0x70>
 8007a74:	686c      	ldr	r4, [r5, #4]
 8007a76:	69a3      	ldr	r3, [r4, #24]
 8007a78:	60a3      	str	r3, [r4, #8]
 8007a7a:	89a3      	ldrh	r3, [r4, #12]
 8007a7c:	071a      	lsls	r2, r3, #28
 8007a7e:	d52f      	bpl.n	8007ae0 <__swbuf_r+0x84>
 8007a80:	6923      	ldr	r3, [r4, #16]
 8007a82:	b36b      	cbz	r3, 8007ae0 <__swbuf_r+0x84>
 8007a84:	6923      	ldr	r3, [r4, #16]
 8007a86:	6820      	ldr	r0, [r4, #0]
 8007a88:	1ac0      	subs	r0, r0, r3
 8007a8a:	6963      	ldr	r3, [r4, #20]
 8007a8c:	b2f6      	uxtb	r6, r6
 8007a8e:	4283      	cmp	r3, r0
 8007a90:	4637      	mov	r7, r6
 8007a92:	dc04      	bgt.n	8007a9e <__swbuf_r+0x42>
 8007a94:	4621      	mov	r1, r4
 8007a96:	4628      	mov	r0, r5
 8007a98:	f000 f93c 	bl	8007d14 <_fflush_r>
 8007a9c:	bb30      	cbnz	r0, 8007aec <__swbuf_r+0x90>
 8007a9e:	68a3      	ldr	r3, [r4, #8]
 8007aa0:	3b01      	subs	r3, #1
 8007aa2:	60a3      	str	r3, [r4, #8]
 8007aa4:	6823      	ldr	r3, [r4, #0]
 8007aa6:	1c5a      	adds	r2, r3, #1
 8007aa8:	6022      	str	r2, [r4, #0]
 8007aaa:	701e      	strb	r6, [r3, #0]
 8007aac:	6963      	ldr	r3, [r4, #20]
 8007aae:	3001      	adds	r0, #1
 8007ab0:	4283      	cmp	r3, r0
 8007ab2:	d004      	beq.n	8007abe <__swbuf_r+0x62>
 8007ab4:	89a3      	ldrh	r3, [r4, #12]
 8007ab6:	07db      	lsls	r3, r3, #31
 8007ab8:	d506      	bpl.n	8007ac8 <__swbuf_r+0x6c>
 8007aba:	2e0a      	cmp	r6, #10
 8007abc:	d104      	bne.n	8007ac8 <__swbuf_r+0x6c>
 8007abe:	4621      	mov	r1, r4
 8007ac0:	4628      	mov	r0, r5
 8007ac2:	f000 f927 	bl	8007d14 <_fflush_r>
 8007ac6:	b988      	cbnz	r0, 8007aec <__swbuf_r+0x90>
 8007ac8:	4638      	mov	r0, r7
 8007aca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007acc:	4b0a      	ldr	r3, [pc, #40]	; (8007af8 <__swbuf_r+0x9c>)
 8007ace:	429c      	cmp	r4, r3
 8007ad0:	d101      	bne.n	8007ad6 <__swbuf_r+0x7a>
 8007ad2:	68ac      	ldr	r4, [r5, #8]
 8007ad4:	e7cf      	b.n	8007a76 <__swbuf_r+0x1a>
 8007ad6:	4b09      	ldr	r3, [pc, #36]	; (8007afc <__swbuf_r+0xa0>)
 8007ad8:	429c      	cmp	r4, r3
 8007ada:	bf08      	it	eq
 8007adc:	68ec      	ldreq	r4, [r5, #12]
 8007ade:	e7ca      	b.n	8007a76 <__swbuf_r+0x1a>
 8007ae0:	4621      	mov	r1, r4
 8007ae2:	4628      	mov	r0, r5
 8007ae4:	f000 f81a 	bl	8007b1c <__swsetup_r>
 8007ae8:	2800      	cmp	r0, #0
 8007aea:	d0cb      	beq.n	8007a84 <__swbuf_r+0x28>
 8007aec:	f04f 37ff 	mov.w	r7, #4294967295
 8007af0:	e7ea      	b.n	8007ac8 <__swbuf_r+0x6c>
 8007af2:	bf00      	nop
 8007af4:	08008624 	.word	0x08008624
 8007af8:	08008644 	.word	0x08008644
 8007afc:	08008604 	.word	0x08008604

08007b00 <__ascii_wctomb>:
 8007b00:	b149      	cbz	r1, 8007b16 <__ascii_wctomb+0x16>
 8007b02:	2aff      	cmp	r2, #255	; 0xff
 8007b04:	bf85      	ittet	hi
 8007b06:	238a      	movhi	r3, #138	; 0x8a
 8007b08:	6003      	strhi	r3, [r0, #0]
 8007b0a:	700a      	strbls	r2, [r1, #0]
 8007b0c:	f04f 30ff 	movhi.w	r0, #4294967295
 8007b10:	bf98      	it	ls
 8007b12:	2001      	movls	r0, #1
 8007b14:	4770      	bx	lr
 8007b16:	4608      	mov	r0, r1
 8007b18:	4770      	bx	lr
	...

08007b1c <__swsetup_r>:
 8007b1c:	4b32      	ldr	r3, [pc, #200]	; (8007be8 <__swsetup_r+0xcc>)
 8007b1e:	b570      	push	{r4, r5, r6, lr}
 8007b20:	681d      	ldr	r5, [r3, #0]
 8007b22:	4606      	mov	r6, r0
 8007b24:	460c      	mov	r4, r1
 8007b26:	b125      	cbz	r5, 8007b32 <__swsetup_r+0x16>
 8007b28:	69ab      	ldr	r3, [r5, #24]
 8007b2a:	b913      	cbnz	r3, 8007b32 <__swsetup_r+0x16>
 8007b2c:	4628      	mov	r0, r5
 8007b2e:	f000 f985 	bl	8007e3c <__sinit>
 8007b32:	4b2e      	ldr	r3, [pc, #184]	; (8007bec <__swsetup_r+0xd0>)
 8007b34:	429c      	cmp	r4, r3
 8007b36:	d10f      	bne.n	8007b58 <__swsetup_r+0x3c>
 8007b38:	686c      	ldr	r4, [r5, #4]
 8007b3a:	89a3      	ldrh	r3, [r4, #12]
 8007b3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b40:	0719      	lsls	r1, r3, #28
 8007b42:	d42c      	bmi.n	8007b9e <__swsetup_r+0x82>
 8007b44:	06dd      	lsls	r5, r3, #27
 8007b46:	d411      	bmi.n	8007b6c <__swsetup_r+0x50>
 8007b48:	2309      	movs	r3, #9
 8007b4a:	6033      	str	r3, [r6, #0]
 8007b4c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007b50:	81a3      	strh	r3, [r4, #12]
 8007b52:	f04f 30ff 	mov.w	r0, #4294967295
 8007b56:	e03e      	b.n	8007bd6 <__swsetup_r+0xba>
 8007b58:	4b25      	ldr	r3, [pc, #148]	; (8007bf0 <__swsetup_r+0xd4>)
 8007b5a:	429c      	cmp	r4, r3
 8007b5c:	d101      	bne.n	8007b62 <__swsetup_r+0x46>
 8007b5e:	68ac      	ldr	r4, [r5, #8]
 8007b60:	e7eb      	b.n	8007b3a <__swsetup_r+0x1e>
 8007b62:	4b24      	ldr	r3, [pc, #144]	; (8007bf4 <__swsetup_r+0xd8>)
 8007b64:	429c      	cmp	r4, r3
 8007b66:	bf08      	it	eq
 8007b68:	68ec      	ldreq	r4, [r5, #12]
 8007b6a:	e7e6      	b.n	8007b3a <__swsetup_r+0x1e>
 8007b6c:	0758      	lsls	r0, r3, #29
 8007b6e:	d512      	bpl.n	8007b96 <__swsetup_r+0x7a>
 8007b70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b72:	b141      	cbz	r1, 8007b86 <__swsetup_r+0x6a>
 8007b74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b78:	4299      	cmp	r1, r3
 8007b7a:	d002      	beq.n	8007b82 <__swsetup_r+0x66>
 8007b7c:	4630      	mov	r0, r6
 8007b7e:	f7ff fb31 	bl	80071e4 <_free_r>
 8007b82:	2300      	movs	r3, #0
 8007b84:	6363      	str	r3, [r4, #52]	; 0x34
 8007b86:	89a3      	ldrh	r3, [r4, #12]
 8007b88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007b8c:	81a3      	strh	r3, [r4, #12]
 8007b8e:	2300      	movs	r3, #0
 8007b90:	6063      	str	r3, [r4, #4]
 8007b92:	6923      	ldr	r3, [r4, #16]
 8007b94:	6023      	str	r3, [r4, #0]
 8007b96:	89a3      	ldrh	r3, [r4, #12]
 8007b98:	f043 0308 	orr.w	r3, r3, #8
 8007b9c:	81a3      	strh	r3, [r4, #12]
 8007b9e:	6923      	ldr	r3, [r4, #16]
 8007ba0:	b94b      	cbnz	r3, 8007bb6 <__swsetup_r+0x9a>
 8007ba2:	89a3      	ldrh	r3, [r4, #12]
 8007ba4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007ba8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bac:	d003      	beq.n	8007bb6 <__swsetup_r+0x9a>
 8007bae:	4621      	mov	r1, r4
 8007bb0:	4630      	mov	r0, r6
 8007bb2:	f000 fa09 	bl	8007fc8 <__smakebuf_r>
 8007bb6:	89a0      	ldrh	r0, [r4, #12]
 8007bb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007bbc:	f010 0301 	ands.w	r3, r0, #1
 8007bc0:	d00a      	beq.n	8007bd8 <__swsetup_r+0xbc>
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	60a3      	str	r3, [r4, #8]
 8007bc6:	6963      	ldr	r3, [r4, #20]
 8007bc8:	425b      	negs	r3, r3
 8007bca:	61a3      	str	r3, [r4, #24]
 8007bcc:	6923      	ldr	r3, [r4, #16]
 8007bce:	b943      	cbnz	r3, 8007be2 <__swsetup_r+0xc6>
 8007bd0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007bd4:	d1ba      	bne.n	8007b4c <__swsetup_r+0x30>
 8007bd6:	bd70      	pop	{r4, r5, r6, pc}
 8007bd8:	0781      	lsls	r1, r0, #30
 8007bda:	bf58      	it	pl
 8007bdc:	6963      	ldrpl	r3, [r4, #20]
 8007bde:	60a3      	str	r3, [r4, #8]
 8007be0:	e7f4      	b.n	8007bcc <__swsetup_r+0xb0>
 8007be2:	2000      	movs	r0, #0
 8007be4:	e7f7      	b.n	8007bd6 <__swsetup_r+0xba>
 8007be6:	bf00      	nop
 8007be8:	2000000c 	.word	0x2000000c
 8007bec:	08008624 	.word	0x08008624
 8007bf0:	08008644 	.word	0x08008644
 8007bf4:	08008604 	.word	0x08008604

08007bf8 <abort>:
 8007bf8:	b508      	push	{r3, lr}
 8007bfa:	2006      	movs	r0, #6
 8007bfc:	f000 fa54 	bl	80080a8 <raise>
 8007c00:	2001      	movs	r0, #1
 8007c02:	f7f9 fe67 	bl	80018d4 <_exit>
	...

08007c08 <__sflush_r>:
 8007c08:	898a      	ldrh	r2, [r1, #12]
 8007c0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c0e:	4605      	mov	r5, r0
 8007c10:	0710      	lsls	r0, r2, #28
 8007c12:	460c      	mov	r4, r1
 8007c14:	d458      	bmi.n	8007cc8 <__sflush_r+0xc0>
 8007c16:	684b      	ldr	r3, [r1, #4]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	dc05      	bgt.n	8007c28 <__sflush_r+0x20>
 8007c1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	dc02      	bgt.n	8007c28 <__sflush_r+0x20>
 8007c22:	2000      	movs	r0, #0
 8007c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c2a:	2e00      	cmp	r6, #0
 8007c2c:	d0f9      	beq.n	8007c22 <__sflush_r+0x1a>
 8007c2e:	2300      	movs	r3, #0
 8007c30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007c34:	682f      	ldr	r7, [r5, #0]
 8007c36:	602b      	str	r3, [r5, #0]
 8007c38:	d032      	beq.n	8007ca0 <__sflush_r+0x98>
 8007c3a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007c3c:	89a3      	ldrh	r3, [r4, #12]
 8007c3e:	075a      	lsls	r2, r3, #29
 8007c40:	d505      	bpl.n	8007c4e <__sflush_r+0x46>
 8007c42:	6863      	ldr	r3, [r4, #4]
 8007c44:	1ac0      	subs	r0, r0, r3
 8007c46:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007c48:	b10b      	cbz	r3, 8007c4e <__sflush_r+0x46>
 8007c4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c4c:	1ac0      	subs	r0, r0, r3
 8007c4e:	2300      	movs	r3, #0
 8007c50:	4602      	mov	r2, r0
 8007c52:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c54:	6a21      	ldr	r1, [r4, #32]
 8007c56:	4628      	mov	r0, r5
 8007c58:	47b0      	blx	r6
 8007c5a:	1c43      	adds	r3, r0, #1
 8007c5c:	89a3      	ldrh	r3, [r4, #12]
 8007c5e:	d106      	bne.n	8007c6e <__sflush_r+0x66>
 8007c60:	6829      	ldr	r1, [r5, #0]
 8007c62:	291d      	cmp	r1, #29
 8007c64:	d82c      	bhi.n	8007cc0 <__sflush_r+0xb8>
 8007c66:	4a2a      	ldr	r2, [pc, #168]	; (8007d10 <__sflush_r+0x108>)
 8007c68:	40ca      	lsrs	r2, r1
 8007c6a:	07d6      	lsls	r6, r2, #31
 8007c6c:	d528      	bpl.n	8007cc0 <__sflush_r+0xb8>
 8007c6e:	2200      	movs	r2, #0
 8007c70:	6062      	str	r2, [r4, #4]
 8007c72:	04d9      	lsls	r1, r3, #19
 8007c74:	6922      	ldr	r2, [r4, #16]
 8007c76:	6022      	str	r2, [r4, #0]
 8007c78:	d504      	bpl.n	8007c84 <__sflush_r+0x7c>
 8007c7a:	1c42      	adds	r2, r0, #1
 8007c7c:	d101      	bne.n	8007c82 <__sflush_r+0x7a>
 8007c7e:	682b      	ldr	r3, [r5, #0]
 8007c80:	b903      	cbnz	r3, 8007c84 <__sflush_r+0x7c>
 8007c82:	6560      	str	r0, [r4, #84]	; 0x54
 8007c84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c86:	602f      	str	r7, [r5, #0]
 8007c88:	2900      	cmp	r1, #0
 8007c8a:	d0ca      	beq.n	8007c22 <__sflush_r+0x1a>
 8007c8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c90:	4299      	cmp	r1, r3
 8007c92:	d002      	beq.n	8007c9a <__sflush_r+0x92>
 8007c94:	4628      	mov	r0, r5
 8007c96:	f7ff faa5 	bl	80071e4 <_free_r>
 8007c9a:	2000      	movs	r0, #0
 8007c9c:	6360      	str	r0, [r4, #52]	; 0x34
 8007c9e:	e7c1      	b.n	8007c24 <__sflush_r+0x1c>
 8007ca0:	6a21      	ldr	r1, [r4, #32]
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	4628      	mov	r0, r5
 8007ca6:	47b0      	blx	r6
 8007ca8:	1c41      	adds	r1, r0, #1
 8007caa:	d1c7      	bne.n	8007c3c <__sflush_r+0x34>
 8007cac:	682b      	ldr	r3, [r5, #0]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d0c4      	beq.n	8007c3c <__sflush_r+0x34>
 8007cb2:	2b1d      	cmp	r3, #29
 8007cb4:	d001      	beq.n	8007cba <__sflush_r+0xb2>
 8007cb6:	2b16      	cmp	r3, #22
 8007cb8:	d101      	bne.n	8007cbe <__sflush_r+0xb6>
 8007cba:	602f      	str	r7, [r5, #0]
 8007cbc:	e7b1      	b.n	8007c22 <__sflush_r+0x1a>
 8007cbe:	89a3      	ldrh	r3, [r4, #12]
 8007cc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cc4:	81a3      	strh	r3, [r4, #12]
 8007cc6:	e7ad      	b.n	8007c24 <__sflush_r+0x1c>
 8007cc8:	690f      	ldr	r7, [r1, #16]
 8007cca:	2f00      	cmp	r7, #0
 8007ccc:	d0a9      	beq.n	8007c22 <__sflush_r+0x1a>
 8007cce:	0793      	lsls	r3, r2, #30
 8007cd0:	680e      	ldr	r6, [r1, #0]
 8007cd2:	bf08      	it	eq
 8007cd4:	694b      	ldreq	r3, [r1, #20]
 8007cd6:	600f      	str	r7, [r1, #0]
 8007cd8:	bf18      	it	ne
 8007cda:	2300      	movne	r3, #0
 8007cdc:	eba6 0807 	sub.w	r8, r6, r7
 8007ce0:	608b      	str	r3, [r1, #8]
 8007ce2:	f1b8 0f00 	cmp.w	r8, #0
 8007ce6:	dd9c      	ble.n	8007c22 <__sflush_r+0x1a>
 8007ce8:	6a21      	ldr	r1, [r4, #32]
 8007cea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007cec:	4643      	mov	r3, r8
 8007cee:	463a      	mov	r2, r7
 8007cf0:	4628      	mov	r0, r5
 8007cf2:	47b0      	blx	r6
 8007cf4:	2800      	cmp	r0, #0
 8007cf6:	dc06      	bgt.n	8007d06 <__sflush_r+0xfe>
 8007cf8:	89a3      	ldrh	r3, [r4, #12]
 8007cfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cfe:	81a3      	strh	r3, [r4, #12]
 8007d00:	f04f 30ff 	mov.w	r0, #4294967295
 8007d04:	e78e      	b.n	8007c24 <__sflush_r+0x1c>
 8007d06:	4407      	add	r7, r0
 8007d08:	eba8 0800 	sub.w	r8, r8, r0
 8007d0c:	e7e9      	b.n	8007ce2 <__sflush_r+0xda>
 8007d0e:	bf00      	nop
 8007d10:	20400001 	.word	0x20400001

08007d14 <_fflush_r>:
 8007d14:	b538      	push	{r3, r4, r5, lr}
 8007d16:	690b      	ldr	r3, [r1, #16]
 8007d18:	4605      	mov	r5, r0
 8007d1a:	460c      	mov	r4, r1
 8007d1c:	b913      	cbnz	r3, 8007d24 <_fflush_r+0x10>
 8007d1e:	2500      	movs	r5, #0
 8007d20:	4628      	mov	r0, r5
 8007d22:	bd38      	pop	{r3, r4, r5, pc}
 8007d24:	b118      	cbz	r0, 8007d2e <_fflush_r+0x1a>
 8007d26:	6983      	ldr	r3, [r0, #24]
 8007d28:	b90b      	cbnz	r3, 8007d2e <_fflush_r+0x1a>
 8007d2a:	f000 f887 	bl	8007e3c <__sinit>
 8007d2e:	4b14      	ldr	r3, [pc, #80]	; (8007d80 <_fflush_r+0x6c>)
 8007d30:	429c      	cmp	r4, r3
 8007d32:	d11b      	bne.n	8007d6c <_fflush_r+0x58>
 8007d34:	686c      	ldr	r4, [r5, #4]
 8007d36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d0ef      	beq.n	8007d1e <_fflush_r+0xa>
 8007d3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007d40:	07d0      	lsls	r0, r2, #31
 8007d42:	d404      	bmi.n	8007d4e <_fflush_r+0x3a>
 8007d44:	0599      	lsls	r1, r3, #22
 8007d46:	d402      	bmi.n	8007d4e <_fflush_r+0x3a>
 8007d48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d4a:	f000 f915 	bl	8007f78 <__retarget_lock_acquire_recursive>
 8007d4e:	4628      	mov	r0, r5
 8007d50:	4621      	mov	r1, r4
 8007d52:	f7ff ff59 	bl	8007c08 <__sflush_r>
 8007d56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d58:	07da      	lsls	r2, r3, #31
 8007d5a:	4605      	mov	r5, r0
 8007d5c:	d4e0      	bmi.n	8007d20 <_fflush_r+0xc>
 8007d5e:	89a3      	ldrh	r3, [r4, #12]
 8007d60:	059b      	lsls	r3, r3, #22
 8007d62:	d4dd      	bmi.n	8007d20 <_fflush_r+0xc>
 8007d64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d66:	f000 f908 	bl	8007f7a <__retarget_lock_release_recursive>
 8007d6a:	e7d9      	b.n	8007d20 <_fflush_r+0xc>
 8007d6c:	4b05      	ldr	r3, [pc, #20]	; (8007d84 <_fflush_r+0x70>)
 8007d6e:	429c      	cmp	r4, r3
 8007d70:	d101      	bne.n	8007d76 <_fflush_r+0x62>
 8007d72:	68ac      	ldr	r4, [r5, #8]
 8007d74:	e7df      	b.n	8007d36 <_fflush_r+0x22>
 8007d76:	4b04      	ldr	r3, [pc, #16]	; (8007d88 <_fflush_r+0x74>)
 8007d78:	429c      	cmp	r4, r3
 8007d7a:	bf08      	it	eq
 8007d7c:	68ec      	ldreq	r4, [r5, #12]
 8007d7e:	e7da      	b.n	8007d36 <_fflush_r+0x22>
 8007d80:	08008624 	.word	0x08008624
 8007d84:	08008644 	.word	0x08008644
 8007d88:	08008604 	.word	0x08008604

08007d8c <std>:
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	b510      	push	{r4, lr}
 8007d90:	4604      	mov	r4, r0
 8007d92:	e9c0 3300 	strd	r3, r3, [r0]
 8007d96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d9a:	6083      	str	r3, [r0, #8]
 8007d9c:	8181      	strh	r1, [r0, #12]
 8007d9e:	6643      	str	r3, [r0, #100]	; 0x64
 8007da0:	81c2      	strh	r2, [r0, #14]
 8007da2:	6183      	str	r3, [r0, #24]
 8007da4:	4619      	mov	r1, r3
 8007da6:	2208      	movs	r2, #8
 8007da8:	305c      	adds	r0, #92	; 0x5c
 8007daa:	f7fd fb5b 	bl	8005464 <memset>
 8007dae:	4b05      	ldr	r3, [pc, #20]	; (8007dc4 <std+0x38>)
 8007db0:	6263      	str	r3, [r4, #36]	; 0x24
 8007db2:	4b05      	ldr	r3, [pc, #20]	; (8007dc8 <std+0x3c>)
 8007db4:	62a3      	str	r3, [r4, #40]	; 0x28
 8007db6:	4b05      	ldr	r3, [pc, #20]	; (8007dcc <std+0x40>)
 8007db8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007dba:	4b05      	ldr	r3, [pc, #20]	; (8007dd0 <std+0x44>)
 8007dbc:	6224      	str	r4, [r4, #32]
 8007dbe:	6323      	str	r3, [r4, #48]	; 0x30
 8007dc0:	bd10      	pop	{r4, pc}
 8007dc2:	bf00      	nop
 8007dc4:	080080e1 	.word	0x080080e1
 8007dc8:	08008103 	.word	0x08008103
 8007dcc:	0800813b 	.word	0x0800813b
 8007dd0:	0800815f 	.word	0x0800815f

08007dd4 <_cleanup_r>:
 8007dd4:	4901      	ldr	r1, [pc, #4]	; (8007ddc <_cleanup_r+0x8>)
 8007dd6:	f000 b8af 	b.w	8007f38 <_fwalk_reent>
 8007dda:	bf00      	nop
 8007ddc:	08007d15 	.word	0x08007d15

08007de0 <__sfmoreglue>:
 8007de0:	b570      	push	{r4, r5, r6, lr}
 8007de2:	2268      	movs	r2, #104	; 0x68
 8007de4:	1e4d      	subs	r5, r1, #1
 8007de6:	4355      	muls	r5, r2
 8007de8:	460e      	mov	r6, r1
 8007dea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007dee:	f7ff fa65 	bl	80072bc <_malloc_r>
 8007df2:	4604      	mov	r4, r0
 8007df4:	b140      	cbz	r0, 8007e08 <__sfmoreglue+0x28>
 8007df6:	2100      	movs	r1, #0
 8007df8:	e9c0 1600 	strd	r1, r6, [r0]
 8007dfc:	300c      	adds	r0, #12
 8007dfe:	60a0      	str	r0, [r4, #8]
 8007e00:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007e04:	f7fd fb2e 	bl	8005464 <memset>
 8007e08:	4620      	mov	r0, r4
 8007e0a:	bd70      	pop	{r4, r5, r6, pc}

08007e0c <__sfp_lock_acquire>:
 8007e0c:	4801      	ldr	r0, [pc, #4]	; (8007e14 <__sfp_lock_acquire+0x8>)
 8007e0e:	f000 b8b3 	b.w	8007f78 <__retarget_lock_acquire_recursive>
 8007e12:	bf00      	nop
 8007e14:	200003d1 	.word	0x200003d1

08007e18 <__sfp_lock_release>:
 8007e18:	4801      	ldr	r0, [pc, #4]	; (8007e20 <__sfp_lock_release+0x8>)
 8007e1a:	f000 b8ae 	b.w	8007f7a <__retarget_lock_release_recursive>
 8007e1e:	bf00      	nop
 8007e20:	200003d1 	.word	0x200003d1

08007e24 <__sinit_lock_acquire>:
 8007e24:	4801      	ldr	r0, [pc, #4]	; (8007e2c <__sinit_lock_acquire+0x8>)
 8007e26:	f000 b8a7 	b.w	8007f78 <__retarget_lock_acquire_recursive>
 8007e2a:	bf00      	nop
 8007e2c:	200003d2 	.word	0x200003d2

08007e30 <__sinit_lock_release>:
 8007e30:	4801      	ldr	r0, [pc, #4]	; (8007e38 <__sinit_lock_release+0x8>)
 8007e32:	f000 b8a2 	b.w	8007f7a <__retarget_lock_release_recursive>
 8007e36:	bf00      	nop
 8007e38:	200003d2 	.word	0x200003d2

08007e3c <__sinit>:
 8007e3c:	b510      	push	{r4, lr}
 8007e3e:	4604      	mov	r4, r0
 8007e40:	f7ff fff0 	bl	8007e24 <__sinit_lock_acquire>
 8007e44:	69a3      	ldr	r3, [r4, #24]
 8007e46:	b11b      	cbz	r3, 8007e50 <__sinit+0x14>
 8007e48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e4c:	f7ff bff0 	b.w	8007e30 <__sinit_lock_release>
 8007e50:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007e54:	6523      	str	r3, [r4, #80]	; 0x50
 8007e56:	4b13      	ldr	r3, [pc, #76]	; (8007ea4 <__sinit+0x68>)
 8007e58:	4a13      	ldr	r2, [pc, #76]	; (8007ea8 <__sinit+0x6c>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	62a2      	str	r2, [r4, #40]	; 0x28
 8007e5e:	42a3      	cmp	r3, r4
 8007e60:	bf04      	itt	eq
 8007e62:	2301      	moveq	r3, #1
 8007e64:	61a3      	streq	r3, [r4, #24]
 8007e66:	4620      	mov	r0, r4
 8007e68:	f000 f820 	bl	8007eac <__sfp>
 8007e6c:	6060      	str	r0, [r4, #4]
 8007e6e:	4620      	mov	r0, r4
 8007e70:	f000 f81c 	bl	8007eac <__sfp>
 8007e74:	60a0      	str	r0, [r4, #8]
 8007e76:	4620      	mov	r0, r4
 8007e78:	f000 f818 	bl	8007eac <__sfp>
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	60e0      	str	r0, [r4, #12]
 8007e80:	2104      	movs	r1, #4
 8007e82:	6860      	ldr	r0, [r4, #4]
 8007e84:	f7ff ff82 	bl	8007d8c <std>
 8007e88:	68a0      	ldr	r0, [r4, #8]
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	2109      	movs	r1, #9
 8007e8e:	f7ff ff7d 	bl	8007d8c <std>
 8007e92:	68e0      	ldr	r0, [r4, #12]
 8007e94:	2202      	movs	r2, #2
 8007e96:	2112      	movs	r1, #18
 8007e98:	f7ff ff78 	bl	8007d8c <std>
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	61a3      	str	r3, [r4, #24]
 8007ea0:	e7d2      	b.n	8007e48 <__sinit+0xc>
 8007ea2:	bf00      	nop
 8007ea4:	08008288 	.word	0x08008288
 8007ea8:	08007dd5 	.word	0x08007dd5

08007eac <__sfp>:
 8007eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eae:	4607      	mov	r7, r0
 8007eb0:	f7ff ffac 	bl	8007e0c <__sfp_lock_acquire>
 8007eb4:	4b1e      	ldr	r3, [pc, #120]	; (8007f30 <__sfp+0x84>)
 8007eb6:	681e      	ldr	r6, [r3, #0]
 8007eb8:	69b3      	ldr	r3, [r6, #24]
 8007eba:	b913      	cbnz	r3, 8007ec2 <__sfp+0x16>
 8007ebc:	4630      	mov	r0, r6
 8007ebe:	f7ff ffbd 	bl	8007e3c <__sinit>
 8007ec2:	3648      	adds	r6, #72	; 0x48
 8007ec4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007ec8:	3b01      	subs	r3, #1
 8007eca:	d503      	bpl.n	8007ed4 <__sfp+0x28>
 8007ecc:	6833      	ldr	r3, [r6, #0]
 8007ece:	b30b      	cbz	r3, 8007f14 <__sfp+0x68>
 8007ed0:	6836      	ldr	r6, [r6, #0]
 8007ed2:	e7f7      	b.n	8007ec4 <__sfp+0x18>
 8007ed4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007ed8:	b9d5      	cbnz	r5, 8007f10 <__sfp+0x64>
 8007eda:	4b16      	ldr	r3, [pc, #88]	; (8007f34 <__sfp+0x88>)
 8007edc:	60e3      	str	r3, [r4, #12]
 8007ede:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007ee2:	6665      	str	r5, [r4, #100]	; 0x64
 8007ee4:	f000 f847 	bl	8007f76 <__retarget_lock_init_recursive>
 8007ee8:	f7ff ff96 	bl	8007e18 <__sfp_lock_release>
 8007eec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007ef0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007ef4:	6025      	str	r5, [r4, #0]
 8007ef6:	61a5      	str	r5, [r4, #24]
 8007ef8:	2208      	movs	r2, #8
 8007efa:	4629      	mov	r1, r5
 8007efc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007f00:	f7fd fab0 	bl	8005464 <memset>
 8007f04:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007f08:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007f0c:	4620      	mov	r0, r4
 8007f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f10:	3468      	adds	r4, #104	; 0x68
 8007f12:	e7d9      	b.n	8007ec8 <__sfp+0x1c>
 8007f14:	2104      	movs	r1, #4
 8007f16:	4638      	mov	r0, r7
 8007f18:	f7ff ff62 	bl	8007de0 <__sfmoreglue>
 8007f1c:	4604      	mov	r4, r0
 8007f1e:	6030      	str	r0, [r6, #0]
 8007f20:	2800      	cmp	r0, #0
 8007f22:	d1d5      	bne.n	8007ed0 <__sfp+0x24>
 8007f24:	f7ff ff78 	bl	8007e18 <__sfp_lock_release>
 8007f28:	230c      	movs	r3, #12
 8007f2a:	603b      	str	r3, [r7, #0]
 8007f2c:	e7ee      	b.n	8007f0c <__sfp+0x60>
 8007f2e:	bf00      	nop
 8007f30:	08008288 	.word	0x08008288
 8007f34:	ffff0001 	.word	0xffff0001

08007f38 <_fwalk_reent>:
 8007f38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f3c:	4606      	mov	r6, r0
 8007f3e:	4688      	mov	r8, r1
 8007f40:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007f44:	2700      	movs	r7, #0
 8007f46:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f4a:	f1b9 0901 	subs.w	r9, r9, #1
 8007f4e:	d505      	bpl.n	8007f5c <_fwalk_reent+0x24>
 8007f50:	6824      	ldr	r4, [r4, #0]
 8007f52:	2c00      	cmp	r4, #0
 8007f54:	d1f7      	bne.n	8007f46 <_fwalk_reent+0xe>
 8007f56:	4638      	mov	r0, r7
 8007f58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f5c:	89ab      	ldrh	r3, [r5, #12]
 8007f5e:	2b01      	cmp	r3, #1
 8007f60:	d907      	bls.n	8007f72 <_fwalk_reent+0x3a>
 8007f62:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f66:	3301      	adds	r3, #1
 8007f68:	d003      	beq.n	8007f72 <_fwalk_reent+0x3a>
 8007f6a:	4629      	mov	r1, r5
 8007f6c:	4630      	mov	r0, r6
 8007f6e:	47c0      	blx	r8
 8007f70:	4307      	orrs	r7, r0
 8007f72:	3568      	adds	r5, #104	; 0x68
 8007f74:	e7e9      	b.n	8007f4a <_fwalk_reent+0x12>

08007f76 <__retarget_lock_init_recursive>:
 8007f76:	4770      	bx	lr

08007f78 <__retarget_lock_acquire_recursive>:
 8007f78:	4770      	bx	lr

08007f7a <__retarget_lock_release_recursive>:
 8007f7a:	4770      	bx	lr

08007f7c <__swhatbuf_r>:
 8007f7c:	b570      	push	{r4, r5, r6, lr}
 8007f7e:	460e      	mov	r6, r1
 8007f80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f84:	2900      	cmp	r1, #0
 8007f86:	b096      	sub	sp, #88	; 0x58
 8007f88:	4614      	mov	r4, r2
 8007f8a:	461d      	mov	r5, r3
 8007f8c:	da08      	bge.n	8007fa0 <__swhatbuf_r+0x24>
 8007f8e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007f92:	2200      	movs	r2, #0
 8007f94:	602a      	str	r2, [r5, #0]
 8007f96:	061a      	lsls	r2, r3, #24
 8007f98:	d410      	bmi.n	8007fbc <__swhatbuf_r+0x40>
 8007f9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f9e:	e00e      	b.n	8007fbe <__swhatbuf_r+0x42>
 8007fa0:	466a      	mov	r2, sp
 8007fa2:	f000 f903 	bl	80081ac <_fstat_r>
 8007fa6:	2800      	cmp	r0, #0
 8007fa8:	dbf1      	blt.n	8007f8e <__swhatbuf_r+0x12>
 8007faa:	9a01      	ldr	r2, [sp, #4]
 8007fac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007fb0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007fb4:	425a      	negs	r2, r3
 8007fb6:	415a      	adcs	r2, r3
 8007fb8:	602a      	str	r2, [r5, #0]
 8007fba:	e7ee      	b.n	8007f9a <__swhatbuf_r+0x1e>
 8007fbc:	2340      	movs	r3, #64	; 0x40
 8007fbe:	2000      	movs	r0, #0
 8007fc0:	6023      	str	r3, [r4, #0]
 8007fc2:	b016      	add	sp, #88	; 0x58
 8007fc4:	bd70      	pop	{r4, r5, r6, pc}
	...

08007fc8 <__smakebuf_r>:
 8007fc8:	898b      	ldrh	r3, [r1, #12]
 8007fca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007fcc:	079d      	lsls	r5, r3, #30
 8007fce:	4606      	mov	r6, r0
 8007fd0:	460c      	mov	r4, r1
 8007fd2:	d507      	bpl.n	8007fe4 <__smakebuf_r+0x1c>
 8007fd4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007fd8:	6023      	str	r3, [r4, #0]
 8007fda:	6123      	str	r3, [r4, #16]
 8007fdc:	2301      	movs	r3, #1
 8007fde:	6163      	str	r3, [r4, #20]
 8007fe0:	b002      	add	sp, #8
 8007fe2:	bd70      	pop	{r4, r5, r6, pc}
 8007fe4:	ab01      	add	r3, sp, #4
 8007fe6:	466a      	mov	r2, sp
 8007fe8:	f7ff ffc8 	bl	8007f7c <__swhatbuf_r>
 8007fec:	9900      	ldr	r1, [sp, #0]
 8007fee:	4605      	mov	r5, r0
 8007ff0:	4630      	mov	r0, r6
 8007ff2:	f7ff f963 	bl	80072bc <_malloc_r>
 8007ff6:	b948      	cbnz	r0, 800800c <__smakebuf_r+0x44>
 8007ff8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ffc:	059a      	lsls	r2, r3, #22
 8007ffe:	d4ef      	bmi.n	8007fe0 <__smakebuf_r+0x18>
 8008000:	f023 0303 	bic.w	r3, r3, #3
 8008004:	f043 0302 	orr.w	r3, r3, #2
 8008008:	81a3      	strh	r3, [r4, #12]
 800800a:	e7e3      	b.n	8007fd4 <__smakebuf_r+0xc>
 800800c:	4b0d      	ldr	r3, [pc, #52]	; (8008044 <__smakebuf_r+0x7c>)
 800800e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008010:	89a3      	ldrh	r3, [r4, #12]
 8008012:	6020      	str	r0, [r4, #0]
 8008014:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008018:	81a3      	strh	r3, [r4, #12]
 800801a:	9b00      	ldr	r3, [sp, #0]
 800801c:	6163      	str	r3, [r4, #20]
 800801e:	9b01      	ldr	r3, [sp, #4]
 8008020:	6120      	str	r0, [r4, #16]
 8008022:	b15b      	cbz	r3, 800803c <__smakebuf_r+0x74>
 8008024:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008028:	4630      	mov	r0, r6
 800802a:	f000 f8d1 	bl	80081d0 <_isatty_r>
 800802e:	b128      	cbz	r0, 800803c <__smakebuf_r+0x74>
 8008030:	89a3      	ldrh	r3, [r4, #12]
 8008032:	f023 0303 	bic.w	r3, r3, #3
 8008036:	f043 0301 	orr.w	r3, r3, #1
 800803a:	81a3      	strh	r3, [r4, #12]
 800803c:	89a0      	ldrh	r0, [r4, #12]
 800803e:	4305      	orrs	r5, r0
 8008040:	81a5      	strh	r5, [r4, #12]
 8008042:	e7cd      	b.n	8007fe0 <__smakebuf_r+0x18>
 8008044:	08007dd5 	.word	0x08007dd5

08008048 <_malloc_usable_size_r>:
 8008048:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800804c:	1f18      	subs	r0, r3, #4
 800804e:	2b00      	cmp	r3, #0
 8008050:	bfbc      	itt	lt
 8008052:	580b      	ldrlt	r3, [r1, r0]
 8008054:	18c0      	addlt	r0, r0, r3
 8008056:	4770      	bx	lr

08008058 <_raise_r>:
 8008058:	291f      	cmp	r1, #31
 800805a:	b538      	push	{r3, r4, r5, lr}
 800805c:	4604      	mov	r4, r0
 800805e:	460d      	mov	r5, r1
 8008060:	d904      	bls.n	800806c <_raise_r+0x14>
 8008062:	2316      	movs	r3, #22
 8008064:	6003      	str	r3, [r0, #0]
 8008066:	f04f 30ff 	mov.w	r0, #4294967295
 800806a:	bd38      	pop	{r3, r4, r5, pc}
 800806c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800806e:	b112      	cbz	r2, 8008076 <_raise_r+0x1e>
 8008070:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008074:	b94b      	cbnz	r3, 800808a <_raise_r+0x32>
 8008076:	4620      	mov	r0, r4
 8008078:	f000 f830 	bl	80080dc <_getpid_r>
 800807c:	462a      	mov	r2, r5
 800807e:	4601      	mov	r1, r0
 8008080:	4620      	mov	r0, r4
 8008082:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008086:	f000 b817 	b.w	80080b8 <_kill_r>
 800808a:	2b01      	cmp	r3, #1
 800808c:	d00a      	beq.n	80080a4 <_raise_r+0x4c>
 800808e:	1c59      	adds	r1, r3, #1
 8008090:	d103      	bne.n	800809a <_raise_r+0x42>
 8008092:	2316      	movs	r3, #22
 8008094:	6003      	str	r3, [r0, #0]
 8008096:	2001      	movs	r0, #1
 8008098:	e7e7      	b.n	800806a <_raise_r+0x12>
 800809a:	2400      	movs	r4, #0
 800809c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80080a0:	4628      	mov	r0, r5
 80080a2:	4798      	blx	r3
 80080a4:	2000      	movs	r0, #0
 80080a6:	e7e0      	b.n	800806a <_raise_r+0x12>

080080a8 <raise>:
 80080a8:	4b02      	ldr	r3, [pc, #8]	; (80080b4 <raise+0xc>)
 80080aa:	4601      	mov	r1, r0
 80080ac:	6818      	ldr	r0, [r3, #0]
 80080ae:	f7ff bfd3 	b.w	8008058 <_raise_r>
 80080b2:	bf00      	nop
 80080b4:	2000000c 	.word	0x2000000c

080080b8 <_kill_r>:
 80080b8:	b538      	push	{r3, r4, r5, lr}
 80080ba:	4d07      	ldr	r5, [pc, #28]	; (80080d8 <_kill_r+0x20>)
 80080bc:	2300      	movs	r3, #0
 80080be:	4604      	mov	r4, r0
 80080c0:	4608      	mov	r0, r1
 80080c2:	4611      	mov	r1, r2
 80080c4:	602b      	str	r3, [r5, #0]
 80080c6:	f7f9 fbf5 	bl	80018b4 <_kill>
 80080ca:	1c43      	adds	r3, r0, #1
 80080cc:	d102      	bne.n	80080d4 <_kill_r+0x1c>
 80080ce:	682b      	ldr	r3, [r5, #0]
 80080d0:	b103      	cbz	r3, 80080d4 <_kill_r+0x1c>
 80080d2:	6023      	str	r3, [r4, #0]
 80080d4:	bd38      	pop	{r3, r4, r5, pc}
 80080d6:	bf00      	nop
 80080d8:	200003cc 	.word	0x200003cc

080080dc <_getpid_r>:
 80080dc:	f7f9 bbe2 	b.w	80018a4 <_getpid>

080080e0 <__sread>:
 80080e0:	b510      	push	{r4, lr}
 80080e2:	460c      	mov	r4, r1
 80080e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080e8:	f000 f894 	bl	8008214 <_read_r>
 80080ec:	2800      	cmp	r0, #0
 80080ee:	bfab      	itete	ge
 80080f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80080f2:	89a3      	ldrhlt	r3, [r4, #12]
 80080f4:	181b      	addge	r3, r3, r0
 80080f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80080fa:	bfac      	ite	ge
 80080fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80080fe:	81a3      	strhlt	r3, [r4, #12]
 8008100:	bd10      	pop	{r4, pc}

08008102 <__swrite>:
 8008102:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008106:	461f      	mov	r7, r3
 8008108:	898b      	ldrh	r3, [r1, #12]
 800810a:	05db      	lsls	r3, r3, #23
 800810c:	4605      	mov	r5, r0
 800810e:	460c      	mov	r4, r1
 8008110:	4616      	mov	r6, r2
 8008112:	d505      	bpl.n	8008120 <__swrite+0x1e>
 8008114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008118:	2302      	movs	r3, #2
 800811a:	2200      	movs	r2, #0
 800811c:	f000 f868 	bl	80081f0 <_lseek_r>
 8008120:	89a3      	ldrh	r3, [r4, #12]
 8008122:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008126:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800812a:	81a3      	strh	r3, [r4, #12]
 800812c:	4632      	mov	r2, r6
 800812e:	463b      	mov	r3, r7
 8008130:	4628      	mov	r0, r5
 8008132:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008136:	f000 b817 	b.w	8008168 <_write_r>

0800813a <__sseek>:
 800813a:	b510      	push	{r4, lr}
 800813c:	460c      	mov	r4, r1
 800813e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008142:	f000 f855 	bl	80081f0 <_lseek_r>
 8008146:	1c43      	adds	r3, r0, #1
 8008148:	89a3      	ldrh	r3, [r4, #12]
 800814a:	bf15      	itete	ne
 800814c:	6560      	strne	r0, [r4, #84]	; 0x54
 800814e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008152:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008156:	81a3      	strheq	r3, [r4, #12]
 8008158:	bf18      	it	ne
 800815a:	81a3      	strhne	r3, [r4, #12]
 800815c:	bd10      	pop	{r4, pc}

0800815e <__sclose>:
 800815e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008162:	f000 b813 	b.w	800818c <_close_r>
	...

08008168 <_write_r>:
 8008168:	b538      	push	{r3, r4, r5, lr}
 800816a:	4d07      	ldr	r5, [pc, #28]	; (8008188 <_write_r+0x20>)
 800816c:	4604      	mov	r4, r0
 800816e:	4608      	mov	r0, r1
 8008170:	4611      	mov	r1, r2
 8008172:	2200      	movs	r2, #0
 8008174:	602a      	str	r2, [r5, #0]
 8008176:	461a      	mov	r2, r3
 8008178:	f7f9 fbd3 	bl	8001922 <_write>
 800817c:	1c43      	adds	r3, r0, #1
 800817e:	d102      	bne.n	8008186 <_write_r+0x1e>
 8008180:	682b      	ldr	r3, [r5, #0]
 8008182:	b103      	cbz	r3, 8008186 <_write_r+0x1e>
 8008184:	6023      	str	r3, [r4, #0]
 8008186:	bd38      	pop	{r3, r4, r5, pc}
 8008188:	200003cc 	.word	0x200003cc

0800818c <_close_r>:
 800818c:	b538      	push	{r3, r4, r5, lr}
 800818e:	4d06      	ldr	r5, [pc, #24]	; (80081a8 <_close_r+0x1c>)
 8008190:	2300      	movs	r3, #0
 8008192:	4604      	mov	r4, r0
 8008194:	4608      	mov	r0, r1
 8008196:	602b      	str	r3, [r5, #0]
 8008198:	f7f9 fbdf 	bl	800195a <_close>
 800819c:	1c43      	adds	r3, r0, #1
 800819e:	d102      	bne.n	80081a6 <_close_r+0x1a>
 80081a0:	682b      	ldr	r3, [r5, #0]
 80081a2:	b103      	cbz	r3, 80081a6 <_close_r+0x1a>
 80081a4:	6023      	str	r3, [r4, #0]
 80081a6:	bd38      	pop	{r3, r4, r5, pc}
 80081a8:	200003cc 	.word	0x200003cc

080081ac <_fstat_r>:
 80081ac:	b538      	push	{r3, r4, r5, lr}
 80081ae:	4d07      	ldr	r5, [pc, #28]	; (80081cc <_fstat_r+0x20>)
 80081b0:	2300      	movs	r3, #0
 80081b2:	4604      	mov	r4, r0
 80081b4:	4608      	mov	r0, r1
 80081b6:	4611      	mov	r1, r2
 80081b8:	602b      	str	r3, [r5, #0]
 80081ba:	f7f9 fbda 	bl	8001972 <_fstat>
 80081be:	1c43      	adds	r3, r0, #1
 80081c0:	d102      	bne.n	80081c8 <_fstat_r+0x1c>
 80081c2:	682b      	ldr	r3, [r5, #0]
 80081c4:	b103      	cbz	r3, 80081c8 <_fstat_r+0x1c>
 80081c6:	6023      	str	r3, [r4, #0]
 80081c8:	bd38      	pop	{r3, r4, r5, pc}
 80081ca:	bf00      	nop
 80081cc:	200003cc 	.word	0x200003cc

080081d0 <_isatty_r>:
 80081d0:	b538      	push	{r3, r4, r5, lr}
 80081d2:	4d06      	ldr	r5, [pc, #24]	; (80081ec <_isatty_r+0x1c>)
 80081d4:	2300      	movs	r3, #0
 80081d6:	4604      	mov	r4, r0
 80081d8:	4608      	mov	r0, r1
 80081da:	602b      	str	r3, [r5, #0]
 80081dc:	f7f9 fbd9 	bl	8001992 <_isatty>
 80081e0:	1c43      	adds	r3, r0, #1
 80081e2:	d102      	bne.n	80081ea <_isatty_r+0x1a>
 80081e4:	682b      	ldr	r3, [r5, #0]
 80081e6:	b103      	cbz	r3, 80081ea <_isatty_r+0x1a>
 80081e8:	6023      	str	r3, [r4, #0]
 80081ea:	bd38      	pop	{r3, r4, r5, pc}
 80081ec:	200003cc 	.word	0x200003cc

080081f0 <_lseek_r>:
 80081f0:	b538      	push	{r3, r4, r5, lr}
 80081f2:	4d07      	ldr	r5, [pc, #28]	; (8008210 <_lseek_r+0x20>)
 80081f4:	4604      	mov	r4, r0
 80081f6:	4608      	mov	r0, r1
 80081f8:	4611      	mov	r1, r2
 80081fa:	2200      	movs	r2, #0
 80081fc:	602a      	str	r2, [r5, #0]
 80081fe:	461a      	mov	r2, r3
 8008200:	f7f9 fbd2 	bl	80019a8 <_lseek>
 8008204:	1c43      	adds	r3, r0, #1
 8008206:	d102      	bne.n	800820e <_lseek_r+0x1e>
 8008208:	682b      	ldr	r3, [r5, #0]
 800820a:	b103      	cbz	r3, 800820e <_lseek_r+0x1e>
 800820c:	6023      	str	r3, [r4, #0]
 800820e:	bd38      	pop	{r3, r4, r5, pc}
 8008210:	200003cc 	.word	0x200003cc

08008214 <_read_r>:
 8008214:	b538      	push	{r3, r4, r5, lr}
 8008216:	4d07      	ldr	r5, [pc, #28]	; (8008234 <_read_r+0x20>)
 8008218:	4604      	mov	r4, r0
 800821a:	4608      	mov	r0, r1
 800821c:	4611      	mov	r1, r2
 800821e:	2200      	movs	r2, #0
 8008220:	602a      	str	r2, [r5, #0]
 8008222:	461a      	mov	r2, r3
 8008224:	f7f9 fb60 	bl	80018e8 <_read>
 8008228:	1c43      	adds	r3, r0, #1
 800822a:	d102      	bne.n	8008232 <_read_r+0x1e>
 800822c:	682b      	ldr	r3, [r5, #0]
 800822e:	b103      	cbz	r3, 8008232 <_read_r+0x1e>
 8008230:	6023      	str	r3, [r4, #0]
 8008232:	bd38      	pop	{r3, r4, r5, pc}
 8008234:	200003cc 	.word	0x200003cc

08008238 <_init>:
 8008238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800823a:	bf00      	nop
 800823c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800823e:	bc08      	pop	{r3}
 8008240:	469e      	mov	lr, r3
 8008242:	4770      	bx	lr

08008244 <_fini>:
 8008244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008246:	bf00      	nop
 8008248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800824a:	bc08      	pop	{r3}
 800824c:	469e      	mov	lr, r3
 800824e:	4770      	bx	lr
